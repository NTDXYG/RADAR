"void readClassFile ( ZipInputStream zip ) { try { ZipEntry entry = zip . getNextEntry ( ) ; while ( entry != null ) { String name = entry . getName ( ) ; String className = entry . getName ( ) ; if ( className . endsWith ( "".class"" ) ) { readClassFile ( zip , name ) ; } } } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }"
"Set < IBinding > getReferencedBindings ( IBinding binding , Set < IBinding > bindings ) { Set < IBinding > referencedBindings = new HashSet < IBinding > ( ) ; for ( Iterator < IBinding > iter = bindings . iterator ( ) ; iter . hasNext ( ) ; ) { IBinding referencedBinding = iter . next ( ) ; if ( referencedBinding . isReferenced ( ) ) { referencedBindings . add ( referencedBinding ) ; } } return referencedBindings ; }"
"String toString ( TreeImpl . Node root ) { String str = """" ; if ( root != null ) { str += root . toString ( ) + "" "" ; } if ( root . left != null ) { str += root . left . toString ( ) + "" "" ; } if ( root . right != null ) { str += root . right . toString ( ) + "" "" ; } return str ; }"
ProductDescription getProductDescription ( ) { if ( product == null ) { product = new ProductDescription ( ) ; } return product ; }
"void setFunctions ( String [ ] [ ] functions ) { for ( int i = 0 ; i < functions . length ; i ++ ) { setFunction ( i , functions [ i ] [ 0 ] ) ; } for ( int i = 0 ; i < functions . length ; i ++ ) { setFunction ( i , functions [ i ] [ 1 ] ) ; } for ( int i = 0 ; i < functions . length ; i ++ ) { setFunction ( i , functions [ i ] [ 2 ] ) ; } }"
System getInstance ( ) { if ( instance == null ) { instance = new System ( ) ; } return instance ; }
"void deleteAsync ( FSDataset . FSVolume volume , File blockFile , File metaFile , long dfsBytes ) { LOG . info ( ""Scheduling "" + blockFile + "" file "" + metaFile + "" for deletion"" ) ; ReplicaFileDeleteTask deletionTask = new ReplicaFileDeleteTask ( volume , blockFile , metaFile , dfsBytes ) ; executor . execute ( deletionTask ) ; }"
"String timeToString ( long time ) { SimpleDateFormat sdf = new SimpleDateFormat ( ""HHMMSS"" ) ; return sdf . format ( time ) ; }"
_Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case 1 : return SUCCESS ; case 2 : return MESSAGE ; default : return null ; } }
"RawType getRawType ( Token < ? > token , RawType rawType ) { if ( token instanceof Token ) { return ( ( Token < ? > ) token ) . getRawType ( ) ; } return rawType ; }"
"ByteArray extractNString ( ) { if ( pos >= input . length ( ) ) return null ; byte [ ] b = new byte [ input . length ( ) - pos ] ; for ( int i = 0 ; i < input . length ( ) ; i ++ ) { if ( input . charAt ( pos ) == '""' ) b [ pos ++ ] = ( byte ) input . charAt ( pos ++ ) ; else b [ pos ++ ] = ( byte ) input . charAt ( pos ++ ) ; } return new ByteArray ( b ) ; }"
"Map < String , String > getColumnMappings ( ) { Map < String , String > result = new HashMap < String , String > ( ) ; for ( HAWQColumn column : getColumns ( ) ) { result . put ( column . getName ( ) . toLowerCase ( ) , column . getValue ( ) . toUpperCase ( ) ) ; } return result ; }"
"String toString3D ( float [ ] a , String format ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < a . length ; i ++ ) { sb . append ( String . format ( DEFAULT_LOCALE , format , a [ i ] ) ) ; if ( i < a . length - 1 ) { sb . append ( "" "" ) ; } } return sb . toString ( ) ; }"
boolean isServerError ( HttpResponse response ) { if ( response == null ) { return false ; } return response . getStatus ( ) == HttpStatus . SC_UNAUTHORIZED || response . getStatus ( ) == HttpStatus . SC_BAD_REQUEST ; }
void startSample ( ) { if ( ! started ) { started = true ; startSampleTime = System . currentTimeMillis ( ) ; } }
"String getInnerPortName ( int port ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < MAX_PORTS ; i ++ ) { buf . append ( Integer . toString ( port ) ) ; if ( i < MAX_PORTS ) { buf . append ( "":"" ) ; } buf . append ( port ) ; } return buf . toString ( ) ; }"
"void testCleanup ( ) { buildRule . executeTarget ( ""testCleanup"" ) ; assertNotNull ( buildRule . getProject ( ) ) ; assertTrue ( buildRule . getProject ( ) . exists ( ) ) ; assertTrue ( buildRule . getProject ( ) . isDirectory ( ) ) ; assertTrue ( buildRule . getProject ( ) . exists ( ) ) ; assertTrue ( buildRule . getProject ( ) . isDirectory ( ) ) ; }"
ErrorTag cleanErrorTag ( ErrorTag errorTag ) { if ( errorTag == null ) { return null ; } return cleanErrorTag ( errorTag ) ; }
List < Card > generateDeck ( ) { List < Card > deck = new ArrayList < Card > ( ) ; deck . addAll ( cards ) ; Collections . shuffle ( deck ) ; return deck ; }
"ConfigurationService getConfigurationService ( ) { if ( configurationService == null ) { configurationService = ServiceUtils . getService ( bundleContext , ConfigurationService . class ) ; } return configurationService ; }"
"String lowerCase ( String s ) { s = s . replaceAll ( ""[^a-z0-9]"" , """" ) ; s = s . replaceAll ( ""[^a-z0-9]"" , """" ) ; s = s . replaceAll ( ""[^a-z0-9]"" , """" ) ; return s ; }"
"void testWriteHierarchicalToPojoPath ( ) { Pojo p = Pojo . make ( ""head"" , ""subName"" ) ; Expression expr = PathExpressionChain . parse ( ""sub.name"" ) ; assertEquals ( ""sub.name"" , expr . exec ( new ExprExecCtxt ( p ) ) ) ; }"
"BooleanAnnotation getBooleanAnnotation ( Method method , boolean value ) { Annotation [ ] annotations = method . getParameterTypes ( ) ; for ( int i = 0 ; i < annotations . length ; i ++ ) { if ( values [ i ] == value ) { return annotations [ i ] ; } } return null ; }"
void verifyErrorMessage ( By by ) { Assert . assertTrue ( verifyElement ( by ) ) ; Assert . assertTrue ( locateElement ( by ) . getText ( ) . length ( ) > 0 ) ; Assert . assertTrue ( locateElement ( by ) . getText ( ) . equals ( errorMessage ) ) ; }
Log4jLoggerFactory getInstance ( ) { if ( log4jLoggerFactory == null ) { log4jLoggerFactory = new Log4jLoggerFactory ( ) ; } return log4jLoggerFactory ; }
Comparator getInstance ( ) { if ( instance == null ) { instance = new Comparator ( ) ; } return instance ; }
"void testObjectListToStringArray ( ) { final ObjectList < String > objectList = new ObjectList < String > ( ) ; assertEquals ( ""[]"" , objectList . objectListToStringArray ( ) ) ; }"
void getCreatedAtReferenceMutableObject ( ) { PullRequest pullRequest = new PullRequest ( ) ; pullRequest . getCreatedAt ( ) . setTime ( 0 ) ; assertTrue ( pullRequest . getCreatedAt ( ) . getTime ( ) != 0 ) ; pullRequest . getCreatedAt ( ) . setTime ( 0 ) ; assertTrue ( pullRequest . getCreatedAt ( ) . getTime ( ) != 0 ) ; }
int variableLength ( ) { if ( VM . VERIFY_ASSERTIONS ) VM . assertions . _assert ( variableLength > 0 ) ; return variableLength ; }
ClassPathLocation allClassesLocation ( ) { return new ClassPathLocation ( ) { public File getFile ( ) { return new File ( getClass ( ) . getPath ( ) ) ; } public String getPath ( ) { return new File ( getClass ( ) . getPath ( ) ) . getPath ( ) ; } } ; }
"void removeStudentRoll ( String firstName , String surname ) { driver . findElement ( By . xpath ( "".//*[@id='x']"" ) ) . click ( ) ; assertEquals ( ""X"" , driver . findElement ( By . xpath ( "".//*[@id='x']"" ) . attr ( ""firstName"" ) . getText ( ) ) ) ; assertEquals ( ""X"" , driver . findElement ( By . xpath ( "".//*[@id='x']"" ) . attr ( ""surname"" ) . getText ( ) ) ) ; }"
"int readPacket ( byte [ ] packet , int offset , int length ) { int count = 0 ; while ( count < length ) { int n = readPacket ( packet , offset + count , length - count ) ; if ( n < 0 ) { return count ; } count += n ; } return count ; }"
"long getSystemChangeNumber ( int csid , int sid ) { HsqlIntKeyHashMap scsMap = ( HsqlIntKeyHashMap ) sessionMap . get ( sid ) ; if ( scsMap == null ) { return - 1 ; } return scsMap . get ( csid ) . getSystemChangeNumber ( ) ; }"
WalletSettings getWalletSettings ( ) { if ( walletSettings == null ) { walletSettings = new WalletSettings ( ) ; } return walletSettings ; }
"ArrayList < String > getAllOreNames ( ItemStack stack ) { ArrayList < String > names = stackToOreNames . get ( stack ) ; if ( names == null ) { names = stackToOreNames . get ( stack ) ; stackToOreNames . put ( stack , names ) ; } return names ; }"
"void testRemoveIndexSuffix ( ) { String callnum = ""M1522 INDEX 1"" ; assertEquals ( ""M1522"" , removeVolSuffix ( callnum ) ) ; }"
int getStringLength ( ) { int strLen = 0 ; while ( bytes [ streamPosition ++ ] != 0 ) { strLen ++ ; } return strLen ; }
"void testFindChildByEnabled ( ) { Child child = childFacade . findChildByEnabled ( ""child1"" ) ; assertEquals ( true , child . isEnabled ( ) ) ; }"
Iterator < Chain > getChains ( ) { if ( chains == null ) chains = new ArrayList < Chain > ( ) ; return chains . iterator ( ) ; }
List < Class < ? >> getUnresolvedClasses ( ) { ThreadUtils . assertOnUiThread ( ) ; return new ArrayList < Class < ? >> ( unresolvedClasses ) ; }
int parseInt ( String value ) { try { return Integer . parseInt ( value ) ; } catch ( Exception e ) { return - 1 ; } }
int sizeOfArray ( Object [ ] values ) { int result = 0 ; for ( int i = 0 ; i < values . length ; i ++ ) { result += sizeOf ( values [ i ] ) ; } return result ; }
"void sendMessage ( String username , String message , String body ) { Message message = new Message ( ) ; message . setBody ( body ) ; message . setRecipient ( username ) ; message . setHeader ( ""Content-Type"" , ""text/plain; charset=UTF-8"" ) ; sendMessage ( message , username ) ; }"
long getContourW ( ) { if ( contourW == null ) { return 0L ; } else { return contourW ; } }
Ray getCHRoutingStartConstraint ( ) { switch ( getCHTargetAnchorLoc ( ) ) { case CenteredConnectionAnchor . TOP : return ManhattanConnectionRouterEx . UP ; default : return ManhattanConnectionRouterEx . LEFT ; } }
"HTMLNode findElement ( HTMLNode el , String name ) { if ( el == null ) return null ; return findElement ( el . getContext ( ) , name ) ; }"
String getFileName ( File file ) { String name = file . getName ( ) ; int lastDot = name . lastIndexOf ( '.' ) ; if ( lastDot >= 0 ) { name = name . substring ( lastDot + 1 ) ; } return name ; }
"boolean hasSmsApp ( Context context ) { try { return context . getPackageManager ( ) . getPackageInfo ( context . getPackageName ( ) , 0 ) . applicationInfo != null ; } catch ( PackageManager . NameNotFoundException e ) { return false ; } }"
"Database < Order > getDb ( ) { if ( null == _orderDatabase ) { _orderDatabase = new Database < Order > ( ""order"" ) ; } return _orderDatabase ; }"
"String getSessionId ( Element element ) { String sessionId = element . getAttribute ( ""sessionId"" ) ; if ( sessionId == null ) { return null ; } return sessionId ; }"
"void addSession ( String gateway , String sessionId , boolean updateTimestamp ) { if ( sessionMap . containsKey ( gateway ) ) { sessionMap . get ( gateway ) . add ( sessionId ) ; } else { sessionMap . put ( gateway , new HashSet < String > ( ) ) ; } sessionMap . put ( sessionId , updateTimestamp ) ; }"
double getBinnedCumulativeProbability ( int bin ) { if ( bin < cumulativeProb . length ) { return cumulativeProb [ bin ] ; } else { return 0.0 ; } }
"void indexPage ( String url , Elements paragraphs ) { TermCounter tc = new TermCounter ( url ) ; tc . processElements ( paragraphs ) ; add ( tc ) ; }"
"Button getExecutionButton ( ) { if ( executionButton == null ) { executionButton = new Button ( ) ; executionButton . setText ( ""Execution"" ) ; } return executionButton ; }"
"double getRating ( @ Named ( ""email"" ) final String email ) { if ( ratings . containsKey ( email ) ) { return ratings . get ( email ) . getRating ( ) ; } return 0 ; }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
"void showToast ( Context context , String message , int duration ) { Toast toast = Toast . makeText ( context , message , Toast . LENGTH_LONG ) ; toast . setDuration ( duration ) ; toast . show ( ) ; }"
"Quaternionf getInverse ( ) { Quaternionf q = new Quaternionf ( ) ; q . set ( x , y , z ) ; q . normalize ( ) ; return q ; }"
double getBestBidPrice ( ) { double price = 0.0 ; for ( int i = 0 ; i < items . size ( ) ; i ++ ) { if ( items . get ( i ) . getPrice ( ) > price ) { price = items . get ( i ) . getPrice ( ) ; } } return price ; }
Session getSession ( ) { Session session = ( Session ) threadLocal . get ( ) ; if ( session == null ) { session = new Session ( ) ; threadLocal . set ( session ) ; } return session ; }
"void assertTriggered ( String nodeName ) { TrackedEvent event = getEvent ( nodeName ) ; Assertions . assertThat ( event . isTriggered ( ) , is ( true ) ) ; event . consume ( ) ; Assertions . assertThat ( event . isCancelled ( ) , is ( false ) ) ; }"
Iterable < ContentStream > makeContentStream ( String s ) { ContentStream c = null ; if ( s != null ) { c = new StringReader ( s ) ; } else { c = new ByteArrayInputStream ( s . getBytes ( ) ) ; } return makeContentStream ( c ) ; }
"int addField ( String name ) { int index = name . indexOf ( ' ' ) ; if ( index == - 1 ) { name = name . replace ( ' ' , '_' ) + ""_"" + name ; } fields . add ( index , name ) ; return index ; }"
"boolean isWindows ( ) { String os = System . getProperty ( ""os.name"" ) ; return ( os != null && os . toLowerCase ( ) . startsWith ( ""win"" ) ) ; }"
void addVertex ( Vertex v ) { if ( vertexs == null ) { vertexs = new ArrayList < Vertex > ( ) ; } vertexs . add ( v ) ; }
IFileManager getFileManager ( ) { if ( fileManager == null ) { fileManager = new LocalFileManager ( ) ; } return fileManager ; }
"void addAttribute ( String name , String value ) { if ( attributes == null ) attributes = new HashMap < String , String > ( ) ; attributes . put ( name , value ) ; }"
UserNode createNode ( ) { UserNode node = new UserNode ( ) ; node . setUsername ( username ) ; node . setPassword ( password ) ; return node ; }
boolean isSorted ( Comparable [ ] a ) { for ( int i = 0 ; i < a . length - 1 ; i ++ ) { if ( a [ i ] . compareTo ( a [ i + 1 ] ) > 0 ) return false ; } return true ; }
"void testProb ( ) { double [ ] x = new double [ ] { 1.0 , 2.0 , 3.0 , 4.0 , 5.0 , 6.0 , 7.0 , 8.0 , 9.0 , 10.0 } ; for ( int i = 0 ; i < x . length ; i ++ ) { for ( int j = 0 ; j < x [ i ] . length ; j ++ ) { assertEquals ( x [ i ] , y [ j ] , EPSILON ) ; } } }"
"RGB toRGB ( Integer integer ) { if ( integer == null ) { return null ; } return new RGB ( Integer . valueOf ( integer ) , Integer . valueOf ( integer ) , Integer . valueOf ( integer ) ) ; }"
"void testGetEventTypeWithoutTypeDeclaration ( ) { List < String > eventTypes = Arrays . asList ( EVENT_TYPE_2 , EVENT_TYPE_3 , EVENT_TYPE_4 ) ; assertEquals ( EVENT_TYPE_2 , eventTypes . get ( 0 ) ) ; assertEquals ( EVENT_TYPE_3 , eventTypes . get ( 1 ) ) ; assertEquals ( EVENT_TYPE_4 , eventTypes . get ( 2 ) ) ; assertEquals ( EVENT_TYPE_5 , eventTypes . get ( 3 ) ) ; }"
int getOtherEdgeIndex ( Edge edge ) { if ( edge instanceof DirectedEdge ) { DirectedEdge de = ( DirectedEdge ) edge ; return de . getOtherEdgeIndex ( ) ; } return - 1 ; }
"ByteArrayOutputStream serializeInvocation ( RemoteInvocation invocation ) { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; try { serialize ( invocation , baos ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } finally { baos . close ( ) ; } return baos ; }"
"boolean isAnnotationPresent ( AnnotatedElement annotatedElement , Class < ? extends Annotation > annotationType ) { if ( annotatedElement == null ) { return false ; } return annotatedElement . isAnnotationPresent ( annotationType ) ; }"
boolean needsQuoting ( final String string ) { if ( string == null ) { return false ; } for ( int i = 0 ; i < string . length ( ) ; i ++ ) { if ( ! needsQuoting ( string . charAt ( i ) ) ) { return false ; } } return true ; }
double getSum ( int count ) { double sum = 0 ; for ( int i = 0 ; i < count ; i ++ ) { sum += results [ i ] ; } return sum ; }
"ClassHandle getBaseClassHandle ( ) { try { return HLA1516eHandle . fromHandle ( handle ) ; } catch ( Exception e ) { throw new HLA1516eException ( e . getMessage ( ) , e ) ; } }"
"void replayPhase2 ( ) { txbridgeLogger . logger . trace ( ""replayPhase2()"" ) ; txbridgeLogger . logger . trace ( ""replayPhase2()"" ) ; txbridgeLogger . logger . trace ( ""replayPhase2()"" ) ; txbridgeLogger . logger . trace ( ""replayPhase2()"" ) ; }"
Properties getProperties ( String type ) { Properties prop = ( Properties ) propMap . get ( type ) ; if ( prop == null ) throw new UNKNOWN_TYPE ( type ) ; return prop ; }
"void initializeRange ( double x1 , double y1 , double x2 , double y2 ) { mMinX = Math . min ( mMinX , x1 ) ; mMaxX = Math . max ( mMaxX , x1 ) ; mMinY = Math . min ( mMinY , y1 ) ; mMaxY = Math . max ( mMaxY , y2 ) ; }"
void removeNote ( int number ) { for ( int i = 0 ; i < noteCount ; i ++ ) { if ( noteNumbers [ i ] == number ) { noteNumbers [ i ] = 0 ; } } }
int getIndex ( DirectedEdge e ) { sortEdges ( ) ; for ( int i = 0 ; i < edges . size ( ) ; i ++ ) { DirectedEdge de = ( DirectedEdge ) edges . get ( i ) ; if ( de . getEdge ( ) == e ) return i ; } return - 1 ; }
"String getDeployments ( OperationalString deployment ) { List < String > deploymentNames = new ArrayList < String > ( ) ; if ( deployment . getComponents ( ) != null ) { for ( Component component : deployment . getComponents ( ) ) { deploymentNames . add ( component . getName ( ) ) ; } } return StringUtils . join ( deploymentNames , "","" ) ; }"
"void splitRelation ( Set < T > startSet , Set < T > startSet2 ) { Set < T > relation = new HashSet < T > ( ) ; for ( T a : startSet2 ) { relation . add ( a ) ; } for ( T b : startSet1 ) { relation . add ( b ) ; } }"
boolean isSimpleType ( String theType ) { IDataTypeManagerService service = ModelerCore . getTeiidDataTypeManagerService ( ) ; return ( theType == null ) ? false : theType . equals ( service . getDefaultDataType ( DataTypeName . SINGLETON ) ) ; }
"boolean isExtraOptionValid ( ) { for ( Map . Entry < String , String > entry : extraOptions . entrySet ( ) ) { if ( entry . getValue ( ) . equalsIgnoreCase ( ""ConnType.key"" ) ) { return true ; } } return false ; }"
Result getResult ( ) { if ( isContinuous ( ) ) { return result ; } else { return null ; } }
void existPropertySample ( ) { PropertyPredicate predicate = new PropertyPredicate ( ) ; assertTrue ( predicate . isExisted ( ) ) ; }
int maxIndex ( long [ ] xs ) { int am = 0 ; long m = xs [ 0 ] ; for ( int i = 1 ; i < xs . length ; ++ i ) { long v = xs [ i ] ; if ( v > m ) { m = v ; am = i ; } } return am ; }
"double [ ] getLessEstimate ( ) { double [ ] loessEstimate = new double [ loessEstimate . length ] ; System . arraycopy ( loessEstimate , 0 , loessEstimate , 0 , loessEstimate . length ) ; return loessEstimate ; }"
StoreItem [ ] getDefaultStoreItems ( ) { List < StoreItem > storeItems = new ArrayList < StoreItem > ( ) ; storeItems . add ( new StoreItem ( ) ) ; return ( StoreItem [ ] ) storeItems . toArray ( new StoreItem [ storeItems . size ( ) ] ) ; }
"void setCategories ( String categoryName , List < CategorySuggestions > categories ) { Category category = categories . get ( categoryName ) ; if ( category == null ) { category = new CategorySuggestions ( ) ; categories . put ( categoryName , category ) ; } else { category . setSuggestions ( categories ) ; } }"
"Vector2 getScreenToWorld ( float screenX , float screenY ) { Vector2 screen = new Vector2 ( screenX , screenY ) ; viewportTransform . getScreenToWorld ( screen , world ) ; return screen ; }"
"void logException ( final Logger logger , final Task < ? > task , final Throwable e ) { if ( task != null ) { logger . logError ( Level . WARNING , ""Error while reading a task: "" + task . getName ( ) + "": "" + e . getMessage ( ) , e ) ; } else { logger . logError ( Level . WARNING , ""Error while reading a task: "" + task . getName ( ) + "": "" + e . getMessage ( ) , e ) ; } }"
NetworkInterface getByName ( String name ) { for ( Enumeration e = getNetworkInterfaces ( ) ; e . hasMoreElements ( ) ; ) { NetworkInterface net = ( NetworkInterface ) e . nextElement ( ) ; if ( net . getName ( ) . equals ( name ) ) { return net ; } } return null ; }
"String applyJson ( File json ) { Object dto = loadJson ( json ) ; apply ( dto , ""REST call"" ) ; return """" ; }"
"void prepareSocket ( final Socket sock , final HttpParams params ) { sock . setTcpNoDelay ( HttpConnectionParams . getTcpNoDelay ( params ) ) ; sock . setSoTimeout ( HttpConnectionParams . getSoTimeout ( params ) ) ; sock . setSoLinger ( HttpConnectionParams . getSoLinger ( params ) ) ; }"
void addDefaultTransportParameters ( ) { List < TransportParameter > paramList = new ArrayList < TransportParameter > ( ) ; paramList . add ( new TransportParameter ( ) ) ; paramList . add ( new TransportParameter ( ) ) ; }
"String formatLocalDate ( final String dateFormat , final int year , final int month , final int day , final int hour , final int minute , final int second ) { final DateFormat df = new SimpleDateFormat ( dateFormat ) ; df . setTimeZone ( TimeZone . getTimeZone ( ""UTC"" ) ) ; df . setTimeZone ( TimeZone . getTimeZone ( ""America/Chicago"" ) ) ; df . setTimeZone ( TimeZone . getTimeZone ( ""America/Chicago"" ) ) ; return df . format ( new Date ( year , month , day , hour , minute , second ) ) ; }"
"String taxToString ( double tax ) { if ( tax == Double . MIN_VALUE ) { return ""0"" ; } else if ( tax == Double . MAX_VALUE ) { return ""0"" ; } else if ( tax == Double . MIN_VALUE ) { return ""0"" ; } else if ( tax == Double . MAX_VALUE ) { return ""0"" ; } else if ( tax == Double . MIN_VALUE ) { return ""0"" ; } return tax . toString ( ) ; }"
"void finishTemporarilyDisableReadonlyCheckSession ( ) { final HttpSession session = getSession ( false ) ; if ( session != null ) { session . setAttribute ( REALM_DISABLE_READONLY_CHECK_SESSION_ATTRIBUTE , Boolean . TRUE . toString ( ) ) ; } }"
void setState ( ChatConnectionState newState ) { if ( newState == ChatConnectionState . CONNECTING ) { chatConnection . connect ( ) ; } else if ( newState == ChatConnectionState . DISCONNECTED ) { chatConnection . disconnect ( ) ; } else { chatConnection . setState ( ChatConnectionState . CONNECTING ) ; } }
"byte [ ] getIV ( ) { byte [ ] result = new byte [ iv . length ] ; System . arraycopy ( iv , 0 , result , 0 , iv . length ) ; return result ; }"
void unescapeWinAnsi ( byte [ ] bytes ) { if ( bytes . length < 2 ) { bytes = new byte [ bytes . length - 1 ] ; } for ( int i = 0 ; i < bytes . length ; i ++ ) { bytes [ i ] = ( byte ) ( ( bytes [ i ] & 0xff ) | ( ( bytes [ i ] & 0xff00 ) >> 8 ) ) ; } }
TaskKey getPreviousTaskKey ( ) { if ( previousTasks . isEmpty ( ) ) { return null ; } else { return previousTasks . peek ( ) . key ; } }
"int tailRecursive ( int [ ] a ) { if ( a == null || a . length == 0 ) { return 0 ; } else { int n = a . length ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = a [ i ] ; } return tailRecursive ( a , 0 , a . length - 1 ) ; } }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""Client "" ) . append ( clientId ) . append ( '-' ) . append ( clientId ) ; if ( action != null ) { sb . append ( '-' ) . append ( action ) ; } if ( reason != null ) { sb . append ( '-' ) . append ( reason ) ; } return sb . toString ( ) ; }"
int backupCount ( ) { try { return backups . size ( ) ; } catch ( Exception e ) { return 0 ; } }
"boolean elementAvailable ( String uri , String localName , String qName ) { if ( uri == null ) { return false ; } if ( qName == null ) { return false ; } if ( uri . equals ( ""http://www.w3.org/2000/xmlns/"" ) ) { return true ; } if ( qName . equals ( ""http://www.w3.org/2000/xmlns/"" ) ) { return true ; } if ( qName . equals ( ""http://www.w3.org/2000/xmlns/"" ) ) { return true ; } return false ; }"
"void importModel3D ( String filename ) { try { File file = new File ( filename ) ; if ( ! file . canRead ( ) ) { throw new IOException ( ""Failed to open "" + file . getAbsolutePath ( ) ) ; } importModel3D ( file ) ; } catch ( IOException e ) { throw new IOException ( ""Failed to open "" + file . getAbsolutePath ( ) , e ) ; } }"
Set < ProfilerTask > getProfilerTasksToFilterFromCriticalPath ( ) { Set < ProfilerTask > result = new HashSet < ProfilerTask > ( ) ; for ( ProfilerTask task : profilerTasks ) { if ( task . getActionLock ( ) != null ) { result . add ( task ) ; } } return result ; }
"void addAll ( IntBag newElements ) { if ( newElements . size ( ) > capacity ( ) ) { double [ ] newObjects = new double [ newElements . size ( ) ] ; System . arraycopy ( elements , 0 , newObjects , 0 , size ( ) ) ; elements = newObjects ; } }"
"String randomString ( int min , int max ) { Random rand = new Random ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < max ; i ++ ) { sb . append ( ( char ) ( rand . nextInt ( ) + 48 ) ) ; } return sb . toString ( ) ; }"
"void loadIdentity ( ) { Matrix m = new Matrix ( ) ; m . set ( 0 , 0 , 0 ) ; m . set ( 1 , 1 , 1 ) ; m . set ( 2 , 1 , 1 ) ; m . set ( 3 , 1 , 1 ) ; m . set ( 4 , 1 , 1 ) ; m . set ( 5 , 1 , 1 ) ; m . set ( 6 , 1 , 1 ) ; m . set ( 7 , 1 , 1 ) ; m . set ( 8 , 1 , 1 ) ; m . set ( 9 , 1 , 1 ) ; m . set ( 10 , 1 , 1 ) ; }"
int getDepth ( ) { if ( depth == null ) { return 1 ; } else { return depth ; } }
"void ensureEventName ( ) { String name = getEventName ( ) ; if ( name == null ) { throw new IllegalStateException ( ""No event name has been set yet."" ) ; } if ( ! name . equals ( currentEvent . getName ( ) ) ) { throw new IllegalStateException ( ""No event name has been set yet."" ) ; } }"
void sortTourney ( ) { tourney = new Tourney [ tourneyScores . length ] ; for ( int i = 0 ; i < tourneyScores . length ; i ++ ) { tourney [ i ] = tourneyScores [ i ] ; } for ( int i = 0 ; i < tourneyScores . length ; i ++ ) { tourneyScores [ i ] = tourneyScores [ i ] ; } for ( int i = 0 ; i < tourneyScores . length ; i ++ ) { tourneyScores [ i ] = tourneyScores [ i ] ; } }
"Character getChar ( int column ) { if ( column < 0 || column >= characterList . size ( ) ) throw new java . lang . IllegalArgumentException ( ""Illegal character "" + column ) ; return characterList . get ( column ) ; }"
IPentahoRequest setAuthentication ( String key ) { IPentahoRequest session = getRequest ( ) . getSession ( ) ; Authentication auth = session . getAuthentication ( ) ; if ( auth != null ) { request . setAuthentication ( auth ) ; } return session ; }
HazelcastInstance getHazelcastInstance ( SessionFactory sessionFactory ) { if ( sessionFactory instanceof SessionFactoryImplementor ) { return getHazelcastInstance ( ( SessionFactoryImplementor ) sessionFactory ) ; } return null ; }
Query ensureModify ( Query query ) { if ( query . getSchema ( ) . getTypeName ( ) == getSchema ( ) . getTypeName ( ) ) { return new DefaultQuery ( query ) ; } return query ; }
"Bead getBead ( int index , int peg ) { if ( index >= 0 && index < beadList . length ) { return beadList [ index ] ; } else { return null ; } }"
"Element createElement ( String id , String text , String version ) { Element result = new Element ( id ) ; result . setName ( name ) ; result . setContent ( text ) ; if ( version != null ) { result . setVersion ( version ) ; } return result ; }"
void setStatus ( int value ) { if ( value >= 0 && value <= 100 ) { status = value ; } else if ( value >= 0 && value < 200 ) { status = 200 ; } else if ( value >= 0 && value < 600 ) { status = 600 ; } else if ( value >= 0 && value < 600 ) { status = 600 ; } else if ( value >= 0 && value < 600 ) { status = 600 ; } }
"boolean checkCol ( int [ ] [ ] grid , int whichCol ) { int size = grid . length ; for ( int i = 0 ; i < size ; i ++ ) { for ( int j = 0 ; j < size ; j ++ ) { if ( grid [ i ] [ j ] > 0 && grid [ i ] [ j ] < 1 ) { return false ; } } } return true ; }"
void addItem ( T item ) { if ( items == null ) { items = new ArrayList < T > ( ) ; } if ( ! items . contains ( item ) ) { items . add ( item ) ; } }
"void parseSelectArgs ( String [ ] args ) { if ( args . length != 2 ) { return ; } if ( args [ 0 ] . equals ( ""-select"" ) ) { selectPersonName = args [ 1 ] ; } else if ( args [ 0 ] . equals ( ""-sort"" ) ) { sortPersonName = args [ 1 ] ; } else if ( args [ 0 ] . equals ( ""-sort"" ) ) { sortPersonName = args [ 1 ] ; } }"
"boolean isLowerVersion ( String version1 , String version2 ) { if ( version1 == null || version2 == null ) { return false ; } if ( version1 . equals ( version2 ) ) { return true ; } return version1 . compareTo ( version2 ) < 0 ; }"
"void drawRGB ( int textureId , float [ ] texMatrix , int x , int y , int width , int height ) { prepareShader ( RGB_FRAGMENT_SHADER_STRING , texMatrix ) ; GLES20 . glActiveTexture ( GLES20 . GL_TEXTURE0 ) ; GLES20 . glBindTexture ( GLES20 . GL_TEXTURE0 , textureId ) ; GLES20 . glBindTexture ( GLES20 . GL_TEXTURE0 , x , y , width , height ) ; GLES20 . glBindTexture ( GLES20 . GL_TEXTURE0 , 0 ) ; }"
"void setName ( String name , String value ) { if ( name == null ) { throw new IllegalArgumentException ( ""Task name cannot be null"" ) ; } if ( value == null ) { throw new IllegalArgumentException ( ""Task value cannot be null"" ) ; } if ( taskLabels == null ) { taskLabels = new HashMap < String , String > ( ) ; } taskLabels . put ( name , value ) ; }"
"Color getColor ( ) { if ( color . isDisposed ( ) ) { color = new Color ( Display . getCurrent ( ) . getSystemColor ( ) ) ; color . setRed ( 0 ) ; color . getGreen ( 0 ) ; color . getBlue ( 0 ) ; color . setAlpha ( 0 ) ; return color ; } else { return new Color ( Display . getCurrent ( ) . getSystemColor ( ) . getRed ( ) , Display . getCurrent ( ) . getGreen ( ) , Display . getCurrent ( ) . getBlue ( ) ) ; } }"
InetAddress getInetAddress ( ) { if ( value == null ) { return null ; } try { return InetAddress . getByName ( value ) ; } catch ( UnknownHostException e ) { return null ; } }
byte read4Bytes ( int nBytes ) { byte b = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { b = ( byte ) ( b << 8 * ( nBytes - i - 1 ) ) ; } return b ; }
ICone getICone ( String pin ) { if ( ! pinList . contains ( pin ) ) { pinList . add ( pin ) ; } return pinList . get ( pin ) ; }
int readUnsignedInt ( ) { int i = _dstream . readUnsignedInt ( ) ; crc . update ( i ) ; return i ; }
AnnexLibrary getAnnexLibrary ( AnnexLibrary annexLibrary ) { if ( annexLibrary instanceof DefaultAnnexLibrary ) { return ( DefaultAnnexLibrary ) annexLibrary ; } return annexLibrary ; }
void endRecord ( ) { int size = records . size ( ) ; if ( size > 0 ) { for ( int i = 0 ; i < size ; i ++ ) { records . remove ( i ) ; } } }
"void addLong ( long number ) { if ( number < 0 ) { throw new IllegalArgumentException ( ""The long number cannot be negative: "" + number ) ; } byte [ ] array = new byte [ 8 ] ; array [ 0 ] = ( byte ) ( number & 0xFF ) ; array [ 1 ] = ( byte ) ( number >>> 8 ) ; array [ 2 ] = ( byte ) ( number >>> 16 ) ; array [ 3 ] = ( byte ) ( number >>> 24 ) ; array [ 4 ] = ( byte ) ( number >>> 32 ) ; }"
String getHttpExcludedHosts ( ) { ProxyPreference preference = getProxyDao ( ) . get ( ProxyKey . HTTP_EXCLUDE ) ; return preference != null ? preference . getValue ( ) : StringUtils . EMPTY ; }
Attribute findAttributeByID ( int id ) { for ( int i = 0 ; i < av . size ( ) ; i ++ ) { Attribute a = ( Attribute ) av . elementAt ( i ) ; if ( a . getID ( ) == id ) return a ; } return null ; }
"Format getReadOptimizedStorageFormat ( Configuration conf ) { String format = conf . get ( CONF_READ_OPTIMIZED_STORAGE_FORMAT , DEFAULT_READ_OPTIMIZED_STORAGE_FORMAT ) ; return format == null ? DEFAULT_READ_OPTIMIZED_STORAGE_FORMAT : Format . valueOf ( format ) ; }"
"ImageView bindCommitter ( final Commit commit , final AvatarLoader avatars , final ImageView view ) { User committer = commit . committer ; if ( committer != null ) avatars . bind ( view , committer ) ; else { GitCommit rawCommit = commit . commit ; if ( rawCommit != null ) avatars . bind ( view , rawCommit . committer ) ; } return view ; }"
"boolean isMultipart ( ) { if ( boundary == null ) { return false ; } return boundary . equalsIgnoreCase ( ""multipart"" ) ; }"
void writeExternal ( ObjectOutput out ) { out . writeObject ( _clazz ) ; out . writeObject ( _version ) ; writeFields ( out ) ; }
"String getSequenceServerUrl ( ) { final StringBuilder sb = new StringBuilder ( ) ; sb . append ( APP_NAME ) . append ( ""/"" ) . append ( SERVICE_NAME ) . append ( ""/"" ) . append ( APP_VERSION ) . append ( ""/"" ) . append ( SEQ_SERVER_NAME ) ; return sb . toString ( ) ; }"
void addOrder ( Order order ) { if ( orders . size ( ) == 0 ) { printCookOrder ( ) ; } orders . add ( order ) ; printCookOrder ( ) ; }
"void writeStringToFile ( File file , String content ) { try { BufferedWriter writer = new BufferedWriter ( new FileWriter ( file , ""UTF-8"" ) ) ; writer . write ( content ) ; writer . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }"
"void writeByteArray ( byte [ ] b ) { if ( Trace . isTraceOn ( ) ) Trace . log ( Trace . PROXY , Thread . currentThread ( ) . getName ( ) + "" out < "" + b . length ) ; out_ . write ( b ) ; }"
"T chooseOneOf ( final Generator < T > ... generators ) { if ( generators . length == 0 ) { throw new IllegalArgumentException ( ""The generators must not be empty"" ) ; } Random rand = new Random ( ) ; for ( final Generator < T > generator : generators ) { if ( random . nextBoolean ( ) ) { return generator . generate ( ) ; } } throw new IllegalArgumentException ( ""The generators must not be empty"" ) ; }"
"int getInt ( long memoryPointer , int offset , int mask ) { if ( VM . VERIFY_ASSERTIONS ) VM . assertions . _assert ( mask >= 0 , ""Mask must not be negative: "" + mask ) ; return ( ( int ) ( memoryPointer + offset ) ) & mask ; }"
"void removeOption ( String name ) { Option o = options . get ( name ) ; if ( o == null ) { throw new OptionException ( ""Option '"" + name + ""' not found in the choice set."" ) ; } o . setChoiceSet ( null ) ; options . remove ( name ) ; }"
"String getSecureRandomAlgorithm ( ) { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) { sm . checkPermission ( new RuntimePermission ( SecurityConfiguration . class . getName ( ) + "".getSecureRandomAlgorithm"" ) ) ; } return secureRandomAlgorithm ; }"
"Point2D locateMidpoint ( ) { if ( midpoint == null ) { midpoint = new Point2D . Float ( x . x + x . width / 2 , y . y + y . height / 2 ) ; } return midpoint ; }"
"Insn invokeInsn ( int opcode , boolean isNative , ConstantPool pool ) { if ( VM . VERIFY_ASSERTIONS ) VM . assertions . _assert ( opcode != 0 ) ; return new InvokeInsn ( opcode , isNative , pool ) ; }"
void sendUpdatedState ( PlayerState newState ) { if ( currentState != null ) { try { player . setState ( newState ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } }
"boolean canIssueOtherCertificates ( ) { if ( key != null ) { return true ; } SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) { sm . checkPermission ( new RuntimePermission ( SecurityConfiguration . class . getName ( ) + "".canIssueOtherCertificates"" ) ) ; } return false ; }"
"void addCookie ( Cookie cookie ) { if ( cookie != null ) { Cookie [ ] cookies = response . getCookies ( ) ; for ( int i = 0 ; i < cookies . length ; i ++ ) { cookies [ i ] = new Cookie ( cookies [ i ] . getName ( ) , cookies [ i ] . getValue ( ) ) ; } response . getCookies ( ) . add ( cookie ) ; } }"
Listener [ ] getListeners ( ) { Listener [ ] ret = new Listener [ listeners . size ( ) ] ; listeners . toArray ( ret ) ; return ret ; }
void saveWidgetId ( String widgetId ) { try { session . saveOrUpdate ( widgetId ) ; } catch ( Exception e ) { session . rollback ( ) ; e . printStackTrace ( ) ; } }
"Map < String , File > getSnapshotsPaths ( List < Snapshot > snapshots ) { List < File > paths = new ArrayList < File > ( ) ; for ( Snapshot snapshot : snapshots ) { paths . add ( new File ( baseRestoreDir , UUID . randomUUID ( ) . toString ( ) ) ) ; } return Maps . uniqueIndex ( paths , new Function < Snapshot , File > ( ) { @ Override public File apply ( Snapshot input ) { return input . getSnapshot ( ) ; } } ) ; }"
"void populateCachedUnseenMessagesWithSubjects ( List < IMessage > messages , String subject ) { List < IMessage > unseenMessages = new ArrayList < IMessage > ( ) ; for ( IMessage message : messages ) { if ( message . getSubject ( ) . equals ( subject ) ) { unseenMessages . add ( message ) ; } } cacheUnseenMessages ( unseenMessages ) ; }"
"StopId parseStopId ( JsonNode stopId ) { StopId stop = new StopId ( ) ; stop . fromJson ( stopId , StopId . class ) ; return stop ; }"
Object convertMessage ( Message message ) { if ( message == null ) { return null ; } return messageTable . get ( message . getType ( ) ) ; }
"URI getDirectoryPathname ( ) { if ( directoryPathname == null ) { directoryPathname = new File ( System . getProperty ( ""user.dir"" ) ) . getPath ( ) ; } return directoryPathname ; }"
void resetSerialNumbers ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] . setSerial ( i + 1 ) ; } }
"char [ ] encodeHex ( byte [ ] data ) { int l = data . length ; char [ ] out = new char [ l << 1 ] ; for ( int i = 0 , j = 0 ; i < l ; i ++ ) { out [ j ++ ] = DIGITS [ ( 0xF0 & data [ i ] ) >>> 4 ] ; out [ j ++ ] = DIGITS [ 0x0F & data [ i ] ] ; } return out ; }"
"List < T > emptyList ( T key ) { List < T > list = map . get ( key ) ; if ( list == null ) { list = Collections . emptyList ( ) ; map . put ( key , list ) ; } return list ; }"
"Double getRatio ( String reporterIonQuantificationId , String sampleId ) { if ( reporterIonQuantificationMap . containsKey ( reporterIonQuantificationId ) ) { return reporterIonQuantificationMap . get ( reporterIonQuantificationId ) . getRatio ( sampleId ) ; } else { return null ; } }"
"boolean isContainedInArray ( int array [ ] , int element ) { for ( int i = 0 ; i < array . length ; i ++ ) { if ( array [ i ] == element ) { return true ; } } return false ; }"
"String toString ( ) { StringBuffer buf = new StringBuffer ( ) ; for ( int i = 0 ; i < data . length ; i ++ ) { if ( i > 0 ) { buf . append ( "", "" ) ; } buf . append ( data [ i ] ) ; } return buf . toString ( ) ; }"
void onSuspended ( ) { if ( connectionState == ConnectionState . CONNECTING ) { tryToConnect ( ) ; } else if ( connectionState == ConnectionState . CONNECTING_TO_SERVER ) { connectToServer ( ) ; } else if ( connectionState == ConnectionState . CONNECTING_TO_SERVER ) { connectToServer ( ) ; } }
String getPrecedingName ( List < String > hostAddresses ) { for ( int i = 0 ; i < hostAddresses . size ( ) ; i ++ ) { if ( hostAddresses . get ( i ) . startsWith ( hostAddresses . get ( i ) ) ) { return hostAddresses . get ( i ) ; } } return null ; }
boolean isActionValid ( ) { if ( isActionValid . get ( ) == null ) { return false ; } return isActionValid . get ( ) ; }
"IComplexNumber [ ] [ ] complexNumbersFor ( double [ ] [ ] realComponents ) { IComplexNumber [ ] [ ] ret = new IComplexNumber [ realComponents . length ] [ realComponents [ 0 ] . length ] ; for ( int i = 0 ; i < realComponents . length ; i ++ ) { ret [ i ] = Nd4j . createComplexNumber ( realComponents [ i ] [ 0 ] , realComponents [ i ] [ 1 ] , 0 ) ; } return ret ; }"
ImageLayerIcon getLayerIcon ( int layer ) { if ( ! layers . containsKey ( layer ) ) { return null ; } return layers . get ( layer ) . getImageLayerIcon ( ) ; }
String encodeString ( String string ) { if ( string == null ) { return null ; } return new String ( Base64 . encodeBase64 ( string . getBytes ( ) ) ) ; }
String [ ] getDefaultSubstrings ( Pattern p ) { String [ ] result = new String [ p . groupCount ( ) ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = p . group ( i ) ; } return result ; }
"boolean validateDistance ( double [ ] incomingPix , double baseline , double threshold ) { for ( int channel = 0 ; channel < channels ; channel ++ ) { for ( int channel = 0 ; channel < channels ; channel ++ ) { if ( ( incomingPix [ channel ] - baseline [ channel ] ) < threshold ) { return false ; } } } return true ; }"
"int removeHandshakeString ( byte [ ] buffer , int pos ) { int len = buffer . length - pos ; if ( len < 0 ) { return pos ; } int pos1 = pos ; int len = len - 1 ; for ( int i = 0 ; i < len ; i ++ ) { if ( buffer [ pos1 ++ ] != ( byte ) 0 ) { break ; } pos ++ ; } return pos1 - pos ; }"
"Toast makeText ( Context context , CharSequence text , int duration ) { Toast toast = Toast . makeText ( context , text , duration ) ; setToast ( toast ) ; return toast ; }"
void mousePressed ( MouseEvent e ) { if ( e . getButton ( ) == MouseEvent . BUTTON1 ) { if ( e . getButton ( ) == MouseEvent . BUTTON2 ) { if ( e . getButton ( ) == MouseEvent . BUTTON3 ) { if ( e . getButton ( ) == MouseEvent . BUTTON4 ) { if ( e . getButton ( ) == MouseEvent . BUTTON5 ) { if ( e . getButton ( ) == 0 ) { return ; } } } } else { if ( e . getButton ( ) == MouseEvent . BUTTON3 ) { if ( e . getButton ( ) == MouseEvent . BUTTON4 ) { if ( e . getButton ( ) == MouseEvent . BUTTON5 ) { return ; } } } } } } } } } }
"Subscription addSubscription ( String jid ) { Subscription subscription = subscriptions . get ( jid ) ; if ( subscription == null ) { subscription = new Subscription ( ) ; subscriptions . put ( jid , subscription ) ; } return subscription ; }"
"void storeRootCertAndKey ( KeyStore jks , Certificate rootCert , Certificate cert , String alias , String password ) { try { jks . setCertificateEntry ( rootCert ) ; jks . setCertificateEntry ( alias , cert ) ; jks . setKeyEntry ( alias , password ) ; } catch ( KeyStoreException e ) { throw new IOException ( e . getMessage ( ) ) ; } }"
Iterator iteratePrefixes ( ) { ArrayList prefixes = new ArrayList ( ) ; for ( int i = 0 ; i < nsLen ; i ++ ) { prefixes . add ( ( String ) nsStack . elementAt ( i ) ) ; } return prefixes . iterator ( ) ; }
"SpeechStrategy loadExternalSpeechStrategy ( String speechStrategyPath ) { File speechStrategyFile = new File ( mExternalSpeechStrategyDirectory , speechStrategyPath ) ; return loadSpeechStrategy ( speechStrategyFile ) ; }"
"void setPort ( int port ) { if ( port < 0 || port > 65535 ) { throw new IllegalArgumentException ( ""Port out of range"" ) ; } port = port ; }"
T computeOrAbort ( ProgressIndicator progressIndicator ) { if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . JELLY_BEAN_MR1 ) { ProgressIndicator . setProgressIndicator ( progressIndicator ) ; return progressIndicator . getValue ( ) ; } else { ProgressIndicator . setProgressIndicator ( null ) ; return null ; } }
"boolean isDesktopSupported ( ) { try { Class . forName ( ""java.awt.Desktop"" ) ; return true ; } catch ( ClassNotFoundException e ) { return false ; } }"
byte getByte ( ) { if ( ( data [ data . length - 1 ] & 0xFF ) == 0xFF ) { return ( byte ) ( data [ data . length - 1 ] & 0xFF ) ; } else { return ( byte ) ( data [ data . length - 1 ] & 0xFF ) ; } }
double [ ] [ ] getDistanceMatrix ( ) { double [ ] [ ] distanceMatrix = new double [ matrix . length ] [ matrix [ 0 ] . length ] ; for ( int i = 0 ; i < matrix . length ; i ++ ) { for ( int j = 0 ; j < matrix [ 0 ] . length ; j ++ ) { distanceMatrix [ i ] [ j ] = matrix [ i ] [ j ] - matrix [ i ] [ j ] ; } } return distanceMatrix ; }
boolean isShutdownMessage ( ) { if ( message == null ) { return false ; } return message . getId ( ) == null || message . getId ( ) . equals ( UUID . randomUUID ( ) . toString ( ) ) || message . getId ( ) . equals ( UUID . randomUUID ( ) . toString ( ) ) || message . getId ( ) . equals ( UUID . randomUUID ( ) . toString ( ) ) ; }
"String toExternalString ( ) { final StringBuilder r = new StringBuilder ( ) ; r . append ( ""refs/heads/master"" ) ; r . append ( ""refs/heads/master"" ) ; r . append ( ""refs/heads/tags"" ) ; r . append ( ""refs/heads/tags"" ) ; return r . toString ( ) ; }"
"void correctErrors ( final byte [ ] data , final byte [ ] errorCorrectionCodewords , final int errors ) { for ( int i = 0 ; i < errorCorrectionCodewords . length ; i ++ ) { correctError ( data , errorCorrectionCodewords [ i ] ) ; } for ( int i = 0 ; i < data . length ; i ++ ) { for ( int j = 0 ; j < errorCorrectionCodewords [ i ] . length ; j ++ ) { codewords [ i ] [ j ] = errorCorrectionCodewords [ i ] [ j ] ; } } }"
"String getHandbrakeExecutable ( ) { if ( Handbrake . class . getPackage ( ) . equals ( ""Handbrake"" ) ) { return ""/Applications/Handbrake"" ; } else if ( Handbrake . class . getPackage ( ) . getName ( ) . equals ( ""Handbrake"" ) ) { return ""/Applications/Handbrake"" ; } else if ( Handbrake . class . getPackage ( ) . getName ( ) . equals ( ""Handbrake"" ) ) { return ""/Applications/Handbrake"" ; } return null ; }"
"void testByeReferral ( ) { startServer ( 47500 ) ; fetchPage ( ""/referral.jsp"" , 200 ) ; }"
List < Integer > degreeSequence ( ) { List < Integer > degreeSequence = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < getNumVertices ( ) ; i ++ ) { degreeSequence . add ( getNeighbors ( i ) . size ( ) + getInNeighbors ( i ) . size ( ) ) ; } Collections . sort ( degreeSequence ) ; return degreeSequence ; }
"void testMax ( ) { Vector2 v1 = new Vector2 ( ) ; Vector2 v2 = new Vector2 ( ) ; v1 . add ( v2 ) ; TestCase . assertEquals ( v1 . max ( ) , v2 . max ( ) ) ; TestCase . assertEquals ( v2 . max ( ) , v1 . max ( ) ) ; }"
int getDeviceClass ( ) { if ( mDeviceClass == Bluetooth . FOO ) { return Constants . DEVICE_CLASS_MAJOR ; } else if ( mDeviceClass == Bluetooth . MAJOR ) { return Constants . DEVICE_CLASS_MINOR ; } else { return Constants . DEVICE_CLASS_FOO ; } }
"void addAttribute ( String prefix , String attName , String attValue ) { if ( attributes == null ) attributes = new HashMap < String , String > ( ) ; attributes . put ( prefix , attName ) ; attributes . put ( attName , attValue ) ; }"
Object getEntity ( ) { if ( jedisPool . isEmpty ( ) ) { return null ; } return jedisPool . remove ( jedisPool . size ( ) - 1 ) ; }
int arrayOffset ( Class arrayType ) { if ( arrayType . isArray ( ) ) { return arrayType . arrayOffset ( ) ; } else { return arrayType . hashCode ( ) ; } }
"void addCategories ( DepositResult result , DepositReceipt receipt ) { DepositReceipt [ ] dcv = result . getItem ( ) . getMetadataByMetadataString ( ""dc.subject.*"" ) ; if ( dcv != null ) { for ( int i = 0 ; i < dcv . length ; i ++ ) { receipt . getWrappedEntry ( ) . addCategory ( dcv [ i ] . getValue ( ) , dcv [ i ] . getValue ( ) ) ; } } }"
"File getClassFile ( Class < ? > clazz ) { ClassLoader cl = clazz . getClassLoader ( ) ; if ( cl == null ) { return null ; } try { return cl . getResource ( clazz . getName ( ) + "".class"" ) ; } catch ( ClassNotFoundException e ) { return null ; } }"
"Map < Component , PositionDTO > buildPositionMap ( ) { Map < Component , PositionDTO > positionMap = new HashMap < > ( ) ; for ( Component component : components ) { PositionDTO positionDTO = buildPositionDTO ( component ) ; positionMap . put ( component , positionDTO ) ; } return positionMap ; }"
"void writeName ( XMLStreamWriter writer , String name ) { try { writer . writeAttribute ( ""name"" , name ) ; } catch ( XMLStreamException e ) { throw logger . processingError ( e ) ; } }"
"void printList ( Node node , PrintStream out ) { out . print ( node . toString ( ) ) ; for ( int i = 0 ; i < node . size ( ) ; i ++ ) { out . print ( node . get ( i ) . toString ( ) ) ; if ( i < node . size ( ) - 1 ) { out . print ( "" "" ) ; } } out . println ( ) ; }"
long getTime ( ) { if ( state == State . RUNNING ) { return 0 ; } else { return System . currentTimeMillis ( ) ; } }
"String getString ( String key , String defaultValue ) { if ( ! map . containsKey ( key ) ) { return defaultValue ; } else { return ( String ) map . get ( key ) ; } }"
"String updateHostName ( String url , String hostname ) { int colonIndex = url . indexOf ( ':' ) ; if ( colonIndex == - 1 ) { return url ; } int colonIndex = url . indexOf ( ':' , colonIndex ) ; if ( colonIndex == - 1 ) { return url ; } return url . substring ( colonIndex + 1 , url . length ( ) ) ; }"
AbstractTile getParent ( ) { if ( parentDataset == null ) { return null ; } if ( parentDataset . getParent ( ) == null ) { return null ; } return ( AbstractTile ) parentDataset . getParent ( ) ; }
"File getDataDirectory ( boolean create ) { File dataDir = getDataDirectory ( ) ; if ( dataDir == null ) { dataDir = new File ( System . getProperty ( ""user.dir"" ) ) ; } if ( create ) { dataDir . mkdirs ( ) ; } return dataDir ; }"
Set < String > getDenies ( ) { if ( getPlot ( ) != null ) { return getPlot ( ) . getDenies ( ) ; } else { return Collections . emptySet ( ) ; } }
ServerState olderThan ( ChangeNumber changeNumber ) { List < ChangeNumber > older = new ArrayList < > ( changes . size ( ) ) ; for ( ServerState state : changes ) { if ( state . getChangeNumber ( ) . compareTo ( changeNumber ) < 0 ) { older . add ( state . getChangeNumber ( ) ) ; } } return new ServerState ( older ) ; }
"J2ObjCArchive unprunedStaticLibrary ( J2ObjCLibrary archive ) { J2ObjCArchive j2ObjCArchive = new J2ObjCArchive ( archive ) ; removeDeadCodeObjects ( j2ObjCArchive , archive ) ; removeObjectDeadCode ( j2ObjCArchive , archive ) ; removeObjectDeadCode ( j2ObjCArchive , archive ) ; return j2ObjCArchive ; }"
String getName ( ) { if ( isRegSendTag ( ) ) { return recipient . getName ( ) ; } return null ; }
List < CrashService > getCrashServices ( ) { if ( crashServices == null ) { crashServices = new ArrayList < CrashService > ( ) ; } return crashServices ; }
"void testSerialization ( ) { YIntervalDataItem item1 = new YIntervalDataItem ( 1.0 , 2.0 , 3.0 , 4.0 ) ; YIntervalDataItem item2 = ( YIntervalDataItem ) TestUtilities . serialised ( item1 ) ; assertEquals ( item1 , item2 ) ; }"
"DatabaseManager getInstance ( ) { if ( instance == null ) { throw new RuntimeException ( ""DatabaseManager instance is null. Make sure to init a concrete implementation of ResearchStack in Application.onCreate()"" ) ; } return instance ; }"
BBox buildBBox ( ) { BoundingBox bbox = new BoundingBox ( ) ; for ( int i = 0 ; i < subproducts . size ( ) ; i ++ ) { bbox . add ( subproducts . get ( i ) . bbox ) ; } return bbox ; }
InetAddress intToAddress ( int number ) { byte [ ] bytes = new byte [ 4 ] ; bytes [ 0 ] = ( byte ) number ; bytes [ 1 ] = ( byte ) ( number >> 8 ) ; bytes [ 2 ] = ( byte ) ( number >> 16 ) ; bytes [ 3 ] = ( byte ) ( number >> 24 ) ; bytes [ 4 ] = ( byte ) ( number >> 16 ) ; bytes [ 5 ] = ( byte ) ( number >> 8 ) ; bytes [ 6 ] = ( byte ) number ; return new InetAddress ( bytes ) ; }
"void insertEntry ( int par1 , int par2 , int par3 , int par4 ) { if ( par1 < 0 || par2 < 0 || par3 >= entries . length ) { return ; } entries [ par1 ] = new Entry ( par2 , par3 , par4 ) ; entries [ par3 + 1 ] = par4 ; entries [ par4 + 2 ] = par3 ; entries [ par4 + 3 ] = par4 ; }"
"void validateConfiguredKeys ( Configuration conf , ConfigurationKey configuredKey , ConfigurationKey key ) { if ( ! configuredKey . equals ( key ) ) { throw new ConfigurationException ( String . format ( ""Configured key %s does not match configured key %s"" , configuredKey , key ) ) ; } if ( ! configuredKey . equals ( key ) ) { throw new ConfigurationException ( String . format ( ""Configured key %s does not match configured key %s"" , configuredKey , key ) ) ; } }"
void doUpdate ( Runnable r ) { while ( true ) { try { r . run ( ) ; } catch ( InterruptedException e ) { } } }
"void setRoot ( String root ) { if ( root == null ) { throw new NullPointerException ( ""root"" ) ; } _root = root ; }"
"void setObjectValue ( final EObject modelObject , final String key , final Object value ) { CoreArgCheck . isNotNull ( modelObject , ""modelObject"" ) ; CoreArgCheck . isNotNull ( key , ""key"" ) ; CoreArgCheck . isNotNull ( value , ""value"" ) ; Annotation annotation = getModelObjectAnnotation ( modelObject , true ) ; annotation . getTags ( ) . put ( key , value ) ; }"
byte [ ] provideBlock ( int n ) { byte [ ] block = new byte [ BLOCK_SIZE ] ; for ( int i = 0 ; i < n ; i ++ ) { block [ i ] = random . nextInt ( BLOCK_SIZE ) ; } return block ; }
"String getCellReference ( int sheet , int column , ExternalSheet workbook , int row , ExternalSheet workbook , StringBuffer buf ) { StringBuffer sb = new StringBuffer ( ) ; getCellReference ( sheet , column , workbook , buf ) ; return sb . toString ( ) ; }"
"void checkSufficientData ( final RealMatrix matrix ) { int nRows = matrix . getRowDimension ( ) ; int nCols = matrix . getColumnDimension ( ) ; if ( nRows < 2 || nCols < 2 ) { throw new IllegalArgumentException ( LocalizedFormats . INSUFFICIENT_ROWS_AND_COLUMNS , nRows , nCols ) ; } }"
"boolean isVATAbleForCountry ( @ Nonnull final Locale aCountry ) { ValueEnforcer . notNull ( aCountry , ""Country"" ) ; return m_aRWLock . writeLocked ( ( ) -> m_aVATAbleForCountry . equals ( aCountry ) ) ; }"
List < Connection > searchConnections ( final String connectionId ) { final List < Connection > connections = new ArrayList < > ( ) ; for ( final Connection connection : connections ) { if ( connection . getId ( ) . equals ( connectionId ) ) { connections . add ( connection ) ; } } return connections ; }
"void addIgnoreItem ( @ Nonnull final IIgnoreItem aIgnoreItem ) { ValueEnforcer . notNull ( aIgnoreItem , ""IgnoreItem"" ) ; m_aIgnoreItems . add ( aIgnoreItem ) ; }"
FundingAltRef getFundingAltRef ( FundingAlt fundingAlt ) { for ( FundingAltRef altRef : getAltRefs ( ) ) { if ( altRef . getFundingAlt ( ) . equals ( fundingAlt ) ) { return altRef ; } } return null ; }
void performUndo ( TrackInfo inTrackInfo ) { inTrackInfo . getSelection ( ) . clear ( ) ; for ( int i = 0 ; i < inTrackInfo . getSelection ( ) . size ( ) ; i ++ ) { ( ( TrackInfo ) inTrackInfo . getSelection ( ) . get ( i ) ) . undo ( ) ; } }
ClickedCardButton clickClickedCardButton ( BoundedCard boundedCard ) { for ( ClickedCardButton clickedCardButton : clickedCardButtons ) { if ( clickedCardButton . getBoundedCard ( ) . getBoundedCard ( ) . equals ( boundedCard ) ) { return clickedCardButton ; } } return null ; }
"PackageList getGroupList ( String groupName ) { PackageList pkgList = groupLists . get ( groupName ) ; if ( pkgList == null ) { pkgList = new PackageList ( ) ; groupLists . put ( groupName , pkgList ) ; } return pkgList ; }"
String generateRandomID ( String prefix ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < prefix . length ( ) ; i ++ ) { sb . append ( prefix ) ; } return sb . toString ( ) ; }
String getStyleId ( Attributes attrs ) { String styleId = null ; if ( attrs . containsKey ( STYLE_ID ) ) { styleId = ( String ) attrs . get ( STYLE_ID ) ; } return styleId ; }
ClassLoader createClassLoader ( List < Archive > archives ) { ClassLoader cl = null ; for ( Archive archive : archives ) { cl = createClassLoader ( archive ) ; } return cl ; }
Throwable getException ( ) { if ( exception != null ) { return exception ; } else { return null ; } }
"List < Order > createOrders ( List < Order > asks , List < Order > bids ) { List < Order > orders = new ArrayList < Order > ( ) ; for ( Order ask : asks ) { orders . add ( createOrder ( ask ) ) ; } for ( Order bid : bids ) { orders . add ( createOrder ( bid ) ) ; } return orders ; }"
"byte [ ] stringToBytes ( String str ) { try { return str . getBytes ( ""UTF-8"" ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }"
ApplicationContextFactory getInstance ( ) { if ( instance == null ) { instance = new ApplicationContextFactory ( ) ; } return instance ; }
boolean enclosingHasMoreTokens ( ) { if ( enclosing == null ) { return false ; } return enclosing . hasMoreTokens ( ) ; }
List < NaviNode > findChildrenNodes ( String nodeId ) { List < NaviNode > nodes = new ArrayList < NaviNode > ( ) ; for ( NaviNode node : nodes ) { if ( node . getId ( ) . equals ( nodeId ) ) { nodes . add ( node ) ; } } return nodes ; }
"boolean addFeature ( String aKey , String aFeatureName ) { if ( m_features . containsKey ( aKey ) ) return false ; m_features . put ( aKey , aFeatureName ) ; return true ; }"
"void generateExpectedFileName ( ) { Object o = getObject ( ) ; assertThat ( o , is ( notNullValue ( ) ) ) ; assertThat ( o . getClass ( ) . getName ( ) , is ( ""java.io.Serializable"" ) ) ; assertThat ( o . getName ( ) , is ( ""java.io.Serializable"" ) ) ; }"
"char readChar ( ) { dis . readFully ( work , 0 , 2 ) ; return ( char ) ( ( work [ 1 ] & 0xff ) << 8 | ( work [ 0 ] & 0xff ) ) ; }"
int getRow ( Matcher matcher ) { if ( spreadsheetPattern == null ) { return 0 ; } return spreadsheetPattern . matcher ( matcher . group ( 1 ) ) . start ( ) + spreadsheetPattern . length ( ) ; }
boolean isGoogleSearchEnabled ( ) { org . sakaiproject . citation . api . ConfigurationService instance = getInstance ( ) ; if ( instance == null ) { return false ; } return instance . isGoogleSearchEnabled ( ) ; }
"String convertPercentageToActual ( String percentage , double relative ) { if ( percentage . equals ( ""%"" ) ) { return ""%%"" ; } else if ( percentage . equals ( ""%"" ) ) { return String . format ( ""%.2f"" , relative ) ; } else if ( percentage . equals ( ""%"" ) ) { return String . format ( ""%.2f"" , relative ) ; } else { return String . format ( ""%.2f"" , relative ) ; } }"
"void testConstruction ( ) { assertThat ( stats1 . value ( ) , is ( ""1"" ) ) ; assertThat ( stats1 . key ( ) , is ( ""1"" ) ) ; assertThat ( stats1 . value ( ) , is ( ""2"" ) ) ; assertThat ( stats1 . key ( ) , is ( ""3"" ) ) ; assertThat ( stats1 . value ( ) , is ( ""4"" ) ) ; assertThat ( stats1 . value ( ) , is ( ""5"" ) ) ; }"
"InetAddress getByAddress ( String addr , int family ) { byte [ ] bytes ; bytes = toByteArray ( addr , family ) ; if ( bytes == null ) throw new UnknownHostException ( ""Invalid address: "" + addr ) ; if ( family == IPv4 ) return new IPv4Address ( bytes ) ; if ( family == IPv6 ) return new IPv6Address ( bytes ) ; throw new UnknownHostException ( ""Invalid address family: "" + family ) ; }"
"boolean canPlaceInBatch ( int commandIndex , int commandBatchCount ) { if ( commandIndex < 0 || commandIndex >= commandBatchCount ) { return false ; } for ( int i = 0 ; i < commandBatchCount ; i ++ ) { if ( ! canPlaceInBatch ( commandIndex , commandBatch [ i ] ) ) { return false ; } } return true ; }"
long getTimeInMillis ( Date startInstant ) { Calendar cal = Calendar . getInstance ( ) ; cal . setTimeInMillis ( startInstant . getTime ( ) ) ; return cal . getTimeInMillis ( ) ; }
"boolean canHandleToken ( ReceivedToken validateTarget , String realm ) { if ( validateTarget . getToken ( ) . getRealm ( ) != null && validateTarget . getToken ( ) . getRealm ( ) . equals ( realm ) ) { return true ; } return false ; }"
TimeZone getTimeZone ( java . util . TimeZone timeZone ) { if ( timeZone == null ) { timeZone = TimeZone . getDefault ( ) ; } return timeZone ; }
"String percentEncodeRfc3986 ( String s ) { try { return URLEncoder . encode ( s , ""UTF-8"" ) . replace ( ""+"" , ""%20"" ) . replace ( ""%7E"" , ""~"" ) . replace ( ""%7F"" , ""~"" ) ; } catch ( UnsupportedEncodingException e ) { return s ; } }"
"void updatePosition ( int row , int column ) { if ( ( row < 0 ) || ( column < 0 ) ) { throw new IllegalArgumentException ( ""Invalid row: "" + row ) ; } if ( ( column < 0 ) || ( column > 9 ) ) { throw new IllegalArgumentException ( ""Invalid column: "" + column ) ; } if ( ( row < 0 ) || ( column > 9 ) ) { throw new IllegalArgumentException ( ""Invalid row: "" + row ) ; } position = row ; }"
AutomationContext getAutomationContextWithKey ( String key ) { for ( AutomationContext automationContext : contexts ) { if ( automationContext . getNodeKey ( ) . equals ( key ) ) { return automationContext ; } } return null ; }
"void onClientUpdated ( String jid , String jid2 , String jid3 , String jid4 , String jid5 , String jid6 , String jid7 , String jid8 , String jid9 , String jid9 , String jid10 , String jid10 , String jid11 , String jid10 , String jid11 , String jid10 , String jid11 , String jid10 , String jid11 , String jid10 , String jid10 , String jid11 , String jid10 , String jid10 ) { proxyService . createProxy ( jid , jid1 , jid2 , jid10 , jid11 , jid10 , jid11 , jid10 , jid11 , jid10 , jid11 , jid10 , jid11 , jid10 , jid11 , jid10 , jid11 , jid10 , jid11 , jid10 , jid11 , jid10 , jid11 , jid10 , jid11 , jid10 , jid11 , jid10 , jid11 , jid10 , jid11 , jid10 , jid11 , jid10 , jid11 ) ; updateState ( ) ; }"
String trimJobName ( String jobName ) { if ( jobName == null || jobName . isEmpty ( ) ) { return jobName ; } return jobName ; }
"long calculateWaitDurationAfterFailureAttempt ( long attemptTime , TimeUnit timeUnit ) { long waitDuration = 0 ; if ( timeUnit . convert ( attemptTime , TimeUnit . MILLISECONDS ) != null ) { waitDuration = timeUnit . convert ( attemptTime , TimeUnit . MILLISECONDS ) . toNanos ( ) ; } return waitDuration ; }"
"void testNotEquals ( ) { String tableIdentifier1 = ""table1"" ; String columnIdentifier1 = ""column1"" ; ColumnIdentifier identifier1 = new ColumnIdentifier ( tableIdentifier1 , columnIdentifier1 ) ; assertFalse ( identifier1 . equals ( identifier1 ) ) ; }"
"void moveCaretToEnd ( ) { if ( caretPos > text . length ( ) ) { caretPos = text . length ( ) ; } if ( caretPos < text . length ( ) ) { text . delete ( caretPos , text . length ( ) ) ; } }"
"String byteToString ( byte b ) { StringBuffer buf = new StringBuffer ( ) ; buf . append ( ""Byte: "" ) ; buf . append ( ( char ) ( ( b >> 4 ) & 0x0F ) ) ; buf . append ( ( char ) ( ( b >> 8 ) & 0x0F ) ) ; buf . append ( "" "" ) ; buf . append ( ( char ) ( ( b >> 16 ) & 0x0F ) ) ; return buf . toString ( ) ; }"
"Token newEmptyToken ( ) { final Token token = new Token ( ) ; token . type = TokenType . EMPTY ; token . bytes = Arrays . copyOfRange ( token . bytes , 0 , token . bytes . length ) ; token . bytes = Arrays . copyOfRange ( token . bytes , token . bytes . length , token . bytes . length ) ; return token ; }"
"int getColorTemperature ( String deviceId ) { if ( settingsData == null ) { logger . error ( ""Hue bridge settings not initialized correctly."" ) ; return 0 ; } return ( Integer ) settingsData . node ( ""lights"" ) . node ( deviceId ) . node ( ""state"" ) . value ( ""temperature"" ) ; }"
"String appendCourseNameWithFileStub ( String stub , String courseName ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( stub ) ; builder . append ( "" "" ) ; builder . append ( courseName ) ; builder . append ( "" "" ) ; return builder . toString ( ) ; }"
java . util . List < String > getTopicNames ( ) { if ( topicNames == null ) { topicNames = new com . amazonaws . internal . SdkInternalList < String > ( ) ; } return topicNames ; }
String getQualifier ( ) { String type = getType ( ) ; if ( type . startsWith ( QUALIFIER_PREFIX ) ) { return type . substring ( QUALIFIER_PREFIX . length ( ) ) ; } else if ( type . startsWith ( TYPE_PREFIX ) ) { return type . substring ( TYPE_PREFIX . length ( ) ) ; } else { return type ; } }
"double getDistance ( String s1 , String s2 , String lcs ) { double dx = s1 . length ( ) + s2 . length ( ) - 2.0 * lcs . length ( ) ; double dy = s2 . length ( ) - 2.0 * lcs . length ( ) ; return dx * dx + dy * dy ; }"
"void setUp ( ) { new LabeledText ( new DefaultSection ( ""Name"" ) , ""Name"" ) . setText ( name ) ; new LabeledText ( ""Description"" ) . setText ( description ) ; new LabeledText ( ""Notes"" ) . setText ( notes ) ; new LabeledText ( ""Notes"" ) . setText ( notes ) ; }"
int readSynchsafeInt ( ) { int ret = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { ret <<= 8 ; ret |= ( read8 ( ) & 0xff ) ; } return ret ; }
"ScatterChartView createScatterChartView ( Context context , XYMultiSeries dataset , XYMultipleSeriesRenderer renderer ) { ScatterChart chart = new ScatterChart ( dataset , renderer ) ; return new ScatterChartView ( context , chart ) ; }"
"void recordSplit ( int line , int column , int value ) { assert ( line >= 0 ) ; assert ( column >= 0 ) ; assert ( value >= 0 ) ; assert ( value <= MAX_ROW_COUNT ) ; assert ( column >= 0 ) ; assert ( value >= MIN_ROW_COUNT ) ; assert ( value <= MAX_ROW_COUNT ) ; assert ( column >= 0 ) ; assert ( value <= MAX_ROW_COUNT ) ; }"
int getNumSharedNodes ( ) { if ( _sharedNodes == null ) { return 0 ; } return _sharedNodes . size ( ) ; }
boolean canBeBrewed ( ) { if ( brewingStandings . size ( ) == 0 ) { return true ; } for ( int i = 0 ; i < brewingStandings . size ( ) ; i ++ ) { if ( brewingStandings . get ( i ) != null && brewingStandings . get ( i ) . canBeBrewed ( ) ) { return true ; } } return false ; }
"String getConfigProperty ( String name , String defaultValue ) { String prop = System . getProperty ( name ) ; if ( prop == null ) { prop = System . getProperty ( name ) ; } if ( prop == null ) { prop = System . getProperty ( name ) ; if ( prop == null ) { prop = System . getProperty ( name ) ; } } return prop ; }"
"String bytesToHex ( byte [ ] bytes ) { StringBuffer buf = new StringBuffer ( bytes . length * 2 ) ; for ( byte b : bytes ) { buf . append ( String . format ( ""%02x"" , b & 0xFF ) ) ; } return buf . toString ( ) ; }"
"String getCurrentTime ( ) { SimpleDateFormat sdf = new SimpleDateFormat ( ""yyyy-MM-dd HH:mm:ss"" ) ; Calendar cal = Calendar . getInstance ( ) ; cal . setTime ( Calendar . getInstance ( ) . getTime ( ) ) ; int hour = sdf . format ( cal . get ( Calendar . HOUR ) , cal . get ( Calendar . MINUTE ) ) ; int minute = sdf . format ( cal . get ( Calendar . SECOND ) , cal . get ( Calendar . MILLISECOND ) ) ; return hour + "":"" + minute ; }"
"ArrayList < String > getStrikes ( ) { ArrayList < String > strikes = new ArrayList < String > ( ) ; Collections . sort ( strikes , new Comparator < String > ( ) { public int compare ( String strikes1 , String strikes2 ) { return strikes1 . compareTo ( strikes2 ) ; } } ) ; return strikes ; }"
void runGarbageCollection ( ) { try { Thread . sleep ( 100 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } }
void processRows ( ) { for ( int i = 0 ; i < currentPartition . size ( ) ; i ++ ) { processRow ( currentPartition . get ( i ) ) ; } }
String getChildText ( String name ) { Node child = getChild ( name ) ; if ( child != null ) { if ( child . getNodeType ( ) == Node . TEXT_NODE ) { return ( ( TextNode ) child ) . getData ( ) ; } } return null ; }
void executeTask ( Callable < ? > task ) { JdbcActivity activity = createActivity ( ) ; try { task . execute ( ) ; } finally { activity . dispose ( ) ; } }
"String stripFileProtocol ( String url ) { if ( url . startsWith ( ""file:"" ) ) { return url . substring ( 7 ) ; } return url ; }"
"String getCurrentDateTimeByTemplate ( String template ) { try { return stub . getCurrentDateTimeByTemplate ( template ) ; } catch ( Exception e ) { String message = e . getMessage ( ) ; handleException ( e . getMessage ( ) , e ) ; } return null ; }"
"String formatDatetime ( java . sql . Timestamp timestamp ) { if ( timestamp == null ) { return null ; } else { SimpleDateFormat sdf = new SimpleDateFormat ( ""dd/MM/yyyy HH:mm:ss"" ) ; return sdf . format ( timestamp . getTime ( ) ) ; } }"
"void deleteUser ( Long id ) { try { User user = ( User ) session . get ( User . class , id ) ; session . delete ( user ) ; } catch ( Exception e ) { transaction . rollback ( ) ; e . printStackTrace ( ) ; } }"
void copyTo ( ValueOutput out ) { out . writeDouble ( value ) ; out . writeInt ( index ) ; index ++ ; }
"Map < String , String > parseTokenMap ( String token ) { Map < String , String > map = new HashMap < String , String > ( ) ; String [ ] tokens = token . split ( "":"" ) ; for ( int i = 0 ; i < tokens . length ; i ++ ) { if ( tokens [ i ] . equals ( "":"" ) ) { map . put ( tokens [ i ] . trim ( ) , tokens [ i ] . trim ( ) ) ; } } return map ; }"
"String encryptAndDecrypt ( String message ) { String key1 = message . substring ( 0 , message . length ( ) - 2 ) ; String key2 = message . substring ( message . length ( ) - 2 , message . length ( ) ) ; return encrypt ( key1 , key2 ) ; }"
"void setProblems ( final String message ) { if ( message != null && message . length ( ) > 0 ) { final String message2 = message . substring ( 0 , message . length ( ) - 2 ) ; final String message3 = message . substring ( message . length ( ) - 2 , message . length ( ) ) ; System . err . println ( message2 + "": "" + message3 ) ; System . err . println ( message ) ; } }"
PsiNode parseProgram ( String text ) { PsiNode root = null ; try { root = parser . parse ( text ) ; } catch ( ParseException e ) { e . printStackTrace ( ) ; } return root ; }
"String getAgentsRMIBindingSubstring ( String key ) { if ( key == null || key . length ( ) == 0 ) { return """" ; } else { return key . substring ( 1 , key . length ( ) ) ; } }"
Object getValue ( Node node ) { if ( node == null ) { return null ; } if ( node instanceof Node ) { return ( ( Node ) node ) . getValue ( ) ; } else if ( node instanceof Node ) { return ( ( Node ) node ) . getValue ( ) ; } else if ( node instanceof Node ) { return ( ( Node ) node ) . getValue ( ) ; } else { return null ; } }
"String getRelativePath ( final File root , final String path ) { final File file = new File ( path ) ; final File parent = file . getParentFile ( ) ; if ( parent != null ) { file . mkdirs ( ) ; parent . mkdirs ( ) ; } return file . getAbsolutePath ( ) ; }"
String getDescription ( ) { if ( descriptionProvider instanceof IDescriptionProvider ) { return ( ( IDescriptionProvider ) descriptionProvider ) . getDescription ( ) ; } return null ; }
T randomItem ( List < T > list ) { if ( list == null || list . size ( ) == 0 ) { return null ; } int r = ( int ) ( Math . random ( ) * list . size ( ) ) ; return list . get ( r ) ; }
"String toString ( int [ ] ints ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < ints . length ; i ++ ) { sb . append ( "" "" ) ; for ( int j = 0 ; j < ints [ i ] . length ; j ++ ) { sb . append ( Integer . toString ( ints [ i ] [ j ] , 16 ) ) ; } sb . append ( "" "" ) ; } return sb . toString ( ) ; }"
boolean validateEmailFormat ( String value ) { if ( value == null || value . isEmpty ( ) ) { return false ; } return VALID_EMAIL_PATTERN . matcher ( value ) . matches ( ) ; }
OutputStream getOutputStream ( ) { if ( out == null ) { out = new BufferedOutputStream ( new FileOutputStream ( filename ) ) ; } return out ; }
double bestCandidate ( int generation ) { double best = solution [ generation ] ; if ( best < 0 ) { best = solution [ generation ] ; } return best ; }
"void assignBatchRow ( AggregationBufferSet set , int row ) { selectionVector . clear ( ) ; for ( int i = 0 ; i < set . size ( ) ; i ++ ) { if ( set . get ( i ) . row == row ) { selectionVector . add ( i ) ; } } }"
"void assertContains ( String string , String substring ) { assertNotNull ( ""string should not be null"" , string ) ; assertNotNull ( ""substring should not be null"" , substring ) ; if ( ! string . contains ( substring ) ) { fail ( ""String should not contain ["" + substring + ""]."" ) ; } }"
"void afterBeanProcessing ( ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( ""After bean processing: "" + entityBean . getId ( ) ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( ""After bean processing: "" + entityBean . getId ( ) ) ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( ""After bean processing: "" + entityBean . getId ( ) ) ; } }"
Cookie getCookie ( String name ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } for ( int i = 0 ; i < cookies . length ; i ++ ) { if ( cookies [ i ] . getName ( ) . equals ( name ) ) { return cookies [ i ] ; } } return null ; }
Color getForeground ( ) { if ( foregroundColor != null ) return foregroundColor ; if ( styleLinkForeground != null ) return styleLinkForeground . getForeground ( ) ; return gc . getForeground ( ) ; }
int getRemainingBytes ( ) { if ( mSerialBuffer . remaining ( ) == 0 ) { return 0 ; } return mSerialBuffer . remaining ( ) ; }
"void testSerialization ( ) { YIntervalDataItem item1 = new YIntervalDataItem ( 1.0 , 2.0 , 3.0 , 4.0 ) ; YIntervalDataItem item2 = ( YIntervalDataItem ) TestUtilities . serialised ( item1 ) ; assertEquals ( item1 , item2 ) ; }"
"double averageShortestPathLength ( Graph < V , E > g ) { double avg = 0 ; for ( V v : g ) { double w = wWeight ( v ) ; for ( E e : g . adjList ( v ) ) { avg += shortestPathLength ( w , e ) ; } } avg = 0 ; for ( V v : g ) { avg += shortestPathLength ( g . adjList ( v ) , w ) ; } return avg / g . adjList ( ) . size ( ) ; }"
"Object fromJson ( String jsonString , Class < ? > clazz ) { ObjectMapper mapper = new ObjectMapper ( ) ; return mapper . readValue ( jsonString , clazz ) ; }"
"Map < String , String [ ] > parseParams ( final HttpRequest request ) { Map < String , String [ ] > params = new HashMap < String , String [ ] > ( ) ; for ( Map . Entry < String , String [ ] > entry : request . getParameterMap ( ) . entrySet ( ) ) { params . putAll ( parseParam ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return params ; }"
void addCreativeViewTrackers ( final CreativeViewTracker ... trackers ) { if ( trackers . length == 0 ) { return ; } for ( final CreativeViewTracker creativeViewTracker : trackers ) { creativeViewTracker . addTracker ( creativeViewTracker ) ; } }
"String buildContactsFolderSearchFilter ( ) { String searchFilter = String . format ( ""%s %s"" , KEY_CONTACTS_FOLDER , KEY_CONTACTS_FOLDER_SUBJECT ) ; return searchFilter ; }"
"void putMemento ( IMemento memento , String delim ) { Iterator it = memento . getKeys ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { String key = ( String ) it . next ( ) ; String value = memento . getString ( key ) ; if ( value != null ) { it . remove ( ) ; memento . putString ( key , value + delim ) ; } } }"
Document createFromXmlFile ( File xmlFile ) { DocumentBuilder builder = DocumentBuilderFactory . newInstance ( ) . newDocumentBuilder ( ) ; Document document = builder . parse ( new File ( xmlFile ) ) ; document . getDocumentElement ( ) . normalize ( ) ; return document ; }
"void isZero ( ) { Matrix22 m1 = new Matrix22 ( 1.0 , 2.0 , 3.0 , 4.0 ) ; Matrix22 m2 = new Matrix22 ( 1.0 , 2.0 , 3.0 , 4.0 ) ; Assert . assertTrue ( m1 . isZero ( ) ) ; Assert . assertFalse ( m2 . isZero ( ) ) ; }"
int getCount ( T [ ] items ) { int count = 0 ; for ( T item : items ) { count += item . getCount ( ) ; } return count ; }
"Map < String , String > userArticleToRating ( Long userId , Long articleId , long bytes ) { Map < String , String > rating = new HashMap < > ( ) ; rating . put ( ""user_id"" , userId ) ; rating . put ( ""article_id"" , articleId ) ; rating . put ( ""bytes"" , bytes ) ; return rating ; }"
int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( getYear ( ) == null ) ? 0 : getYear ( ) . hashCode ( ) ) ; result = prime * result + ( ( getMonth ( ) == null ) ? 0 : getMonth ( ) . hashCode ( ) ) ; result = prime * result + ( ( getDay ( ) == null ) ? 0 : getDay ( ) . hashCode ( ) ) ; return result ; }
INDArray getPlotData ( ) { if ( ! initialized ) { initialize ( ) ; } return plotData ; }
double calculateInitialCost ( ) { double cost = 0.0 ; for ( DruidSegment segment : segments ) { cost += calculateSegmentCost ( segment ) ; } return cost ; }
boolean skipped ( ) { if ( skipped ) { return true ; } else { return false ; } }
"void testTask ( ) { appController . task ( ) ; assertEquals ( ""Test task"" , appController . getTitle ( ) ) ; }"
"int charToSquareIndex ( char c , int row , int col ) { if ( col < 0 || col > charToSquareIndex . length ) { throw new IllegalArgumentException ( ""Invalid column index: "" + col ) ; } if ( row < 0 || row >= charToSquareIndex . length ) { throw new IllegalArgumentException ( ""Invalid row index: "" + row ) ; } return charToSquareIndex [ col ] + charToSquareIndex [ row ] ; }"
"String toAttributeValue ( final Object o ) { if ( o == null ) { throw new NullPointerException ( ) ; } if ( o instanceof Boolean ) { return o . toString ( ) ; } throw new BeanException ( ""Failed to convert object of type "" + o . getClass ( ) + "": Not a boolean."" ) ; }"
Variable lookupVariable ( String variableName ) { for ( Variable variable : variables ) { if ( variable . getName ( ) . equals ( variableName ) ) { return variable ; } } return null ; }
"String createTempFolder ( ) { File tmpFile = File . createTempFile ( ""tmp"" , "".tmp"" ) ; tmpFile . deleteOnExit ( ) ; return tmpFile . getAbsolutePath ( ) ; }"
"void testGenerateCustomTree ( ) { DocumentBuilder builder = DocumentBuilderFactory . newInstance ( ) . newDocumentBuilder ( ) ; Document doc = builder . parse ( ""<html></html>"" ) ; Element root = doc . getDocumentElement ( ) ; Element metatags = doc . getElementsByTagName ( ""metatags"" ) ; assertEquals ( ""html"" , metatags . item ( 0 ) . getNodeValue ( ) ) ; }"
"void testSerializeInt ( ) { byte [ ] bytes = new byte [ ] { ( byte ) 0x34 , ( byte ) 0x12 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 } ; assertArrayEquals ( bytes , new byte [ ] { ( byte ) 0x34 , ( byte ) 0x12 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 , ( byte ) 0x00 } ) ; }"
"void sortDetailedCoursesByCreationDate ( List < CourseDetailsBundle > courses ) { Collections . sort ( courses , new Comparator < CourseDetailsBundle > ( ) { public int compare ( CourseDetailsBundle obj1 , CourseDetailsBundle obj2 ) { return ( - 1 ) * obj1 . course . createdAt . compareTo ( obj2 . course . createdAt ) ; } } ) ; }"
void handleEvent ( Event < ? > event ) { try { callbackReceiver . handleEvent ( event ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
void prepareMatrix ( ) { mMat [ 0 ] = 0 ; mMat [ 1 ] = 0 ; mMat [ 2 ] = 0 ; mMat [ 3 ] = 0 ; mMat [ 4 ] = 0 ; mMat [ 5 ] = 0 ; mMat [ 6 ] = 0 ; mMat [ 7 ] = 0 ; mMat [ 8 ] = 0 ; mMat [ 9 ] = 0 ; mMat [ 10 ] = 0 ; mMat [ 11 ] = 0 ; mMat [ 12 ] = 0 ; mMat [ 13 ] = 0 ; mMat [ 14 ] = 0 ; mMat [ 15 ] = 0 ; }
"T checkNotNull ( T reference , Object errorMessage ) { if ( reference == null ) { throw new NullPointerException ( String . valueOf ( errorMessage ) ) ; } return reference ; }"
"String toString ( ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < names . size ( ) ; i ++ ) { buf . append ( names . get ( i ) ) ; if ( i < names . size ( ) - 1 ) { buf . append ( "","" ) ; } } return buf . toString ( ) ; }"
"void writeInt ( final int i , final ByteBuffer buf , final int offset ) { buf . put ( ( byte ) ( i & 0xFF ) ) ; buf . put ( ( byte ) ( ( i >>> 8 ) & 0xFF ) ) ; buf . put ( ( byte ) ( ( i >>> 16 ) & 0xFF ) ) ; buf . put ( ( byte ) ( ( i >>> 24 ) & 0xFF ) ) ; buf . put ( ( byte ) ( ( i >>> 16 ) & 0xFF ) ) ; buf . put ( ( byte ) ( ( i >>> 24 ) & 0xFF ) ) ; }"
void dispenseStack ( Stack stack ) { stackDispense ( stack ) ; if ( stackDispenseSound != null ) { stackDispenseSound . play ( ) ; stackDispenseSound . spawn ( ) ; } }
"String getRepoPresentationName ( ) { String result = """" ; if ( AbstractUndoableEdit . redoText != null ) { result = AbstractUndoableEdit . redoText ; } if ( getPresentationName ( ) != null ) { result += "" "" + getPresentationName ( ) ; } return result ; }"
Menu getMenu ( ) { Menu menu = new Menu ( ) ; MenuItem [ ] items = menuItemItems . toArray ( new MenuItem [ menuItemItems . size ( ) ] ) ; for ( int i = 0 ; i < items . length ; i ++ ) { items [ i ] = ( MenuItem ) menuItemItems . get ( i ) ; } return menu ; }
void collectJDRReport ( ) { JDRReport report = new JDRReport ( ) ; report . setJDRVersion ( JDRVersion . V1_2 ) ; report . setJDRVersion ( JDRVersion . V2_3 ) ; report . setJDRVersion ( JDRVersion . V2_4 ) ; report . setJDRVersion ( JDRVersion . V1_5 ) ; report . setJDRVersion ( JDRVersion . V2_6 ) ; report . collectReport ( ) ; }
"Map < String , String > getEmptyParameters ( ) { Map < String , String > map = new HashMap < String , String > ( ) ; for ( int i = 0 ; i < parameters . size ( ) ; i ++ ) { if ( parameters . get ( i ) . isEmpty ( ) ) { map . put ( parameters . get ( i ) . getName ( ) , """" ) ; } } return map ; }"
"void sumarCuenta ( ) { driver . findElement ( By . xpath ( uiElementMapper . getElement ( ""suma_cuenta.xpath"" ) ) ) . click ( ) ; driver . findElement ( By . xpath ( uiElementMapper . getElement ( ""suma_cuenta.xpath"" ) ) ) . click ( ) ; }"
void enterDescription ( final String newDescription ) { clearDescription ( ) ; if ( newDescription != null ) { descriptionTextArea . setText ( newDescription ) ; } }
JQLParser getParser ( String text ) { if ( parser == null ) { parser = new JQLParser ( text ) ; } return parser ; }
String dashArrayToString ( int [ ] dashArray ) { StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < dashArray . length ; i ++ ) { sb . append ( dashArray [ i ] ) ; if ( i < dashArray . length - 1 ) { sb . append ( '-' ) ; } } return sb . toString ( ) ; }
"T parseToObject ( Class < T > clazz , InputStream xml ) { Unmarshaller unmarshaller = createUnmarshaller ( clazz ) ; return ( T ) unmarshaller . unmarshal ( xml ) ; }"
double getRatio ( ) { double r = 0.0 ; for ( int i = 0 ; i < components . length ; i ++ ) { r += components [ i ] . getRatio ( ) ; } return r ; }
double distanceSquared ( Point pt ) { double dx = pt . x - x ; double dy = pt . y - y ; double dz = pt . z - z ; return ( dx * dx + dy * dy ) + ( dz * dz ) ; }
"String getDailyOutputPath ( ) { String result = """" ; for ( int i = 0 ; i < dailyOutputPath . length ; i ++ ) { result += dailyOutputPath [ i ] + ""/"" ; } return result ; }"
"void initDriver ( ) { if ( dataSource != null ) { throw new SQLException ( ""JDBC driver has already been initialized"" ) ; } dataSource . setAutoCommit ( false ) ; }"
Set < Class < ? >> getDeclaredClasses ( ) { Set < Class < ? >> result = new HashSet < Class < ? >> ( ) ; for ( Class < ? > c : classes ) { result . add ( c ) ; } return result ; }
int [ ] getTimSort ( int [ ] data ) { int [ ] sortedData = new int [ data . length ] ; for ( int i = 0 ; i < data . length ; i ++ ) { sortedData [ i ] = data [ i ] ; } Arrays . sort ( sortedData ) ; return sortedData ; }
"void configureAfterWrite ( ) { try { server . configureAfterWrite ( ) ; } catch ( IOException e ) { throw new RuntimeException ( ""Failed to configure after write"" , e ) ; } }"
ApplicationContext getApplicationContext ( Application application ) { ApplicationContext applicationContext = application . getApplicationContext ( ) ; if ( applicationContext == null ) { return null ; } return applicationContext ; }
boolean inParameterList ( String name ) { for ( int i = 0 ; i < parameterList . length ; i ++ ) { if ( parameterList [ i ] . equals ( name ) ) { return true ; } } return false ; }
Method getMethod ( ) { try { return action . getMethod ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
"boolean hasWarningAttribute ( WarningProperty warningProperty , String attributeName ) { if ( warningProperty == null ) { return false ; } if ( attributeName == null ) { return false ; } if ( warningProperty . getAttributes ( ) == null ) { return false ; } return warningProperty . getAttributes ( ) . contains ( attributeName ) ; }"
int getMaximumLength ( ) { int max = 0 ; for ( LengthValidator validator : lengthValidators ) { int len = validator . getMaximumLength ( ) ; if ( len > max ) { max = len ; } } return max ; }
String generateID ( ) { SecureRandom random = new SecureRandom ( ) ; return UUID . randomUUID ( ) . toString ( ) ; }
boolean isAvailable ( int locationId ) { for ( int i = 0 ; i < bindings . size ( ) ; i ++ ) { Binding binding = bindings . get ( i ) ; if ( binding . getLocationId ( ) == locationId ) { return true ; } } return false ; }
"void putIn ( Map map ) { if ( values == null ) { map . put ( name , values ) ; } else { for ( int i = 0 ; i < values . length ; i ++ ) { map . put ( name + ""."" + i , values [ i ] ) ; } } }"
"List < RoleRepresentation > getAvailableClientScopeMappings ( ) { auth . requireView ( ) ; Set < RoleModel > roles = scopedClient . getRoles ( ) ; return ScopeMappedResource . getAvailable ( scopeContainer , roles ) ; }"
"void goToNextTrack ( ) { Intent intent = new Intent ( mPicker , TrackPicker . class ) ; intent . putExtra ( TrackPicker . EXTRA_TRACK_ID , mPicker . getCurrentTrackId ( ) + 1 ) ; mIntent . putExtra ( TrackPicker . EXTRA_TRACK_ID , mPicker . getCurrentTrackId ( ) + 1 ) ; mIntent . putExtra ( TrackPicker . EXTRA_TRACK_ID , mPicker . getCurrentTrackId ( ) + 1 ) ; mContext . startActivity ( intent ) ; }"
boolean gameOver ( ) { for ( int row = 0 ; row < NUM_ROWS ; ++ row ) for ( int col = 0 ; col < NUM_COLS ; ++ col ) for ( int row = 0 ; row < NUM_ROWS ; ++ row ) for ( int col = 0 ; col < NUM_COLS ; ++ col ) if ( board [ row ] [ col ] == 0 ) return false ; return true ; }
"void resetRate ( ) { int currentSampleRate = 0 ; int currentSampleRate = 0 ; for ( int i = 0 ; i < channels ; i ++ ) { channels [ i ] . reset ( currentSampleRate , currentSampleRate ) ; currentSampleRate = currentSampleRate ; currentSampleRate = 0 ; } }"
"void releaseHold ( Hold hold ) { if ( hold == null ) { throw new IllegalArgumentException ( ""Hold must not be null"" ) ; } synchronized ( holdMap ) { holdMap . remove ( hold ) ; } }"
"Lane getLane ( double x , double y ) { double [ ] point = new double [ 2 ] ; point [ 0 ] = x ; point [ 1 ] = y ; return getLane ( point [ 0 ] , point [ 1 ] ) ; }"
"void printf ( String format , Object ... objects ) { for ( int i = 0 ; i < objects . length ; i ++ ) { StdOut . print ( String . format ( format , objects [ i ] ) + "" "" ) ; } StdOut . println ( ) ; }"
long updateCrc ( byte [ ] bytes ) { long c = 0 ; for ( int i = 0 ; i < bytes . length ; i ++ ) { c = ( ( long ) ( c ^ bytes [ i ] ) ) & 0xFFFFFFFFL ; } c = ( ( long ) ( c ^ 0x8000000000000000L ) ) & 0xFFFFFFFFL ; return c ; }
int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( id == null ) ? 0 : id . hashCode ( ) ) ; result = prime * result + ( ( name == null ) ? 0 : name . hashCode ( ) ) ; return result ; }
void deleteImage ( String imgPath ) { File file = new File ( imgPath ) ; if ( file . exists ( ) ) { file . delete ( ) ; } }
InstructionOperand createEmptyOperand ( ) { final ReilInstructionOperand operand = new ReilInstructionOperand ( ) ; operand . type = REIL_INSTRUCTION ; return operand ; }
TracerSupport getInstance ( ) { if ( instance == null ) { instance = new TracerSupport ( ) ; } return instance ; }
boolean isLastRow ( ) { if ( lastRow == null ) { return false ; } else { return lastRow ; } }
"String encodeFileName ( String fileOrFolder ) { if ( fileOrFolder . endsWith ( ""/"" ) ) { fileOrFolder = fileOrFolder . substring ( 0 , fileOrFolder . length ( ) - 1 ) ; } if ( fileOrFolder . endsWith ( ""|"" ) ) { fileOrFolder = fileOrFolder . substring ( 1 , fileOrFolder . length ( ) - 1 ) ; } return encodeFileName ( fileOrFolder ) ; }"
"void testEqualsBinning ( ) { IntStatistics h = new IntStatistics ( 10 ) ; h . addValue ( 3 ) ; h . addValue ( 3 ) ; h . addValue ( 3 ) ; Assert . assertTrue ( h . estimateSelectivity ( Op . EQUALS , 3 ) < 0.001 ) ; Assert . assertTrue ( h . estimateSelectivity ( Op . EQUALS , 3 ) < 0.001 ) ; Assert . assertTrue ( h . estimateSelectivity ( Op . EQUALS , 3 ) < 0.001 ) ; }"
"void addRect ( float x , float y , float width , float height ) { if ( currentPath == null ) { path = new Path ( ) ; } path . moveTo ( x , y , width , height ) ; path . lineTo ( x + width , y + height ) ; path . lineTo ( x + width , y + height ) ; path . close ( ) ; }"
"String getDateTime ( String aMask , Date aDate ) { SimpleDateFormat df = null ; String returnValue = """" ; if ( aDate == null ) { return ( """" ) ; } df = new SimpleDateFormat ( aMask ) ; returnValue = df . format ( aDate ) ; return ( returnValue ) ; }"
void postRoundCleanUp ( int roundNum ) { for ( int i = roundNum - 1 ; i >= 0 ; i -- ) { deck . remove ( deck . size ( ) - 1 ) ; } }
AttributeField getAttribute ( String a_name ) { for ( int i = 0 ; i < av . size ( ) ; i ++ ) { AttributeField av = ( AttributeField ) av . elementAt ( i ) ; if ( av . getAttributeName ( ) . equals ( a_name ) ) return av ; } return null ; }
Schema createSchema ( XSD xsd ) { SchemaFactory schemaFactory = SchemaFactory . newInstance ( ) ; Schema schema = schemaFactory . newSchema ( ) ; schema . setSchemaURI ( xsd . getURI ( ) ) ; schema . setName ( xsd . getName ( ) ) ; schema . setSchemaURI ( xsd . getURI ( ) ) ; return schema ; }
void removeLocalStore ( ) { if ( sLocalStore != null ) { sLocalStore . close ( ) ; sLocalStore = null ; } }
"Axis generateAxis ( int start , int stop ) { Axis axis = new Axis ( ) ; axis . setRange ( new Range ( start , stop ) ) ; return axis ; }"
"int getIndexOfChild ( TreeNode node , TreeNode parent ) { if ( parent == null ) { return - 1 ; } for ( int i = 0 ; i < node . getChildCount ( ) ; i ++ ) { if ( node . getChildAt ( i ) . equals ( parent ) ) { return i ; } } return - 1 ; }"
"QueryService getQueryService ( String xml ) { QueryService queryService = null ; try { queryService = QueryServicesFactory . getQueryService ( ) ; queryService = queryService . getQueryService ( xml ) ; } catch ( OHException e ) { JOptionPane . showMessageDialog ( null , e . getMessage ( ) ) ; } return queryService ; }"
List < String > getStringArray ( JSONArray array ) { ArrayList < String > stringList = new ArrayList < String > ( ) ; for ( int i = 0 ; i < array . length ( ) ; i ++ ) { try { stringList . add ( array . getString ( i ) ) ; } catch ( JSONException e ) { e . printStackTrace ( ) ; } } return stringList ; }
"boolean startsWith ( String value , String startsWith ) { if ( value == null || startsWith == null ) { return false ; } if ( value . length ( ) > startsWith . length ( ) ) { return false ; } for ( int i = 0 ; i < startsWith . length ( ) ; i ++ ) { if ( value . charAt ( i ) != startsWith . charAt ( i ) ) { return false ; } } return true ; }"
"boolean assertEqual ( Collection c1 , Collection c2 ) { if ( c1 . size ( ) != c2 . size ( ) ) { return false ; } for ( int i = 0 ; i < c1 . size ( ) ; i ++ ) { if ( ! assertEquals ( c1 . get ( i ) , c2 . get ( i ) ) ) { return false ; } } return true ; }"
"void addDocumentationElement ( Element element , String documentation ) { Element documentationElement = element . getOwnerDocument ( ) . createElement ( DOC_ELEMENT_NAME ) ; if ( ! documentationElement . hasChildNodes ( ) ) { documentationElement . appendChild ( document . createElement ( DOC_ELEMENT_NAME ) ) ; } documentationElement . appendChild ( document . createTextNode ( documentation ) ) ; }"
void updateModelKeepEvery ( ) { if ( keepEveryModel != null ) { keepEveryModel . setKeepEvery ( keepEvery ) ; if ( keepEveryModel != null ) { keepEveryModel . setKeepEvery ( keepEvery ) ; } } if ( keepEveryModel != null ) { keepEveryModel . setKeepEvery ( keepEvery ) ; } if ( keepEveryModel != null ) { keepEveryModel . setKeepEvery ( keepEvery ) ; } }
"int [ ] rallongerTableauDeUnElement ( int [ ] tab , int a ) { int [ ] tabModif = null ; if ( tab == null ) { tabModif = null ; } else { tabModif = new int [ tab . length + 1 ] ; for ( int i = 0 ; i < tab . length ; i ++ ) { tabModif [ i ] = a ; } } return tabModif ; }"
String toXML ( ) { StringWriter sw = new StringWriter ( ) ; toXML ( new StreamResult ( sw ) ) ; return sw . toString ( ) ; }
void listDict ( PdfDictionary dictionary ) { out . println ( '[' ) ; for ( Iterator i = dictionary . getKeys ( ) . iterator ( ) ; i . hasNext ( ) ; ) { PdfObject key = ( PdfObject ) i . next ( ) ; listAnyObject ( key ) ; } out . println ( ']' ) ; }
void updateUI ( ) { for ( int i = 0 ; i < nodes . size ( ) ; i ++ ) { updateUI ( nodes . get ( i ) ) ; } }
"void loggerAdminUI ( final Logger logger , final String url ) { logger . info ( ""LoggerAdminUI: "" + url ) ; logger . info ( ""LoggerAdminUI: "" + url ) ; logger . info ( ""LoggerAdminUI: "" + url ) ; logger . info ( ""LoggerAdminUI: "" + url ) ; logger . info ( ""LoggerAdminUI: "" + url ) ; }"
Decorator < ApplicationWideComponent > getDecorator ( ApplicationWideComponentDecorator applicationWideComponentDecorator ) { return new Decorator < ApplicationWideComponent > ( ) { @ Override public Component decorate ( ApplicationWideComponent component ) { return applicationWideComponentDecorator ; } } ; }
BinaryNode < AnyType > rotateWithLeftChild ( BinaryNode < AnyType > k1 ) { BinaryNode < AnyType > k2 = k1 . left ; k1 . left = k2 . right ; k2 . right = k1 ; return k1 ; }
void flushAndCloseOutputStream ( OutputStream stream ) { if ( stream != null ) { flushWriter ( stream ) ; } closeWriter ( stream ) ; }
void deleteAllNodes ( ) { for ( int i = 0 ; i < nodes . size ( ) ; i ++ ) { deleteNode ( ( ZNode ) nodes . get ( i ) ) ; } }
void removeDisallowClassPattern ( String classNamePattern ) { synchronized ( lock ) { if ( disallowClassPatterns == null ) { disallowClassPatterns = new HashSet < String > ( ) ; } disallowClassPatterns . remove ( classNamePattern ) ; } }
double getPercentValueFromActualValue ( double value ) { if ( value < 0.0 ) { return 0.0 ; } else if ( value > 1.0 ) { return 1.0 ; } else if ( value < 1.0 ) { return 0.0 ; } else if ( value > 1.0 ) { return 1.0 ; } else if ( value < 1.0 ) { return 0.0 ; } else if ( value > 1.0 ) { return 1.0 ; } return 0.0 ; }
"byte [ ] hexStringToByteArray ( String hexString ) { int len = hexString . length ( ) ; byte [ ] data = new byte [ len / 2 ] ; for ( int i = 0 ; i < len ; i += 2 ) { data [ i / 2 ] = ( byte ) ( ( Character . digit ( hexString . charAt ( i ) , 16 ) << 4 ) + Character . digit ( hexString . charAt ( i + 1 ) , 16 ) ) ) ; } return data ; }"
"void initializeProblemStatements ( int [ ] problemStatements ) { for ( int i = 0 ; i < problemStatements . length ; i ++ ) { problemStatements [ i ] = new int [ 100 ] ; for ( int j = 0 ; j < 100 ; j ++ ) { problemStatements [ i ] [ j ] = StdRandom . uniform ( 0 , 100 ) ; } } }"
Set < String > getLeaves ( ) { Set < String > leaves = new HashSet < String > ( ) ; if ( root != null ) { leaves . addAll ( root . getLeaves ( ) ) ; } return leaves ; }
boolean esPantallaRevanchaTresOpciones ( BufferedImage imagen ) { boolean valido_revancha_revancha_tresOpciones = false ; if ( valido_revancha_revancha_tresOpciones != null ) { valido_revancha_revancha_tresOpciones = true ; } return valido_revancha_revancha_tresOpciones ; }
"boolean sphereInFrustumWithoutNearFar ( Vector3 center , float radius ) { for ( int i = 2 ; i < 6 ; i ++ ) if ( ( planes [ i ] . normal . x * center . x + planes [ i ] . normal . y * center . y + planes [ i ] . normal . z * center . z ) < ( - radius - planes [ i ] . d ) ) return false ; return true ; }"
String formatImmediate ( int value ) { if ( value >= 0 ) { return immediateFormat . format ( value ) ; } else { return immediateFormat . format ( value ) ; } }
Element getNextElementSibling ( Node node ) { if ( node == null ) { return null ; } NodeList list = node . getChildNodes ( ) ; for ( int i = 0 ; i < list . getLength ( ) ; i ++ ) { Node next = list . item ( i ) ; if ( next . getNodeType ( ) == Node . ELEMENT_NODE ) { return ( Element ) next ; } } return null ; }
void setOrigShort ( boolean v ) { origShort = v ; origShortRes = withoutCustomHandle && origShort ; }
"boolean isOneToOneMapElement ( Map < K , V > oneToOne , K key ) { if ( oneToOne == null ) { return false ; } for ( Map . Entry < K , V > entry : oneToOne . entrySet ( ) ) { if ( entry . getValue ( ) . equals ( key ) ) { return true ; } } return false ; }"
"void addDefaultProfile ( SpringApplication app ) { Map < String , Object > defProperties = new HashMap < > ( ) ; defProperties . put ( SPRING_PROFILE_DEFAULT , SPRING_PROFILE_DEVELOPMENT ) ; app . setDefaultProperties ( defProperties ) ; }"
"void removeConnectionEventListener ( ConnectionEventListener listener ) { if ( listener == null ) { Trace . log ( Trace . ERROR , ""Parameter 'listener' is null."" ) ; throw new NullPointerException ( ""listener"" ) ; } listeners . remove ( listener ) ; }"
"int getMaxCount ( ) { int max = 0 ; for ( Map . Entry < T , Integer > entry : map . entrySet ( ) ) { if ( entry . getValue ( ) > max ) { max = entry . getValue ( ) ; } } return max ; }"
ThriftDictionaryChunkMetadata readDictionaryChunkMetadataThrift ( ) { ThriftDictionaryChunkMetadata dictionaryChunkMetadata = null ; try { dictionaryChunkMetadata = ( ThriftDictionaryChunkMetadata ) dictionaryThriftReader . readObject ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return dictionaryChunkMetadata ; }
void readObject ( java . io . ObjectInputStream s ) { s . defaultReadObject ( ) ; for ( int i = 0 ; i < size ; i ++ ) { add ( ( T ) s . readObject ( ) ) ; } }
String getRequestId ( ) { if ( responseMetadata == null ) { return null ; } return responseMetadata . getRequestId ( ) ; }
"String arrayToString ( String [ ] array ) { String result = """" ; for ( int i = 0 ; i < array . length ; i ++ ) { result += array [ i ] ; } return result ; }"
List < Level > higherLevels ( Level level ) { List < Level > higher = new ArrayList < Level > ( ) ; for ( int i = 0 ; i < levels . size ( ) ; i ++ ) { if ( levels . get ( i ) . compareTo ( level ) > 0 ) { higher . add ( levels . get ( i ) ) ; } } return higher ; }
"boolean checkType ( String fileType ) { if ( fileType . equals ( ""application/octet-stream"" ) ) { return true ; } else if ( fileType . equals ( ""application/octet-stream"" ) ) { return true ; } else if ( fileType . equals ( ""application/octet-stream"" ) ) { return true ; } else if ( fileType . equals ( ""application/octet-stream"" ) ) { return true ; } return false ; }"
String getFormFieldName ( String uri ) { int colonIndex = uri . indexOf ( ':' ) ; if ( colonIndex == - 1 ) { return uri ; } else { return uri . substring ( colonIndex + 1 ) ; } }
DatagramPacket getData ( String exactName ) { DatagramPacket retval = null ; try { retval = getData ( exactName ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return retval ; }
WebAuthorizationHelper getWebAuthorizationHelper ( SecurityContext sc ) { if ( webAuthorizationHelper == null ) { webAuthorizationHelper = new WebAuthorizationHelper ( ) ; } return webAuthorizationHelper ; }
"void addDataToModel ( ) { searchData = new SearchData ( ) ; model . addAttribute ( ""searchData"" , searchData ) ; }"
"void setAppUserNick ( Context c , String userNick ) { SharedPreferences . Editor edit = c . getApplicationContext ( ) . getSharedPreferences ( switchBoardSettings , Context . MODE_PRIVATE ) . edit ( ) ; edit . putString ( KEY_APP_USER_NICKNAME , userNick ) ; edit . apply ( ) ; edit . commit ( ) ; }"
String getMimeType ( File file ) { String mimeType = null ; String name = file . getName ( ) ; int i = name . lastIndexOf ( '.' ) ; if ( i > 0 && i < name . length ( ) - 1 ) { mimeType = name . substring ( i + 1 ) ; } return mimeType ; }
"void setTouchPointData ( int index , float touchPointData ) { mTouchPointsData . set ( index , touchPointData ) ; mStylesSet . add ( mTouchPointData . getClass ( ) . getName ( ) ) ; }"
"String getResultEndpoint ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( getResultEndpoint ( ) ) ; sb . append ( ""/"" ) ; sb . append ( getResultMethod ( ) ) ; sb . append ( ""/"" ) ; sb . append ( getResultId ( ) ) ; return sb . toString ( ) ; }"
"String getAsciiString ( final byte [ ] data , int offset , int length ) { if ( data == null ) { throw new IllegalArgumentException ( ""Parameter may not be null"" ) ; } try { return new String ( data , offset , length , ""US-ASCII"" ) ; } catch ( UnsupportedEncodingException e ) { throw new Error ( ""HttpClient requires ASCII support"" ) ; } }"
String [ ] growArray ( String [ ] array ) { int length = array . length ; String [ ] newArray = new String [ length + 1 ] ; for ( int i = 0 ; i < length ; i ++ ) { newArray [ i ] = array [ i ] ; } return newArray ; }
"boolean hasExtensionBit ( int index ) { if ( index < 0 || index >= data . length ) { throw new IndexOutOfBoundsException ( ""Invalid packet index: "" + index ) ; } return ( data [ index ] & ( 1 << ( 7 - index ) ) ) != 0 ; }"
"long diffDays ( Moment m1 , Moment m2 ) { long diff = 0 ; if ( m1 instanceof Day ) { diff = ( ( Day ) m1 ) . getDay ( ) - m2 . getDay ( ) ; } else if ( m1 instanceof Day ) { diff = ( ( Day ) m2 ) . getDay ( ) ; } else if ( m2 instanceof Day ) { diff = ( ( Day ) m2 ) . getDay ( ) ; } return diff ; }"
void addVariableArguments ( List < String > varArgs ) { for ( int i = 0 ; i < varArgs . size ( ) ; i ++ ) { if ( varArgs . get ( i ) . length ( ) > 0 ) { varArgs . add ( varArgs . get ( i ) ) ; } } }
GristType getSecondaryGristType ( Grist primary ) { for ( int i = 0 ; i < gristTypes . length ; i ++ ) { if ( gristTypes [ i ] . equals ( primary ) ) { return gristTypes [ i ] ; } } return primary ; }
System createVirtPlatformEntitledSystem ( ) { System result = new System ( ) ; result . setVirtualizationPlatformEntitled ( true ) ; result . setGuestSystem ( 1 ) ; return result ; }
GridColumnData fromObject ( java . io . ObjectInputStream in ) { GridColumnData gridColumnData = new GridColumnData ( ) ; GridColumnData [ ] gridColumnArray = ( GridColumnData [ ] ) in . readObject ( ) ; for ( int i = 0 ; i < gridColumnArray . length ; i ++ ) { gridColumnData [ i ] = fromObject ( gridColumnArray [ i ] ) ; } return gridColumnData ; }
Snapshot updatePrior ( Snapshot snapshot ) { Snapshot prior = getSnapshot ( snapshot ) ; if ( prior != null ) { return prior ; } else { Snapshot current = getSnapshot ( snapshot ) ; if ( current != null ) { current . setPrior ( snapshot ) ; return current ; } else { return null ; } } }
"void testMessageInvalidSignature ( ) { when ( restClient . post ( anyString ( ) , anyString ( ) , eq ( COOKIE ) ) ) . thenReturn ( desiredResponse ) ; subject . verify ( restClient , times ( 1 ) ) . post ( anyString ( ) , anyString ( ) , eq ( COOKIE ) ) ; }"
void addNonSimpleCorpus ( Corpus ... corpora ) { List < Corpus > result = new ArrayList < Corpus > ( ) ; for ( Corpus corpus : corpora ) { if ( ! isSimpleSourceCorpus ( corpus ) ) { result . add ( corpus ) ; } } for ( Corpus corpus : result ) { addNonSimpleCorpus ( corpus ) ; } }
"SaslSRPIALG getInstance ( ) { if ( ! ( instance instanceof SASLSRPIALG ) ) { throw new SaslException ( ""SASL-SRP IALG not instance of SASL-SRP IALG"" ) ; } return ( SASLSRPIALG ) instance ; }"
"String formatLogMessage ( final LogLevel logLevel , final String message ) { final StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( logLevel . toString ( ) ) ; buffer . append ( "": "" ) ; buffer . append ( message ) ; buffer . append ( "" "" ) ; buffer . append ( System . getProperty ( ""line.separator"" ) ) ; buffer . append ( "" "" ) ; buffer . append ( System . getProperty ( ""line.separator"" ) ) ; return buffer . toString ( ) ; }"
"void removeArtifactsFromRepositoryWithGroupId ( ArtifactRepository repository , String testGroupId ) { List < Artifact > artifactList = repository . findArtifactByGroupId ( testGroupId ) ; if ( artifactList . size ( ) > 0 ) { repository . delete ( artifactList . subList ( 0 , artifactList . size ( ) - 1 ) ) ; } }"
"WeatherReportResponse currentWeatherReport ( ) { String reportUrl = String . format ( Locale . ROOT , ""station-weather-report-%s.json"" , getCurrentStationWeatherReportId ( ) ) ; JSONObject report = doQuery ( reportUrl ) ; return new WeatherReportResponse ( report ) ; }"
java . util . List < ReservedCacheNodeOffering > getReservedCacheNodeOfferings ( ) { if ( reservedCacheNodeOfferings == null ) { reservedCacheNodeOfferings = new com . amazonaws . internal . ListWithAutoConstructFlag < ReservedCacheNodeOffering > ( ) ; reservedCacheNodeOfferings . setAutoConstruct ( true ) ; } return reservedCacheNodeOfferings ; }
"Script createScriptFromAddress ( Address address ) { if ( address == null ) { throw new IllegalArgumentException ( ""address must not be null"" ) ; } return new ScriptBuilder ( ) . data ( ""payment"" ) . data ( address . toAddress ( ) ) . build ( ) ; }"
InputStream downloadJar ( URL url ) { URLConnection con = url . openConnection ( ) ; InputStream is = null ; try { is = con . getInputStream ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } finally { try { con . close ( ) ; } catch ( IOException e ) { } } return is ; }
"void signRequestForSharedKey ( final StorageCredentials creds , final java . net . HttpURLConnection request , final long contentLength , OperationContext opContext ) { if ( creds . getClass ( ) . equals ( StorageCredentialsAccountAndKey . class ) ) { opContext = opContext == null ? new OperationContext ( ) : opContext ; BaseRequest . signRequestForSharedKey ( request , ( ( StorageCredentialsAccountAndKey ) creds ) . getCredentials ( ) , contentLength , opContext ) ; } }"
void removeSerialEventListener ( SerialEventListener listener ) { if ( listeners . contains ( listener ) ) { listeners . remove ( listener ) ; listeners . remove ( listener ) ; } }
"void enqueueTask ( Task task ) { int index = queue . size ( ) ; queue . add ( 0 , task ) ; if ( index == queue . size ( ) - 1 ) { throw new IllegalStateException ( ""Priority queue is empty"" ) ; } }"
"void setServiceEventHandler ( final ServiceEvent < T > event , final Class < T > eventType ) { if ( eventType == null ) { throw new NullPointerException ( ""serviceEvent must not be null"" ) ; } if ( eventType == null ) { throw new NullPointerException ( ""serviceEvent must not be null"" ) ; } if ( eventType == null ) { throw new NullPointerException ( ""serviceEvent must not be null"" ) ; } setServiceEventHandler ( event , eventType ) ; }"
void setMaxRmsdCutoff ( int cutoff ) { if ( cutoff <= 99 ) { cutoff = 99 ; } maxRmsdCutoff = cutoff ; }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
int getRowCount ( ) { try { return resultSet . getRowCount ( ) ; } catch ( SQLException e ) { throw Util . sqlException ( e ) ; } }
void calculateHeuristicParameters ( ) { for ( int i = 0 ; i < numberOfGears ; i ++ ) { for ( int j = 0 ; j < numberOfGears ; j ++ ) { for ( int k = 0 ; k < numberOfGears ; k ++ ) { gears [ i ] [ j ] = 1.0 / ( double ) numberOfGears ; } } } }
"void moveUserToOrgUnit ( CmsObject cms , String ouFqn , String userId ) { try { m_securityManager . moveUserToOrgUnit ( cms . getRequestContext ( ) , ouFqn , userId ) ; } catch ( CmsSecurityException e ) { throw new CmsIllegalArgumentException ( Messages . get ( ) . container ( Messages . ERR_INVALID_ORGUNIT_1 , ouFqn ) , e ) ; } }"
"long forEachParallelLoop ( final DataSource dataSource , final long start , final long end , final long iterations ) { final List < DataItem > items = new ArrayList < DataItem > ( ) ; for ( final DataItem item : dataSource . getItems ( ) ) { items . add ( item ) ; for ( final int i = 0 ; i < iterations ; i ++ ) { items . add ( item ) ; } } return forEachParallelLoop ( dataSource , start , end , iterations ) ; }"
"File getTestResourceDataDir ( String name ) { File dir = new File ( System . getProperty ( ""java.io.tmpdir"" ) ) ; if ( ! dir . isDirectory ( ) ) dir = new File ( System . getProperty ( ""java.io.tmpdir"" ) ) ; dir . mkdirs ( ) ; return new File ( dir , name ) ; }"
"void putShort ( final short s , final int offset ) { data [ offset ] = ( byte ) ( ( s >>> 8 ) & 0xFF ) ; data [ offset + 1 ] = ( byte ) ( ( s >>> 16 ) & 0xFF ) ; }"
"int base64CheckOctet ( final byte [ ] bytes , final int offset , final int length ) { int result = 0 ; int end = offset + length ; for ( int i = offset ; i < end ; i ++ ) { if ( bytes [ i ] != ( byte ) base64CheckOctet ( bytes [ i ] ) ) { return result ; } } return result ; }"
"void displayRepository ( Repository repository , IWorkspace workspace ) { IWorkspaceManager workspaceManager = workspace . getWorkspaceManager ( ) ; IWorkspace root = repository . getRoot ( ) ; if ( root != null ) { displayRepository ( repository , workspaceManager , root ) ; } }"
"byte [ ] getBuffer ( ) { if ( buffer == null ) { return new byte [ 0 ] ; } byte [ ] ret = new byte [ buffer . length ] ; System . arraycopy ( buffer , 0 , ret , 0 , buffer . length ) ; return ret ; }"
Image getImage ( ) { if ( ! initialized ) { initialize ( ) ; } return image ; }
"String getRecoveryManagerTag ( ) { if ( recoveryManagerTag == null ) { return """" ; } else { return recoveryManagerTag ; } }"
"String [ ] nominalValues ( ) { String [ ] nominalValues = new String [ values . length ] ; for ( int i = 0 ; i < values . length ; i ++ ) { if ( values [ i ] . equals ( """" ) ) { nominalValues [ i ] = """" ; } else { nominalValues [ i ] = values [ i ] ; } } return nominalValues ; }"
void sortReduction ( ) { for ( int i = risks . length - 1 ; i >= 0 ; i -- ) { for ( int j = i + 1 ; j < risks . length ; j ++ ) { if ( risks [ i ] > risks [ j ] ) { int temp = risks [ i ] ; risks [ i ] = risks [ j ] ; risks [ j ] = temp ; } } } }
"void setCharSet ( String charset ) { if ( charset == null ) { throw new IllegalArgumentException ( ""Charset may not be null"" ) ; } charset_ = charset ; }"
"Matcher getMatcher ( @ Nonnull @ RegEx final String sRegEx , @ Nonnegative final int nOptions , @ Nonnull final String sValue ) { ValueEnforcer . notNull ( sValue , ""Value"" ) ; return RegExCache . getPattern ( sRegEx , nOptions ) . matcher ( sValue ) ; }"
"double getAverageValue ( ) { double sum = 0 ; for ( int i = 0 ; i < map . size ( ) ; i ++ ) { sum += ( ( Map . Entry < Integer , Double > ) map . get ( i ) ) . getValue ( ) ; } return sum / map . size ( ) ; }"
void testNextFloat ( ) { Random r = new Random ( ) ; int i = 0 ; while ( i < NCALLS && r . nextFloat ( ) == 0.0f ) { i ++ ; } assertTrue ( i < NCALLS ) ; }
"void registerCompactionStrategies ( List < Component > compilers ) { if ( compilers . contains ( compilers . get ( compilers . size ( ) - 1 ) ) ) return ; compilers . add ( compilers . get ( compilers . size ( ) - 1 ) , compilers . get ( compilers . size ( ) - 1 ) , compilers . get ( compilers . size ( ) - 1 ) ) ) ; }"
boolean configureExpiration ( ) { if ( config . getExpiration ( ) > 0 ) { return config . getExpiration ( ) > 0 ; } else { return false ; } }
"void testAddStatementCall ( ) { SQLInjectionAnalyzerEntry anEntry = new SQLInjectionAnalyzerEntry ( ""one"" , ""two"" ) ; anEntry . addStatementCall ( ""one"" , ""two"" ) ; assertEquals ( anEntry , anEntry . getMethod ( ""addStatementCall"" ) ) ; }"
HitType getHitType ( ) { if ( hitType == null ) { hitType = new HitType ( ) ; } return hitType ; }
int getPage ( ) { if ( currentPage <= 0 ) { currentPage = 1 ; } return currentPage ; }
List < Node > unvisitedConnectingNodes ( ) { List < Node > connectingNodes = new ArrayList < Node > ( ) ; for ( int i = 0 ; i < connectingNodes . size ( ) ; i ++ ) { connectingNodes . add ( connectingNodes . get ( i ) ) ; } return connectingNodes ; }
"int getModuleCountInBatchClass ( String batchClassIdentifier ) { LOGGER . info ( ""Batch class identifier : "" + batchClassIdentifier ) ; return moduleDao . getModuleCountInBatchClass ( batchClassIdentifier ) ; }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
ByteArrayOutputStream getByteArrayOutputStream ( ) { if ( outputStream == null ) { outputStream = new ByteArrayOutputStream ( ) ; } return outputStream ; }
"void validateTestSuiteXmlFiles ( File ... directories ) { for ( File directory : directories ) { File testSuiteXmlFile = new File ( directory , ""testsuite.xml"" ) ; if ( ! testSuiteXmlFile . exists ( ) ) { return ; } validateTestSuiteXmlFile ( testSuiteXmlFile ) ; } }"
"void testParseArgs1 ( ) { String [ ] args = { ""-d"" , ""Datenbank"" , ""-h"" , ""127.0.0.1"" , ""-u"" , ""127.0.0.1"" } ; assertEquals ( true , Main . parseArgs ( args ) ) ; }"
OrderBy < T > toUjoOrderBy ( OrderBy < T > cujoOrderBy ) { OrderBy < T > ujoOrderBy = new OrderBy < T > ( cujoOrderBy . getFirst ( ) ) ; for ( T o : cujoOrderBy ) { ujoOrderBy . add ( o ) ; } return ujoOrderBy ; }
"Class < ? extends BloomFilter > getBloomFilterClass ( final long version ) { switch ( version ) { case Version . V1 : return BloomFilter . class ; case Version . V2 : return BloomFilter . class ; case Version . V3 : return BloomFilter . class ; case Version . V4 : return BloomFilter . class ; default : throw new IllegalArgumentException ( ""Unknown Bloom Filter version "" + version ) ; } }"
"boolean isChordal ( ) { for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( getEdge ( i , j ) != null ) { return false ; } } } return true ; }"
GlyfTable getGlyf ( ) { if ( glyfTable == null ) { glyfTable = new GlyfTable ( ) ; } return glyfTable ; }
"T doSwitch ( int classifierID , EObject theEObject ) { switch ( classifierID ) { case SecondarytablePackage . PERSON : { Person person = ( Person ) theEObject ; T result = casePerson ( person ) ; if ( result == null ) result = defaultCase ( theEObject ) ; return result ; } default : return defaultCase ( theEObject ) ; } }"
BarcodeTemplate createBarcodeTemplate ( Barcode barcode ) { BarcodeTemplate template = new BarcodeTemplate ( ) ; template . setBarcode ( barcode ) ; return template ; }
boolean isBlocked ( ) { boolean isBlocked = false ; for ( Runnable task : readyTasks ) { if ( task . isDone ( ) ) { isBlocked = true ; break ; } } return isBlocked ; }
byte [ ] toBytes ( ) { byte [ ] bytes = new byte [ 8 ] ; bytes [ 0 ] = ( byte ) ( sSensorValue . getValue ( ) & 0xFF ) ; bytes [ 1 ] = ( byte ) ( sEventTime . getValue ( ) & 0xFF ) ; bytes [ 2 ] = ( byte ) ( sSensorId . getValue ( ) & 0xFF ) ; bytes [ 3 ] = ( byte ) ( sEventTime . getValue ( ) & 0xFF ) ; bytes [ 4 ] = ( byte ) ( sSensorId . getValue ( ) & 0xFF ) ; return bytes ; }
"int getLockType ( int mode ) { switch ( mode ) { case READ : return LockType . READ ; case WRITE : return LockType . WRITE ; case READ_ONLY : return LockType . READ_ONLY ; case WRITE : return LockType . WRITE ; default : throw new IllegalArgumentException ( ""Unknown mode: "" + mode ) ; } }"
"Edge createEdge ( int sourcePort , int targetPort ) { Edge edge = new Edge ( ) ; edge . sourcePort = sourcePort ; edge . targetPort = targetPort ; return edge ; }"
"String buildComponentName ( String packageName , Class < ? extends AnalyticsReceiver > receiver ) { StringBuilder buf = new StringBuilder ( ) ; buf . append ( packageName ) ; if ( receiver != null ) { buf . append ( '.' ) ; buf . append ( receiver . getName ( ) ) ; } return buf . toString ( ) ; }"
"void addMappingPath ( String path ) { if ( path == null ) { throw new IllegalArgumentException ( ""path is null"" ) ; } if ( ! lockPathList . contains ( path ) ) { lockPathList . add ( path ) ; } }"
MotorPort getPort ( String portId ) { for ( MotorPort port : ports ) { if ( port . getId ( ) . equals ( portId ) ) { return port ; } } return null ; }
"int getHammingDistance ( String s , String t ) { int h = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != t . charAt ( i ) ) { h ++ ; } } return h ; }"
"void saveAnnonceListToJsonFile ( List < Annonce > annonceList , File annonceFile ) { BufferedWriter writer = new BufferedWriter ( new FileWriter ( annonceFile ) ) ; for ( Annonce annonce : annonceList ) { writer . write ( annonce . toString ( ) + "" "" ) ; writer . newLine ( ) ; } writer . close ( ) ; }"
int getNumberOfQuarters ( ) { int sum = 0 ; for ( int i = 0 ; i < quarters . length ; i ++ ) { sum += quarters [ i ] . getNumberOfQuarters ( ) ; } return sum ; }
"long getLong ( String value , long defval ) { try { return Long . valueOf ( value ) ; } catch ( Exception e ) { return defval ; } }"
ConfigWriter getInstance ( ) { if ( instance == null ) { instance = new ConfigWriter ( ) ; } return instance ; }
ArrayList < Polygon > getUnpickablePolygons ( ) { ArrayList < Polygon > unpickablePolygons = new ArrayList < Polygon > ( ) ; for ( int i = 0 ; i < pickablePolygons . size ( ) ; i ++ ) { if ( ! pickablePolygons . get ( i ) . isPickable ( ) ) { unpickablePolygons . add ( pickablePolygons . get ( i ) ) ; } } return unpickablePolygons ; }
ScriptEngine createNewEngine ( Context context ) { ScriptEngine engine = new ScriptEngineImpl ( ) ; engine . setApplicationContext ( context ) ; return engine ; }
"void addError ( final Level level , final String message ) { final List < String > list = getErrorList ( level ) ; if ( list == null ) { list = new ArrayList < > ( ) ; } list . add ( message ) ; }"
"List < T > mergeIntoList ( final T [ ] left , final T [ ] right ) { final List < T > result = new ArrayList < T > ( left . length + right . length ) ; for ( int i = 0 ; i < left . length ; i ++ ) { if ( left [ i ] != null && left [ i ] . equals ( right [ i ] ) ) { result . add ( left [ i ] ) ; } } return result ; }"
void decrementQuantity ( ) { if ( _product . getQuantity ( ) > 0 ) { _product . setQuantity ( _product . getQuantity ( ) - 1 ) ; } else { _product . setQuantity ( _product . getQuantity ( ) * - 1 ) ; } }
boolean isDragOk ( final DropTargetDragEvent evt ) { boolean ok = false ; final DataFlavor [ ] flavors = evt . getCurrentDataFlavors ( ) ; for ( int i = 0 ; i < flavors . length ; i ++ ) { if ( flavors [ i ] instanceof FileListFlavor ) { ok = ( ( FileListFlavor ) flavors [ i ] ) . isFileList ( ) ; } } return ok ; }
void computeOutput ( ) { for ( int i = 0 ; i < neurons . length ; i ++ ) neurons [ i ] . computeOutput ( ) ; }
"double paretoDistributedDouble ( ) { double sum = 0 ; for ( int i = 0 ; i < dimensions ; i ++ ) { sum += Math . pow ( dimensions [ i ] , 2 ) ; } return sum / dimensions ; }"
"void readHeaders ( byte [ ] b , int offset , int length ) { for ( int i = 0 ; i < length ; i ++ ) { byte b1 = b [ offset + i ] ; int b2 = b [ offset + 1 ] ; int b3 = b [ offset + 2 ] ; int b4 = b [ offset + 3 ] ; int b5 = b [ offset + 4 ] ; int b6 = b [ offset + 5 ] ; readHeader ( b1 , b2 , b3 , b4 ) ; } }"
"int [ ] ensureCapacity ( int additionalCapacity ) { int sizeNeeded = size + additionalCapacity ; if ( sizeNeeded >= items . length ) resize ( Math . max ( 8 , sizeNeeded ) ) ; return items ; }"
int setValues ( float [ ] values ) { int valueCount = 0 ; for ( int i = 0 ; i < values . length ; i ++ ) { if ( values [ i ] == null ) { values [ i ] = values [ i ] ; } else { values [ i ] . set ( values [ i ] ) ; valueCount ++ ; } } return valueCount ; }
RegisteredSnapshotCategories getInstance ( ) { if ( instance == null ) { synchronized ( RegisteredSnapshotCategories . class ) { if ( instance == null ) { instance = new RegisteredSnapshotCategories ( ) ; } } } return instance ; }
"String getString ( String param ) { try { String s = ( String ) map . get ( param ) ; return s ; } catch ( Exception e ) { LOGGER . log ( Level . FINEST , ""Returning null. Reason: "" + param + "" value is not a String."" ) ; return null ; } }"
void auditTrace ( String msg ) { defaultLog . trace ( msg ) ; if ( traceOn ) { traceLog . trace ( msg ) ; } }
"double computeScore ( ) { String format = parameters . get ( ""$format"" ) ; if ( format == null ) { return 0.0 ; } return Double . parseDouble ( format ) ; }"
"URL getBootURL ( ) { if ( bootURL == null ) { String bootURL = System . getProperty ( ""java.io.boot"" ) ; if ( bootURL != null ) { bootURL = new URL ( bootURL ) ; } } return bootURL ; }"
"void notifyCallEvent ( Call call , CallEvent event ) { if ( callObserverMap . containsKey ( call ) ) { callObserverMap . get ( call ) . onCallEvent ( event ) ; } callObserverMap . get ( call ) . onCallEvent ( event ) ; }"
byte [ ] randomData ( int len ) { byte [ ] data = new byte [ len ] ; Random r = new Random ( ) ; for ( int i = 0 ; i < len ; i ++ ) { r . nextBytes ( data ) ; } return data ; }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
int getItemBallCatchPokemon ( Pokemon pokemon ) { int i = 0 ; for ( Item ball : itemBalls ) { if ( ball . pokemon == pokemon ) { i ++ ; } } return i ; }
void setDirectBufLimit ( int directBufLimit ) { compressedDirectBufLimit = directBufLimit ; compressedDirectBuf . position ( directBufLimit ) ; compressedDirectBuf . limit ( directBufLimit ) ; }
"PieceType getPieceType ( int row , int col ) { for ( PieceType pieceType : pieceTypes ) { if ( pieceType . isValid ( row , col ) ) { return pieceType ; } } return UNKNOWN ; }"
boolean isStyleName ( String name ) { if ( name == null ) { return false ; } for ( int i = 0 ; i < name . length ( ) ; i ++ ) { char ch = name . charAt ( i ) ; if ( ( ch >= 'A' && ch <= 'Z' ) || ( ch >= 'a' && ch <= 'z' ) || ( ch >= '0' && ch <= '9' ) ) { return false ; } } return true ; }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
"char [ ] getPassword ( ) { char [ ] ret = new char [ password . length ] ; System . arraycopy ( password , 0 , ret , 0 , password . length ) ; return ret ; }"
"void initializeFromXml ( String xmlFileName ) { if ( regionMetadata == null ) { regionMetadata = new RegionMetadata ( ) ; } try { regionMetadata . loadFromXml ( new FileInputStream ( xmlFileName ) ) ; } catch ( IOException e ) { throw new AmazonClientException ( ""Error parsing region metadata from XML file "" + xmlFileName , e ) ; } }"
"void pressKey ( Context context , int keyCode ) { SWTBotShell shell = new SWTBotShell ( context ) ; shell . pressKey ( keyCode ) ; }"
Date getDate ( ) { if ( time == null ) { return null ; } return new Date ( time . getTime ( ) ) ; }
"void testNettyInAction ( ) { try ( OutputStream os = new FileOutputStream ( ""netty-action.txt"" ) ) { NettyInAction action = new NettyInAction ( os ) ; Assert . assertTrue ( action . canExecute ( ) ) ; } catch ( Exception e ) { fail ( e . getMessage ( ) ) ; } }"
"Response listResourceSets ( ) { List < ResourceSet > resourceSets = em . createNamedQuery ( ""ResourceSet.findAll"" , ResourceSet . class ) . getResultList ( ) ; return Response . ok ( resourceSets ) . build ( ) ; }"
"int encodeInt ( int value , byte [ ] buffer , int start , int count ) { buffer [ start ++ ] = ( byte ) ( ( value >>> 24 ) & 0xff ) ; buffer [ start ++ ] = ( byte ) ( ( value >>> 16 ) & 0xff ) ; buffer [ start ++ ] = ( byte ) ( ( value >>> 8 ) & 0xff ) ; buffer [ start ++ ] = ( byte ) ( ( value >>> 0 ) & 0xff ) ; buffer [ count ++ ] = ( byte ) ( ( value >>> 8 ) & 0xff ) ; return count ; }"
"String getPackageName ( String className ) { int lastDot = className . lastIndexOf ( '.' ) ; if ( lastDot >= 0 ) { return className . substring ( 0 , lastDot ) ; } else { return """" ; } }"
"File getDependencyFile ( MavenDependencies dependencies , String dependencyId ) { File file = dependencies . getDependencyFile ( dependencyId ) ; if ( file == null ) { file = dependencies . getPluginDependencyFile ( dependencyId ) ; if ( file == null ) { file = dependencies . getDependencyFile ( dependencyId ) ; } } return file ; }"
double getAvgAvgIV ( ) { if ( ivs . size ( ) == 0 ) { return 0 ; } double avg = 0 ; for ( int i = 0 ; i < ivs . size ( ) ; i ++ ) { avg += ivs . get ( i ) ; } avg = avg / ivs . size ( ) ; return ( avg / ivs . size ( ) ) ; }
"void verifyRawPublicKey ( String message , PublicKey publicKey ) { try { CertificateUtils . verifyPublicKey ( message , publicKey ) ; } catch ( CertificateEncodingException e ) { fail ( e . getMessage ( ) ) ; } }"
String escapePatterns ( final String s ) { if ( s == null ) { return null ; } final StringBuffer sb = new StringBuffer ( s . length ( ) ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { final char c = s . charAt ( i ) ; if ( c == 'T' || c == 'S' ) { sb . append ( '|' ) ; } else { sb . append ( c ) ; } } return sb . toString ( ) ; }
"String hexEncode ( byte [ ] b ) { char [ ] ret = new char [ b . length * 2 ] ; for ( int i = 0 , j = 0 ; i < b . length ; i ++ ) { ret [ j ++ ] = HEX_CHARS [ ( b [ i ] >> 4 ) & 0x0F ] ; ret [ j ++ ] = HEX_CHARS [ b [ i ] & 0x0F ] ; } return new String ( ret ) ; }"
"List < String > getItemRemoveScripts ( ) { List < String > scripts = new ArrayList < String > ( ) ; scripts . add ( ""DELETE FROM JCR_ITEM FK "" ) ; scripts . add ( ""DELETE FROM JCR_ITEM FK"" ) ; scripts . add ( ""DELETE FROM JCR_ITEM FK"" ) ; return scripts ; }"
List < Document > filterDocuments ( Query query ) { List < Document > filteredDocuments = new ArrayList < Document > ( ) ; for ( Document d : documents ) { if ( d != null ) { filteredDocuments . add ( d ) ; } } return filteredDocuments ; }
"String toString ( final ParsedVersion parsedVersion ) { if ( parsedVersion == null ) { return """" ; } else { return parsedVersion . major + ""."" + parsedVersion . minor ; } }"
"void handleAuthenticationRequest ( final HttpServletRequest request , final HttpServletResponse response ) { if ( request . getMethod ( ) . equals ( ""POST"" ) || request . getMethod ( ) . equals ( ""PUT"" ) || request . getMethod ( ) . equals ( ""DELETE"" ) || request . getMethod ( ) . equals ( ""DELETE"" ) ) { return ; } final Credentials credentials = request . getSession ( ) . getAttribute ( ""Credentials"" ) ; if ( credentials == null ) { throw new NoSuchCredentialsException ( ""Authentication request failed"" ) ; } }"
"void bindContractParameters ( String contractName , Map < String , Object > parameters ) { contractName = contractName . toLowerCase ( ) ; parameters . put ( ""firstName"" , contractName ) ; parameters . put ( ""lastName"" , contractName ) ; for ( Map . Entry < String , Object > entry : parameters . entrySet ( ) ) { bindParameter ( contractName , entry . getKey ( ) , entry . getValue ( ) ) ; } }"
"CRL getCRLWithValidityPeriod ( ) { if ( validityPeriod == null ) { return null ; } return new CRL ( crl , validityPeriod ) ; }"
"void postProcess ( final BatchInstanceID batchInstanceID , String pluginWorkflow ) { Assert . notNull ( batchInstanceID ) ; final String batchInstanceIdentifier = batchInstanceID . getID ( ) ; BackUpFileService . backUpBatch ( batchInstanceIdentifier , pluginWorkflow , batchInstanceService . getSystemFolderForBatchInstanceId ( batchInstanceIdentifier ) ) ; }"
int getNumberOfNodes ( ) { int totalNodes = 0 ; for ( Iterator iter = grafo . keySet ( ) . iterator ( ) ; iter . hasNext ( ) ; ) { Map . Entry e = ( Map . Entry ) iter . next ( ) ; if ( grafo . get ( e . getKey ( ) ) . size ( ) > totalNodes ) { totalNodes ++ ; } } return totalNodes ; }
"void buildDecoratorFigure ( ) { Figure figure = new Figure ( ) ; FigureBuilder builder = new FigureBuilder ( ) ; Figure parent = builder . build ( ) ; Figure [ ] children = parent . getChildren ( ) ; for ( int i = 0 ; i < children . length ; i ++ ) { Figure child = children [ i ] ; buildDecoratorFigure ( child , figure ) ; } }"
"String generateEmail ( ) { SimpleDateFormat sdf = new SimpleDateFormat ( ""yyyyMMddHHmmssSSS"" ) ; String email = sdf . format ( new Date ( ) ) ; return email ; }"
"void testRedirectReadTimeout ( ) { startSingleTemporaryRedirectResponseThread ( true ) ; try { fs . getFileChecksum ( new Path ( ""/file"" ) ) ; fail ( ""expected timeout"" ) ; } catch ( SocketTimeoutException e ) { assertEquals ( ""Read timed out"" , e . getMessage ( ) ) ; } }"
Iterable < Track > findTracks ( Predicate < ? super Track > predicate ) { return new Iterable < Track > ( ) { @ Override public Iterator < Track > iterator ( ) { return predicate . evaluate ( track ) ; } } ; }
"void removeListener ( Listener listener ) { if ( listener == null ) throw new NullPointerException ( ""Listener cannot be null."" ) ; listeners . remove ( listener ) ; }"
"MessagesBundle getMessageBundle ( ) { if ( messageBundle == null ) { try { messageBundle = ResourceBundle . getBundle ( MESSAGE_BUNDLE_PATH , Locale . getDefault ( ) ) ; } catch ( MissingResourceException e ) { messageBundle = ResourceBundle . getBundle ( MESSAGE_BUNDLE_PATH , Locale . getDefault ( ) ) ; } } return messageBundle ; }"
"void setKerberosDebug ( final String kerberosDebug ) { if ( StringUtils . isNotBlank ( kerberosDebug ) ) { logger . debug ( ""kerberosDebug is set to : {}"" , kerberosDebug ) ; System . setProperty ( SYS_PROP_KERBEROS_DEBUG , kerberosDebug ) ; } }"
void addQueryCriterium ( QueryCriterium qc ) { if ( queryCriteriums == null ) queryCriteriums = new ArrayList < QueryCriterium > ( ) ; queryCriteriums . add ( qc ) ; }
"Iterable < K > keysWithValue ( V value ) { List < K > keys = new ArrayList < K > ( ) ; for ( Map . Entry < K , V > entry : map . entrySet ( ) ) { if ( entry . getValue ( ) == value ) { keys . add ( entry . getKey ( ) ) ; } } return keys ; }"
Trie traverseTrieBefore ( TrieNode node ) { if ( node == null ) return null ; if ( node . parent == null ) return null ; if ( node . parent . equals ( node ) ) return traverseTrieBefore ( node . left ) ; else if ( node . parent . equals ( node ) ) return traverseTrieBefore ( node . right ) ; else return null ; }
void garbageCollect ( ) { for ( int i = 0 ; i < 10000 ; i ++ ) { try { Thread . sleep ( 100 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } } while ( true ) { try { Thread . sleep ( 100 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } } }
void updateLinks ( ) { if ( parent != null ) { parent . updateLinks ( ) ; } if ( replacement != null ) { replacement . updateLinks ( ) ; } if ( root != null ) { root . updateLinks ( ) ; } }
"void sortList ( ) { if ( sortOrder == null ) { sortOrder = new Comparator < Object > ( ) { public int compare ( Object o1 , Object o2 ) { return o1 . compareTo ( o2 ) ; } } ; } sortOrder = new Comparator < Object > ( ) { public int compare ( Object o1 , Object o2 ) { return o1 . compareTo ( o2 ) ; } } ; sort ( sortOrder ) ; }"
void performNormalized ( double [ ] points ) { for ( int i = 0 ; i < points . length ; i ++ ) { points [ i ] *= ( 1.0 - points [ i ] ) ; } for ( int i = 0 ; i < points . length ; i ++ ) { points [ i ] *= ( 1.0 - points [ i ] ) ; } for ( int i = 0 ; i < points . length ; i ++ ) { points [ i ] /= ( 1.0 - points [ i ] ) ; } }
"void applyNormalisation ( Item item , ItemNormalisation normalisation , Item parentItem ) { item . applyNormalisation ( normalisation , parentItem ) ; item . setNormalisation ( normalisation , parentItem ) ; }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < args . length ; i ++ ) { if ( i > 0 ) { sb . append ( "" "" ) ; } sb . append ( args [ i ] ) ; } return sb . toString ( ) ; }"
"SortedSet < KeyValuePair < K , V >> fromProperties ( Properties properties ) { SortedSet < KeyValuePair < K , V >> entries = new TreeSet < KeyValuePair < K , V >> ( ) ; for ( Map . Entry < K , V > entry : properties . entrySet ( ) ) { entries . add ( new KeyValuePair < K , V > ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return entries ; }"
List < SearchResultRow > searchRecords ( SolrQueryRequest searchRecordsRequest ) { SolrQuery solrQuery = getSearchSolrQuery ( searchRecordsRequest ) ; SolrResponse solrResponse = solrQuery . execute ( ) ; List < SearchResultRow > results = new ArrayList < SearchResultRow > ( ) ; for ( SearchResultRow row : solrResponse . getResults ( ) ) { results . add ( row ) ; } return results ; }
Collection < OSMetric > almostSimilar ( Collection < OSMetric > input ) { Collection < OSMetric > result = new ArrayList < OSMetric > ( ) ; for ( OSMetric osMetric : input ) { if ( osMetric . isSimilar ( ) ) { result . add ( osMetric ) ; } } return result ; }
"void testParseInt ( ) { String input = ""$"" ; try { Integer . parseInt ( input ) ; } catch ( NumberFormatException e ) { } }"
int calculateBucketsPerElement ( BitSet buckets ) { int bucketCount = 0 ; for ( int i = 0 ; i < buckets . length ( ) ; i ++ ) { bucketCount += buckets . get ( i ) ; } return bucketCount ; }
boolean isServiceLevelAvailable ( ) { try { return d_ISWbemServiceProxy . isServiceLevelAvailable ( ) ; } catch ( com . linar . jintegra . AutomationException automationException ) { automationException . fillInStackTrace ( ) ; throw automationException ; } }
"double [ ] homogeneVector ( double [ ] x , double [ ] y ) { double [ ] z = new double [ x . length ] ; for ( int i = 0 ; i < x . length ; i ++ ) { z [ i ] = x [ i ] ; } for ( int i = 0 ; i < y . length ; i ++ ) { z [ i ] = y [ i ] ; } return z ; }"
"void putTicketGrantingTicket ( final TicketGrantingTicket ticket ) { requestScopes . put ( ""ticketGrantingTicket"" , ticket ) ; flowScopes . put ( ""ticketGrantingTicket"" , ticket ) ; }"
"List < RoleRepresentation > getRoles ( ) { auth . requireView ( ) ; Set < RoleModel > roles = scopedClient . getRoles ( ) ; return ScopeMappedResource . getRoles ( scopeContainer , client ) ; }"
"void handleNPC ( final NPC pc ) { logger . info ( ""NPC: "" + pc . toString ( ) ) ; if ( ! processNPC ( pc ) ) { logger . info ( ""Not found NPC: "" + pc . toString ( ) ) ; return ; } processNPC ( pc . getName ( ) ) ; }"
"void startBackUp ( ) { try { start ( ) ; } catch ( IOException e ) { logger . error ( ""Failed to start zookeeper back up on port {}"" , e . getMessage ( ) ) ; } catch ( IOException e ) { logger . error ( ""Failed to start zookeeper back up on port {}"" , e . getMessage ( ) ) ; } }"
"void calcSCCs ( Graph graph , Result result , boolean disjoint ) { result . setDisjoint ( disjoint ) ; calcSCCs ( graph , result ) ; }"
int calculateColumnAndLineNumber ( String line ) { int column = 0 ; for ( int i = 0 ; i < line . length ( ) ; i ++ ) { if ( line . charAt ( i ) == '|n' ) { column ++ ; } else if ( line . charAt ( i ) == '|r' ) { line ++ ; } } return column ; }
"ReplicationStatus getLatestReplicationStatus ( FileSystem fs , Path path ) { for ( ReplicationStatus replicationStatus : getReplicationStatuses ( fs , path ) ) { if ( replicationStatus . status ( ) != null && replicationStatus . status ( ) . value ( ) . equals ( ""LATEST"" ) ) { return replicationStatus ; } } return null ; }"
"String getRequiredParameter ( HttpServletRequest request , String parameterName ) { if ( request . getParameter ( parameterName ) != null ) { return request . getParameter ( parameterName ) ; } return null ; }"
"void connectFailed ( Route failedRoute , IOException failure ) { routeSelector . connectFailed ( route , failedRoute ) ; routeSelector . connectFailed ( route , failure ) ; }"
"String getClaimDialect ( ) { String result = getClaimDialect ( ) ; if ( result == null ) { result = getClaimDialect ( ) ; if ( result . length ( ) > 0 ) { result = result . substring ( 0 , result . length ( ) - 1 ) ; } } return result ; }"
boolean [ ] readBoolean1D ( ) { int n = StdIn . readInt ( ) ; boolean [ ] a = new boolean [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = StdIn . readBoolean ( ) ; } return a ; }
boolean showSummary ( boolean [ ] summary ) { for ( boolean b : summary ) { if ( b ) { return true ; } } return false ; }
Bitmap getBitmapByUrl ( String imageUrl ) { URL url = new URL ( imageUrl ) ; Bitmap bitmap = null ; try { bitmap = BitmapFactory . decodeStream ( url . openStream ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return bitmap ; }
void notifyError ( final Exception exception ) { mHandler . post ( new Runnable ( ) { @ Override public void run ( ) { onViewError ( exception ) ; } } ) ; }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
"String getImplementationVersion ( ) { if ( version == null ) { version = ""0.0.0"" ; } return version ; }"
"String formatPCode ( int pCode ) { switch ( pCode ) { case 0 : return ""0"" ; case 1 : return ""1"" ; case 2 : return ""2"" ; case 3 : return ""3"" ; case 4 : return ""4"" ; case 5 : return ""5"" ; case 6 : return ""6"" ; case 7 : return ""7"" ; case 8 : return ""8"" ; default : return ""0"" ; } }"
int compareTo ( Passenger p1 ) { if ( comfortLevel < p1 . comfortLevel ) { return comfortLevel ; } else if ( comfortLevel > p2 . comfortLevel ) { return comfortLevel ; } else if ( comfortLevel < p1 . comfortLevel ) { return count - p1 . comfortLevel ; } else { return count ; } }
"List searchCallBackWorkFlow ( CallBackWorkFlowVO object1 , int lowerBound , int upperBound ) { ArrayList arrayList = new ArrayList ( ) ; CallBackWorkFlowDAO callBackDAO = new CallBackWorkFlowDAO ( ) ; arrayList = ( ArrayList ) callBackDAO . searchCallBackWorkFlow ( object1 , lowerBound , upperBound ) ; return arrayList ; }"
Rectangle2D getBounds2D ( ) { if ( bounds == null ) computeBounds ( ) ; return bounds ; }
"byte [ ] encodeHex ( final byte [ ] in , int offset , int len ) { byte [ ] out = new byte [ len ] ; for ( int i = offset ; i < len ; i ++ ) { out [ i ] = ( byte ) ( in [ i ] & 0xff ) ; } return out ; }"
void testHashCode ( ) { StandardXYToolTipGenerator g1 = new StandardXYToolTipGenerator ( ) ; StandardXYToolTipGenerator g2 = new StandardXYToolTipGenerator ( ) ; assertTrue ( g1 . equals ( g2 ) ) ; assertTrue ( g1 . hashCode ( ) == g2 . hashCode ( ) ) ; }
"Trade adaptTrade ( BTCChinaTrade BTCChinaTrade , CurrencyPair currencyPair ) { BigDecimal amount = BTCChinaAdapters . adaptAmount ( BTCChinaTrade . getAmount ( ) , currencyPair ) ; BigDecimal price = BTCChinaAdapters . adaptPrice ( BTCChinaTrade . getPrice ( ) , currencyPair ) ; Date date = DateUtils . fromMillisUtc ( BTCChinaTrade . getDate ( ) * 1000L ) ; return new Trade ( null , amount , price , date , BTCChinaTrade . getTid ( ) , BTCChinaTrade . getTid ( ) ) ; }"
boolean tryLock ( int version ) { try { lock . readLock ( ) . lock ( version ) ; return true ; } finally { lock . readLock ( ) . unlock ( ) ; } }
void removeArticle ( Article article ) { if ( article == null ) { return ; } articles . remove ( article ) ; }
void safeFireAndForget ( final Object ... objects ) { final AsyncBean < Object > asyncBean = new AsyncBean < Object > ( ) ; for ( final Object object : objects ) { if ( asyncBean . isDone ( ) ) { asyncBean . complete ( ) ; } else { asyncBean . complete ( ) ; } } }
"BigInteger unsignedValue ( BigInteger b ) { if ( b . bitLength ( ) == 0 ) { return BigInteger . ZERO ; } else { byte [ ] bytes = new byte [ b . bitLength ( ) ] ; for ( int i = 0 ; i < b . bitLength ( ) ; i ++ ) { bytes [ i ] = b . byteAt ( i ) ; } return new BigInteger ( bytes , 0 , bytes . length ) ; } }"
"boolean containsLEX ( int [ ] itemset1 , int [ ] itemset2 ) { for ( int i = 0 ; i < itemset1 . length ; i ++ ) { if ( itemset1 [ i ] < itemset2 [ i ] ) { return false ; } else if ( itemset1 [ i ] > itemset2 [ i ] ) { return false ; } } return true ; }"
"ServiceManager getService ( ) { ServiceManager serviceManager = getServiceManager ( ) ; Service service = serviceManager . getService ( SERVICE_PATH ) ; if ( service == null ) { service = new ServiceManager ( ) ; serviceManager . getService ( SERVICE_PATH , service ) ; } return service ; }"
"String getMimeType ( String extension , String defaultValue ) { if ( extension == null ) { return defaultValue ; } String [ ] extensions = extension . split ( "","" ) ; for ( int i = 0 ; i < extensions . length ; i ++ ) { String extension = extensions [ i ] ; if ( extension . length ( ) > 0 ) { return extension . substring ( 0 , extension . length ( ) - 1 ) ; } } return defaultValue ; }"
"void testCreateCriterionForExcludedUnitNodeBid ( ) { Criterion criterion = Criteria . createBidCriterionForExcludedUnitNode ( UNIT_NODE ) ; assertThat ( criterion . getValue ( ) , is ( 0L ) ) ; assertThat ( criterion . getValue ( ) , is ( 0L ) ) ; }"
"void addEventListener ( final String a_eventName , final GeneticEventListener a_eventListenerToAdd ) { List eventListeners = ( List ) m_listeners . get ( a_eventName ) ; if ( eventListeners == null ) { eventListeners = new ArrayList ( ) ; m_listeners . put ( a_eventName , eventListeners ) ; } eventListeners . add ( a_eventListenerToAdd ) ; }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
void advanceToNextSample ( ) { currentSample ++ ; if ( currentSample >= numSamples ) { currentSample = 0 ; } if ( currentSample < numSamples ) { currentSample += numSamples ; } if ( currentSample >= numSamples ) { currentSample = 0 ; } if ( currentSample < numSamples ) { currentSample += numSamples ; } if ( currentSample >= numSamples ) { currentSample = 0 ; } }
"SimpleGeocode convertSimpleGeocode ( Geocode geocode ) { if ( geocode == null ) throw new NullPointerException ( ""geocode"" ) ; return new SimpleGeocode ( geocode ) ; }"
"boolean isContinentUnderControl ( Player player , Continent continent ) { for ( int i = 0 ; i < continent . getCountryIds ( ) . size ( ) ; i ++ ) { Country country = ( Country ) continent . getCountryIds ( ) . get ( i ) ; if ( country . isContinentUnderControl ( player ) ) { return true ; } } return false ; }"
void setDefaultSolenoidModuleLocation ( String moduleLocation ) { checkSolenoidModuleLocation ( moduleLocation ) ; defaultSolenoidModuleLocation = moduleLocation ; }
DateTime getModifiedDate ( ) { if ( modifiedDate == null ) { return null ; } return new DateTime ( modifiedDate . getTime ( ) ) ; }
"JSONObject buildRecipient ( ) { JSONObject recipient = new JSONObject ( ) ; recipient . put ( ""type"" , ""recipient"" ) ; recipient . put ( ""from"" , from ) ; recipient . put ( ""to"" , to ) ; recipient . put ( ""subject"" , subject ) ; recipient . put ( ""subject-id"" , subject_id ) ; recipient . put ( ""message-id"" , message_id ) ; return recipient ; }"
TypeType getType ( ) { if ( type == null ) { return TypeType . STRING ; } else { return type ; } }
"T isInstanceOf ( Object anObject , Class < T > aClass ) { if ( anObject == null ) return null ; Class < ? > objectClass = anObject . getClass ( ) ; if ( ! aClass . isAssignableFrom ( objectClass ) ) return null ; return ( T ) anObject ; }"
int readUShort ( ) { int b1 = read ( ) ; int b2 = read ( ) ; return ( b1 << 8 ) + b2 ; }
int getNumPairs ( ) { int numberOfPairs = 0 ; for ( int i = 0 ; i < pairs . length ; i ++ ) { if ( pairs [ i ] != null ) numberOfPairs ++ ; } return numberOfPairs ; }
int readInstruction ( ) { int i ; for ( i = 0 ; i < in . length ( ) ; i ++ ) { if ( in . charAt ( i ) == '#' || in . charAt ( i ) == '|n' || in . charAt ( i ) == '|r' ) { break ; } } return i ; }
boolean isServiceDefined ( String serviceName ) { for ( OperationalString service : getServiceList ( ) ) { if ( service . getName ( ) . equals ( serviceName ) ) { return true ; } } return false ; }
byte [ ] intToBytes ( int value ) { byte [ ] result = new byte [ 4 ] ; result [ 0 ] = ( byte ) ( value >>> 24 ) ; result [ 1 ] = ( byte ) ( value >>> 16 ) ; result [ 2 ] = ( byte ) ( value >>> 8 ) ; result [ 3 ] = ( byte ) ( value ) ; return result ; }
"void logJvm ( ) { try { ManagementFactory . getRuntimeMXBean ( ) . getThreadMXBean ( ) . getThreadMXBean ( ) . getName ( ) ; } catch ( Throwable t ) { LOG . info ( ""No running JVM found. Please retry !"" , t ) ; } }"
LocalDate toLocalDate ( XMLGregorianCalendar date ) { if ( date == null ) { return null ; } else { return date . toLocalDate ( ) ; } }
FileList getFileList ( ) { FileList list = new FileList ( ) ; for ( int i = 0 ; i < files . size ( ) ; i ++ ) { if ( files . get ( i ) . isFile ( ) ) { list . addFile ( files . get ( i ) ) ; } else { list . addFile ( files . get ( i ) ) ; } } return list ; }
"long getLong ( String param , long def ) { String val = get ( param ) ; try { return val == null ? def : Long . parseLong ( val ) ; } catch ( Exception ex ) { throw new SolrException ( SolrException . ErrorCode . BAD_REQUEST , ex . getMessage ( ) , ex ) ; } }"
void setBackButtonEnabled ( boolean enabled ) { if ( enabled ) { backButton . setEnabled ( enabled ) ; } else { backButton . setEnabled ( false ) ; } }
URI toURI ( String path ) { if ( path == null ) { return null ; } try { return new URI ( path ) ; } catch ( URISyntaxException e ) { return null ; } }
"ColumnSchema getColumnSchema ( Table table , String columnName ) { ColumnSchema columnSchema = table . getColumnSchema ( columnName ) ; if ( columnSchema == null ) { columnSchema = bigquery . getColumnSchema ( columnName ) ; } if ( columnSchema == null ) { columnSchema = bigquery . getColumnSchema ( columnName ) ; } return columnSchema ; }"
"Matcher < Object > nameValue ( final String name , final Object value ) { return new Predicate < Object > ( ) { @ Override public boolean apply ( Object object ) { return value . toString ( ) . equals ( name ) ; } @ Override public String toString ( ) { return value . toString ( ) ; } } ; }"
"File getConfigurationRoot ( ) { if ( configurationRoot == null ) { configurationRoot = new File ( System . getProperty ( ""user.dir"" ) ) ; } return configurationRoot ; }"
void resetUsage ( ) { totalMemoryUsage = 0 ; freeMemoryUsage = 0 ; }
int hashCode ( ) { int retval = 0 ; if ( iv != null ) { for ( int i = 0 ; i < iv . length ; i ++ ) { retval += iv [ i ] * i ; } } return ( retval ) ; }
void openEnterAmount ( ) { PowerManager pm = ( PowerManager ) mContext . getSystemService ( Context . POWER_SERVICE ) ; try { pm . open ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
boolean isRemotaExcluida ( String remota ) { for ( int i = 0 ; i < remotaList . size ( ) ; i ++ ) { if ( remotaList . get ( i ) . getName ( ) . equals ( remota ) ) { return true ; } } return false ; }
boolean isInteger ( String s ) { try { Integer . parseInt ( s ) ; return true ; } catch ( NumberFormatException e ) { return false ; } }
"MeasureVariations [ ] getMeasureVariations ( ) { MeasureVariations [ ] variations = new MeasureVariations [ values . length ] ; System . arraycopy ( values , 0 , variations , 0 , values . length ) ; return variations ; }"
"void onListViewItemClick ( ListView < ? > listView , View view , int position ) { if ( listView . getSelectionModel ( ) . getSelectedIndex ( ) == position ) { onClick ( listView . getSelectionModel ( ) . getSelectedIndex ( ) ) ; } else if ( listView . getSelectionModel ( ) . getSelectionModel ( ) . getSelectedIndex ( ) == position ) { onClick ( listView . getSelectionModel ( ) . getSelectedIndex ( ) ) ; } }"
Command getCommand ( String commandLine ) { Command command = new Command ( commandLine ) ; return command . execute ( ) ; }
Iterator < RendererTypeEntry > getRendererTypes ( String componentFamily ) { Iterator < RendererTypeEntry > entries = _componentFamilies . get ( componentFamily ) ; if ( entries == null ) { return Collections . EMPTY_LIST . iterator ( ) ; } else { return entries . iterator ( ) ; } }
Customer getCustomer ( int id ) { for ( Customer c : customers ) { if ( c . getId ( ) == id ) { return c ; } } return null ; }
"void testPriorityOverOriginals ( ) { props . put ( ""defaultPriority"" , ""2"" ) ; props . put ( ""defaultPriority"" , ""3"" ) ; props . put ( ""defaultPriority"" , ""4"" ) ; props . put ( ""defaultPriority"" , ""5"" ) ; props . put ( ""defaultPriority"" , ""6"" ) ; assertEquals ( ""3"" , props . getPriority ( ) ) ; }"
void onSuccess ( StreamState state ) { if ( state . succeededOnStreamIn ( ) && state . succeededOnStreamOut ( ) ) { initiator . onSuccess ( state . initiator ) ; } else { initiator . onFailure ( null ) ; } }
Builder bySlaveHosts ( Iterable < String > slaveHosts ) { requireNonNull ( slaveHosts ) ; return new Builder ( query . deepCopy ( ) . setSlaveHosts ( ImmutableSet . copyOf ( slaveHosts ) ) ) ; }
boolean hasCredentials ( ) { if ( deviceId == null || username == null || password == null ) { return false ; } return deviceId . length ( ) > 0 && username . length ( ) > 0 && username . length ( ) > 0 && password . length ( ) > 0 ; }
javax . management . MBeanConstructorInfo [ ] convertConstructorSignature ( javax . management . MBeanConstructorInfo [ ] m ) { if ( m == null ) { return null ; } javax . management . MBeanConstructorInfo [ ] ret = new javax . management . MBeanConstructorInfo [ m . length ] ; for ( int i = 0 ; i < m . length ; i ++ ) { ret [ i ] = convertJMXSignature ( m [ i ] ) ; } return ret ; }
"BufferedReader createReader ( String filename ) { try { return new BufferedReader ( new InputStreamReader ( new FileInputStream ( filename ) , ""UTF-8"" ) ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }"
"void addItem ( Item item ) { removedItems . put ( item . getId ( ) , item ) ; removedItems . remove ( item . getId ( ) ) ; }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
"void linkHdfName ( String src , String dest ) { if ( hdfptr == 0 ) throw new NullPointerException ( ""HDF is closed."" ) ; if ( dest == null ) throw new NullPointerException ( ""HDF is closed."" ) ; if ( src == null ) throw new NullPointerException ( ""HDF is null."" ) ; if ( hdfptr == 0 ) throw new NullPointerException ( ""HDF is null."" ) ; linkHdfName ( src , dest , hdfptr ) ; }"
void performTransformations ( ) { for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { fieldTransformations [ i ] [ j ] = fieldTransformations [ i ] [ j ] ; } } }
ByteBuffer createByteBuffer ( final int capacity ) { final ByteBuffer buffer = ByteBuffer . allocate ( capacity ) ; buffer . order ( ByteOrder . nativeOrder ( ) ) ; return buffer ; }
BigInteger getFactorial ( int n ) { BigInteger fact = BigInteger . ONE ; for ( int i = 1 ; i <= n ; i ++ ) { fact = fact . multiply ( new BigInteger ( Integer . toString ( i ) ) ) ; } return fact ; }
"void addTrailer ( String key , String value ) { if ( responseTrailer == null ) { responseTrailer = new MessageTrailer ( ) ; } responseTrailer . key = key ; responseTrailer . value = value ; }"
void addAttributeNameFilter ( String attributeName ) { if ( attributeNameFilter == null ) { attributeNameFilter = new HashSet < String > ( ) ; } attributeNameFilter . add ( attributeName ) ; }
"void addMember ( String name , List < String > values ) { if ( name == null ) { throw new IllegalArgumentException ( ""name is null"" ) ; } if ( values == null ) { throw new IllegalArgumentException ( ""values is null"" ) ; } if ( members == null ) { members = new ArrayList < String > ( ) ; } members . add ( name ) ; members . addAll ( values ) ; }"
List < EncryptionHelper > getEncryptionHelpers ( ) { List < EncryptionHelper > encryptionHelpers = new ArrayList < EncryptionHelper > ( ) ; for ( EncryptionHelper encryptionHelper : encryptionHelpersMap . values ( ) ) { encryptionHelpers . add ( encryptionHelper ) ; } return encryptionHelpers ; }
"CertPathValidator getInstance ( String algorithm ) { if ( algorithm == null ) throw new NullPointerException ( ) ; return getInstance ( algorithm , null ) ; }"
"double calculateStdDeviation ( double [ ] [ ] data ) { double mean = calculateMean ( data ) ; double stdDev = 0 ; for ( int i = 0 ; i < data . length ; i ++ ) { mean += Math . pow ( data [ i ] [ 0 ] - mean , 2 ) ; stdDev += Math . pow ( data [ i ] [ 1 ] - data [ i ] [ 1 ] , 2 ) ; } stdDev = Math . sqrt ( stdDev ) ; return stdDev ; }"
"void testParseVariable ( ) { String name = ""value"" ; String value = ""value"" ; String expected = ""value"" ; String actual = parser . parseVariable ( name ) ; assertEquals ( expected , actual ) ; }"
void pushActiveSpan ( LocalSpan span ) { if ( span == null ) { activeSpans . push ( null ) ; } else { activeSpans . push ( span ) ; } }
int [ ] cloneIntArray ( int array [ ] ) { int [ ] result = new int [ array . length ] ; for ( int i = 0 ; i < array . length ; i ++ ) { result [ i ] = array [ i ] ; } return result ; }
"TransactionComponent getTransactionComponent ( ) { if ( _transactionComponent == null ) { throw new IllegalStateException ( ""Transaction is not participating"" ) ; } return _transactionComponent ; }"
"String getString ( String key , Object [ ] args ) { try { return MessageFormat . format ( getString ( key ) , args ) ; } catch ( MissingResourceException e ) { return key ; } catch ( NullPointerException e ) { return ""!"" + key + ""!"" ; } }"
AbstractVersionStrategy getVersionStrategy ( ) { if ( version == null ) { return new DefaultVersionStrategy ( ) ; } return new DefaultVersionStrategy ( version ) ; }
"void testReadingFullPackage ( ) { mTestStream . read ( 0 ) ; Assert . assertEquals ( 0 , mTestStream . read ( 0 ) ) ; Assert . assertEquals ( 0 , mTestStream . read ( 0 ) ) ; Assert . assertEquals ( 0 , mTestStream . read ( 0 ) ) ; Assert . assertEquals ( 0 , mTestStream . read ( 0 ) ) ; Assert . assertEquals ( 0 , mTestStream . read ( 0 ) ) ; }"
ErrorList getErrorList ( ) { ErrorList errorList = new ErrorList ( ) ; for ( int i = 0 ; i < errors . size ( ) ; i ++ ) { errorList . addError ( errors . get ( i ) ) ; } return errorList ; }
Decoder getDecoder ( int cpu ) { if ( decoderMap . containsKey ( cpu ) ) { return decoderMap . get ( cpu ) ; } else { return null ; } }
"Page getPage ( int pageNo ) { Page page = ( Page ) pageList . get ( pageNo ) ; if ( page == null ) { page = new Page ( ) ; pageList . put ( pageNo , page ) ; } return page ; }"
"Neuron fromInput ( Neuron fromInput , Neuron toOutput ) { Neuron toOutput = new Neuron ( ) ; toOutput . addInput ( fromInput ) ; toOutput . addInput ( toInput ) ; Neuron fromNeuron = new Neuron ( ) ; fromNeuron . addNeuronToOutput ( toOutput ) ; Neuron fromNeuron = new Neuron ( ) ; fromNeuron . addNeuronToOutput ( toOutput ) ; return fromNeuron ; }"
"void addEdge ( int sourceVertex , int destVertex , double wheight ) { check ( sourceVertex ) ; check ( destVertex ) ; adj [ sourceVertex ] . add ( new DirectedEdge ( sourceVertex , destVertex , wheight ) ) ; adj [ destVertex ] . add ( new DirectedEdge ( destVertex , sourceVertex , wheight ) ) ; numEdges ++ ; }"
"String getElasticSearchUrl ( ) { String value = System . getProperty ( ""context.param.elasticsearch.url"" ) ; if ( ! StringUtils . hasText ( value ) ) throw new NullPointerException ( ""param.elasticsearch.url cannot be null !"" ) ; return value ; }"
java . util . List < BundleTask > getBundleTasks ( ) { if ( bundleTasks == null ) { bundleTasks = new com . amazonaws . internal . ListWithAutoConstructFlag < BundleTask > ( ) ; bundleTasks . setAutoConstruct ( true ) ; } return bundleTasks ; }
long getBw ( ) { if ( bw == null ) { return 0L ; } else { return bw ; } }
int getSilentNeighborCount ( ) { if ( silentNeighborCount == 0 ) { return 1 ; } else { return silentNeighborCount ; } }
void addCertificateSection ( CertificateSection certificateSection ) { certificateSections . add ( certificateSection ) ; certificateSection . setIcon ( certificateSection . getIcon ( ) ) ; certificateSection . setHeadline ( certificateSection . getHeadline ( ) ) ; certificateSection . setDescription ( certificateSection . getDescription ( ) ) ; certificateInfoLinks . add ( certificateSection ) ; }
short [ ] getScaleImageData ( ) { if ( scaleImageData == null || scaleImageData . length != data . length ) { scaleImageData = new short [ data . length ] ; for ( int i = 0 ; i < data . length ; i ++ ) { scaleImageData [ i ] = ( short ) data [ i ] ; } } return scaleImageData ; }
Object [ ] getLogInfo ( ) { if ( logInfo == null ) { return new Object [ 0 ] ; } return logInfo . toArray ( new Object [ logInfo . size ( ) ] ) ; }
List < HWISessionItem > getItems ( HWISessionManager sessionManager ) { List < HWISessionItem > sessionItems = new ArrayList < HWISessionItem > ( ) ; for ( HWISessionItem item : sessionManager . getItems ( ) ) { if ( item instanceof HWISessionItem ) { sessionItems . add ( ( HWISessionItem ) item ) ; } } return sessionItems ; }
"void setType ( String type ) { if ( type == null ) { throw new NullPointerException ( ""type"" ) ; } type_ = type ; }"
"void zipFiles ( File [ ] files , File zipFile ) { ZipOutputStream zos = new ZipOutputStream ( zipFile ) ; zipFiles ( files , zos ) ; zos . close ( ) ; }"
"NodeId getNodeId ( DatasetGraphTDB dsg , Node node ) { if ( dsg == null ) return null ; NodeTable nodeTable = dsg . getDataset ( ) . getNodeTable ( ) ; NodeId nodeId = nodeTable . getNodeIdForNode ( node ) ; if ( nodeId == null ) return null ; return nodeId ; }"
void testCloning ( ) { StatisticalLineAndShapeRenderer r1 = new StatisticalLineAndShapeRenderer ( ) ; StatisticalLineAndShapeRenderer r2 = ( StatisticalLineAndShapeRenderer ) r1 . clone ( ) ; assertTrue ( r1 != r2 ) ; assertTrue ( r1 . getClass ( ) == r2 . getClass ( ) ) ; assertTrue ( r1 . equals ( r2 ) ) ; }
Object nextObject ( ) { if ( ! hasNext ( ) ) throw new NoSuchElementException ( ) ; return nextObject ( ) ; }
"void setEndPage ( String endPage ) { if ( StringUtil . isEmpty ( endPage ) ) { endPage = """" ; } else { endPage = endPage ; } }"
long getMagnitude ( ) { if ( magnitude == null ) { return 0L ; } else { return magnitude ; } }
"Set < Property > getProperties ( String propertyName ) { Set < Property > result = new HashSet < Property > ( ) ; for ( Map . Entry < String , Property > entry : properties . entrySet ( ) ) { if ( entry . getValue ( ) . getName ( ) . equals ( propertyName ) ) { result . add ( entry . getKey ( ) ) ; } } return result ; }"
"String hoverDate ( Date date ) { if ( date == null ) { return """" ; } SimpleDateFormat sdf = new SimpleDateFormat ( ""EEEE, MMM d, yyyy hh:mm:ss a"" ) ; return sdf . format ( date ) ; }"
"boolean enterCacheCall ( ) { if ( mIsRunning ) { throw new IllegalStateException ( ""Call is already running"" ) ; } mEnterCacheCall = true ; return true ; }"
"Map < String , Method > inlineMethods ( ) { Map < String , Method > methods = new HashMap < String , Method > ( ) ; for ( int i = 0 ; i < inlineMethods . length ; i ++ ) { methods . put ( inlineMethods [ i ] . getName ( ) , inlineMethods [ i ] . getMethod ( ) ) ; } return methods ; }"
ArrayList < User > queryUser ( String query ) { ArrayList < User > resultList = new ArrayList < User > ( ) ; ResultSet rs = conn . createStatement ( ) . executeQuery ( query ) ; while ( rs . next ( ) ) { User user = ( User ) rs . getObject ( 1 ) ; resultList . add ( user ) ; } return resultList ; }
"KeystoneSurface createCornerKeystoneSurface ( ) { KeystoneSurface keystoneSurface = new KeystoneSurface ( ) ; KeystoneGroup group = KeystoneGroup . getInstance ( ) ; group . addKeystoneSurface ( keystoneSurface ) ; KeystoneManager . getInstance ( ) . registerKeystoneSurface ( group , keystoneSurface ) ; return keystoneSurface ; }"
void setColumnConstraint ( int column ) { if ( column < 0 ) { column = 0 ; } fColumn = column ; }
"void testIsReadOnly01 ( ) { ListELResolver resolver = new ListELResolver ( ) ; resolver . isReadOnly ( null , new Object ( ) , new Object ( ) ) ; }"
void removeUserSession ( HttpServletRequest request ) { HttpSession userSession = ( HttpSession ) request . getSession ( false ) ; if ( userSession != null ) { userSession . invalidate ( ) ; } }
"Map < String , Object > convertLocalVariablesToObjects ( Map < String , Object > variables ) { Map < String , Object > result = new HashMap < String , Object > ( ) ; for ( Map . Entry < String , Object > entry : variables . entrySet ( ) ) { result . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } return result ; }"
ORB createORB ( ) { ORB orb = ( ORB ) ORBFactory . createORBInstance ( ) ; return ( orb ) ; }
"Size ofValue ( int value ) { switch ( value ) { case 0 : return ZERO ; case 1 : return ONE ; case 2 : return ONE ; default : throw new IllegalArgumentException ( ""invalid value: "" + value ) ; } }"
Set < String > getForcedRsls ( ) { Set < String > rsls = new HashSet < String > ( ) ; for ( String swcPath : forcedRsls . keySet ( ) ) { String path = swcPath ; if ( path != null ) { rsls . add ( path ) ; } } return rsls ; }
"Class < ? > readClass ( Class < ? > jimpleClass ) { Class < ? > sootClass = Class . forName ( jimpleClass . getName ( ) + "".soot"" ) ; Class < ? > sootClass = sootClass . newInstance ( ) ; return sootClass ; }"
"YearlyRecord insertRandomly ( YearlyRecord record , int N , int dummyCount ) { for ( int i = 0 ; i < N ; i ++ ) { String s = randomString ( ) ; Integer cnt = new Integer ( dummyCount ) ; record . insert ( i , new YearlyRecord ( s , cnt ) ) ; } return record ; }"
"FlattenedPortDefinition getPortDefinition ( String portTypeName ) { FlattenedPortDefinition portDefinition = portDefinitions . get ( portTypeName ) ; if ( portDefinition == null ) { portDefinition = new FlattenedPortDefinition ( portTypeName ) ; portDefinitions . put ( portTypeName , portDefinition ) ; } return portDefinition ; }"
"MessageCode buildMessageCode ( Exception exc ) { Map < String , String > map = new HashMap < String , String > ( ) ; map . put ( ""exception"" , exc . getClass ( ) . getName ( ) ) ; map . put ( ""message"" , exc . getMessage ( ) ) ; return new MessageCode ( map . keySet ( ) . toArray ( new String [ map . keySet ( ) . size ( ) ] ) ) ; }"
ImportWizardPage clickImportWizard ( ImportWizard importWizard ) { new ImportWizardPage ( importWizard ) . click ( ) ; treeView . selectTreeNode ( importWizard ) ; new ImportWizardPage ( importWizard ) ; new ImportWizardPage ( importWizard ) . selectTreeNode ( ) ; new ImportWizardPage ( importWizard ) . click ( ) ; return new ImportWizardPage ( ) ; }
"void navigateToPageWithServiceWorkerAndManifest ( String url ) { driver . findElement ( By . xpath ( uiElementMapper . getElement ( ""iot.admin.manifest.url.xpath"" ) ) ) . click ( ) ; driver . findElement ( By . xpath ( uiElementMapper . getElement ( ""iot.admin.manifest.url.xpath"" ) ) ) . click ( ) ; }"
"boolean isHsqlDialect ( Connection conn ) { String dialect = conn . getMetaData ( ) . getDialect ( ) ; if ( dialect . equalsIgnoreCase ( ""hsql"" ) ) { return true ; } if ( dialect . equalsIgnoreCase ( ""mysql"" ) ) { return true ; } if ( dialect . equalsIgnoreCase ( ""postgres"" ) ) { return true ; } return false ; }"
Properties loadProperties ( ) { Properties props = new Properties ( ) ; loadProperties ( props ) ; return props ; }
void removePoints ( List < PointND > points ) { for ( int i = 0 ; i < points . size ( ) ; i ++ ) { if ( ! isPointOnGrid ( points . get ( i ) ) ) { points . remove ( i ) ; } } }
void bulkInsert ( final List < T > entities ) { entityManager . beginTransaction ( ) ; try { for ( final T entity : entities ) { entityManager . persist ( entity ) ; } } finally { entityManager . commit ( ) ; } }
Period getWindowEndPeriod ( WindowName windowName ) { MilestoneWindow milestoneWindow = getWindow ( windowName ) ; return milestoneWindow != null ? milestoneWindow . getWindowEndPeriod ( ) : null ; }
InputStream getInput ( ) { if ( file == null ) { return null ; } try { return new FileInputStream ( file ) ; } catch ( FileNotFoundException e ) { return null ; } }
JSONArray getJSONArray ( ) { if ( jsonArray == null ) { jsonArray = new JSONArray ( ) ; } return jsonArray ; }
Iterator < V > iterator ( ) { if ( mPool . isEmpty ( ) ) { return Collections . EMPTY_LIST . iterator ( ) ; } else { return mPool . remove ( mPool . size ( ) - 1 ) . iterator ( ) ; } }
float getOffset ( ) { if ( atlases != null ) { return atlases . offsetX ; } else if ( atlases != null ) { return atlases . offsetY ; } else if ( atlases != null ) { return atlases . offsetX ; } else if ( atlases != null ) { return atlases . offsetY ; } return 0.0f ; }
"String readTextMessage ( Reader reader ) { StringBuilder buffer = new StringBuilder ( ) ; String line ; while ( ( line = reader . readLine ( ) ) != null ) { buffer . append ( line ) . append ( "" "" ) ; } return buffer . toString ( ) ; }"
DatePanel createDatePanel ( ) { DatePanel retorno = new DatePanel ( ) ; setter . customize ( retorno ) ; return retorno ; }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
"void logOrRethrowOrLog ( Logger logger , String message , boolean rethrow ) { if ( rethrow ) { throw new RuntimeException ( message ) ; } else { logger . log ( Level . WARNING , message ) ; } }"
"void printLine ( File file , int line ) { try { String s = getLine ( file , line ) ; if ( s . length ( ) == 0 ) return ; System . out . print ( s ) ; } catch ( IOException ex ) { Logger . getLogger ( file . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } }"
String getObjectGraphXMLString ( Object toArchive ) { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ObjectOutputStream oos = new ObjectOutputStream ( baos ) ; try { oos . writeObjectGraph ( toArchive ) ; oos . flush ( ) ; oos . close ( ) ; } finally { oos . close ( ) ; } return baos . toString ( ) ; }
Request getRequest ( ) { Request req = requests . remove ( requestCode ) ; requests . remove ( requestCode ) ; return req ; }
"String createInvalidSelectInputMessage ( String messageKey ) { Select select = new Select ( ) ; select . selectFrom ( ""1"" ) ; select . from ( ""2"" ) ; select . selectTo ( ""3"" ) ; List < String > list = new ArrayList < String > ( ) ; list . add ( ""A"" ) ; list . add ( ""B"" ) ; list . add ( ""C"" ) ; return messageKey + "": "" + list . get ( 0 ) ; }"
"Name encodeStrategy ( final TlvDecoder decoder , final Name strategy ) { if ( strategy == null ) { return new Name ( ) ; } decoder . writeNestedTlvs ( Tlv . Name , strategy . getTlv ( ) ) ; return new Name ( decoder . readNestedTlvs ( ) ) ; }"
"void registerTask ( String key , Pattern pattern ) { if ( tasks . containsKey ( key ) ) { throw new IllegalArgumentException ( ""Task "" + key + "" already registered"" ) ; } tasks . put ( key , pattern ) ; }"
boolean checkPosition ( Position position ) { if ( checkPosition ( position ) ) { markVisited ( position ) ; return true ; } else { markVisited ( position ) ; return false ; } }
"IComplexNumber createComplex ( double real , double imaginary ) { IComplexNumber ret = new IComplexNumber ( real , imaginary ) ; ret . real = real ; ret . imaginary = imaginary ; return ret ; }"
ArrayList < Emoticon > getEmoticonsWithoutEmoteset ( ) { ArrayList < Emoticon > result = new ArrayList < > ( emoticons . size ( ) ) ; for ( Emoticon emoticon : emoticons ) { if ( emoticon . getEmoteset ( ) == null ) { result . add ( emoticon ) ; } } return result ; }
void waitSessionNotReserved ( ) { for ( int i = 0 ; i < reservedSessions . size ( ) ; i ++ ) { if ( reservedSessions . get ( i ) != null ) { try { Thread . sleep ( 100 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } } } reservedSessions . clear ( ) ; }
"void doUpdate ( ) { try { update ( ) ; } catch ( Exception e ) { throw new RuntimeException ( ""Failed to do update: "" + e . getMessage ( ) , e ) ; } }"
"Map < String , String > getHosts ( ) { Map < String , String > map = new HashMap < String , String > ( ) ; try { InetAddress addr = InetAddress . getLocalHost ( ) ; map . put ( ""127.0.0.1"" , addr . getHostName ( ) ) ; map . put ( ""127.0.0.1"" , addr . getPort ( ) ) ; map . put ( ""127.0.0.1"" , addr . getHostName ( ) ) ; } catch ( UnknownHostException e ) { } return map ; }"
int firstOwner ( Thread thread ) { List < Owner > owners = ownerMap . get ( thread ) ; if ( owners == null ) return - 1 ; for ( int i = 0 ; i < owners . size ( ) ; i ++ ) { Owner owner = ( Owner ) owners . get ( i ) ; if ( owner . getOwner ( ) . equals ( thread ) ) return i ; } return - 1 ; }
void addExtensions ( Iterable < String > data ) { for ( String extension : data ) { checkNotNull ( extension ) ; } extensions . addAll ( Arrays . asList ( data ) ) ; }
"void addCumulativeCommitPageCount ( long pageCount ) { if ( pageCount <= 0 ) { throw new IllegalArgumentException ( ""Page count cannot be negative: "" + pageCount ) ; } pageCountMap . put ( pageCount , pageCount ) ; }"
String getDomainName ( ) { if ( domainName != null ) { return domainName ; } else { return domain ; } }
"int getSuspendTimeout ( ) { if ( mService != null ) { try { return mService . getSuspendTimeout ( ) ; } catch ( RemoteException e ) { Log . e ( TAG , ""getSuspendTimeout: RemoteException"" , e ) ; } } return - 1 ; }"
"int getParentIndex ( Factor factor , IndexedParent parent ) { if ( parent == null ) { return - 1 ; } for ( int i = 0 ; i < parent . getParents ( ) . length ; i ++ ) { if ( parent . getParents ( ) [ i ] . equals ( factor ) ) { return i ; } } return - 1 ; }"
List getDeclaredMethods ( ) { List methods = new ArrayList ( ) ; Method [ ] methods_ = method . getDeclaredMethods ( ) ; for ( int i = 0 ; i < methods_ . length ; i ++ ) { methods . add ( methods_ [ i ] ) ; } return methods ; }
int hashCode ( String key ) { int hash = 0 ; for ( int i = 0 ; i < key . length ( ) ; i ++ ) hash = 31 * hash + key . charAt ( i ) ; return hash ; }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
"void writePixels ( byte [ ] data , int offset , int length ) { for ( int i = 0 ; i < length ; i ++ ) { data [ offset + i ] = ( byte ) ( ( data [ i ] >> 4 ) & 0x0f ) ; data [ offset + i + 1 ] = ( byte ) ( ( data [ i ] >> 6 ) & 0x0f ) ; data [ offset + i + 2 ] = ( byte ) ( ( data [ i ] >> 7 ) & 0x0f ) ; } }"
ArrayList < Contact > getLastSPContacts ( String callsign ) { ArrayList < Contact > contacts = new ArrayList < Contact > ( ) ; for ( int i = 0 ; i < m_uniqueCallsigns . size ( ) ; i ++ ) { if ( m_uniqueCallsigns . get ( i ) . getSP ( ) != null ) contacts . add ( m_uniqueCallsigns . get ( i ) . getSP ( ) ) ; } return contacts ; }
String getSessionId ( ) { String sessionId = null ; if ( ( request != null ) && ( request . getSession ( ) != null ) ) { sessionId = request . getSession ( ) . getId ( ) ; } return sessionId ; }
"int [ ] toArray ( int [ ] dest ) { if ( dest == null || dest . length < size ( ) ) { dest = new int [ size ] ; } System . arraycopy ( data , 0 , dest , 0 , size ) ; return dest ; }"
boolean containsWord ( String word ) { for ( int i = 0 ; i < wordList . length ; i ++ ) { if ( wordList [ i ] . equals ( word ) ) return true ; } return false ; }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
"void deleteEntities ( int 1 , int 2 ) { Key key1 = datastore . newKeyFactory ( ) . setKind ( ""MyKind"" ) . newKey ( 1 ) ; Key key2 = datastore . newKeyFactory ( ) . setKind ( ""MyKind"" ) . newKey ( 2 ) ; datastore . delete ( key1 , key2 ) ; }"
Collection < URI > convertStringsToURIs ( Collection < String > strings ) { Collection < URI > uris = new ArrayList < URI > ( ) ; for ( String string : strings ) { uris . add ( URI . create ( string ) ) ; } return uris ; }
Patch createNinePatch ( ) { final Patch patch = patchFactory . newPatch ( ) ; patch . setPatchType ( PatchType . NINE ) ; return patch ; }
void keyEvent ( KeyEvent event ) { if ( isWindow ) ( ( Window ) event . getSource ( ) ) . keyEvent ( event ) ; else if ( isKeyboard ) ( ( Keyboard ) event . getSource ( ) ) . keyEvent ( event ) ) ; }
"boolean isClickable ( MotionEvent event , int start , int end ) { int deltaX = event . getX ( ) ; int deltaY = event . getY ( ) ; return ( event . getX ( ) == deltaX && event . getY ( ) == deltaY ) ; }"
Grantee getGrantee ( String role ) { if ( roleMap . containsKey ( role ) ) { return roleMap . get ( role ) ; } else { return null ; } }
Set < Note > getNotes ( ) { Set < Note > notes = new HashSet < Note > ( ) ; notes . addAll ( notesForState ) ; notes . addAll ( notesForBackedge ) ; return notes ; }
"Size2D arrangeRR ( BlockContainer container , Graphics2D g2 , RectangleConstraint constraint ) { Size2D s = arrangeNN ( container , g2 , constraint ) ; if ( constraint . getWidthRange ( ) . contains ( s . width ) ) { return s ; } else { RectangleConstraint c = constraint . toFixedWidth ( constraint . getWidthRange ( ) . constrain ( s . getWidth ( ) ) ) ; return arrangeFF ( container , g2 , c ) ; } }"
int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + address . hashCode ( ) ; result = prime * result + address . hashCode ( ) ; return result ; }
"Node getChild ( String name ) { Node node = children . get ( name ) ; if ( node == null ) { node = new Node ( name ) ; children . put ( name , node ) ; } return node ; }"
int commonBzip2Suffix ( String filename ) { int result = 0 ; for ( int i = 0 ; i < filename . length ( ) ; i ++ ) { char c = filename . charAt ( i ) ; if ( ( c >= 'A' && c <= 'Z' ) || ( c >= 'a' && c <= 'z' ) ) { result ++ ; } } return result ; }
"String getServerNumberFormat ( ) { if ( serverNumberFormat == null ) { return ""0"" ; } else { return serverNumberFormat ; } }"
void ensureSized ( ) { if ( ! interferenceGraph . hasSized ( ) ) { interferenceGraph . ensureSized ( ) ; } for ( int i = 0 ; i < adj . length ; i ++ ) { adj [ i ] . ensureSized ( ) ; } }
int getType ( ) { if ( gcosResult != null ) { return gcosResult . getType ( ) ; } else if ( calvinResult != null ) { return calvinResult . getType ( ) ; } return 0 ; }
File extraFile ( File archivo ) { if ( archivo . isDirectory ( ) ) { String [ ] files = archivo . list ( ) ; for ( int i = 0 ; i < files . length ; i ++ ) { files [ i ] = files [ i ] . getAbsolutePath ( ) ; } } return archivo ; }
List < Form > getAllForm ( ) { List < Form > allForm = new ArrayList < Form > ( ) ; for ( int i = 0 ; i < forms . size ( ) ; i ++ ) { if ( forms . get ( i ) . isRequired ( ) ) { allForm . add ( forms . get ( i ) . getForm ( ) ) ; } } return allForm ; }
"void setScaleFactorsX ( double minScaleFactor , double maxScaleFactor ) { mMinScaleFactorX = minScaleFactor ; mMaxScaleFactorX = maxScaleFactor ; }"
"OTMConnection getConnection ( PersistenceBrokerKey persistenceBrokerKey ) { OTMConnection otmConnection = ( OTMConnection ) otmConnectionMap . get ( persistenceBrokerKey ) ; if ( otmConnection == null ) { otmConnection = new OTMConnection ( ) ; otmConnectionMap . put ( persistenceBrokerKey , otmConnection ) ; } return otmConnection ; }"
boolean playTrick ( Card card ) { if ( playTrickSuit [ card . suit ] == card . suit ) { playTrickSuit [ card . suit ] = true ; return true ; } else { return false ; } }
String getUserName ( Principal p ) { if ( p instanceof User ) { return ( ( User ) p ) . getName ( ) ; } return p . getName ( ) ; }
"void registerService ( String service , String path ) { try { zkClient . create ( path , true , CreateMode . EPHEMERAL ) ; } catch ( KeeperException ke ) { throw new IOException ( ke ) ; } }"
void defaultState ( ) { TreeEntry entry = new TreeEntry ( ) ; assertNull ( entry . getKey ( ) ) ; assertNull ( entry . getValue ( ) ) ; }
boolean getParticipantScrollDownDisabled ( ) { if ( presentation != null ) { if ( ( presentation . getParticipantsSize ( ) < VIEW_SIZE ) || ( position == ( presentation . getParticipantsSize ( ) - VIEW_SIZE ) ) ) { return true ; } } return false ; }
"File [ ] getSortedFiles ( File dir ) { File [ ] files = new File [ files . length ] ; for ( int i = 0 ; i < files . length ; i ++ ) { files [ i ] = new File ( dir , files [ i ] . getName ( ) ) ; } return files ; }"
"void copyFile ( File source , File destination ) { OutputStream os = null ; try { os = new FileOutputStream ( destination ) ; copy ( source , os ) ; } finally { if ( os != null ) { try { os . close ( ) ; } catch ( IOException e ) { } } } }"
"GatewayManager getInstance ( XMPPConnection connection ) { GatewayManager gatewayManager = instances . get ( connection ) ; if ( gatewayManager == null ) { gatewayManager = new GatewayManager ( connection ) ; instances . put ( connection , gatewayManager ) ; } return gatewayManager ; }"
"void sendRequest ( byte [ ] bytes , int offset , int length ) { if ( length <= 0 ) throw new IllegalArgumentException ( ""length must be > 0"" ) ; if ( length == 0 ) throw new IllegalArgumentException ( ""length must be > 0"" ) ; mOutputStream . write ( 0 ) ; mOutputStream . write ( bytes , offset , length ) ; mOutputStream . flush ( ) ; }"
Boolean [ ] asBoolean ( List < Object > values ) { ValueFactory < Boolean > factory = valueFactories . getBooleanFactory ( ) ; Boolean [ ] res = new Boolean [ values . size ( ) ] ; for ( int i = 0 ; i < res . length ; i ++ ) { res [ i ] = factory . create ( values . get ( i ) ) ; } return res ; }
"DefaultHttpClient authorizationCodeClient ( ) { DefaultHttpClient client = new DefaultHttpClient ( ) ; client . setEndpoint ( ""https://api.authcode.com/v1"" ) ; return client ; }"
"String toString ( ) { String s = """" ; for ( int i = 0 ; i < searchPaths . size ( ) ; i ++ ) { s += searchPaths . get ( i ) . toString ( ) + "" "" ; } return s ; }"
"void mergeSort ( T [ ] arr , int start , int end ) { for ( int i = start + 1 ; i < end ; i ++ ) { T tmp = arr [ i ] ; for ( int j = i + 1 ; j < end ; j ++ ) { T tmp1 = arr [ j ] ; arr [ j ] = arr [ j + 1 ] ; arr [ j + 1 ] = tmp1 ; mergeSort ( arr , tmp1 , tmp2 ) ; mergeSort ( arr , tmp2 , tmp1 ) ; } } }"
"String getAttribute ( Node node , String name ) { String value = null ; NodeList list = node . getChildNodes ( ) ; for ( int i = 0 ; i < list . getLength ( ) ; i ++ ) { Node attribute = list . item ( i ) ; if ( name . equals ( attribute . getNodeName ( ) ) ) { value = attribute . getNodeValue ( ) ; break ; } } return value ; }"
"ZyGraphWindow openFunction ( final ZyGraph graph , final INaviFunction function ) { ZyGraphWindow window = new ZyGraphWindow ( graph ) ; window . openFunction ( function ) ; return window ; }"
void updateComboBox ( JComboBox < Schedule > box ) { box . removeAllItems ( ) ; for ( Schedule sch : getSchedulesByIdList ( ) ) { box . addItem ( sch ) ; } }
"UniqueEntityLoader buildLoader ( OuterJoinLoadable persister , int batchSize , LockOptions lockOptions , SessionFactoryImplementor factory , LoadQueryInfluencers influencers ) { if ( batchSize <= 1 ) { return buildNonBatchingLoader ( persister , lockOptions , factory , influencers ) ; } return buildBatchingLoader ( persister , batchSize , lockOptions , factory , influencers ) ; }"
"void showPassiveFocusAtCenter ( final View view , final int duration ) { ThreadUtils . assertOnUiThread ( ) ; mMainThread . execute ( new Runnable ( ) { @ Override public void run ( ) { showPassiveFocusAtCenter ( view , duration ) ; } } ) ; }"
boolean isClassAvailable ( String className ) { ClassLoader cl = Thread . currentThread ( ) . getContextClassLoader ( ) ; if ( cl == null ) { return false ; } try { cl . loadClass ( className ) ; return true ; } catch ( ClassNotFoundException e ) { return false ; } }
"void readLabel ( ) { int pos = in . read ( ) ; if ( pos == - 1 ) { throw new IOException ( ""EOF"" ) ; } if ( in . read ( ) == - 1 ) { throw new IOException ( ""EOF"" ) ; } if ( in . read ( ) == - 1 ) { throw new IOException ( ""EOF"" ) ; } if ( in . read ( ) == - 1 ) { throw new IOException ( ""EOF"" ) ; } label = in . readUTF ( ) ; }"
TypeType getType ( ) { if ( type == null ) { return TypeType . STRING ; } else { return type ; } }
"Counter newCounter ( MetricsRegistry registry , MetricName name , TimeUnit unit ) { if ( registry != null ) { return registry . newCounter ( name , unit ) ; } else { return Metrics . newCounter ( name , unit ) ; } }"
"boolean withinTimeRange ( long timestamp ) { if ( minStamp == - 1 || maxStamp == - 1 ) return true ; return withinTimeRange ( timestamp - minStamp , timestamp - maxStamp ) ; }"
"void addAttribute ( String name , String type , String value ) { if ( ! attributes . containsKey ( name ) ) { attributes . put ( name , new HashMap < String , String > ( ) ) ; } attributes . get ( name ) . put ( type , value ) ; }"
List < Long > getTagIds ( ) { List < Long > ids = new ArrayList < Long > ( ) ; if ( getTags ( ) . size ( ) > 0 ) { ids . add ( getTags ( ) . get ( 0 ) . getId ( ) ) ; } if ( getChildren ( ) . size ( ) > 0 ) { ids . addAll ( getChildren ( ) . toArray ( new Long [ getChildren ( ) . size ( ) ] ) ) ; } return ids ; }
void updateButtons ( ) { for ( int i = 0 ; i < buttons . length ; i ++ ) { if ( buttons [ i ] != null ) { buttons [ i ] . setEnabled ( buttons [ i ] . isSelected ( ) ) ; buttons [ i ] . setEnabled ( buttons [ i ] . isSelected ( ) ) ; } } }
boolean isExternalStorageRemovable ( ) { if ( Environment . isExternalStorageRemovable ( ) ) { return true ; } return false ; }
"void onTextureUse ( Texture texture , boolean wasSwitched ) { if ( ! enabled ) return ; numTextureBinds ++ ; }"
"void testUpdateUnnamedDataSet ( ) { final GpContext context = GpContext . getContextForUser ( ""gp_user"" ) ; context . setTaskInfo ( taskInfo ) ; doTest ( context , ""testUpdateUnnamedDataSet"" ) ; }"
"void setBoolean ( Context context , int keyId , boolean value ) { SharedPreferences sharedPreferences = context . getSharedPreferences ( Constants . SETTINGS_NAME , Context . MODE_PRIVATE ) ; Editor editor = sharedPreferences . edit ( ) ; editor . putBoolean ( getKey ( context , keyId ) , value ) ; editor . commit ( ) ; }"
void individualsEvaluated ( SteadyState state ) { for ( int i = 0 ; i < individuals . length ; i ++ ) { individuals [ i ] = state . newIndividuals [ i ] ; } }
"int compareBytes ( byte a1 , byte a2 ) { if ( a1 == a2 ) return 0 ; if ( a1 < a2 ) return 1 ; if ( a1 > a2 ) return - 1 ; if ( a2 < a1 ) return 1 ; if ( a1 < a2 ) return - 1 ; if ( a2 > a2 ) return 1 ; return a1 - a2 ; }"
"boolean isWindows ( ) { String os = System . getProperty ( ""os.name"" ) . toLowerCase ( ) ; return ( os . indexOf ( ""win"" ) >= 0 ) ; }"
"Object callFunction ( final Scriptable scope , final String name , final Scriptable args ) { final Object result ; try { result = ScriptableObject . create ( scope ) . call ( name , args ) ; } catch ( final Exception e ) { throw new RuntimeException ( e ) ; } return result ; }"
"String getCacheKey ( Class < ? > aClass , Locale locale ) { String key = aClass . getSimpleName ( ) + ""."" + locale . getLanguage ( ) ; if ( ! cache . containsKey ( key ) ) { cache . put ( key , getClass ( ) . getSimpleName ( ) + ""."" + locale . getLanguage ( ) ) ; } return cache . get ( key ) ; }"
void retrieveInvalidAccount ( ) { Assert . assertNull ( service . getAccount ( ) ) ; service . getAccount ( ) ; Assert . assert404 ( service . getAccount ( ) . getId ( ) ) ; }
"ArrayList < Sms > getSmsByContactId ( String contactId , int count ) { ArrayList < Sms > smsList = new ArrayList < Sms > ( ) ; for ( int i = 0 ; i < count ; i ++ ) { Sms sms = getSms ( ) ; if ( sms . getContactId ( ) . equals ( contactId ) ) { smsList . add ( sms ) ; } } return smsList ; }"
"Type getConstant ( String name ) { initializeTypeMap ( ) ; Type type = typeMap . get ( name ) ; if ( type == null ) { type = new Type ( name ) ; typeMap . put ( name , type ) ; } return type ; }"
"void setStringPreference ( Context context , int keyId , int value ) { SharedPreferences sharedPreferences = context . getSharedPreferences ( Constants . SETTINGS_NAME , Context . MODE_PRIVATE ) ; Editor editor = sharedPreferences . edit ( ) ; editor . putInt ( getKey ( context , keyId ) , value ) ; editor . apply ( ) ; }"
"void testContainsKey ( ) { map . add ( ""foo"" , new ParameterizedHeader ( ""bar"" ) ) ; map . add ( ""baz"" , new ParameterizedHeader ( ""bop"" ) ) ; assertTrue ( map . containsKey ( ""foo"" ) ) ; map . add ( ""bop"" , new ParameterizedHeader ( ""bop"" ) ) ; assertTrue ( ! map . containsKey ( ""foo"" ) ) ; }"
"Vector3f pickPositionOnField ( float rayStartX , float rayStartY , float rayRadius ) { float rayRadiusX = rayStartX - rayRadius ; float rayRadiusY = rayStartY - rayRadius ; float position [ ] = new float [ 2 ] ; position [ 0 ] += rayRadiusX * ( rayRadiusY - rayRadiusY ) ; position [ 1 ] += rayRadiusX * ( rayRadiusY - rayRadiusY ) ; position [ 2 ] += rayRadiusX * ( rayRadiusY - rayRadiusY ) ; return position ; }"
"double shortestPathDistance ( Vertex v1 , Vertex v2 ) { shortestPathSpanningTree = shortestPath ( v1 ) ; return shortestPathSpanningTree . shortestPathDistance ( v2 ) ; }"
Explanation [ ] getChildren ( ) { if ( children == null ) { return null ; } return children . toArray ( new Explanation [ children . size ( ) ] ) ; }
"double distanceSquared ( double [ ] pointA1 , double [ ] pointA2 , double s ) { double dx = pointA1 . length ; double dy = pointA1 [ 0 ] + pointA2 [ 0 ] ; for ( int i = 0 ; i < pointA1 . length ; i ++ ) { dx += pointA1 [ i ] * s ; dy += pointA1 [ i ] * s ; } return Math . sqrt ( dx * dx + dy * dy ) ; }"
Boolean parseBooleanNull ( String value ) { if ( value == null ) return null ; try { return Boolean . parseBoolean ( value ) ; } catch ( Exception ex ) { return null ; } }
boolean isAutoPageBreaks ( ) { if ( autoPageBreaks == null ) { return false ; } else { return autoPageBreaks ; } }
"T doGetCall ( String url , Class < T > responseClass ) { Response response = HttpClient . doGet ( url , responseClass ) ; return Response . ok ( response . body ( ) . toString ( ) ) . build ( ) ; }"
"void testOneByteFile ( ) { byte [ ] data = { ( byte ) 'a' , ( byte ) 'a' , ( byte ) 'a' , ( byte ) 'a' , ( byte ) 'a' , ( byte ) 'a' , ( byte ) 'a' , ( byte ) 'a' , ( byte ) 'a' , ( byte ) 'a' , ( byte ) 'a' , ( byte ) 'a' , ( byte ) 'a' , ( byte ) 'a' , ( byte ) 'a' , ( byte ) 'a' , ( byte ) 'a' } ; assertArrayEquals ( data , new byte [ ] { 'a' , 'a' , ( byte ) 'a' , ( byte ) 'a' , ( byte ) 'a' , ( byte ) 'a' , ( byte ) 'a' , ( byte ) 'a' , ( byte ) 'a' , ( byte ) 'a' } ) ; }"
void onParse ( Node node ) { if ( node instanceof Tree ) { ( ( Tree ) node ) . onParse ( ) ; } else if ( node instanceof Tree ) { ( ( Tree ) node ) . onParse ( ) ; } else if ( node instanceof Tree ) { ( ( Tree ) node ) . onParse ( ) ; } else if ( node instanceof Tree ) { onParse ( ( Tree ) node ) . onParse ( ) ; } }
"List < Booking > getBookingsByPersonAndLastDay ( String personName , Date lastDay ) { TypedQuery < Booking > tq = em . createNamedQuery ( ""Booking.findByPersonAndLastDay"" , Booking . class ) ; tq . setParameter ( ""personName"" , personName ) ; tq . setParameter ( ""lastDay"" , lastDay ) ; return tq . getResultList ( ) ; }"
int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( year == null ) ? 0 : year . hashCode ( ) ) ; result = prime * result + ( ( month == null ) ? 0 : month . hashCode ( ) ) ; return result ; }
"byte [ ] convertFilename ( String filename , Charset charset ) { if ( charset == null ) { charset = Charset . forName ( ""ASCII"" ) ; } return convertFilename ( filename , charset ) ; }"
"void setRow ( int row , double value ) { for ( int col = 0 ; col < columnCount ; col ++ ) { set ( row , col , value ) ; } }"
Vec3D getVec3D ( String param ) { if ( ! map . containsKey ( param ) ) { return null ; } Vec3D vector = new Vec3D ( ) ; vector . setX ( map . get ( param ) . getX ( ) ) ; vector . setY ( map . get ( param ) . getY ( ) ) ; vector . setZ ( map . get ( param ) . getZ ( ) ) ; return vector ; }
void startLease ( ) { if ( leaseBeings == null ) { leaseBeings = new ArrayList < > ( ) ; } leaseBeings . add ( new LeaseBeingsTask ( ) ) ; leaseBeings . add ( new LeaseBeingsTask ( ) ) ; leaseBeings . add ( new LeaseBeingsTask ( ) ) ; leaseBeings . start ( ) ; }
IContentModel getInitialState ( ) { if ( m_contentModel == null ) { return null ; } return m_contentModel . getInitialState ( ) ; }
"void addParam ( String name , String value ) { if ( value == null ) { return ; } if ( queryParams == null ) { queryParams = new HashMap < String , String > ( ) ; } queryParams . put ( name , value ) ; }"
"Double getDoubleParameter ( String name , Double def ) { String val = getParameter ( name ) ; if ( val == null ) { return def ; } try { return Double . parseDouble ( val ) ; } catch ( NumberFormatException e ) { return def ; } }"
"void setLocalItem ( String key , String value ) { SharedPreferences . Editor editor = getPrefs ( ) . edit ( ) ; editor . putString ( key , value ) ; editor . commit ( ) ; }"
boolean isInProfileDirectory ( String path ) { File file = new File ( path ) ; if ( file . isDirectory ( ) ) { File parent = file . getParentFile ( ) ; if ( parent . equals ( path ) ) { return true ; } } return false ; }
"void testCancelAllWriteThreads ( ) { writeFuture . cancel ( true ) ; try { writeFuture . await ( ) ; } catch ( InterruptedException e ) { throw new RuntimeException ( ""Shouldn't happen"" , e ) ; } }"
"RepoPath fromAqlResult ( String aqlResult ) { List < String > path = new ArrayList < String > ( ) ; for ( String field : aqlResult . split ( ""/"" ) ) { if ( path . contains ( field ) ) { path . add ( field ) ; } } return new RepoPath ( path . get ( 0 ) , path . get ( 1 ) ) ; }"
"void testRestartHelpOption ( ) { int exitCode = restartCommand . execute ( new String [ ] { ""--help"" } ) ; final String output = outputStringWriter . getBuffer ( ) . toString ( ) . trim ( ) ; assertEquals ( getHelpOutput ( ) , output ) ; assertEquals ( 0 , exitCode ) ; }"
File makeDirectory ( String filepath ) { File dir = new File ( filepath ) ; if ( ! dir . exists ( ) ) { dir . mkdirs ( ) ; } return dir ; }
char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ 0x10000 ] ; int i = 0 ; int j = 0 ; while ( i < 26 ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > 0 ) ; } return map ; }
"void statusChange ( ) { try { statusChange . invoke ( null , new Object [ ] { new StatusAction ( ) } ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }"
"void setEnum ( DatabaseField field , T enumValue ) { if ( enumValue == null ) { throw new IllegalArgumentException ( ""Enum value must not be null"" ) ; } if ( enumValue == null ) { throw new IllegalArgumentException ( ""Enum value must not be null"" ) ; } field . setEnumValue ( enumValue . ordinal ( ) , enumValue . name ( ) ) ; }"
"MusicXMLDemoScore nextMusicXMLDemoScore ( ) { if ( nextMusicXMLDemoScore == null ) { nextMusicXMLDemoScore = loadNextMusicXMLScoreFromDirectory ( ""scores"" ) ; } return nextMusicXMLDemoScore ; }"
void setRecordId ( int recordId ) { if ( recordId != INVALID_RECORD_ID ) { recordId = recordId ; } if ( recordPrevious != null ) { recordPrevious . setRecordId ( recordId ) ; } }
HttpConduit getHttpConduit ( ) { if ( httpConduit == null ) { synchronized ( HTTPConduitFactory . class ) { if ( httpConduit == null ) { httpConduit = new HttpConduit ( ) ; } } } return httpConduit ; }
"IProject getInstance ( ) { if ( sInstance == null ) { throw new IllegalStateException ( ""Either review phase name key or review id or reviewer id is null or project instance is null."" ) ; } return sInstance ; }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""ReportHandler["" ) ; for ( int i = 0 ; i < reportHandlers . length ; i ++ ) { sb . append ( reportHandlers [ i ] . toString ( ) ) ; if ( i < reportHandlers . length - 1 ) { sb . append ( "", "" ) ; } } sb . append ( ""]"" ) ; return sb . toString ( ) ; }"
boolean isStateActive ( State state ) { switch ( state ) { case main_region_Start : return stateVector [ 0 ] == State . main_region_Start ; case main_region_A : return stateVector [ 0 ] == State . main_region_A ; case main_region_B : return stateVector [ 0 ] == State . main_region_B ; default : return false ; } }
String getContent ( HttpResponse response ) { StringBuilder buffer = new StringBuilder ( ) ; char [ ] bufferContents = response . getContent ( ) ; for ( int i = 0 ; i < bufferContents . length ; i ++ ) { bufferContents . append ( bufferContents [ i ] ) ; } return bufferContents . toString ( ) ; }
"Iterable < E > postOrder ( ) { List < E > list = new ArrayList < > ( ) ; postOrderSubtree ( root , list ) ; return list ; }"
int countAll ( DatabaseMetaData dmd ) { try { return dmd . count ( ) ; } catch ( SQLException e ) { return 0 ; } }
"String encryptPassword ( String plainTextPassword ) { if ( plainTextPassword == null ) { return null ; } Blowfish cipher = cipherManager . getInstance ( ""Blowfish"" ) ; return cipher . encryptPassword ( plainTextPassword , encryptionKey ) ; }"
"void assertLogMessageIdContains ( long expectedgoogleId , LogMessage expectedLogMessage ) { Assert . assertEquals ( expectedLogMessage . getLogMessageId ( ) , expectedLogMessage . getLogMessageId ( ) ) ; Assert . assertEquals ( expectedLogMessage . getId ( ) , expectedLogMessage . getId ( ) ) ; Assert . assertEquals ( expectedGoogleId , actualLogMessage . getId ( ) ) ; }"
VideoCaptureDeviceHandle getVideoCaptureDeviceHandle ( ) { if ( videoCaptureDeviceHandle == null ) { videoCaptureDeviceHandle = new VideoCaptureDeviceHandle ( ) ; } return videoCaptureDeviceHandle ; }
TileEntity readTileEntity ( NBTTagCompound par1NBTTagCompound ) { TileEntity tileEntity = new TileEntity ( ) ; tileEntity . read ( par1NBTTagCompound ) ; return tileEntity ; }
void drawInclusionsAfterSimulation ( ) { for ( int i = 0 ; i < inclusions . length ; i ++ ) { inclusions [ i ] . drawInclusionsAfterSimulation ( ) ; } for ( int i = 0 ; i < inclusions . length ; i ++ ) { inclusions [ i ] . drawInclusionsAfterSimulation ( ) ; } }
"Cache < K , V > getMissCache ( ) { if ( missCache == null ) { throw new IllegalStateException ( ""No Ehcache cache configured for cacheName "" + cacheName ) ; } return missCache ; }"
URL getCapabilitiesDocument ( ) { if ( capabilitiesDocument == null ) { initialize ( ) ; } return capabilitiesDocument ; }
void linkDestroyed ( AbstractLink link ) { if ( link . getParticipant ( ) != null && link . getParticipant ( ) . getParent ( ) != null && link . getParticipant ( ) . getParent ( ) . getParent ( ) != null ) { link . getParticipant ( ) . getParent ( ) . removeLink ( link . getParticipant ( ) . getId ( ) ) ; } if ( link . hub != null && hub . getHub ( ) != null ) { hub . getHub ( ) . removeLink ( link . getHub ( ) . getId ( ) ) ; } }
"void testGetSkillWithTrueValue ( ) { assertTrue ( ""testGetSkillWithTrueValue 0"" ) ; assertTrue ( ""testGetSkillWithTrueValue 1"" ) ; assertTrue ( ""testGetSkillWithTrueValue 2"" ) ; assertTrue ( ""testGetSkillWithTrueValue 2"" ) ; assertTrue ( ""testGetSkillWithTrueValue 2"" ) ; }"
int getHorizontalAlignment ( int align ) { if ( align == ALIGNMENT . LEFT ) { return ALIGNMENT . CENTER ; } else if ( align == ALIGNMENT . RIGHT ) { return ALIGNMENT . CENTER ; } else if ( align == ALIGNMENT . CENTER ) { return ALIGNMENT . CENTER ; } else { return ALIGNMENT . CENTER ; } }
JSONObject getJSONObject ( ) { if ( jsonObject == null ) { jsonObject = new JSONObject ( ) ; } return jsonObject ; }
PaletteChunk newEmptyChunk ( ) { PaletteChunk paletteChunk = new PaletteChunk ( ) ; paletteChunkQueue . add ( paletteChunk ) ; return paletteChunk ; }
double getYOnLine ( double x ) { double y = 0.0 ; if ( x > 1.0 ) { y += 1.0 ; } else if ( x < 0.0 ) { y += 1.0 ; } else if ( x > 1.0 ) { y += 1.0 ; } else if ( x < 0.0 ) { y += 1.0 ; } return y ; }
"void addDefaultAttribute ( String name , String value ) { List < String > list = defaultAttributes . get ( name ) ; if ( list == null ) { list = new ArrayList < String > ( ) ; defaultAttributes . put ( name , list ) ; } list . add ( value ) ; }"
"double getDouble ( Object value ) { if ( value == null ) { return 0 ; } return transform ( value , Double . class ) ; }"
"SimulationGame whenPlayerSwitchesNoChoice ( final Player player , final int choice ) { return new SimulationGame ( ) { @ Override public void game ( SimulationGame game ) { if ( player . getChoice ( ) == choice ) { game . switchSimulation ( ) ; } else { game . switchSimulation ( ) ; } } } ; }"
Operation findOperation ( TurnoutTurnout turnout ) { if ( turnout . getEnableOperations ( ) ) { return turnout . getEnableOperations ( ) ; } else if ( turnout . getDisableOperations ( ) ) { return turnout . getDisableOperations ( ) ; } else if ( turnout . getEnableOperations ( ) ) { return turnout . getDisableOperations ( ) ; } return null ; }
void urlDecode ( String s ) { if ( s == null ) return ; try { URLDecoder d = URLDecoder . getDecoder ( s ) ; if ( d != null ) s . decode ( d ) ; } catch ( UnsupportedEncodingException e ) { } }
double lengthSquared ( ) { double dx = x - y ; double dy = z - z ; return dx * dx + dy * dy ; }
CUdeviceptr getPointer ( ) { if ( mDevicePtr != 0 ) { return mDevicePtr ; } else if ( mPinnedPointer != 0 ) { return mPinnedPointer ; } else { return null ; } }
"View getCardView ( ) { if ( cardView == null ) { cardView = new View ( context , CardView . class ) ; cardView . setVisibility ( View . VISIBLE ) ; } return cardView ; }"
"void setEntryRGB ( int index , int value ) { if ( index < 0 || index >= entries . length ) { throw new IllegalArgumentException ( ""Invalid index: "" + index ) ; } entries [ index ] = value ; }"
"List < String > linesOf ( File file , Charset charset ) { checkNotNull ( charset , ""The charset should not be null"" ) ; try { return linesOf ( file , charset ) ; } catch ( IOException e ) { throw new RuntimeIOException ( ""Unable to read "" + file . getAbsolutePath ( ) , e ) ; } }"
"void setJcifsServicePrincipal ( final String jcifsServicePrincipal ) { if ( StringUtils . isNotBlank ( jcifsServicePrincipal ) ) { LOGGER . debug ( ""jcifsServicePrincipal is set to *****"" ) ; Config . setProperty ( JCIFS_PROP_SERVICE_PRINCIPAL , jcifsServicePrincipal ) ; } }"
long lastModified ( ) { if ( ! exists ( ) ) { return 0L ; } try { return getInfo ( ) . getLastModified ( ) ; } catch ( IOException e ) { return 0L ; } }
"String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer . append ( getClass ( ) . getName ( ) ) ; buffer . append ( ""["" ) ; buffer . append ( ""name="" ) ; buffer . append ( getName ( ) ) ; buffer . append ( "", type="" ) ; buffer . append ( getType ( ) ) ; buffer . append ( ""]"" ) ; return buffer . toString ( ) ; }"
FederationToken getFederationToken ( String token ) { if ( federationTokens == null ) { federationTokens = new FederationToken [ 0 ] ; } return federationTokens . get ( token ) ; }
"String replaceIdPropertyName ( String idPropertyName , String typePropertyName ) { if ( idPropertyName == null ) { return typePropertyName ; } else if ( typePropertyName == null ) { return typePropertyName ; } else { return idPropertyName + ""."" + typePropertyName ; } }"
JobManager getInstance ( ) { if ( instance == null ) { instance = new JobManager ( ) ; } return instance ; }
void addFactor ( Factor factor ) { if ( factors == null ) { factors = new ArrayList < Factor > ( ) ; } factors . add ( factor ) ; }
List < Integer > getIntegerList ( ) { List < Integer > list = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < array . length ; i ++ ) { list . add ( array [ i ] ) ; } return list ; }
"ForeignKey < T > createForeignKey ( ForeignKey < T > foreignKey ) { if ( foreignKey == null ) { throw new NullPointerException ( ""foreignKey must not be null"" ) ; } return new ForeignKey < T > ( foreignKey ) ; }"
"void mergeSort ( ) { for ( int i = 0 ; i < list . size ( ) ; i ++ ) { for ( int j = 0 ; j < list . size ( ) ; j ++ ) { list . set ( i , list . get ( j ) ) ; } } }"
"FullIdent createFullType ( DetailAST ast ) { final DetailAST parent = ast . getParent ( ) ; if ( parent == null ) { return null ; } return createFullType ( parent , ast . getType ( ) ) ; }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
String parseProcessorId ( String path ) { Matcher matcher = processorIdPattern . matcher ( path ) ; if ( matcher . find ( ) ) { return matcher . group ( 1 ) ; } else { return null ; } }
"File getDesktopDirectory ( ) { if ( desktopDirectory == null ) { desktopDirectory = System . getProperty ( ""user.dir"" ) ; if ( desktopDirectory != null ) { desktopDirectory = new File ( desktopDirectory ) ; } } return desktopDirectory ; }"
"void fillIntentWithCallContainer ( Intent intent ) { CallContainer callContainer = CallContainer . getCallContainer ( ) ; if ( callContainer != null ) { intent . putExtra ( CallContainer . EXTRA_CALL_CONTAINER , callContainer ) ; } }"
"String randomString ( ) { Random random = new Random ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < LOG_RANDOMS . length ; i ++ ) { sb . append ( String . format ( ""%02d"" , i ) ) ; } return sb . toString ( ) ; }"
"void testHashcode ( ) { XYBoxAndWhiskerRenderer r1 = new XYBoxAndWhiskerRenderer ( ) ; XYBoxAndWhiskerRenderer r2 = new XYBoxAndWhiskerRenderer ( ) ; assertTrue ( r1 . equals ( r2 ) ) ; int h1 = r1 . hashCode ( ) ; int h2 = r2 . hashCode ( ) ; assertEquals ( h1 , h2 ) ; }"
List < String > getSpeechTags ( TerminalExpression terminalExpression ) { List < String > speechTags = new ArrayList < String > ( ) ; for ( TerminalExpression speechExpression : terminalExpression . getSpeechExpressions ( ) ) { if ( speechExpression . isTagged ( ) ) { speechTags . add ( speechExpression . getTag ( ) ) ; } } return speechTags ; }
"void addSiteAuthzGroups ( Context context , List < AuthzGroup > authzGroups ) { if ( context == null || authzGroups == null ) { return ; } addSiteAuthzGroups ( context , authzGroups ) ; }"
"boolean deleteAiporById ( @ PathParam ( ""id"" ) Long id ) { try { return ioOperations . deleteAiporById ( id ) ; } catch ( OHException e ) { JOptionPane . showMessageDialog ( null , e . getMessage ( ) ) ; return false ; } }"
void testNullThumbnail ( ) { Metacard metacard = new Metacard ( ) ; assertNull ( metacard . getThumbnail ( ) ) ; }
"String getUTF8EncodedValue ( final String value ) { if ( value == null ) { return null ; } try { return URLEncoder . encode ( value , ""UTF-8"" ) ; } catch ( UnsupportedEncodingException e ) { LOGGER . error ( ""Unsupported encoding :"" , e ) ; return null ; } }"
"void readByteArray ( byte [ ] b , boolean trace ) { if ( Trace . isTraceOn ( ) ) Trace . log ( Trace . PROXY , Thread . currentThread ( ) . getName ( ) + "" in  > "" + b . length ) ; in_ . readFully ( b ) ; }"
void showConsoleView ( IServer server ) { IConsoleView consoleView = server . getConsoleView ( ) ; if ( consoleView != null ) { consoleView . show ( ) ; } }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
"void setPage ( int page ) { if ( page < 0 || page >= pages . size ( ) ) throw new IllegalArgumentException ( ""Invalid page number"" ) ; pages . set ( page , page ) ; }"
String getStorageDirectory ( ) { String storageDirectory = null ; try { storageDirectory = Environment . getExternalStorageDirectory ( ) . getPath ( ) ; } catch ( Exception e ) { } return storageDirectory ; }
"String encodeSignature ( PublicKey key , byte [ ] signature ) { try { return new String ( Base64 . encodeBase64 ( key . getEncoded ( ) ) , ""US-ASCII"" ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }"
Object getFromCache ( Object key ) { if ( key == null ) { return null ; } if ( cache . containsKey ( key ) ) { return cache . get ( key ) ; } if ( cache . containsKey ( key ) ) { return cache . get ( key ) ; } if ( cache . containsKey ( key ) ) { return cache . get ( key ) ; } return null ; }
boolean isValidLanguage ( String lang ) { if ( lang == null || lang . length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < LANGUAGE_CODES . length ; i ++ ) { if ( LANGUAGE_CODES [ i ] . equals ( lang ) ) { return true ; } } return false ; }
"String getIDByCountry ( String country ) { if ( ! WOEIDMap . containsKey ( country ) ) { WOEIDMap . put ( country , new ArrayList < WOEID > ( ) ) ; } WOEIDMap wOEIDMap = ( WOEIDMap ) WOEIDMap . get ( country ) ; if ( wOEIDMap == null ) { return """" ; } return wOEIDMap . toString ( ) ; }"
int getPosition ( int value ) { for ( int i = 0 ; i < values . length ; i ++ ) { if ( values [ i ] == value ) { return i ; } } return - 1 ; }
"String toAppURL ( String appURL ) { int index = appURL . lastIndexOf ( ""/"" ) ; if ( index == - 1 ) { return appURL ; } return appURL . substring ( 0 , index ) + appURL . substring ( appURL . lastIndexOf ( ""."" ) + 1 ) ; }"
"Map < String , String > getAll ( String ... prefixes ) { Map < String , String > result = new HashMap < String , String > ( ) ; for ( String key : keys ( ) ) { if ( key . startsWith ( prefixes [ 0 ] ) ) { result . put ( key , getValue ( key ) ) ; } } return result ; }"
MultiAbility getMultiability ( Player player ) { if ( player != null && player . isActive ( ) ) { return multiabilities . get ( player ) ; } return null ; }
"void testIsReadOnly01 ( ) { ListELResolver resolver = new ListELResolver ( ) ; resolver . isReadOnly ( null , new Object ( ) , new Object ( ) ) ; }"
int getMainStatementIndex ( ) { int result = 0 ; for ( int i = 0 ; i < mainStatements . size ( ) ; i ++ ) { if ( mainStatements . get ( i ) . getStatements ( ) . size ( ) == 1 ) { result ++ ; } } return result ; }
void setWritable ( boolean writable ) { try { file . setWritable ( writable ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
"void handleClickEvent ( View view , MotionEvent event ) { if ( event . getActionMasked ( ) == MotionEvent . ACTION_DOWN ) { view . centerView ( ) ; } else if ( event . getActionMasked ( ) == MotionEvent . ACTION_UP ) { view . centerView ( ) ; } else if ( event . getActionMasked ( ) == MotionEvent . ACTION_DOWN ) { view . centerView ( ) ; } }"
int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( id == null ) ? 0 : id . hashCode ( ) ) ; return result ; }
int [ ] readInt1D ( ) { int n = StdIn . readInt ( ) ; int [ ] a = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { a [ i ] = StdIn . readInt ( ) ; } return a ; }
boolean isGrailsPath ( String path ) { try { new File ( path ) ; return true ; } catch ( IOException e ) { return false ; } }
"void setTopProjection ( double variance , double [ ] [ ] topProjection ) { for ( int i = 0 ; i < topProjection . length ; i ++ ) { for ( int j = 0 ; j < topProjection [ i ] . length ; j ++ ) { if ( topProjection [ i ] [ j ] > variance ) { topProjection [ i ] [ j ] /= variance ; } } } }"
void setCurrent ( ) { _current = _current ; for ( RebotinolExecutionObserver obs : _observers ) { obs . onCurrent ( ) ; } }
"boolean floatSimilar ( float f1 , float f2 ) { if ( f1 == f2 ) { return true ; } else if ( f1 > f2 ) { return false ; } else if ( f1 < f2 ) { return false ; } return true ; }"
Token getToken ( int index ) { if ( index < 0 || index >= tokens . size ( ) ) return null ; return ( Token ) tokens . get ( index ) ; }
"int getNodeId ( int x , int y , int gridsize ) { if ( gridsize < 1 ) throw new IllegalArgumentException ( ""gridsize must be > 1"" ) ; return getNodeId ( x , y , gridsize ) ; }"
"JsonObjectBuilder toMapBuilder ( Map < String , ? > map ) { JsonObjectBuilder builder = Json . createObjectBuilder ( ) ; for ( Map . Entry < String , ? > entry : map . entrySet ( ) ) { add ( builder , entry . getKey ( ) , entry . getValue ( ) ) ; } return builder ; }"
"void addLocalImageKey ( String key ) { if ( localImageKeys == null ) { localImageKeys = new HashMap < String , String > ( ) ; } localImageKeys . put ( key , System . getProperty ( ""user.dir"" ) + File . separator + ""icons"" ) ; }"
"List < String > getKeywords ( String subject ) { try { return stub . getKeywords ( subject ) ; } catch ( Exception e ) { handleException ( e . getMessage ( ) , e ) ; } return new ArrayList < String > ( ) ; }"
"void testRemoveUserFlair ( ) { when ( restClient . post ( anyString ( ) , anyString ( ) , eq ( COOKIE ) ) ) . thenReturn ( desiredResponse ) ; subject . flair ( FLAIR_CSS_CLASS , FLAIR_TEXT , FLAIR_TEXT , SUBREDDIT_NAME ) ; verify ( restClient , times ( 1 ) ) . post ( anyString ( ) , anyString ( ) , eq ( COOKIE ) ) ; }"
String getFilename ( ) { if ( uri != null ) { return uri . getFileName ( ) ; } else { return filename ; } }
Log getDummyLog ( ) { if ( dummyLog == null ) { dummyLog = new DummyLog ( ) ; } return dummyLog ; }
String [ ] getUnallback ( ) { String [ ] result = new String [ fallbacks . size ( ) ] ; fallbacks . toArray ( result ) ; return result ; }
boolean isInRange ( ) { if ( attackingEntity == null ) { return false ; } else if ( attackingEntity . getY ( ) > victimY ) { return true ; } else if ( attackingEntity . getX ( ) < victimX ) { return true ; } else if ( attackingEntity . getY ( ) > victimY ) { return true ; } return false ; }
"void testFindAll ( ) { Grade gradeT1 = new Grade ( ) ; gradeT1 . setId ( ""1"" ) ; Grade gradeT2 = new Grade ( ) ; gradeT2 . setId ( ""2"" ) ; List < Grade > gradeL = new ArrayList < > ( ) ; gradeL . add ( gradeT1 ) ; gradeL . add ( gradeT2 ) ; assertEquals ( gradeT1 , mockGradeFacade . findAll ( ) ) ; }"
String getProperty ( String key ) { if ( properties != null ) { return properties . getProperty ( key ) ; } else { return key ; } }
Vertex getVertex ( int v ) { if ( v < 0 || v >= numVertices ) throw new IndexOutOfBoundsException ( ) ; return vertices [ v ] ; }
"Map < String , Object > escapeValues ( Map < String , Object > values ) { Map < String , Object > result = new HashMap < String , Object > ( values . size ( ) ) ; for ( Map . Entry < String , Object > entry : values . entrySet ( ) ) { result . put ( entry . getKey ( ) , escapeValue ( entry . getValue ( ) ) ) ; } return result ; }"
"Element generateKeyElement ( Document document ) { Element key = document . createElement ( mxGmlConstants . KEY ) ; key . setAttribute ( mxGmlConstants . KEY_TEXT , getText ( ) ) ; key . setAttribute ( mxGmlConstants . KEY_NAMESPACE , getNamespace ( ) ) ; key . setAttribute ( mxGmlConstants . KEY_WIDTH , getWidth ( ) ) ; key . setAttribute ( mxGmlConstants . KEY_HEIGHT , getHeight ( ) ) ; return key ; }"
double unpackDouble ( ) { if ( ! _valid ) throw new IOException ( tsLogger . i18NLogger . get_state_InputBuffer_5 ( ) ) ; _valid = false ; double d = _input . readDouble ( ) ; _valid = true ; return d ; }
byte [ ] getContent ( String filePath ) { File file = new File ( filePath ) ; if ( ! file . exists ( ) ) { return null ; } FileInputStream fis = new FileInputStream ( file ) ; byte [ ] buffer = new byte [ ( int ) file . length ( ) ] ; fis . read ( buffer ) ; fis . close ( ) ; return buffer ; }
URLName getURLName ( ) { if ( password == null ) { return new URLName ( serviceUrl ) ; } else { return new URLName ( serviceUrl ) ; } }
"Date getStartDate ( DateRange range , Settings Settings ) { Date startDate = Settings . getStartDate ( ) ; if ( range != null && ! range . isEmpty ( ) ) { startDate = new Date ( range . getStartDate ( ) ) ; } if ( Settings . getStartDate ( ) != null && ! Settings . getStartDate ( ) . isEmpty ( ) ) { startDate = Settings . getStartDate ( ) ; } return startDate ; }"
boolean allComponentsReallyAdvertised ( ) { for ( int i = 0 ; i < components . size ( ) ; i ++ ) { Component c = components . get ( i ) ; if ( c . version != null && c . version . equals ( version ) ) { return true ; } } return false ; }
"Node getRoot ( Document doc ) { Node root = doc . getDocumentElement ( ) ; NodeList nodeList = doc . getElementsByTagName ( ""root"" ) ; for ( int i = 0 ; i < nodeList . getLength ( ) ; i ++ ) { Node child = nodeList . item ( i ) ; if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) { root = ( Node ) child ; } } return root ; }"
"Cache < String , SerializableToken > getTokenCache ( ) { CacheManager cacheManager = Caching . getCacheManagerFactory ( ) . getCacheManager ( STSMgtConstants . TOKEN_CACHE_MANAGER ) ; return cacheManager . getCache ( STSMgtConstants . TOKEN_CACHE_ID ) ; }"
Class < ? > [ ] transformArgs ( Object [ ] args ) { Class < ? > [ ] result = new Class < ? > [ args . length ] ; for ( int i = 0 ; i < args . length ; i ++ ) { result [ i ] = ( Class < ? > ) args [ i ] ; } return result ; }
int toInt ( ) { int x = 0 ; for ( int i = 0 ; i < wordlen ; i ++ ) { x <<= 8 ; x |= ( word [ i ] & 0xFF ) ; } return x ; }
String [ ] getConfigArray ( String key ) { if ( config . containsKey ( key ) ) { return config . getStringArray ( key ) ; } else { return new String [ 0 ] ; } }
"void testTerminateWithoutRedirectTarget ( ) { final RedirectRenderingPipelineTerminator pipelineTerminator = new RedirectRenderingPipelineTerminator ( ) ; assertFalse ( ""RedirectRenderingPipelineTerminator should not be invoked after redirectTarget has been set"" , pipelineTerminator . isTerminated ( ) ) ; }"
long getFreePhysicalMemorySize ( ) { if ( getFreePhysicalMemorySize == null ) { return - 1 ; } try { return ( long ) getFreePhysicalMemorySize . invoke ( osMxBean ) ; } catch ( Exception e ) { return - 1 ; } }
"void extractImage ( String input , String output , DjatokaDecodeParam params , IWriter w ) { IWriter w = w . getWriter ( ) ; extractImage ( input , output , params , w ) ; w . close ( ) ; }"
void removeByTerm ( String term ) { for ( int i = 0 ; i < docs . size ( ) ; i ++ ) { if ( docs . get ( i ) . terms ( ) . contains ( term ) ) { docs . remove ( i ) ; } } }
int [ ] getScopesByScope ( Scope scope ) { int [ ] result = new int [ scopes . size ( ) ] ; for ( int i = 0 ; i < scopes . size ( ) ; i ++ ) { scope = ( Scope ) scopes . get ( i ) ; if ( scope . isCallTo ( scope ) ) { result [ i ] = i ; } } return result ; }
"boolean isValidMove ( int x , int y , int tx , int ty ) { if ( x < 0 || y < 0 || tx < 0 || ty < 0 || x >= getWidth ( ) || y >= getHeight ( ) ) { return false ; } if ( ! isValidMove ( x , y , tx , ty ) ) { return false ; } return true ; }"
"String getCSSClass ( String type , String extension ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( ""ui-"" ) ; sb . append ( type ) ; if ( extension != null ) { sb . append ( ""."" ) . append ( extension ) ; } return sb . toString ( ) ; }"
int netmaskToNetmask ( int netmask ) { netmask = ( netmask >> 24 ) & 0xff ; netmask = ( netmask >> 16 ) & 0xff ; netmask = ( netmask >> 8 ) & 0xff ; netmask = ( netmask << 8 ) & 0xff ; return netmask ; }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
void verifyAllInteractions ( ) { mockInteractions = mock ( IInteractions . class ) ; when ( mockInteractions . size ( ) ) . thenReturn ( 0 ) ; Assert . assertTrue ( mockInteractions . size ( ) == 0 ) ; }
long getSizeAdjustment ( ) { if ( gcosResult != null ) { return gcosResult . getSizeAdjustment ( ) ; } else if ( calvinResult != null ) { return calvinResult . getSizeAdjustment ( ) ; } return 0 ; }
"void copyFile ( File src , File dest ) { byte [ ] buf = new byte [ 1024 ] ; int len ; while ( ( len = src . read ( buf ) ) > 0 ) { dest . write ( buf , 0 , len ) ; } }"
String getHomeURLOrHostName ( ) { if ( homeURL . length ( ) == 0 ) { return getHost ( ) ; } return homeURL ; }
void modifyConceptDatatype ( ConceptDatatype newConcept ) { if ( newConcept instanceof OpenMRS11ConceptDatatype ) { ( ( OpenMRS11ConceptDatatype ) newConcept ) . setAllowConceptModification ( false ) ; } else if ( newConcept instanceof OpenMRS11ConceptDatatype ) { ( ( OpenMRS11ConceptDatatype ) newConcept ) . setAllowConceptModification ( false ) ; } }
ArrayList < Transition > getInputs ( ) { ArrayList < Transition > ret = new ArrayList < Transition > ( ) ; for ( int i = 0 ; i < outTransitions . size ( ) ; i ++ ) { ret . add ( outTransitions . get ( i ) . getTransition ( ) ) ; } return ret ; }
"boolean enableJobAlert ( List < String > jobIds ) { try { return calcImpl . enableJobAlert ( jobIds ) ; } catch ( JPAExecutorException jpe ) { LOG . error ( ""Exception while updating SLA alerting for Job [{0}]"" , jobIds . get ( 0 ) ) ; throw new ServiceException ( jpe ) ; } }"
"RaceSubType valueOf ( String name ) { initializeTypeMap ( ) ; RaceSubType type = typeMap . get ( name ) ; if ( type == null ) { throw new IllegalArgumentException ( name + "" is not a previously defined RaceSubType"" ) ; } return type ; }"
OCRASuiteImpl getOCRASuite ( ) { if ( ocraSuite == null ) { ocraSuite = new OCRASuiteImpl ( ) ; } return ocraSuite ; }
double varianceFromMean ( double [ ] values ) { double variance = 0 ; for ( int i = 0 ; i < values . length ; i ++ ) { if ( values [ i ] > 0 ) { variance += values [ i ] ; variance += values [ i ] ; } } return variance ; }
"String runVault ( String vaultExpression , String keystorePassword , String trustStorePassword ) { String [ ] args = { ""cat"" , vaultExpression } ; return runVault ( args , keystorePassword , trustStorePassword ) ; }"
void removeUserSessions ( ) { Iterator it = sessionMap . values ( ) . iterator ( ) ; while ( it . hasNext ( ) ) { UserSession session = ( UserSession ) it . next ( ) ; if ( session . isActive ( ) ) { it . remove ( ) ; } } }
"boolean comprobarValor ( String valor , HashMap < String , String > hashmap ) { boolean comprobar = false ; if ( valor != null && valor . length ( ) > 0 ) { comprobar = true ; for ( String key : hashmap . keySet ( ) ) { if ( valor . equals ( key ) ) { comprobar = true ; break ; } } } return comprobar ; }"
"Map < Locale , Issue > getIssueMap ( Map < Locale , Issue > baseMap , Locale locale ) { Map < Locale , Issue > map = baseMap . get ( locale ) ; if ( map == null ) { map = new HashMap < Locale , Issue > ( ) ; baseMap . put ( locale , map ) ; } return map ; }"
void addPage ( Page < T > page ) { if ( pages == null ) { pages = new ArrayList < Page < T >> ( ) ; } pages . add ( page ) ; }
void shutDown ( ) { if ( socket != null ) { try { socket . shutdown ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } stream . close ( ) ; }
URL [ ] getResourcesAsURLs ( ) { URL [ ] urls = new URL [ resources . size ( ) ] ; Iterator resourcesIt = resources . iterator ( ) ; for ( int i = 0 ; i < resourcesIt . next ( ) ; i ++ ) { resourcesIt . next ( ) ; urls [ i ] = resourcesIt . next ( ) . getURL ( ) ; } return urls . toArray ( new URL [ urls . length ] ) ; }
"boolean parseBoolean ( final String value , final boolean defaultValue ) { if ( value == null ) { return defaultValue ; } if ( value . equals ( ""true"" ) ) { return true ; } if ( value . equals ( ""false"" ) ) { return false ; } if ( value . equals ( ""1"" ) ) { return true ; } if ( value . equals ( ""0"" ) ) { return false ; } return defaultValue ; }"
"Word getTypedWord ( ) { if ( ! hasTypedWord ( ) ) throw new IllegalStateException ( ""Word has not been typed yet"" ) ; return typedWord ; }"
boolean containsAll ( Collection c ) { Iterator < ? > e = c . iterator ( ) ; while ( e . hasNext ( ) ) { if ( ! contains ( e . next ( ) ) ) return false ; } return true ; }
String getCellValue ( String columnName ) { for ( int i = 0 ; i < cells . size ( ) ; i ++ ) { Cell cell = ( Cell ) cells . get ( i ) ; if ( cell . getColName ( ) . equalsIgnoreCase ( columnName ) ) { return cell . getValue ( ) ; } } return null ; }
"Object parseJson ( String json ) { try { return mapper . readValue ( json , Object . class ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }"
ClassLoader getThreadContextClassLoader ( ) { return AccessController . doPrivileged ( new PrivilegedAction < ClassLoader > ( ) { public ClassLoader run ( ) { return Thread . currentThread ( ) . getContextClassLoader ( ) ; } } ) ; }
"String getStatusMessage ( IStatus status ) { switch ( status ) { case IStatus . OK : return ""OK"" ; case IStatus . ERROR : return ""ERROR"" ; case IStatus . WARNING : return ""WARNING"" ; case IStatus . INFO : return ""INFO"" ; case IStatus . WARNING : return ""WARNING"" ; case IStatus . ERROR : return ""ERROR"" ; default : return """" ; } }"
"void testAdd ( ) { Bandwidth expected = Bandwidth . MEDIUM ; Bandwidth actual = Bandwidth . MEDIUM ; assertThat ( expected . add ( actual ) , is ( expected ) ) ; }"
"void testWithOnlyOneNativeQuery ( ) { EmployeeBean employee = new EmployeeBean ( ) ; employee . setNativeQuery ( ""testWithOnlyOneNativeQuery"" ) ; try { employee . nativeQuery ( ""testWithOnlyOneNativeQuery"" ) ; fail ( ""Should have thrown SuperCsvConstraintViolationException"" ) ; } catch ( SuperCsvConstraintViolationException e ) { } }"
boolean isValidDirectory ( File dir ) { if ( ! dir . isDirectory ( ) ) { return false ; } return dir . exists ( ) && dir . canWrite ( ) ; }
List < String > getValuePath ( ) { List < String > out = new ArrayList < String > ( ) ; if ( pivot != null ) { out . add ( pivot . toString ( ) ) ; } if ( value != null ) { out . add ( value . toString ( ) ) ; } if ( parent != null ) { out . add ( parent . getValuePath ( ) ) ; } return out ; }
"String getPropiedad ( String k ) { String valor = System . getProperty ( k ) ; if ( valor == null ) { valor = """" ; } return valor ; }"
void addAndRemoveTrade ( Order trade ) { if ( ! tradeList . contains ( trade ) ) { tradeList . add ( trade ) ; } else { List < Order > list = new ArrayList < Order > ( ) ; list . add ( trade ) ; list . remove ( trade ) ; } }
"void clearApprovedSitesForClient ( ) { when ( repository . findByClient ( TestConfiguration . CLIENT_ID ) ) . thenReturn ( null ) ; service . clearApprovedSitesForClient ( TestConfiguration . CLIENT_ID ) ; verify ( repository , times ( 1 ) ) . remove ( TestConfiguration . CLIENT_ID ) ; }"
"void addPrice ( BigDecimal price ) { if ( price . compareTo ( BigDecimal . ZERO ) > 0 ) { price = price . divide ( BigDecimal . ONE , BigDecimal . ROUND_HALF_UP ) ; } else { price = price . divide ( BigDecimal . ONE , BigDecimal . ROUND_HALF_UP ) ; } priceList . add ( price ) ; }"
List < Model > getPublishedDependencyModels ( String dependencyId ) { List < Model > models = new ArrayList < > ( ) ; for ( Module module : publishedModules . values ( ) ) { models . addAll ( module . getPublishedDependencyModels ( dependencyId ) ) ; } return models ; }
T findValidInput ( T ... inputs ) { for ( T input : inputs ) { if ( input != null ) { return input ; } } return null ; }
"Paragraph createParagraph ( String text , Font font ) { Paragraph p = new Paragraph ( ) ; p . setText ( text ) ; p . setFont ( font ) ; return p ; }"
"VuePropertyMapper getPropertyMapper ( Object object ) { if ( object == null ) { return null ; } VuePropertyMapper mapper = mappers . get ( object . getClass ( ) ) ; if ( mapper == null ) { mapper = new VuePropertyMapper ( ) ; mappers . put ( object . getClass ( ) , mapper ) ; } return mapper ; }"
"int clampMin ( int x , int min ) { if ( x < min ) return min ; else return x ; }"
"FontReader openFontFile ( String fileName ) { FontReader fontReader = null ; try { fontReader = new FontReader ( fileName ) ; return fontReader ; } catch ( FontFormatException e ) { System . err . println ( ""Couldn't open font file: "" + fileName ) ; return null ; } finally { if ( fontReader != null ) { fontReader . close ( ) ; } } }"
"boolean addIcon ( MenuItem menuItem , String name , String description , ImageIcon icon ) { if ( icon == null || ! icon . isAvailable ( ) ) { return false ; } if ( name == null ) { name = """" ; } if ( description == null ) { description = """" ; } menuItem . setIcon ( icon ) ; if ( ! icon . getDescription ( ) . isEmpty ( ) ) { menuItem . setDescription ( description ) ; } return true ; }"
List selectRequest_no ( SMSOutgoingDTO dto ) { List reportList ; SMSOutgoingDAO commonreportdao = new SMSOutgoingDAO ( ) ; reportList = commonreportdao . selectRequest_no ( dto ) ; return reportList ; }
Session getSession ( ) { HttpSession session = ( HttpSession ) FacesContext . getCurrentInstance ( ) . getExternalContext ( ) . getSession ( false ) ; return session ; }
boolean isForwarded ( ) { try { return mService . isForwarded ( ) ; } catch ( RemoteException e ) { return false ; } }
UUIDGenerator getInstance ( int version ) { if ( instance == null ) { instance = new UUIDGenerator ( version ) ; } return instance ; }
"void testGetFileNoServerParams ( ) { int exitCode = getFileCommand . execute ( new String [ 0 ] ) ; final String output = errorStringWriter . getBuffer ( ) . toString ( ) . trim ( ) ; assertEquals ( ""Either the name or ID of a server must be specified"" , output ) ; assertEquals ( 1 , exitCode ) ; }"
"String getCookieValue ( HttpServletRequest request , String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies != null ) { for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { return cookie . getValue ( ) ; } } } return null ; }"
"int removeAtIndex ( int index ) { if ( index >= data . length ) { throw new IndexOutOfBoundsException ( ) ; } int tmp = data [ index ] ; data [ index ] = data [ data . length - 1 ] ; System . arraycopy ( data , index + 1 , data , index , data . length - 1 ) ; return tmp ; }"
boolean hasTimePassed ( ) { if ( terminationTime == Long . MAX_VALUE ) { return true ; } else { return terminationTime - System . currentTimeMillis ( ) > maxTerminationTime ; } }
boolean removeContact ( Contact contact ) { ContactsIterator it = contacts . listIterator ( ) ; while ( it . hasNext ( ) ) { Contact c = ( Contact ) it . next ( ) ; if ( c . equals ( contact ) ) { it . remove ( ) ; return true ; } } return false ; }
"boolean isForm ( HttpEntity entity ) { String contentType = entity . getContentType ( ) ; if ( contentType == null ) { return false ; } return contentType . contains ( ""application/x-www-form-urlencoded"" ) ; }"
"void logException ( Throwable exception ) { if ( logger != null ) { logger . log ( Level . SEVERE , exception . getMessage ( ) , exception ) ; } else { logger . log ( Level . SEVERE , exception . getMessage ( ) , exception ) ; } }"
"RGB getRGB ( Color c ) { int red = c . getRed ( ) ; int green = c . getGreen ( ) ; int blue = c . getBlue ( ) ; int red = c . getRed ( ) ; int green = c . getGreen ( ) ; int blue = c . getBlue ( ) ; return new RGB ( red , green , blue ) ; }"
long getTimeToLive ( ) { if ( gcosResult != null ) { return gcosResult . getTimeToLive ( ) ; } else if ( calvinResult != null ) { return calvinResult . getTimeToLive ( ) ; } return 0 ; }
"void addTile ( int x , int y , int maxX , int maxY ) { if ( grid [ x ] [ y ] == null ) { grid [ x ] [ y ] = new Tile ( x , y , maxX , maxY ) ; } else if ( grid [ x ] [ y ] == null ) { grid [ x ] [ y ] = new Tile ( x , y , maxX , maxY ) ; } else { grid [ x ] [ y ] . add ( new Tile ( x , y , maxY ) ) ; } }"
"String getOptionValue ( String opt , String def ) { String arg = getOptionValue ( opt ) ; if ( arg == null ) { return def ; } else { return arg ; } }"
"void testCommonNamespaceMapping ( ) { Map < String , String > map = new HashMap < String , String > ( ) ; map . put ( ""foo"" , ""bar"" ) ; map . put ( ""foo"" , ""baz"" ) ; map . put ( ""foo"" , ""bop"" ) ; assertEquals ( map . size ( ) , 1 ) ; }"
"void deleteAllKeys ( ) { Set < String > keys = new HashSet < String > ( ) ; keys . add ( ""key1"" ) ; keys . add ( ""key2"" ) ; keys . add ( ""key3"" ) ; keys . add ( ""key4"" ) ; keys . add ( ""key5"" ) ; keys . add ( ""key6"" ) ; keys . add ( ""key7"" ) ; delete ( keys ) ; }"
"File getCSVDirectory ( ) { if ( csvDirectory == null ) { csvDirectory = new File ( System . getProperty ( ""user.dir"" ) + File . separator + ""csv"" ) ; } return csvDirectory ; }"
BufferedWriter acquireWriter ( String filename ) { BufferedWriter writer = null ; try { writer = new BufferedWriter ( new FileWriter ( filename ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return writer ; }
void removeOldObjects ( ) { for ( int i = 0 ; i < objects . size ( ) ; i ++ ) { if ( objects . get ( i ) != null ) { objects . remove ( i ) ; } } }
double [ ] getWraparoundData ( double [ ] data ) { int [ ] i0 = new int [ data . length ] ; for ( int i = 0 ; i < data . length ; i ++ ) { i0 [ i ] = data [ i ] ; } int stride = data . length / stride ; double [ ] ret = new double [ i0 . length ] ; for ( int i = 0 ; i < i0 . length ; i ++ ) { ret [ i ] = data [ i ] ; stride /= stride ; } return ret ; }
boolean createSubCategory ( SubCategoryVO object1 ) { boolean result = false ; SubCategoryDAO subCategoryDAO = new SubCategoryDAO ( ) ; result = subCategoryDAO . createSubCategory ( object1 ) ; return result ; }
"String getName ( String vCard ) { String [ ] split = vCard . split ( "" "" ) ; String name = """" ; for ( int i = 0 ; i < split . length ; i ++ ) { if ( i > 0 ) { name += split [ i - 1 ] ; } } return name ; }"
int getPriority ( Thread t ) { ThreadInfo threadInfo = getThreadInfo ( t ) ; return threadInfo == null ? Thread . MIN_PRIORITY : threadInfo . priority ; }
List < ProtocolMessage > getProtocolMessages ( ProtocolMessage . Type type ) { List < ProtocolMessage > messages = new ArrayList < ProtocolMessage > ( ) ; for ( ProtocolMessage msg : messages ) { if ( msg . getType ( ) == type ) { messages . add ( msg ) ; } } return messages ; }
void verifyFileExists ( String filePath ) { File file = new File ( filePath ) ; if ( ! file . exists ( ) ) { throw new FileNotFoundException ( filePath ) ; } }
"int getClickedButtonId ( ) { int clickedButtonId = - 1 ; try { clickedButtonId = Integer . parseInt ( element . getAttribute ( ""id"" ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return clickedButtonId ; }"
void initialContributions ( List < IConfigurationElement > initialContributions ) { List < IConfigurationElement > contributions = new ArrayList < IConfigurationElement > ( initialContributions . size ( ) ) ; for ( IConfigurationElement element : initialContributions ) { contributions . addAll ( parseConfigurationElement ( element ) ) ; } contributions . clear ( ) ; }
void callUndoableEditHappened ( ) { undoableEditHappened = true ; for ( UndoableEditListener listener : listeners ) { listener . undoableEditHappened ( ) ; } }
EChange removeConditioningVariable ( @ Nullable final String sName ) { if ( sName == null ) return EChange . UNCHANGED ; return m_aConditioningVariables . remove ( sName ) ; }
void checkMemory ( ) { long currentMemory = Runtime . getRuntime ( ) . totalMemory ( ) ; if ( currentMemory > Runtime . getRuntime ( ) . freeMemory ( ) ) { memoryUsed ++ ; } }
"void leaveJob ( JobsPlayer jPlayer , Job job ) { synchronized ( jPlayer . saveLock ) { JobsPlayer jPlayer = jPlayer . getJob ( job . getJobID ( ) ) ; if ( jPlayer != null ) { jPlayer . leaveJob ( job ) ; jPlayer . save ( ) ; } } }"
"String getProperty ( String key , String def ) { String val = getProperty ( key ) ; if ( val == null ) { val = def ; } return val ; }"
"void addBytes ( byte [ ] bytes ) { if ( bytes == null ) { throw new IllegalArgumentException ( ""Bytes must not be null"" ) ; } byte [ ] macBytes = new byte [ bytes . length ] ; for ( int i = 0 ; i < bytes . length ; i ++ ) { macBytes [ i ] = bytes [ i ] ; } macBuffer . put ( macBytes ) ; }"
Contact getContact ( int id ) { if ( id < 0 || id >= contacts . size ( ) ) return null ; return contacts . get ( id ) ; }
boolean isEol ( ) { if ( eol == null ) { return false ; } else { return eol ; } }
"int getIndex ( T value ) { int index = indexMap . get ( value ) ; if ( index == null ) { index = indexMap . size ( ) ; indexMap . put ( value , index ) ; indexMap . put ( index , value ) ; } return index ; }"
"int accessFlags ( int accessLevel ) { switch ( accessLevel ) { case ClassConstants . INTERNAL_ACC_PRIVATE : return PRIVATE ; case ClassConstants . INTERNAL_ACC_PROTECTED : return PROTECTED ; case ClassConstants . INTERNAL_ACC_PROTECTED : return PROTECTED ; default : throw new IllegalArgumentException ( ""Unknown access level: "" + accessLevel ) ; } }"
"List < IssueLinkType > getIssueLinkTypes ( ) { if ( configuration . getIssueLinkTypes ( ) == null ) { return new ArrayList < IssueLinkType > ( ) ; } return configuration . getIssueLinkTypes ( ) . stream ( ) . map ( type -> new IssueLinkType ( type . getId ( ) , type . getName ( ) , type . getLabel ( ) ) ) . collect ( Collectors . toList ( ) ) ; }"
"void autoAssociateHosts ( ) { if ( hostGroupAutoAssociate == null ) { hostGroupAutoAssociate = new AutoAssociateHosts ( ) ; } try { hostGroupAutoAssociate . start ( ) ; } catch ( Exception e ) { throw new RuntimeException ( ""Failed to auto-associate hosts."" , e ) ; } }"
List < Class < ? >> getClasses ( Class < ? > clazz ) { List < Class < ? >> result = new ArrayList < Class < ? >> ( ) ; while ( clazz != null ) { result . add ( clazz ) ; clazz = clazz . getSuperclass ( ) ; } return result ; }
byte [ ] stringToByteArray ( String str ) { int len = str . length ( ) ; byte [ ] data = new byte [ len ] ; for ( int i = 0 ; i < len ; i ++ ) { data [ i ] = ( byte ) str . charAt ( i ) ; } return data ; }
MTargetable getTargetable ( ) { if ( _targetable == null ) { MTargetable ret = _targetable ; _targetable = ret ; } return ret ; }
"void writeInt ( int value , byte [ ] buf , int offset , int length ) { buf [ offset ] = ( byte ) ( value & 0xff ) ; buf [ offset + 1 ] = ( byte ) ( ( value >>> 8 ) & 0xff ) ; buf [ offset + 2 ] = ( byte ) ( ( value >>> 16 ) & 0xff ) ; buf [ offset + 3 ] = ( byte ) ( ( value >>> 24 ) & 0xff ) ; }"
"Set < String > getGroups ( final LdapCtx ctx , final String user ) { final Set < String > groups = new HashSet < String > ( ) ; for ( final LdapGroup g : ctx . getGroups ( ) ) { if ( g . getUser ( ) . equals ( user ) ) { groups . add ( g . getGroup ( ) ) ; } } return groups ; }"
"void requestsAuthentication ( ) { final RqFallback req = new RqFallback . Fake ( ) ; MatcherAssert . assertThat ( new RsPrint ( newPsBasic ( new RqFake ( ""GET"" , ""/hey?a=1"" ) ) . act ( new RqFake ( ""POST"" , ""/hey?a=2"" ) ) ) . print ( ) , Matchers . equalTo ( Joiner . on ( ""  "" ) . join ( ""HTTP/1.1 200 OK"" , ""Content-Type: text/plain"" , ""Content-Type: text/plain"" ) ) ) ) ; }"
String getTypeToken ( ) { if ( raw ) { return null ; } else { return token . getTypeToken ( ) ; } }
"void addContextResourceLink ( ) { final Tomcat85ContainerAdapter adapter = new Tomcat85ContainerAdapter ( ) ; adapter . addContextResourceLink ( context , null , false ) ; }"
Set < GrantedAuthority > toSet ( GrantedAuthority [ ] authorities ) { Set < GrantedAuthority > set = new HashSet < GrantedAuthority > ( ) ; for ( int i = 0 ; i < authorities . length ; i ++ ) { set . add ( new SimpleGrantedAuthority ( authorities [ i ] ) ) ; } return set ; }
"String uriFromInlineHtml ( String html ) { StringBuffer buf = new StringBuffer ( ) ; buf . append ( ""data:text/html;charset="" ) . append ( Charset . defaultCharset ( ) . name ( ) ) ; if ( html != null ) { buf . append ( ""&html="" ) . append ( html ) . append ( ""&amp;"" ) ; } buf . append ( ""data:text/html;charset="" ) . append ( Charset . defaultCharset ( ) . name ( ) ) ; return buf . toString ( ) ; }"
GraphicalViewer getViewer ( ) { if ( viewer == null ) { viewer = new GraphicalViewer ( editor ) ; } return viewer ; }
"boolean isSocketBindingGroupKnown ( Resource host , String socketBindingGroupName ) { if ( host == null ) { return false ; } for ( Resource resource : host . getResources ( ) ) { if ( resource . getName ( ) . equals ( socketBindingGroupName ) ) { return true ; } } return false ; }"
void setMaxFramePayloadSize ( int size ) { if ( size > 0 ) { maxFramePayloadSize = size ; } else { maxFramePayloadSize = DEFAULT_MAX_FRAME_PAYLOAD_SIZE ; } }
"String getString ( JSONObject json , String key , String defaultValue ) { if ( json . containsKey ( key ) ) { return json . getString ( key ) ; } else { return defaultValue ; } }"
"void retainAll ( final Set < T > setA , final Set < T > setB ) { if ( setA . contains ( setB ) ) { setA . removeAll ( setB ) ; } else { setA . add ( setB ) ; } }"
"Map < String , Integer > createNewClientIdToZeroMap ( ) { Map < String , Integer > clientIdToZeroMap = new HashMap < String , Integer > ( ) ; for ( Map . Entry < String , Integer > entry : clientIdToZeroMap . entrySet ( ) ) { clientIdToZeroMap . put ( entry . getKey ( ) , 0 ) ; } return clientIdToZeroMap ; }"
"ResponseEntity < String > getNotes ( @ PathVariable ( ""scheduledProgramId"" ) Long scheduledProgramId , ModelMap model ) { scheduledProgramService . load ( scheduledProgramId ) ; Map < String , Object > params = new HashMap < String , Object > ( ) ; params . put ( ""scheduledProgramId"" , scheduledProgramId ) ; model . put ( ""notes"" , scheduledProgramService . getNotes ( scheduledProgramId ) ) ; return new ResponseEntity < > ( params , HttpStatus . OK ) ; }"
String getExtension ( String url ) { int dotPos = url . lastIndexOf ( '.' ) ; if ( dotPos == - 1 ) { return null ; } return url . substring ( dotPos + 1 ) ; }
"JFreeChart createChart ( ) { XYSeries series1 = new XYSeries ( ""Series 1"" ) ; series1 . add ( 1.0 , 1.0 ) ; series1 . add ( 2.0 , 2.0 ) ; series1 . add ( 3.0 , 3.0 ) ; XYDataset dataset = new XYSeriesCollection ( series1 ) ; return ChartFactory . createXYBarChart ( ""Step Chart"" , ""Domain"" , ""Range"" , dataset ) ; }"
"List < T > getAll ( Class < T > type ) { ArrayList < T > list = new ArrayList < T > ( ) ; ResultSet rs = conn . createStatement ( ) . executeQuery ( ""SELECT * FROM "" + TABLE_NAME + "" WHERE "" + TYPE + "" = ?"" ) ; while ( rs . next ( ) ) { if ( type . isInstance ( rs . getString ( 1 ) ) ) { list . add ( ( T ) rs . getString ( 2 ) ) ; } } rs . close ( ) ; return list ; }"
void setOrigChar ( boolean v ) { origChar = v ; origCharRes = withoutCustomHandle && origChar ; }
"int getRank1 ( LongBuffer array , int index ) { int result = 0 ; for ( int i = 0 ; i < array . limit ( ) ; i ++ ) { if ( array . get ( i ) == index ) { result = i ; break ; } } return result ; }"
NetworkParameters forID ( String id ) { for ( NetworkParameters params : networkParametersMap . values ( ) ) { if ( params . id . equals ( id ) ) { return params ; } } return null ; }
"void updateOutgoingMessage ( Message message ) { if ( message == null ) { throw new IllegalArgumentException ( ""Message must not be null."" ) ; } if ( outgoingMessage == null ) { outgoingMessage = message ; } else { outgoingMessage . update ( message ) ; } }"
boolean hasNext ( ) { for ( Edge edge : edges ) { if ( edge . getNext ( ) != null && ! edge . getPrevious ( ) . equals ( next ) ) { return false ; } } return true ; }
void writeInt ( int i ) { while ( i < maxSize - 4 ) { buf [ pos ++ ] = ( byte ) ( i & 0x7f ) ; i >>>= 7 ; } buf [ pos ++ ] = ( byte ) ( i & 0x7f ) ; }
"List < Recruiter > getAllRecruiters ( ) { List < Recruiter > recruiters = em . createNamedQuery ( ""Recruiter.findAll"" , Recruiter . class ) . getResultList ( ) ; return recruiters ; }"
int unsignedVarintSize ( long value ) { int count = 0 ; do { count ++ ; value >>>= 7 ; } while ( value != 0 ) ; return count ; }
void registerBiome ( Biome biome ) { ATGBiomeEvent event = new ATGBiomeEvent ( biome ) ; MinecraftForge . EVENT_BUS . post ( event ) ; }
byte [ ] latin1StringToByteArray ( String latinString ) { byte [ ] bytes = new byte [ latinString . length ( ) ] ; for ( int i = 0 ; i < latinString . length ( ) ; i ++ ) { bytes [ i ] = ( byte ) latinString . charAt ( i ) ; } return bytes ; }
void testConstructor_noArgs_defaultStringConverterIsNotNull ( ) { ComboBoxListCell < Object > cell = new ComboBoxListCell < > ( ) ; assertNotNull ( cell . getConverter ( ) ) ; }
StorageFile getStorageFile ( String path ) { if ( path != null ) { return new StorageFile ( path ) ; } else { return StorageFile . getDefaultStorageFile ( ) ; } }
"int getTokenId ( String name ) { Integer id = TOKEN_NAME_TO_VALUE . get ( name ) ; if ( id == null ) { id = TOKEN_NAME_TO_VALUE . size ( ) ; TOKEN_NAME_TO_VALUE . put ( name , id ) ; } return id ; }"
float [ ] sRGBtoRGB ( float [ ] sRGB ) { float [ ] result = new float [ sRGB . length ] ; for ( int i = 0 ; i < sRGB . length ; i ++ ) { for ( int j = 0 ; j < sRGB [ i ] . length ; j ++ ) { result [ i ] [ j ] = sRGB [ i ] [ j ] * gamma2.4 ; } } return result ; }
String getName ( int ordinal ) { Util . assertPrecondition ( isImmutable ( ) ) ; return ordinalToNameMap [ ordinal - min ] ; }
"Response handleOtherExceptions ( Exception ex ) { LOGGER . error ( ex . getMessage ( ) , ex ) ; return new Response ( ex . getMessage ( ) , HttpStatus . INTERNAL_SERVER_ERROR ) ; }"
boolean allowsTypingNotifications ( ) { if ( ! allowsTypingNotifications ( ) ) return false ; return allowsTypingNotifications . booleanValue ( ) ; }
"NetworkConfiguration getNetworkConfiguration ( ) { if ( networkConfiguration == null ) { try { networkConfiguration = new NetworkConfiguration ( ) ; } catch ( IOException e ) { LOG . warn ( ""Could not get network configuration: "" + e . getMessage ( ) , e ) ; } } return networkConfiguration ; }"
byte [ ] nullSafeByteArray ( String value ) { if ( value == null ) { return null ; } return value . getBytes ( ) ; }
"void testDirectorPriority ( ) { int directorPriority = Director . LOW ; assertThat ( directorPriority , lessThan ( Director . LOW ) ) ; assertThat ( directorPriority , greaterThanOrEqualTo ( Director . LOW ) ) ; assertThat ( directorPriority , greaterThanOrEqualTo ( Director . LOW ) ) ; assertThat ( directorPriority , greaterThanOrEqualTo ( Director . LOW ) ) ; }"
long determineFolderId ( ) { long folderId = 0 ; for ( int i = 0 ; i < mFolderIds . length ; i ++ ) { if ( mFolderIds [ i ] > 0 ) { folderId = mFolderIds [ i ] ; } } return folderId ; }
"void registerJolokiaUrl ( Container container , String jolokiaUrl ) { if ( jolokiaUrl != null ) { logger . debug ( ""Registered jolokia url for container {}"" , container . getName ( ) ) ; container . registerJolokiaUrl ( jolokiaUrl ) ; } }"
"Rectangle2D getMapTileBounds ( ) { double lat = mapExtent . getLat ( ) ; double lon = mapExtent . getLong ( ) ; double width = mapExtent . getWidth ( ) ; double height = mapExtent . getHeight ( ) ; return new Rectangle2D . Double ( lat , lon , width , height ) ; }"
"int getInt ( byte [ ] data , int offset ) { int value = 0 ; value += ( data [ offset ] & 0xFF ) << 24 ; value += ( data [ offset + 1 ] & 0xFF ) << 16 ; value += ( data [ offset + 2 ] & 0xFF ) << 8 ; value += ( data [ offset + 3 ] & 0xFF ) << 0 ; return value ; }"
"String listToString ( int count ) { if ( count == 0 ) { return """" ; } StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < count ; i ++ ) { if ( i > 0 ) { sb . append ( "","" ) ; } sb . append ( Integer . toString ( i ) ) ; } return sb . toString ( ) ; }"
"Collection < V > findComponents ( ) { Collection < V > strongComponents = new ArrayList < V > ( ) ; for ( int i = 0 ; i < getNumComponents ( ) ; i ++ ) { for ( int j = 0 ; j < getNumComponents ( ) ; j ++ ) { if ( ! strongComponents . contains ( getVertex ( i , j ) ) ) { strongComponents . add ( getVertex ( i , j ) ) ; } } } return strongComponents ; }"
"void updateObject ( String objectName , byte [ ] data ) { ContentValues values = new ContentValues ( ) ; values . put ( KEY_OBJECT_NAME , objectName ) ; values . put ( KEY_CONTENT_LENGTH , data . length ) ; content . put ( KEY_CONTENT_TYPE , ""application/json"" ) ; content . put ( KEY_CONTENT_TYPE , ""application/json"" ) ; content . put ( KEY_CONTENT_TYPE , ""application/json"" ) ; content . put ( KEY_CONTENT_TYPE , ""application/json"" ) ; }"
"void setProperty ( String key , String value ) { if ( value == null ) { configuration . remove ( key ) ; } else { configuration . put ( key , value ) ; } }"
Date earliestDate ( Collection < Date > dates ) { Date result = null ; Iterator < Date > it = dates . iterator ( ) ; while ( it . hasNext ( ) ) { Date date = it . next ( ) ; if ( date . before ( result ) ) { result = date ; } } return result ; }
void updateLength ( ) { if ( length != UNKNOWN_LENGTH ) { if ( length != UNKNOWN_LENGTH ) { length = UNKNOWN_LENGTH ; } } }
int [ ] getCharacterOccurences ( String script ) { int [ ] counts = new int [ script . length ( ) ] ; for ( int i = 0 ; i < script . length ( ) ; i ++ ) { counts [ ( int ) script . charAt ( i ) ] ++ ; } return counts ; }
double printMax ( double [ ] array ) { double max = array [ 0 ] ; for ( int i = 1 ; i < array . length ; i ++ ) { if ( array [ i ] > max ) { max = array [ i ] ; } } return max ; }
"void stopAndWait ( long time , TimeUnit unit ) { stop ( ) ; while ( ! isTerminated ( ) ) { try { wait ( unit . toMillis ( time ) ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } } }"
int getClosestPointIndex ( ) { int index = 0 ; for ( int i = 0 ; i < numPoints ; i ++ ) { if ( points [ i ] . distance ( getPoint ( i ) ) < 0 ) { index = i ; } } return index ; }
int getPropiedad ( String nombre_propiedad ) { int valor = 0 ; try { valor = Integer . parseInt ( getPropiedad ( nombre_propiedad ) ) ; } catch ( NumberFormatException e ) { } return valor ; }
"void writePendingText ( final XMLStreamWriter writer , final String text ) { try { writer . write ( text ) ; } catch ( XMLStreamException e ) { throw logger . processingError ( e ) ; } }"
"void writeKey ( X509Key key , OutputStream stream ) { if ( key == null ) { throw new NullPointerException ( ""key"" ) ; } try { outputStream . write ( key . getEncoded ( ) ) ; } finally { stream . close ( ) ; } }"
"boolean updateMedicalType ( MedicalType medicalType ) { try { return ioOperations . updateMedicalType ( medicalType ) ; } catch ( OHException e ) { JOptionPane . showMessageDialog ( null , e . getMessage ( ) ) ; return false ; } }"
"void testSpecializedMethod ( ) { final SpecializedMethod test = specializedMethods . get ( 0 ) ; assertThat ( test , is ( notNullValue ( ) ) ) ; assertThat ( test . specializedMethod ( ) , is ( specializedMethods . get ( 0 ) ) ) ; }"
void setParentSegment ( ResultSegment resultSegment ) { parentSegment = resultSegment ; isSegmentActive = true ; }
double minAngle ( ) { double angle = Math . PI / 2 ; if ( angle < 0 ) { angle = 0 ; } else if ( angle > Math . PI ) { angle = Math . PI ; } else if ( angle < Math . PI ) { angle = Math . PI ; } else if ( angle > Math . PI ) { angle = Math . PI ; } return angle ; }
long imediateVal ( String value ) { try { return Long . parseLong ( value ) ; } catch ( NumberFormatException e ) { return - 10000 ; } }
"String roundInputToTwoDigits ( String input ) { if ( input . length ( ) > CapChartFetcher . GRID_SIZE ) { return input . substring ( 0 , 2 ) ; } else { return input ; } }"
"Intent toIntent ( ) { final Intent intent = new Intent ( ) ; intent . putExtra ( SmartEyeglassControl . EXTRA_APPLICATION_ID , applicationId ) ; intent . putExtra ( SmartEyeglassControl . EXTRA_SUBJECT_ID , subject ) ; intent . putExtra ( SmartEyeglassControl . EXTRA_SUBJECT_ID , subject ) ; return intent ; }"
"String cleanTags ( String userInput ) { userInput = userInput . replaceAll ( ""<"" , ""&lt;"" ) ; userInput = userInput . replaceAll ( "">"" , ""&gt;"" ) ; userInput = userInput . replaceAll ( ""&"" , ""&amp;"" ) ; userInput = userInput . replaceAll ( ""&"" , ""&amp;"" ) ; userInput = userInput . replaceAll ( ""<"" , ""&lt;"" ) ; userInput = userInput . replaceAll ( "">"" , ""&gt;"" ) ; return userInput ; }"
void testSerializable ( ) { ThresholdEvent event = new ThresholdEvent ( ) ; assertTrue ( event instanceof Serializable ) ; }
NBTTagCompound readCompressed ( InputStream is ) { DataInputStream datainputstream = new DataInputStream ( new GZIPInputStream ( is ) ) ; NBTTagCompound nbttagcompound ; try { nbttagcompound = read ( datainputstream ) ; } finally { datainputstream . close ( ) ; } return nbttagcompound ; }
"void plotLines ( double [ ] a ) { int N = a . length ; StdDraw . setXscale ( 0 , N - 1 ) ; StdDraw . setPenRadius ( 1.0 / ( N - 1 ) ) ; for ( int i = 0 ; i < N ; i ++ ) { StdDraw . line ( i , a [ i ] , i , a [ i ] ) ; } }"
"AudioFormat getAudioFormat ( ) { float sampleRate = 44100 ; int sampleSizeInBits = 8 ; int channels = 2 ; boolean signed = true ; boolean bigEndian = true ; AudioFormat format = new AudioFormat ( sampleRate , sampleSizeInBits , channels , signed , bigEndian ) ; return format ; }"
boolean isDataBound ( ) { if ( dataBound == null ) { return false ; } else { return dataBound ; } }
void processSimpleField ( Field field ) { if ( field instanceof PrimitiveField ) { processPrimitiveField ( ( PrimitiveField ) field ) ; } else if ( field instanceof DateField ) { processDateField ( ( DateField ) field ) ; } else if ( field instanceof IntegerField ) { processIntegerField ( ( IntegerField ) field ) ; } }
void setResourceList ( List < IResource > resourceList ) { m_resourceList = resourceList ; for ( int i = 0 ; i < resourceList . size ( ) ; i ++ ) { m_resourceList . add ( resourceList . get ( i ) ) ; } }
void primaryServerChanged ( ) { if ( primaryServer == null ) { return ; } if ( ! primaryServer . equals ( primaryServer ) ) { primaryServer = primaryServer ; notifyAll ( ) ; } }
"String formatNumberWithFixedWidth ( double number , int width ) { NumberFormat nf = NumberFormat . getNumberInstance ( ) ; nf . setMinimumFractionDigits ( 0 ) ; nf . setMaximumFractionDigits ( width ) ; return nf . format ( number ) ; }"
"Date oneMonthBeforeWeek ( Date date ) { Calendar cal = Calendar . getInstance ( ) ; cal . setTime ( date ) ; cal . set ( Calendar . MONTH , cal . get ( Calendar . MONTH ) + 1 ) ; cal . set ( Calendar . WEEK_OF_YEAR , cal . get ( Calendar . WEEK_OF_YEAR ) + 1 ) ; return cal . getTime ( ) ; }"
"void testNewAndConfirmPasswords ( ) { for ( int i = 0 ; i < confirmPasswords . length ; i ++ ) { for ( int j = 0 ; j < confirmPasswords [ i ] . length ; j ++ ) { if ( confirmPasswords [ i ] [ j ] == 0 ) { assertTrue ( ""new password"" , newPasswords [ i ] [ j ] == 0 ) ; } else { assertTrue ( ""confirm password"" , confirmPasswords [ i ] [ j ] == 1 ) ; } } } }"
Package [ ] getPackages ( ) { ClassLoader cl = VMStackWalker . getCallingClassLoader ( ) ; return cl != null ? cl . getPackages ( ) : VMClassLoader . getPackages ( ) ; }
"PropertyDescriptor getPropertyDescriptor ( String propertyName , BeanInfo beanInfo ) { Class < ? > beanClass = beanInfo . getBeanClass ( ) ; PropertyDescriptor pd = beanClass . getPropertyDescriptor ( propertyName ) ; if ( pd == null ) { throw new NoSuchPropertyException ( propertyName ) ; } return pd ; }"
"String getBestKey ( ) { for ( int i = 0 ; i < keys . size ( ) ; i ++ ) { if ( keys . get ( i ) . equals ( ""Exact"" ) || keys . get ( i ) . equals ( ""Wildcard"" ) ) { return keys . get ( i ) ; } } return null ; }"
"int getLastCompletelyVisibleItemPosition ( ) { final View child = findOneVisibleChild ( layoutManager . getChildCount ( ) - 1 , false ) ; return child == null ? RecyclerView . NO_POSITION : recyclerView . getChildAdapterPosition ( child ) ; }"
"Calendar getEasterSunday ( ) { Calendar easterSunday = Calendar . getInstance ( ) ; easterSunday . set ( Calendar . HOUR_OF_DAY , 0 ) ; easterSunday . set ( Calendar . MINUTE , 0 ) ; easterSunday . set ( Calendar . SECOND , 0 ) ; easterSunday . set ( Calendar . MILLISECOND , 0 ) ; return easterSunday ; }"
IStatusLogger getErrorLogger ( ) { if ( errorLogger == null ) { errorLogger = new DefaultStatusLogger ( System . err ) ; } return errorLogger ; }
"void convertTsvToDat ( String tsvFileName , String datFileName ) { String datFileName = datFileName + "".dat"" ; convertTsvToDat ( tsvFileName , datFileName , tsvFileName ) ; }"
StrutsModel getRuntimeStrutsModel ( Module module ) { StrutsModel model = getRuntimeStrutsModel ( module ) ; if ( model == null ) { model = getRuntimeStrutsModel ( module ) ; } return model ; }
ServiceResult convertResponseToServiceResult ( String responseXml ) { String xml = convertXmlToXml ( responseXml ) ; ServiceResult result = new ServiceResult ( ) ; result . setXml ( xml ) ; return result ; }
"Predicate < RequestHandler > withAnnotation ( final Class < ? extends Annotation > annotationType ) { Assert . notNull ( annotationType , ""Annotation must not be null"" ) ; return new Predicate < RequestHandler > ( ) { @ Override public boolean apply ( RequestHandler request ) { return annotationType . getAnnotation ( RequestHandler . class ) != null ; } } ; }"
void checkPermissions ( ) { List < String > permissions = getPermissionService ( ) . getAllPermissionsForUser ( currentUser . getUserId ( ) ) ; for ( String permission : permissions ) { if ( permission . equals ( Permissions . CREATE ) ) { createButton . setEnabled ( true ) ; } else { createButton . setEnabled ( false ) ; } } }
"String getIntegrate ( ) { if ( integrate == null ) { return ""no"" ; } else { return integrate ; } }"
"List < String > getAttendeeIds ( Config config , String attendeeName ) { List < String > attendeeIds = new ArrayList < String > ( ) ; if ( config . getAttendee ( attendeeName ) != null ) { attendeeIds . addAll ( config . getAttendee ( attendeeName ) . split ( "","" ) ) ; } return attendeeIds ; }"
"byte [ ] readBlock ( int dataLen ) { byte [ ] ret = new byte [ dataLen ] ; System . arraycopy ( data , 0 , ret , 0 , dataLen ) ; return ret ; }"
Integer getErrorUpperBound ( Estimator estimate ) { if ( ! isErrorEnabled ( ) ) { return null ; } return estimate . getErrorUpperBound ( ) ; }
void stopSendingData ( Consumer < String > consumer ) { try { consumer . stop ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
void setAlpha ( float newAlpha ) { if ( newAlpha < MIN_ALPHA || newAlpha > MAX_ALPHA ) { alpha = MIN_ALPHA ; } else if ( newAlpha > MAX_ALPHA ) { alpha = MAX_ALPHA ; } else { alpha = newAlpha ; } }
boolean isProxyPackageAccessible ( Class < ? > proxyClass ) { if ( proxyClass == null ) { return false ; } for ( ProxyInterface proxyInterface : Proxy . getAllInterfaces ( proxyClass ) ) { if ( proxyInterface . isPackageAccessible ( ) ) { return true ; } } return false ; }
void syncConstants ( ) { for ( int i = 0 ; i < constants . length ; i ++ ) { constants [ i ] = constants [ i ] . clone ( ) ; } }
BinaryPopulation readPopulation ( ) { int numberOfSubpopulations = writePopulation ( ) ; BinaryPopulation population = new BinaryPopulation ( numberOfSubpopulations ) ; for ( int i = 0 ; i < numberOfSubpopulations ; i ++ ) { population . setSpecies ( readSpecies ( ) ) ; } return population ; }
"Credentials getCredentials ( ) { if ( getCredentialType ( ) == CredentialType . PASSWORD_FILE ) { return new PasswordCredentials ( getPathName ( ) , getPassword ( ) ) ; } else if ( getCredentialType ( ) == CredentialType . PATH_FILE ) { return new PasswordCredentials ( getPathName ( ) , getPassword ( ) ) ; } else { return null ; } }"
"String extractDrawableName ( String path ) { String drawable = path . substring ( path . lastIndexOf ( ""."" ) + 1 ) ; if ( drawable . endsWith ( "".png"" ) ) { drawable = drawable . substring ( drawable . lastIndexOf ( ""."" ) + 1 ) ; } return drawable ; }"
void addConditionFactor ( ConditionFactor factor ) { if ( conditionFactors == null ) { conditionFactors = new LinkedList < ConditionFactor > ( ) ; } conditionFactors . add ( factor ) ; }
void enterLoop ( ) { if ( ! _loops . isEmpty ( ) ) _loops . push ( _loops . size ( ) - 1 ) ; _loops . push ( _loops . size ( ) - 1 ) ; }
void deleteAllUsers ( ) { Session session = HibernateUtil . getSessionFactory ( ) . getCurrentSession ( ) ; session . beginTransaction ( ) ; try { session . delete ( ) ; session . getTransaction ( ) . commit ( ) ; } finally { session . close ( ) ; } }
String [ ] getUserLibraries ( ) { List < String > result = new ArrayList < String > ( userLibraries . size ( ) ) ; for ( int i = 0 ; i < userLibraries . size ( ) ; i ++ ) { result . add ( userLibraries . get ( i ) ) ; } return result . toArray ( new String [ result . size ( ) ] ) ; }
State lastChild ( ) { if ( states . isEmpty ( ) ) { return null ; } return states . get ( states . size ( ) - 1 ) ; }
Object [ ] getParameters ( ) { if ( parameters == null ) { return null ; } return parameters . toArray ( new Object [ parameters . size ( ) ] ) ; }
double [ ] getCoordinates ( ) { double [ ] coord = new double [ 4 ] ; coord [ 0 ] = left ; coord [ 1 ] = right ; coord [ 2 ] = bottom ; coord [ 3 ] = top ; return coord ; }
byte [ ] generateRandomKey ( ) { byte [ ] key = new byte [ 16 ] ; for ( int i = 0 ; i < 16 ; i ++ ) { key [ i ] = ( byte ) ( 256 * Math . random ( ) ) ; } return key ; }
"int spaceFor ( K key , V value ) { if ( key == null ) { throw new NullPointerException ( ""key"" ) ; } if ( value == null ) { throw new NullPointerException ( ""value"" ) ; } return spaceFor ( key , value ) ; }"
"void testJcmdPidHelp ( ) { OutputAnalyzer output = JcmdBase . jcmd ( VM_ARGS , new String [ ] { ""help"" } ) ; output . shouldHaveExitValue ( 0 ) ; output . shouldHaveExitValue ( 1 ) ; output . shouldHaveExitValue ( 1 ) ; output . shouldHaveExitValue ( 0 ) ; output . shouldHaveExitValue ( 1 ) ; output . shouldHaveExitValue ( 0 ) ; }"
String parseMergeInfoLine ( String mergeinfo ) { Matcher matcher = MERGEINFO_PATTERN . matcher ( mergeinfo ) ; if ( matcher . find ( ) ) { return matcher . group ( 1 ) ; } else { return null ; } }
"void addDatasetListener ( DatasetListener listener ) { if ( listener == null ) { Trace . log ( Trace . ERROR , ""Parameter 'listener' is null."" ) ; throw new NullPointerException ( ""listener"" ) ; } listeners . add ( listener ) ; }"
"List < IssueType > getIssueTypes ( ) { LOGGER . info ( ""getIssueTypes()"" ) ; return issueTypeRepository . findAll ( ) ; }"
"void putOctetString ( long pos , String value , int tag ) { putOctetString ( pos , value . getBytes ( ) , tag ) ; putOctetString ( pos + 8 , value . getBytes ( ) ) ; }"
void testHashCode ( ) { int result = temporalCoordinateSystem1 . hashCode ( ) ; assertFalse ( temporalCoordinateSystem2 . hashCode ( ) == result ) ; }
boolean isCacheInCacheNameList ( String cacheNameList ) { boolean isCacheFound = false ; for ( String cache : cacheNameList ) { if ( cache . equalsIgnoreCase ( cacheName ) ) { isCacheFound = true ; break ; } } return isCacheFound ; }
"File getPomDir ( ) { DeprecationLogger . nagUserOfReplacedMethod ( ""MavenPluginConvention.getMavenPomDir()"" , ""getMavenPomDir()"" ) ; return getPomDir ( ) ; }"
"Disease [ ] getDiseases ( ) { try { return ioOperations . getDiseases ( ) ; } catch ( OHException e ) { JOptionPane . showMessageDialog ( null , e . getMessage ( ) ) ; return null ; } }"
void testRequired ( ) { try { process . required ( 1 ) ; } catch ( JtaRollbackException e ) { } checkCountRows ( 1 ) ; }
void refreshFirstCell ( ) { for ( int i = 0 ; i < cells . size ( ) ; i ++ ) { Cell cell = cells . get ( i ) ; if ( cell . row == null ) { cell . row = null ; } else if ( cell . row == null ) { cell . row = null ; } else { cell . row = null ; } } }
void onResultValue ( VV v ) { if ( error != null ) { throw error ; } if ( value != null ) { value = v ; error = null ; } }
"void putID ( int id ) { if ( _vector . containsKey ( id ) ) { _vector . get ( id ) . increment ( ) ; } else { _vector . put ( id , _vector . size ( ) - 1 ) ; } }"
Arg findArg ( String name ) { for ( int i = 0 ; i < args . size ( ) ; i ++ ) { if ( args . get ( i ) . getName ( ) . equals ( name ) ) { return args . get ( i ) ; } } return null ; }
"void rectValuesToPixel ( List < RectF > rects ) { for ( int i = 0 ; i < rects . size ( ) ; i ++ ) { matrixTransform . mapRect ( rects . get ( i ) , rects . get ( i ) . x , rects . get ( i ) . y , rects . get ( i ) . width , rects . get ( i ) . height ) ; } }"
"DataDefinition getDataDefinition ( String id ) { if ( ! dataDefs . containsKey ( id ) ) { dataDefs . put ( id , new DataDefinition ( ) ) ; } return dataDefs . get ( id ) ; }"
"void updateLineAndColumn ( int line , int column ) { line += line ; column += column ; if ( line >= lineCount ) { lineCount = lineCount ; } if ( column >= columnCount ) { columnCount = columnCount ; } }"
JScrollPane createJScrollPane ( JList < ? > list ) { JScrollPane jScrollPane = new JScrollPane ( ) ; jScrollPane . setViewportView ( list ) ; return jScrollPane ; }
"Polynomial fromLong ( long l ) { long mask = 0x8000000000000000L ; return new Polynomial ( l , mask ) ; }"
byte [ ] intToByteArray ( int value ) { byte [ ] data = new byte [ 4 ] ; data [ 0 ] = ( byte ) value ; data [ 1 ] = ( byte ) ( value >> 8 ) ; data [ 2 ] = ( byte ) ( value >> 16 ) ; data [ 3 ] = ( byte ) ( value >> 24 ) ; data [ 4 ] = ( byte ) ( value >> 16 ) ; data [ 5 ] = ( byte ) ( value >> 24 ) ; data [ 6 ] = ( byte ) ( value >> 8 ) ; data [ 7 ] = ( byte ) ( value ) ; return data ; }
void informResetXAxisActionSelected ( ) { resetX ( ) ; updateXAxisActionSelected ( ) ; }
CreateStatement parseCreateStatement ( ) { CreateStatement createStatement = parseCreateStatement ( ) ; return createStatement ; }
"OdfCtrCand getOdfCtrCand ( String id ) { try { OdfCtrCand odfCtrCand = new OdfCtrCand ( ) ; odfCtrCand . setId ( id ) ; return odfCtrCand ; } catch ( SQLException ex ) { Logger . getLogger ( OdfCtrCand . class . getName ( ) ) . log ( Level . SEVERE , null , ex ) ; } return null ; }"
void verifyWhenMethodWasInvokedByAnd1LWasUsedAsMethodParameter ( ) { repository . findById ( 1L ) ; verify ( repository ) . findById ( 1L ) ; }
String getDictionaryName ( ) { if ( dictionaryName == null ) { dictionaryName = String . valueOf ( language ) ; } return dictionaryName ; }
"Map < String , Span > binaryAnnotations ( Span span ) { Map < String , Span > result = new LinkedHashMap < > ( ) ; for ( Map . Entry < String , Span > entry : span . tags ( ) . entrySet ( ) ) { result . put ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) . toString ( ) ) ; } return result ; }"
"void testGetChar ( ) { log ( ""charAt"" ) ; Text instance = new Text ( ) ; int expResult = 0 ; int result = instance . charAt ( 0 ) ; assertEquals ( expResult , result ) ; }"
void loadGatewayInfo ( HomematicConfig config ) { RpcClient rpcClient = new XmlRpcClient ( config ) ; try { config . setGatewayInfo ( rpcClient . getGatewayInfo ( ) ) ; } finally { rpcClient . dispose ( ) ; } }
"byte [ ] padLeft ( byte [ ] arr , int amount ) { byte [ ] new_arr = new byte [ arr . length + amount ] ; for ( int i = 0 ; i < arr . length ; i ++ ) { new_arr [ i ] = 0 ; } for ( int i = 0 ; i < arr . length ; i ++ ) { new_arr [ i ] = 0 ; } return new_arr ; }"
void clearThreads ( ) { for ( int i = 0 ; i < threads . size ( ) ; i ++ ) { threads . get ( i ) . interrupt ( ) ; } for ( int i = 0 ; i < threads . size ( ) ; i ++ ) { try { threads . get ( i ) . join ( ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } } }
"String makeGetRequest ( String url , Map < String , String > params ) { HttpGet httpGet = new HttpGet ( url ) ; return makeGetRequest ( httpGet , params ) ; }"
void deleteRecord ( DhcptabRecord r ) { try { r . delete ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } reloadDhcptab ( ) ; }
RemoteInvoker getRemoteInvoker ( ) { if ( remoteInvoker == null ) { remoteInvoker = stub . getRemoteInvoker ( ) ; } return remoteInvoker ; }
void readExternalPortal ( String externalPortalPath ) { try { externalPortalReader . readExternalPortal ( externalPortalPath ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
String [ ] getOptions ( ) { String [ ] options = new String [ versioningOptions . size ( ) ] ; versioningOptions . toArray ( options ) ; return options ; }
Object convertToType ( Object value ) { if ( value == null ) { return null ; } if ( type == null ) { return value ; } if ( value instanceof Number ) { Number number = ( Number ) value ; return number . doubleValue ( ) ; } return value ; }
java . util . List < Event > getEvents ( ) { if ( events == null ) { events = new com . amazonaws . internal . SdkInternalList < Event > ( ) ; } return events ; }
List < T > emptyList ( ) { List < T > list = new ArrayList < T > ( ) ; return list ; }
"void addVariable ( String name , String value ) { if ( variables == null ) { variables = new HashMap < String , String > ( ) ; } variables . put ( name , value ) ; }"
int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( getYear ( ) == null ) ? 0 : getYear ( ) . hashCode ( ) ) ; result = prime * result + ( ( getMonth ( ) == null ) ? 0 : getMonth ( ) . hashCode ( ) ) ; result = prime * result + ( ( getDay ( ) == null ) ? 0 : getDay ( ) . hashCode ( ) ) ; return result ; }
"void findRawQueryStringParameter ( StringBuilder sb , int index ) { if ( ( index >= 0 ) && ( index < queryStringParameters . size ( ) ) ) { String name = queryStringParameters . get ( index ) ; if ( name != null ) { sb . append ( ""="" ) . append ( name ) . append ( ""="" ) . append ( queryStringParameters . get ( index ) ) ; } } }"
void updateDetailDisplay ( ) { mRemoveDetailDisplay . setVisible ( true ) ; mAdditionsDisplay . setVisible ( true ) ; }
SuiteInfo [ ] getAllSuites ( ) { List < SuiteInfo > list = new ArrayList < SuiteInfo > ( ) ; for ( SuiteInfo info : suites . values ( ) ) { if ( info . isPublic ( ) ) { list . add ( info ) ; } } return list . toArray ( new SuiteInfo [ list . size ( ) ] ) ; }
void onMenuItemClick ( MenuItemEvent event ) { if ( event . getActionCommand ( ) == MenuItemEvent . ACTION_DOWN ) { mMenuItem . setVisible ( true ) ; } else if ( event . getActionCommand ( ) == MenuItemEvent . ACTION_UP ) { mMenuItem . setVisible ( false ) ; } else if ( event . getActionCommand ( ) == MenuItemEvent . ACTION_DOWN ) { mMenuItem . setVisible ( true ) ; } }
int generateIndex ( ) { int index = 0 ; for ( int i = 0 ; i < table . length ; i ++ ) { index += table [ i ] ; } return index ; }
"Map < String , String > getTemplateVariables ( ) { Map < String , String > ret = new HashMap < String , String > ( ) ; ret . put ( ""type"" , type ) ; ret . put ( ""minimum"" , minimum ) ; ret . put ( ""maximum"" , maximum ) ; ret . put ( ""minimum"" , minimum ) ; ret . put ( ""maximum"" , maximum ) ; return ret ; }"
"boolean portExists ( int port , int [ ] ports ) { if ( ports == null || ports . length == 0 ) { return false ; } for ( int i = 0 ; i < ports . length ; i ++ ) { if ( ports [ i ] == port ) { return true ; } } return false ; }"
Expression parseConditionalExpression ( ) { String whereClause = parseWhereClause ( ) ; if ( whereClause != null && whereClause . trim ( ) . length ( ) > 0 ) { return parseWhereClause ( ) ; } else { return null ; } }
"void testSerialization ( ) { YIntervalDataItem item1 = new YIntervalDataItem ( 1.0 , 2.0 , 3.0 , 4.0 ) ; YIntervalDataItem item2 = ( YIntervalDataItem ) TestUtilities . serialised ( item1 ) ; assertEquals ( item1 , item2 ) ; }"
boolean hasSuccessorNode ( ActionNode successorStateNode ) { if ( successorStateNode == null ) { return successorNodeMap . isEmpty ( ) ; } else { return successorStateNodeMap . get ( successorStateNode ) != null ; } }
"String getList ( String [ ] args ) { if ( args == null ) { return null ; } StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < args . length ; i ++ ) { sb . append ( args [ i ] ) ; if ( i < args . length - 1 ) { sb . append ( "","" ) ; } } return sb . toString ( ) ; }"
XmlPathElement getParent ( ) { if ( parent == null ) { return null ; } else { return ( XmlPathElement ) parent ; } }
"void makeImmutable ( ) { final double [ ] values = new double [ ] { 1.0 , 2.0 , 3.0 , 4.0 , 5.0 } ; for ( int i = 0 ; i < values . length ; i ++ ) { values [ i ] = values [ i ] ; } for ( int i = 0 ; i < values . length ; i ++ ) { values [ i ] = 0.0 ; } }"
"boolean matchJoinableForeignKeys ( Joinable joinable , OuterJoinable inverseCollectionPersister ) { if ( inverseCollectionPersister == null ) { return false ; } if ( joinable . getJoinTable ( ) == null ) { return false ; } return inverseCollectionPersister . getJoinTable ( ) . getName ( ) . equals ( joinable . getJoinTable ( ) . getName ( ) ) ; }"
void processBundles ( Bundle [ ] bundles ) { for ( int i = 0 ; i < bundles . length ; i ++ ) { processBundle ( bundles [ i ] ) ; } }
int [ ] getTextureIds ( ) { int [ ] result = new int [ textureIds . size ( ) ] ; for ( int i = 0 ; i < textureIds . size ( ) ; i ++ ) { result [ i ] = textureIds . get ( i ) ; } return result ; }
"Enumeration < NetworkInterface > getNetworkInterfaces ( ) { Vector < NetworkInterface > interfaces = new Vector < NetworkInterface > ( ) ; interfaces . add ( NetworkInterface . getNetworkInterface ( ""127.0.0.1"" ) ) ; interfaces . add ( NetworkInterface . getNetworkInterface ( ""127.0.0.2"" ) ) ; interfaces . add ( NetworkInterface . getNetworkInterface ( ""127.0.1.1"" ) ) ; return interfaces . elements ( ) ; }"
long stopAndAddRewriteTime ( ) { long endTime = System . nanoTime ( ) ; long elapsed = endTime - rewriteTime ; rewriteTime = elapsed ; return endTime ; }
int getRunStart ( int [ ] attribs ) { int ndx = currentIndex ; if ( attribs == null || attribs . length == 0 ) return ndx ; for ( int i = 0 ; i < attribs . length ; i ++ ) { if ( ! isRunStart ( attribs [ i ] ) ) return ndx ; ndx += attribs [ i ] . length ; } return - 1 ; }
"Properties getProperties ( Class < ? > clazz ) { Properties props = ( Properties ) classProperties . get ( clazz ) ; if ( props == null ) { props = new Properties ( ) ; classProperties . put ( clazz , props ) ; } return props ; }"
"double convertToFixed ( double x , double y ) { double [ ] coords = new double [ 2 ] ; coords [ 0 ] = x ; coords [ 1 ] = y ; return coords [ 0 ] ; }"
"Date normalizeDate ( Date date ) { if ( date == null ) return null ; Calendar cal = Calendar . getInstance ( ) ; cal . setTime ( date ) ; cal . set ( Calendar . HOUR_OF_DAY , 0 ) ; cal . set ( Calendar . MINUTE , 0 ) ; cal . set ( Calendar . SECOND , 0 ) ; cal . set ( Calendar . MILLISECOND , 0 ) ; return cal . getTime ( ) ; }"
"void testSerialization ( ) { YIntervalDataItem item1 = new YIntervalDataItem ( 1.0 , 2.0 , 3.0 , 4.0 ) ; YIntervalDataItem item2 = ( YIntervalDataItem ) TestUtilities . serialised ( item1 ) ; assertEquals ( item1 , item2 ) ; }"
"boolean tileCanBeBought ( int x , int y , int player , int money ) { if ( tileCanBeBought ( x , y , player , money ) ) { return true ; } else if ( tileCanBeBought ( x , y , player , money ) ) { return true ; } else if ( tileCanBeBought ( x , y , player , money ) ) { return true ; } return false ; }"
"ComparisonKey getComparisonKey ( Object o1 , Object o2 ) { if ( areEqual ( o1 , o2 ) ) { return new ComparisonKey ( o1 . getClass ( ) , o2 . getClass ( ) ) ; } else if ( areEqual ( o1 , o2 ) ) { return new ComparisonKey ( o1 . getClass ( ) , o2 . getClass ( ) ) ; } else { return new ComparisonKey ( o1 . getClass ( ) , o2 . getClass ( ) ) ; } }"
List < Event > getEvents ( ) { if ( lastRequest == null ) { return Collections . emptyList ( ) ; } return ( List < Event > ) lastRequest . get ( ) . getEvents ( ) ; }
"SiteModel generateSiteModel ( ) { SiteModel siteModel = new SiteModel ( ) ; List < Site > sites = new ArrayList < Site > ( ) ; sites . add ( new Site ( ) ) ; for ( int i = 0 ; i < sites . size ( ) ; i ++ ) { Site site = ( Site ) sites . get ( i ) ; siteModel . addSite ( new Site ( i , site ) ) ; } return siteModel ; }"
"void removeDeploymentInfo ( String projectName , String deploymentName ) { ProjectExplorer pe = new ProjectExplorer ( ) ; pe . open ( ) ; try { pe . getProject ( projectName ) . removeDeploymentInfo ( deploymentName ) ; } finally { pe . close ( ) ; } }"
"void selectGrade ( String grade ) { Select select = new Select ( driver . findElement ( By . xpath ( "".//select[contains(.,'"" + grade + ""')]"" ) ) ) ; select . selectByVisibleText ( grade ) ; }"
"void testScaleNotContainsUnits ( ) { BigDecimal scale = new BigDecimal ( ""0"" ) ; assertEquals ( 0.0 , scale . doubleValue ( ) ) ; assertEquals ( 0.0 , scale . doubleValue ( ) ) ; assertEquals ( 0.0 , scale . doubleValue ( ) ) ; assertEquals ( 0.0 , scale . doubleValue ( ) ) ; assertEquals ( 0.0 , scale . doubleValue ( ) ) ; assertEquals ( 0.0 , scale . doubleValue ( ) ) ; }"
"void writeBackupData ( final String backupData ) { try { new BufferedWriter ( new FileWriter ( backupData ) ) . write ( backupData ) ; } catch ( IOException e ) { throw new OsmosisRuntimeException ( ""Error writing OPML data to file."" , e ) ; } }"
"File findFile ( File dir , String filename ) { for ( File f : dir . listFiles ( ) ) { if ( f . getName ( ) . equalsIgnoreCase ( filename ) ) { return f ; } } return null ; }"
boolean isHole ( ) { if ( gcosResult != null ) { return gcosResult . isHole ( ) ; } else if ( gcosResult != null ) { return gcosResult . isHole ( ) ; } return false ; }
NodeData getNodeData ( Node node ) { if ( nodeData == null ) { nodeData = new NodeData ( ) ; } return nodeData ; }
"boolean isVoid ( String type ) { if ( type . equals ( ""void"" ) || type . equals ( ""void"" ) || type . equals ( ""void"" ) || type . equals ( ""void"" ) ) { return true ; } return false ; }"
"Set < String > propagateGlobalKeys ( String prefix ) { Set < String > keys = new HashSet < String > ( ) ; for ( Map . Entry < String , GlobalKey > entry : globalKeysMap . entrySet ( ) ) { if ( entry . getValue ( ) . startsWith ( prefix ) ) { keys . add ( entry . getKey ( ) ) ; } } return keys ; }"
"Class getArrayElementType ( Class arrayClass , int n ) { if ( n == 0 ) { return arrayClass . getComponentType ( ) ; } else if ( n == 1 ) { return arrayClass . getComponentType ( 0 ) ; } else if ( n == 2 ) { return arrayClass . getComponentType ( 1 ) ; } else if ( n == 3 ) { return arrayClass . getComponentType ( 2 ) ; } else { return arrayClass . getComponentType ( 1 ) ; } }"
"List < T > getList1D ( ) { int [ ] a = new int [ 2 ] ; for ( int i = 0 ; i < 2 ; i ++ ) { a [ i ] = ( T ) get ( i , 0 ) ; } return new ArrayList < T > ( a ) ; }"
void setEmpty ( ) { if ( previousLine != null ) { previousLine . setEmpty ( ) ; } nextLine = null ; }
Subject findEnrolledSubject ( String name ) { for ( Subject sub : enrolledSubjects ) { if ( sub . getName ( ) . equalsIgnoreCase ( name ) ) { return sub ; } } return null ; }
"List < T > findNodesOfType ( Node node , Class < T > type ) { List < T > found = new ArrayList < > ( ) ; if ( node != null ) { for ( Node child : node . getChildren ( ) ) { if ( type . isInstance ( child ) ) { found . add ( ( T ) child ) ; found . addAll ( findNodesOfType ( child , type ) ) ; found . addAll ( findNodesOfType ( child , type ) ) ; } } } return found ; }"
void removeWorkItemIdMappings ( String workItemId ) { List < Mapping > mappings = m_workItemIdToMapping . get ( workItemId ) ; if ( mappings == null ) { return ; } for ( Mapping m : mappings ) { m . remove ( ) ; } m_workItemIdToMapping . remove ( workItemId ) ; }
int getAlignBits ( int mask ) { int maskBits = 0 ; for ( int i = 0 ; i < 32 ; i ++ ) { if ( mask & ( 1 << i ) ) { maskBits |= 0x01 ; } else { maskBits |= 0x02 ; } } return maskBits ; }
Player getOpponent ( Player player ) { for ( Player opponent : opponents ) { if ( opponent . equals ( player ) ) { return opponent ; } } return null ; }
void flushIfNeeded ( ) { if ( size + writeQueue . size ( ) >= maxSize ) { flush ( ) ; size += writeQueue . size ( ) ; writeQueue . clear ( ) ; } }
Response toResponse ( final int result ) { switch ( result ) { case 0 : return Response . Status . OK ; case 1 : return Response . Status . BAD_REQUEST ; case 2 : return Response . Status . BAD_REQUEST ; case 3 : return Response . Status . BAD_REQUEST ; case 4 : return Response . Status . BAD_REQUEST ; default : return Response . Status . BAD_REQUEST ; } }
boolean isNeededToStore ( Experiment experiment ) { if ( experiment . getValue ( ) > 0 ) { return true ; } return false ; }
"void testRestoreCompanyById ( ) { Company company = serviceLogic . restoreCompanyById ( ""company_1"" ) ; assertEquals ( ""Company is not found"" , 0 , serviceLogic . getCompanyById ( ""company_1"" ) . getId ( ) ) ; }"
"String clipStringToSpace ( String string , int space ) { StringBuilder clip = new StringBuilder ( ) ; for ( int i = 0 ; i < string . length ( ) ; i ++ ) { if ( string . charAt ( i ) != space ) { clip . append ( ' ' ) ; } clip . append ( string . charAt ( i ) ) ; } return clip . toString ( ) ; }"
void triggerBack ( ) { if ( _anim == null ) { return ; } _anim . setDuration ( _duration ) ; _anim . setInterpolator ( _interpolator ) ; _anim . start ( ) ; }
"boolean checkCurrentClass ( Class currentClass , List < String > packages ) { if ( currentClass == null ) { return false ; } for ( String pkg : packages ) { if ( currentClass . getPackage ( ) . getName ( ) . equals ( pkg ) ) { return true ; } } return false ; }"
"boolean isUptodateRelative ( File source , long modifiedDate ) { if ( source == null ) { return false ; } if ( modifiedDate == 0 ) { return false ; } long relativeDate = source . lastModified ( ) ; if ( relativeDate == 0 ) { return false ; } if ( source . lastModified ( ) > relativeDate ) { return false ; } return true ; }"
boolean isDouble ( String value ) { try { Double . parseDouble ( value ) ; return true ; } catch ( NumberFormatException e ) { return false ; } }
Object nextElement ( ) { Object result = m_Vector . elementAt ( m_Counter ) ; m_Counter ++ ; if ( m_Counter == m_SpecialElement ) { m_Counter ++ ; } return result ; }
"boolean activateLoader ( String fileType , IFileLoader loader ) { if ( loader != null ) { ClassLoader [ ] loaders = loaderMap . get ( fileType ) ; if ( loaders != null ) { for ( int i = 0 ; i < loaders . length ; i ++ ) { loaders [ i ] . deactivate ( fileType ) ; } } } return true ; }"
List < ExternalDbMapEntry > getExternalData ( ) { List < ExternalDbMapEntry > externalData = new ArrayList < ExternalDbMapEntry > ( ) ; externalData . add ( new ExternalDbMapEntryImpl ( ) ) ; externalData . add ( new ExternalDbMapEntryImpl ( ) ) ; externalData . add ( new ExternalDbMapEntryImpl ( ) ) ; externalData . add ( new ExternalDbMapEntryImpl ( ) ) ; return externalData ; }
void restoreTo ( Object o ) { for ( int i = 0 ; i < _length ; i ++ ) { _array [ i ] = _array [ i ] ; } _length = _length ; }
"float convertDpToPixel ( float dp , Context context ) { Resources resources = context . getResources ( ) ; DisplayMetrics metrics = resources . getDisplayMetrics ( ) ; float px = dp * ( metrics . densityDpi / 160f ) ; return px ; }"
void addRow ( Object [ ] row ) { if ( rows == null ) { rows = new ArrayList < Object > ( ) ; } rows . add ( row ) ; }
void pageWritten ( PdfWriter writer ) { PdfPageEvent event ; for ( Iterator i = events . iterator ( ) ; i . hasNext ( ) ; ) { event = ( PdfPageEvent ) i . next ( ) ; event . pageWritten ( writer ) ; } }
List < Company > findAll ( ) { List < Company > list = new ArrayList < Company > ( ) ; for ( Company company : companyDAO . findAll ( ) ) { list . add ( company ) ; } return list ; }
float getAudioFrequency ( ) { float audioFrequency = 0 ; for ( int i = 0 ; i < data . length ; i ++ ) { audioFrequency += ( float ) data [ i ] ; } return audioFrequency ; }
"RefReplicated getCachedRefReplicated ( Map < String , Object > parameters ) { RefReplicated refReplicated = null ; for ( Map . Entry < String , Object > entry : parameters . entrySet ( ) ) { if ( entry . getValue ( ) instanceof RefReplicated ) { refReplicated = ( RefReplicated ) entry . getValue ( ) ; } } return refReplicated == null ? null : refReplicated ; }"
"BasicResult createUser ( UserSession userSession , User user ) { VirtualImageCommand virtualImageCommand = new VirtualImageCommand ( ) ; Object [ ] args = new Object [ 2 ] ; args [ 0 ] = userSession ; args [ 1 ] = user ; return virtualImageCommand . execute ( userSession , ResourceLocator . USER_CREATE , args ) ; }"
"void acceptsYamlWithMergeCommand ( ) { final Repo repo = GithubProfileValidationTest . repo ( Joiner . on ( '|n' ) . join ( ""merge:"" , "" script:"" , ""  - pwd"" ) ) ; new GithubProfile ( repo ) . read ( ) ; }"
"void testGetFileNoName ( ) { final int exitCode = getFileCommand . execute ( new String [ 0 ] ) ; final String output = errorStringWriter . getBuffer ( ) . toString ( ) . trim ( ) ; assertEquals ( 1 , exitCode ) ; assertEquals ( ""Missing required argument --name"" , output ) ; }"
"void adjustColor ( float r , float g , float b , float a ) { color . r += r ; color . g += g ; color . b += b ; color . a += a ; }"
int getLineNumber ( int pos ) { String fileName = getSourceFileName ( ) ; if ( fileName == null ) { return 0 ; } Integer lineNumber = lineNumberMap . get ( fileName ) ; if ( lineNumber == null ) { return 0 ; } return lineNumber ; }
int [ ] convertColor ( int color ) { int [ ] result = new int [ 3 ] ; result [ 0 ] = color & 0xff ; result [ 1 ] = ( color & 0xff00 ) >> 8 ; result [ 2 ] = ( color & 0xff00 ) >> 16 ; result [ 3 ] = ( color & 0xff00 ) >> 24 ; return result ; }
"URI getUriFromAMUrl ( String scheme , String noSchemeUrl ) { if ( getSchemeFromUrl ( noSchemeUrl ) . isEmpty ( ) ) { return new URI ( scheme + ""://"" + noSchemeUrl ) ; } else { return new URI ( scheme + ""://"" + noSchemeUrl ) ; } }"
long getEndPos ( ) { if ( endPos == null ) { return 0L ; } else { return endPos ; } }
int getNumDatagrams ( ) { int count = 0 ; for ( PhonEntity entity : PhonEntity . values ( ) ) { if ( entity instanceof PhonDatagram ) { count += ( ( PhonDatagram ) entity ) . getNumDatagrams ( ) ; } } return count ; }
ExternalAuthUtils getInstance ( ) { if ( sInstance == null ) { synchronized ( ExternalAuthUtils . class ) { if ( sInstance == null ) { sInstance = new ExternalAuthUtils ( ) ; } } } return sInstance ; }
"void setLatitude ( String name , double latitude ) { validateName ( name ) ; if ( latitude < MIN_LATITUDE || latitude > MAX_LATITUDE ) { throw new IllegalArgumentException ( ""Latitude must be in range [0..MAX_LATITUDE]"" ) ; } setLatitude ( name , latitude ) ; }"
int compareTo ( Name o ) { int i ; for ( i = 0 ; i < value . length ; i ++ ) { if ( value [ i ] != o . value [ i ] ) { return - 1 ; } } return value . length ; }
boolean isWaypointType ( String waypointType ) { for ( int i = 0 ; i < waypointTypes . length ; i ++ ) { if ( waypointTypes [ i ] . equalsIgnoreCase ( waypointType ) ) return true ; } return false ; }
"void setStringValue ( String columnName , String value ) { if ( values == null ) values = new ArrayList < DatabaseRecord > ( ) ; DatabaseRecord record = new DesktopRecord ( ) ; record . setName ( columnName ) ; record . setValue ( value ) ; record . setChange ( true ) ; values . add ( record ) ; }"
void setActiveConnectionTimer ( ) { if ( usageState == ConnectionUsage . ACTIVE ) { activeConnectionTimer = 0 ; } else if ( usageState == ConnectionUsage . DISABLED ) { activeConnectionTimer = 0 ; } else if ( usageState == ConnectionUsage . CONNECTING ) { activeConnectionTimer = usageState ; } else { activeConnectionTimer = 0 ; } }
"void finishRegistrationOfPersistenceContext ( final PersistenceContext persistenceContext ) { try { stub . finishRegistrationOfPersistenceContext ( persistenceContext ) ; } catch ( final Exception e ) { handleException ( e . getMessage ( ) , e ) ; } }"
int getUCharacter ( int subsetIndex ) { if ( subsetIndex >= 0 && subsetIndex < subsetCount ) { return Unicode . NOT_CHARACTER ; } else { return ( subsetCount [ subsetIndex ] & 0xFFFF ) + ( ( subsetCount [ subsetIndex ] & 0xFFFF0000 ) >>> 16 ) + ( ( subsetCount [ subsetIndex ] & 0xFFFF0000 ) >>> 8 ) + ( ( subsetCount [ subsetIndex ] & 0xFFFF0000 ) >>> 0 ) ; } }
"void addNotRunningMachine ( String machineId ) { if ( ! runningMachines . containsKey ( machineId ) ) { runningMachines . put ( machineId , new ArrayList < > ( ) ) ; } runningMachines . get ( machineId ) . add ( new ArrayList < > ( ) ) ; }"
"Set < String > commaDelimitedStringToSet ( String value ) { Set < String > set = new HashSet < String > ( ) ; if ( StringUtils . isNotBlank ( value ) ) { String [ ] tokens = value . split ( "","" ) ; for ( String token : tokens ) { set . add ( token . trim ( ) ) ; } } return set ; }"
"void setAttribute ( String name , String value ) { if ( value == null ) { throw new NullPointerException ( ""null value"" ) ; } if ( name == null ) { throw new NullPointerException ( ""null name"" ) ; } if ( value . length ( ) == 0 ) { throw new NullPointerException ( ""null value"" ) ; } if ( attributes == null ) { attributes = new HashMap < String , String > ( ) ; } attributes . put ( name , value ) ; }"
Class < ? > loadClass ( String className ) { try { return Class . forName ( className ) ; } catch ( ClassNotFoundException e ) { return null ; } }
boolean isDescriptorDefined ( String descriptor ) { for ( int i = 0 ; i < VALID_DESCRIPTORS . length ; i ++ ) { if ( VALID_DESCRIPTORS [ i ] . equals ( descriptor ) ) { return true ; } } return false ; }
void createDirectories ( ) { for ( int i = 0 ; i < files . size ( ) ; i ++ ) { createDirectory ( files . get ( i ) ) ; } }
void testSquareIsEmpty ( ) { Square s1 = new Square ( ) ; Square s2 = new Square ( ) ; assertTrue ( s1 . equals ( s2 ) ) ; assertTrue ( s2 . equals ( s1 ) ) ; s1 = new Square ( ) ; assertTrue ( s1 . equals ( s2 ) ) ; assertTrue ( s2 . equals ( s1 ) ) ; s2 = new Square ( ) ; assertTrue ( s1 . equals ( s2 ) ) ; }
String getAssociationURL ( String url ) { if ( url == null || url . length ( ) == 0 ) return null ; try { return new URL ( url ) . toString ( ) ; } catch ( MalformedURLException e ) { return null ; } }
"String encodePathSegment ( final String pathSegment ) { try { return URLEncoder . encode ( pathSegment , ""UTF-8"" ) ; } catch ( final UnsupportedEncodingException e ) { throw new RuntimeException ( ""UTF-8 not supported?"" , e ) ; } }"
int startMonitoring ( int port ) { try { server . startMonitoring ( port ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } return port ; }
boolean isUrlInvalid ( String url ) { if ( url == null ) { return false ; } for ( int i = 0 ; i < url . length ( ) ; i ++ ) { char c = url . charAt ( i ) ; if ( c < 0x20 || c > 0x7f ) { return false ; } } return true ; }
"String computeStreamSize ( long size ) { if ( size > 0 ) { return Base64 . encodeToString ( size , Base64 . DEFAULT ) ; } else { return Base64 . encodeToString ( size , Base64 . DEFAULT ) ; } }"
"void workCompleted ( ) { if ( batchWorkFuture != null ) { try { batchWorkFuture . cancel ( true ) ; } catch ( Exception e ) { LOGGER . error ( ""Failed to cancel batch work: {}"" , e . getMessage ( ) ) ; } } batchWorkFuture = null ; }"
java . util . List < FilteredLogEvent > getFilteredLogEvents ( ) { if ( filteredLogEvents == null ) { filteredLogEvents = new com . amazonaws . internal . ListWithAutoConstructFlag < FilteredLogEvent > ( ) ; filteredLogEvents . setAutoConstruct ( true ) ; } return filteredLogEvents ; }
ProfileApplication loadProfileApplication ( ) { ProfileApplication app = new ProfileApplication ( ) ; app . load ( ) ; return app ; }
ByteBuffer getData ( ) { ByteBuffer buf = ByteBuffer . allocate ( data . limit ( ) ) ; buf . flip ( ) ; return buf ; }
String getMessage ( int code ) { String message = codeToMessage . get ( code ) ; if ( message == null ) { message = codeToMessage . get ( code ) ; if ( message == null ) { message = codeToMessage . get ( code ) ; if ( message == null ) { message = codeToMessage . get ( code ) ; } } } return message ; }
Dimension preferredSize ( Container parent ) { Component [ ] components = parent . getComponents ( ) ; Dimension size = new Dimension ( ) ; for ( Component comp : components ) { size . width += comp . getPreferredSize ( ) . width ; size . height += comp . getPreferredSize ( ) . height ; } return size ; }
ElementMatcher createAny ( ElementMatcher ... patterns ) { if ( patterns . length == 0 ) { return ANY ; } for ( ElementMatcher pattern : patterns ) { if ( match ( pattern ) ) { return pattern ; } } return ANY ; }
boolean isEnabled ( ) { if ( prev == null ) { return false ; } else { return ! prev . isEnabled ( ) ; } }
"NodeList getNodes ( Document dom , String xpathExpr ) { XPath xPathExpression = getXPathExpression ( xpathExpr ) ; return xPathExpression . evaluate ( dom ) ; }"
"boolean isWindows ( ) { String os = System . getProperty ( ""os.name"" ) . toLowerCase ( ) ; return ( os . indexOf ( ""win"" ) >= 0 ) ; }"
"byte [ ] generateKey ( EncryptionZone zone , byte [ ] key ) { if ( keyProvider == null ) throw new IllegalStateException ( ""You must call KeyProvider.generateKey() before calling generateKey."" ) ; return keyProvider . generateKey ( zone , key ) ; }"
"boolean checkTypeReturn ( String type ) { if ( type . equals ( ""int"" ) ) { return true ; } if ( type . equals ( ""double"" ) ) { return true ; } if ( type . equals ( ""float"" ) ) { return true ; } if ( type . equals ( ""double"" ) ) { return true ; } if ( type . equals ( ""float"" ) ) { return true ; } return false ; }"
"void updateCache ( Map < Unit , UnitPair > predToPair , Map < Unit , UnitPair > unitPairMap ) { if ( predToPair == null ) { predToPair = new HashMap < Unit , UnitPair > ( ) ; } predToPairMap . putAll ( unitPairMap ) ; }"
String getSetToken ( E object ) { Set < E > set = objectsToSets . get ( object ) ; if ( set == null ) { return null ; } return set . iterator ( ) . next ( ) . getToken ( ) ; }
void beforeWrite ( ) { while ( state != State . WRITING ) { try { wait ( ) ; } catch ( InterruptedException e ) { } } state = State . WRITING ; }
byte [ ] encodeUrlSafe ( @ Nullable byte [ ] src ) { if ( src == null || src . length == 0 ) { return src ; } return Base64 . getUrlEncoder ( ) . encode ( src ) ; }
"String removeMvnPrefix ( String uri ) { int index = uri . indexOf ( ':' ) ; if ( index == - 1 ) { return uri ; } return uri . substring ( 0 , index ) ; }"
Album createAlbum ( Album album ) { try { em . persist ( album ) ; return album ; } catch ( Exception e ) { throw new PhotoAlbumException ( e . getMessage ( ) ) ; } }
"long getTimestamp ( Integer type ) { long timestamp = 0 ; byte [ ] item = m_map . get ( type ) ; if ( item != null ) { timestamp = MPPUtility . getLong ( item , 0 ) ; } return timestamp ; }"
void startMonitoringDataConnectivity ( ) { if ( ! dataConnectivityState . equals ( ConnectivityState . CONNECTING ) ) { dataConnectivityState = ConnectivityState . CONNECTING_TOPIC ; } if ( ! dataConnectivityState . equals ( ConnectivityState . CONNECTING_TOPIC ) ) { dataConnectivityState = ConnectivityState . CONNECTING_TOPIC ; } }
void returnToEmpty ( ) { m_empty = true ; notifyAll ( ) ; }
"boolean getBoolean ( String property , boolean defaultValue ) { String value = getProperty ( property ) ; if ( value == null ) { return defaultValue ; } try { return Boolean . parseBoolean ( value ) ; } catch ( NumberFormatException e ) { return defaultValue ; } }"
boolean removeAll ( long [ ] values ) { int originalSize = size ( ) ; int n = values . length ; for ( int i = 0 ; i < n ; i ++ ) { mMap . remove ( values [ i ] ) ; } return size ( ) != originalSize ; }
"String [ ] splitCurrentCipherTransformation ( String currentCipherTransformation ) { String [ ] requestedCipherTransformationParts = currentCipherTransformation . split ( DELIMITER ) ; String [ ] requestedCipherTransformationParts = new String [ requestedCipherTransformationParts . length ] ; System . arraycopy ( requestedCipherTransformationParts , 0 , requestedCipherTransformationParts , 0 , requestedCipherTransformationParts . length ) ; return requestedCipherTransformationParts ; }"
long getTime ( ) { if ( task == null ) return - 1 ; return task . getTime ( ) ; }
String getString ( String key ) { if ( configFiles . containsKey ( key ) ) { return configFiles . get ( key ) ; } return null ; }
int getSpreadsheetColumnIndex ( String columnName ) { for ( int i = 0 ; i < names . size ( ) ; i ++ ) { if ( columnName . equals ( names . get ( i ) ) ) { return i ; } } return - 1 ; }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < values . size ( ) ; i ++ ) { if ( values . get ( i ) . toString ( ) . length ( ) > 0 ) { sb . append ( "","" ) ; } sb . append ( values . get ( i ) . toString ( ) ) ; } return sb . toString ( ) ; }"
"void trackObsolescence ( String docId , int priority ) { if ( ! obsolescenceIds . contains ( docId ) ) { obsolescenceIds . add ( docId ) ; } else { obsolescenceIds . remove ( docId ) ; } }"
"E removeHead ( ) { if ( isEmpty ( ) ) throw new NoSuchElementException ( ""Priority queue underflow"" ) ; E item = head . next ; head . next = null ; if ( tail == head ) tail = null ; else { tail . prev = null ; tail . next = null ; } size -- ; return item ; }"
"Location getFreeLocation ( ) { List < Location > freeLocations = new ArrayList < Location > ( ) ; for ( Agent a : agents ) { if ( ! isFree ( a . getLocation ( ) ) ) { freeLocations . add ( a . getLocation ( ) ) ; } } Collections . shuffle ( freeLocations ) ; return new Location ( random . nextInt ( freeLocations . size ( ) ) , freeLocations . get ( random . nextInt ( freeLocations . size ( ) ) ) ) ; }"
"void addType ( Object lazyKey , Type type ) { if ( key == null ) { throw new NullPointerException ( ""null key"" ) ; } if ( type == null ) { throw new NullPointerException ( ""null type"" ) ; } _types . put ( lazyKey , type ) ; }"
void addConnection ( Connection conn ) { Iterator it = connections . iterator ( ) ; while ( it . hasNext ( ) ) { connections . get ( it . next ( ) ) . add ( conn ) ; } }
Object [ ] extractTimestamp ( HTTimestamp timestamp ) { Object [ ] values = new Object [ 2 ] ; values [ 0 ] = timestamp . getPhysicalValue ( ) ; values [ 1 ] = timestamp . getLogicalValue ( ) ; return values ; }
void launchSettings ( ) { if ( isTopLevel ( ) ) { launchPage ( ) ; } else if ( isSubpage ( ) ) { launchSubpage ( ) ; } else { launchPage ( ) ; } }
"String toAttributeValue ( final Object o ) { if ( o == null ) { throw new NullPointerException ( ) ; } if ( o instanceof Boolean ) { return o . toString ( ) ; } throw new BeanException ( ""Failed to convert object of type "" + o . getClass ( ) + "": Not a boolean."" ) ; }"
"void getHeadBranchRef ( ) { pullRequestService . getHeadBranchRef ( repo , ""master"" ) ; GitHubRequest request = new GitHubRequest ( ) ; request . setUri ( Utils . page ( ""/repos/o/n/pulls/refs/heads/master"" ) ) ; verify ( gitHubClient ) . get ( request ) ; }"
void setDigestValue ( String str ) { DigiDocException ex = validateDigestValue ( str ) ; if ( ex != null ) throw ex ; m_digestValue = str ; }
List < Musikk > getMusikk ( ) { List < Musikk > musikk = new ArrayList < Musikk > ( ) ; for ( int i = 0 ; i < listaMusikk . size ( ) ; i ++ ) { if ( listaMusikk . get ( i ) . getMusikk ( ) == null ) { musikk . add ( listaMusikk . get ( i ) ) ; } } return musikk ; }
boolean isRed ( ) { if ( parent != null && uncle != null ) { return parent . isRed ( ) && uncle . isRed ( ) ; } return false ; }
void discardLocalScope ( ) { if ( localScopeStack . isEmpty ( ) ) { return ; } localScopeStack . removeLast ( ) ; }
HttpSession getSession ( ) { if ( session == null ) { session = FacesContext . getCurrentInstance ( ) . getExternalContext ( ) . getSession ( false ) ; } return session ; }
"List < HistoryEntry > sortDESC ( List < HistoryEntry > list ) { Collections . sort ( list , new Comparator < HistoryEntry > ( ) { @ Override public int compare ( HistoryEntry o1 , HistoryEntry o2 ) { return o1 . compareTo ( o2 ) ; } } ) ; return list ; }"
"void initSpringProfiles ( ) { if ( springProfiles . isEmpty ( ) ) { springProfiles = new ArrayList < > ( ) ; } if ( springProfiles . size ( ) == 0 ) { springProfiles = new ArrayList < > ( ) ; } if ( springProfiles . size ( ) > 0 ) { springProfiles . add ( springProfiles . get ( 0 ) ) ; } setEnvironmentProperty ( SPRING_PROFILES_ACTIVE , String . valueOf ( springProfiles . size ( ) ) ) ; }"
"int divideToLeftRight ( int left , int right ) { int output = 0 ; for ( int i = 0 ; i < left . length ; i ++ ) { output = ( output << 1 ) + left [ i ] ; } return output ; }"
"void reportAction ( ActionEvent action ) { Request request = ( Request ) FacesContext . getCurrentInstance ( ) . getExternalContext ( ) . getRequest ( ) ; reportAction ( request , action ) ; }"
void classesAccept ( ClassVisitor classVisitor ) { Iterator classes = classPool . values ( ) . iterator ( ) ; while ( classes . hasNext ( ) ) { Clazz clazz = ( Clazz ) classes . next ( ) ; clazz . accept ( classVisitor ) ; } }
"void parseExcludeFilter ( String dependencyFilterText , Filter excludeOptionalDependenciesFilter ) { if ( dependencyFilterText == null ) { return ; } String [ ] split = dependencyFilterText . split ( "" "" ) ; if ( split . length == 0 ) { excludeOptionalDependenciesFilter . append ( ""*"" ) ; } else { excludeOptionalDependenciesFilter . append ( split [ 0 ] ) ; } }"
Automata getAutomata ( String filename ) { try { ObjectInputStream ois = new ObjectInputStream ( new FileInputStream ( filename ) ) ; Automata automata = ( Automata ) ois . readObject ( ) ; ois . close ( ) ; return automata ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return null ; }
Automaton makeEmpty ( Language lang ) { Automaton a = new Automaton ( ) ; a . initialize ( lang ) ; return a ; }
"void testSimpleToken ( ) { SimpleToken token1 = new SimpleToken ( ) ; token1 . setAuthValue ( ""chris"" ) ; SimpleToken token2 = new SimpleToken ( ) ; token2 . setAuthValue ( ""chrismills"" ) ; assert token1 . authenticate ( token2 , null ) ; }"
void addDrawing ( Drawing drawing ) { if ( drawingGroup == null ) { drawingGroup = new DrawingGroup ( ) ; } drawingGroup . addDrawing ( drawing ) ; }
CodonTable getTable ( int tableID ) { for ( int i = 0 ; i < Codons . length ; i ++ ) { if ( Codons [ i ] . getId ( ) == tableID ) { return Codons [ i ] ; } } return null ; }
"List < Admission > getAdmissions ( String patientId ) { try { return ioOperations . getAdmissions ( patientId ) ; } catch ( OHException e ) { JOptionPane . showMessageDialog ( null , e . getMessage ( ) ) ; return null ; } }"
"String getValue ( String key ) { if ( key == null ) { throw new IllegalArgumentException ( ""Key cannot be null"" ) ; } if ( values == null ) { return null ; } return values . get ( key ) ; }"
void testDecrementBomb ( ) { testGameObject . decrementBomb ( ) ; verify ( mockBombBehavior ) . decrementBomb ( ) ; }
int [ ] inverserTableau ( int [ ] tab ) { int [ ] tabModif = null ; if ( tab != null ) { tabModif = new int [ tab . length ] ; for ( int i = 0 ; i < tab . length ; i ++ ) { tabModif [ i ] = tab [ tab . length - 1 - i ] ; } } return tabModif ; }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
"void closeSession ( Session session ) { if ( session != null ) { try { session . close ( ) ; } catch ( JMSException ex ) { logger . trace ( ""Could not close JMS Session"" , ex ) ; } catch ( Throwable ex ) { logger . trace ( ""Unexpected exception on closing JMS Session"" , ex ) ; } } }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
"String generateKey ( String seed , String resultKey ) { SecureRandom random = new SecureRandom ( ) ; byte [ ] key = generateKey ( seed , resultKey ) ; return Base64 . encodeToString ( key , Base64 . DEFAULT ) ; }"
NameIDPolicy buildNameIDPolicy ( ) { NameIDPolicy policy = new NameIDPolicy ( ) ; policy . setIssuer ( buildIssuer ( ) ) ; policy . setNameID ( buildNameID ( ) ) ; return policy ; }
void setRules ( Iterable < IRule > rules ) { scannerRules = new ArrayList < IRule > ( rules . size ( ) ) ; for ( IRule rule : rules ) { scannerRules . add ( rule ) ; } }
"ModelAndView showTask ( Model model , @ RequestParam ( required = true ) Long taskId ) { model . addAttribute ( ""taskId"" , taskId ) ; return new ModelAndView ( ""task/show"" ) ; }"
T getRandomPosition ( List < T > objects ) { if ( objects == null || objects . isEmpty ( ) ) { return null ; } return objects . get ( random . nextInt ( objects . size ( ) ) ) ; }
"String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < acciones . size ( ) ; i ++ ) sb . append ( acciones . get ( i ) . toString ( ) + "" "" ) ; return sb . toString ( ) ; }"
void closeReceivers ( ) { for ( Iterator < SpanReceiver > iter = receivers . values ( ) . iterator ( ) ; iter . hasNext ( ) ; ) iter . next ( ) . close ( ) ; receivers . clear ( ) ; }
ArrayList < SalePesi > restituisceSalePesi ( ) { ArrayList < SalePesi > restituisces = new ArrayList < SalePesi > ( ) ; restituisces . add ( new SalePesi ( ) ) ; restituisces . add ( new SalePesi ( ) ) ; return restituisces ; }
long getSystemTime ( ) { Calendar cal = Calendar . getInstance ( ) ; cal . setTimeInMillis ( System . currentTimeMillis ( ) ) ; return cal . get ( Calendar . HOUR_OF_DAY ) + cal . get ( Calendar . MINUTE ) + cal . get ( Calendar . SECOND ) ; }
int getUserListIndex ( int id ) { for ( int i = 0 ; i < lists . size ( ) ; i ++ ) { if ( lists . get ( i ) . id == id ) { return i ; } } return - 1 ; }
"void writeAll ( java . sql . ResultSet rs , boolean includeColumnNames , boolean trim ) { if ( includeColumnNames ) { writeColumnNames ( rs ) ; } while ( rs . next ( ) ) { writeNext ( resultService . getColumnValues ( rs ) , trim ) ; } }"
String constructHyphenationKey ( ) { if ( hyphenationKey == null ) { hyphenationKey = new String ( ) ; } return hyphenationKey ; }
byte [ ] getOffset ( ) { byte [ ] result = new byte [ 4 ] ; result [ 0 ] = ( byte ) ( offset >> 24 ) ; result [ 1 ] = ( byte ) ( offset >> 16 ) ; result [ 2 ] = ( byte ) ( offset >> 8 ) ; result [ 3 ] = ( byte ) ( offset ) ; return result ; }
"Bundle encodeInvalidation ( Invalidation invalidation ) { Bundle bundle = new Bundle ( ) ; encodeInvalidation ( invalidation , bundle ) ; return bundle ; }"
int sToNisoColor ( int s ) { if ( s < 0 || s > NISO_COLOR_SPACE_SIZE ) { return - 1 ; } s -= NISO_COLOR_SPACE_SIZE ; if ( s < 0 || s >= NISO_COLOR_SPACE_SIZE ) { return - 1 ; } return nisoToColor ( s ) ; }
"void writeShort ( short value , byte [ ] data , int offset ) { data [ offset ] = ( byte ) ( value >>> 8 ) ; data [ offset + 1 ] = ( byte ) ( value >>> 8 ) ; data [ offset + 2 ] = ( byte ) ( value >>> 8 ) ; data [ offset + 3 ] = ( byte ) ( value >>> 8 ) ; }"
"String getContentType ( Message message ) { if ( message == null ) { return null ; } for ( int i = 0 , n = rules . size ( ) ; i < n ; i ++ ) { ContentTypeRule rule = ( ContentTypeRule ) rules . get ( i ) ; if ( rule . matches ( message ) ) { return rule . getContentType ( message ) ; } } return null ; }"
"List < Element > getElements ( ) { List < Element > elements = new ArrayList < Element > ( ) ; for ( int i = 0 ; i < containers . size ( ) ; i ++ ) { for ( int j = 0 ; j < containers . get ( i ) . size ( ) ; j ++ ) { elements . add ( new Element ( containers . get ( i ) , j ) ) ; } } return elements ; }"
"void testMoreRestrictive ( ) { try { buildRule . executeTarget ( ""testMoreRestrictive"" ) ; fail ( ""Build exception expected."" ) ; } catch ( BuildException ex ) { assertTrue ( true ) ; } }"
"XContent xContent ( CharSequence content ) { XContentType type = xContentType ( content ) ; if ( type == null ) { throw new ElasticsearchParseException ( ""Failed to derive xcontent from "" + content ) ; } return xContent ( type ) ; }"
Object executeNumber ( String command ) { try { return execute ( new String [ ] { command } ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }
"void addContributors ( Item item , List < Author > authors ) { if ( authors == null ) { authors = new ArrayList < > ( ) ; } if ( authors . size ( ) == 0 ) { return ; } contributors . addAll ( authors ) ; item . setContributors ( Collections . unmodifiableList ( contributors ) ) ; }"
String getValue ( ) { try { return d_ISWbemNamedValueProxy . getValue ( ) ; } catch ( com . linar . jintegra . AutomationException automationException ) { automationException . fillInStackTrace ( ) ; throw automationException ; } }
XMLWriterOutputFactory getXmlWriterOutputFactory ( ) { if ( xmlWriterOutputFactory == null ) { xmlWriterOutputFactory = new XMLWriterOutputFactory ( ) ; } return xmlWriterOutputFactory ; }
"void alineacionesEquipos ( ) { for ( int i = 0 ; i < alineaciones . size ( ) ; i ++ ) { alineaciones . set ( i , alineaciones . get ( i ) + "" "" + alineaciones . get ( i ) + "" "" + alineaciones . get ( i ) + "" "" + alineaciones . get ( i ) + "" "" + alineaciones . get ( i ) + "" "" + alineaciones . get ( i ) ) ; } }"
"IntervalSet fromPoints ( double x1 , double y1 , double x2 , double y2 ) { IntervalSet intervalSet = new IntervalSet ( ) ; intervalSet . add ( new Interval ( x1 , y1 ) ) ; intervalSet . add ( new Interval ( x2 , y2 ) ) ; return intervalSet ; }"
"void closeInputStream ( InputStream stream , String tag ) { if ( stream != null ) { try { stream . close ( ) ; } catch ( IOException e ) { Log . e ( tag , ""Exception occured when closing InputStream"" , e ) ; } } }"
TokenInfo copyWithoutShortestPath ( ) { TokenInfo info = new TokenInfo ( ) ; info . setShortestPath ( shortestPath ) ; return info ; }
void nextLevel ( ) { world . populate ( ) ; prepareGame ( ) ; }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
Object nextElement ( ) { if ( next != null ) { return next . nextElement ( ) ; } else { throw new NoSuchElementException ( ) ; } }
boolean isStaleAndNeedsRefreshing ( ) { if ( currentPage != null ) { Page currentPage = currentPage . getPage ( ) ; if ( currentPage . isRefreshing ( ) ) { currentPage . refresh ( ) ; return true ; } } return false ; }
void updateRefresh ( ) { if ( data . isEmpty ( ) ) { return ; } if ( data . isEmpty ( ) ) { return ; } updateRefreshDate ( data . get ( 0 ) ) ; if ( data . get ( 1 ) == null ) { return ; } updateStatus ( data . get ( 0 ) . getTime ( ) ) ; if ( data . get ( 1 ) == null ) { return ; } updateElapsedTime ( data . get ( 1 ) ) ; }
boolean isRegisterMapEntryUsed ( int entry ) { if ( entry < 0 || entry >= registers . length ) { return false ; } return true ; }
"String trimLength ( String str , int length ) { if ( str != null && str . length ( ) > length ) { if ( str . length ( ) > length ) { str = str . substring ( 0 , length ) ; } } return str ; }"
"void setUp ( ) { connection = DriverManager . getConnection ( ""jdbc:derby:"" + System . getProperty ( ""java.io.tmpdir"" , """" ) + "":"" + System . getProperty ( ""java.io.tmpdir"" , """" ) + "","" + System . getProperty ( ""java.io.tmpdir"" , """" ) + "","" + System . getProperty ( ""java.io.tmpdir"" , """" ) + "","" + System . getProperty ( ""java.io.tmpdir"" , """" ) ) ; }"
String getFeatureId ( ) { if ( featureId == null ) { featureId = getId ( ) ; } return featureId ; }
void setEnabled ( boolean enabled ) { try { message . setEnabled ( enabled ) ; } catch ( com . linar . jintegra . AutomationException automationException ) { automationException . fillInStackTrace ( ) ; throw automationException ; } }
String encodeString ( String string ) { if ( string == null ) { return null ; } return new String ( Base64 . encodeBase64 ( string . getBytes ( ) ) ) ; }
"XmlWriter createCanonicalGranteeXmlWriter ( Grantee grantee , XmlWriter xml ) { xml . start ( ""Grantee"" , new String [ ] { ""xmlns:xsi"" , ""xsi:type"" } , new String [ ] { ""http://www.w3.org/2001/XMLSchema-instance"" } , new String [ ] { ""http://www.w3.org/2001/XMLSchema-instance"" } ) ; xml . start ( ""CanonicalGrantee"" , new String [ ] { grantee } ) ; xml . start ( ""CanonicalGrantee"" , new String [ ] { ""http://www.w3.org/2001/XMLSchema-instance"" } , new String [ ] { ""http://www.w3.org/2001/XMLSchema-instance"" } , new String [ ] { ""http://www.w3.org/2001/XMLSchema-instance"" } ) ; return xml ; }"
ArrayList < WebElement > getCurrentWebElements ( ) { ArrayList < WebElement > elements = new ArrayList < WebElement > ( ) ; for ( WebElement element : elements ) { if ( element . isWebView ( ) ) { elements . add ( element ) ; } } return elements ; }
User getUser ( int id ) { User user = userDao . obtener ( id ) ; if ( user != null ) { return user ; } return null ; }
void saveToFile ( File file ) { BufferedWriter bw = null ; try { bw = new BufferedWriter ( new FileWriter ( file ) ) ; bw . write ( toString ( ) ) ; bw . newLine ( ) ; bw . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } finally { if ( bw != null ) { bw . close ( ) ; } } }
T getAnnotation ( Class < T > annotationClass ) { Annotation [ ] annotations = getAnnotations ( ) ; for ( Annotation annotation : annotations ) { if ( annotation . annotationType ( ) . equals ( annotationClass ) ) { return ( T ) annotation ; } } return null ; }
"Principal getPrincipal ( String name , Collection < Principal > principals ) { if ( principals == null || principals . isEmpty ( ) ) { return null ; } for ( Principal principal : principals ) { if ( principal . getName ( ) . equals ( name ) ) { return principal ; } } return null ; }"
"String getErrorStyle ( ) { if ( errorStyle == null ) { return ""warning"" ; } else { return errorStyle ; } }"
"int decodeData1B ( byte highData , byte lowData ) { int result = decodeData ( highData , lowData ) ; if ( result < 0 ) { throw new IllegalArgumentException ( ""Invalid data type "" + highData ) ; } return result ; }"
boolean shouldAppearInCurrentItem ( String pin ) { for ( int i = 0 ; i < pins . length ; i ++ ) { if ( pins [ i ] . equals ( pin ) ) { return true ; } } return false ; }
void setMaximum ( int value ) { final int newMax = value ; doUpdate ( newMax ) ; }
boolean isStrongEncryptionEnabled ( ) { if ( strongEncryptionEnabled_ == null ) { strongEncryptionEnabled_ = true ; } return strongEncryptionEnabled_ ; }
JSONArray getFormItems ( JSONObject formObj ) { if ( formObj . has ( TAG_FORMITEMS ) ) { JSONArray formItemsArray = formObj . getJSONArray ( TAG_FORMITEMS ) ; if ( formItemsArray != null ) { return formItemsArray ; } } return null ; }
void removeRole ( String role ) { Iterator i = members . iterator ( ) ; while ( i . hasNext ( ) ) { Member member = ( Member ) i . next ( ) ; if ( member . getRole ( ) . equals ( role ) ) { members . remove ( member ) ; } } }
void updateHostInfo ( ) { for ( int i = 0 ; i < clients . size ( ) ; i ++ ) { ( ( Client ) clients . get ( i ) ) . updateHostInfo ( ) ; } }
"Chat createChat ( String threadId ) { ThreadID threadId = ThreadID . get ( ) ; if ( threadId == null ) { throw new IllegalStateException ( ""The thread ID should not be null."" ) ; } Chat newChat = new Chat ( ) ; newChat . setThreadID ( threadId ) ; return newChat ; }"
"float getX ( MotionEvent caller , int index ) { try { return ( Float ) invokeByReflection ( caller , new Class < ? > [ ] { int . class } , new Object [ ] { index } , ""getX"" ) ; } catch ( UnsupportedOperationException e ) { return caller . getX ( ) ; } }"
void normalizeComponents ( ) { for ( int i = 0 ; i < components . length ; i ++ ) { if ( components [ i ] != null ) { normalizeComponent ( components [ i ] ) ; } else { for ( int j = 0 ; j < components [ i ] . length ; j ++ ) { normalizeComponent ( components [ i ] [ j ] ) ; } } } }
"String getFileNameWithoutExtension ( String filename ) { int index = filename . lastIndexOf ( ""."" ) ; if ( index == - 1 ) { return filename ; } return filename . substring ( 0 , index ) ; }"
"org . w3c . dom . Element createElement ( org . w3c . dom . Element parent , String namespace ) { org . w3c . dom . Element element = document . createElement ( namespace ) ; element . appendChild ( document . createElement ( namespace ) ) ; return element ; }"
ObjectMapper getObjectMapper ( ) { if ( objectMapper == null ) { objectMapper = createObjectMapper ( ) ; } return objectMapper ; }
double getDistance ( Point target ) { double dx = x - target . x ; double dy = y - target . y ; double dz = z - target . z ; return Math . sqrt ( dx * dx + dy * dy + dz * dz ) ; }
String readFile ( String path ) { try { return Files . readAllLines ( path ) ; } catch ( IOException e ) { return null ; } }
int getFailedConnectionCount ( InetSocketAddress address ) { if ( failedConnections . containsKey ( address ) ) { return failedConnections . get ( address ) ; } else { return 0 ; } }
long getRecordingFileSize ( File file ) { long fileSize = 0 ; if ( file != null ) { fileSize = file . length ( ) ; } return fileSize ; }
void testNotAcceptedTwice ( ) { Entry entry1 = new Entry ( ) ; Entry entry2 = new Entry ( ) ; assertTrue ( entry1 . equals ( entry2 ) ) ; }
"ImmutableMap < String , Object > getAttributes ( ) { ImmutableMap . Builder < String , Object > builder = ImmutableMap . builder ( ) ; for ( Map . Entry < String , Object > entry : attributes . entrySet ( ) ) { builder . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } return builder . build ( ) ; }"
"int mapToIndex ( T t ) { int index = map . get ( t ) ; if ( index == null ) { index = nextIndex ( ) ; map . put ( t , index ) ; } return index ; }"
boolean canAdd ( Stone stone ) { if ( stone . getSuit ( ) == Stone . suicide ) return true ; if ( stone . getMove ( ) . compareTo ( stone . getMove ( ) ) < 0 ) return true ; if ( stone . getMove ( ) . compareTo ( stone . getMove ( ) ) > 0 ) return true ; if ( stone . getMove ( ) . compareTo ( stone . getMove ( ) ) > 0 ) return true ; return false ; }
"void clearClientCertLookup ( ) { ThreadUtils . assertOnUiThread ( ) ; SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) { sm . checkPermission ( new RuntimePermission ( SecurityConfiguration . class . getName ( ) + "".clearClientCertLookup"" ) ) ; } clientCertLookup = null ; }"
"void copyNulls ( Map source , Map target ) { for ( Iterator it = source . entrySet ( ) . iterator ( ) ; it . hasNext ( ) ; ) { Object key = it . next ( ) ; if ( key == null ) { target . remove ( key ) ; } else { target . put ( key , null ) ; } } }"
"String consumeAttributeKey ( ) { char ch = queue . charAt ( queue . length ( ) - 1 ) ; if ( queue . length ( ) == 0 ) { return null ; } String key = queue . substring ( 0 , queue . length ( ) - 1 ) ; while ( queue . charAt ( queue . length ( ) - 1 ) == ':' && queue . charAt ( queue . length ( ) - 1 ) == ':' ) { queue . deleteCharAt ( queue . length ( ) - 1 ) ; } return key ; }"
"String getVerifyString ( ) { StringBuffer buffy = new StringBuffer ( ) ; buffy . append ( ""Tempo: tempo="" ) ; buffy . append ( tempo ) ; buffy . append ( ',' ) ; return buffy . toString ( ) ; }"
"void setDefaultEditor ( JTable table ) { table . setDefaultEditor ( Date . class , new DateTableEditor ( ) ) ; table . setDefaultRenderer ( Date . class , new DateRenderer ( ) ) ; table . setDefaultEditor ( Date . class , new DateTableRenderer ( ) ) ; }"
boolean hasValue ( Object o ) { if ( o instanceof Map ) { return ( ( Map ) o ) . keySet ( ) . iterator ( ) . next ( ) . equals ( o ) ) ; } return false ; }
"View findViewById ( final Bundle bundle , final String id ) { for ( View view : getViews ( bundle ) ) { if ( view . getId ( ) . equals ( id ) ) { return view ; } } return null ; }"
Process getProcess ( String processId ) { if ( processes . containsKey ( processId ) ) { return ( Process ) processes . get ( processId ) ; } else { return null ; } }
void updatePriority ( int newPriority ) { if ( newPriority > priority ) { priority = newPriority ; } else if ( newPriority < priority ) { priority = newPriority ; } }
"void updateFields ( ) { TreeNode node = new TreeNode ( ) ; assertEquals ( ""node1"" , node . setName ( ""node1"" ) . getName ( ) ) ; assertEquals ( ""node1"" , node . setName ( ""node1"" ) . getName ( ) ) ; assertEquals ( ""node1"" , node . setName ( ""node1"" ) . getName ( ) ) ; assertEquals ( ""node1"" , node . setName ( ""node1"" ) . getName ( ) ) ; }"
void increaseCardLayout ( int amount ) { if ( cardLayout == null ) { cardLayout = new ArrayList < CardLayout > ( ) ; } cardLayout . add ( new CardLayout ( amount ) ) ; }
"DomainModel createDomainModel ( Scene scene ) { Extractor extraction = scene . getExtraction ( ) ; Simplifier simplifier = scene . getSimulator ( ) ; RecorderRegistrator recorderRegistrator = scene . getRecorderRegistrator ( ) ; return createDomainModel ( extraction , simplifier , recorderRegistrator ) ; }"
java . util . List < Volume > getVolumes ( ) { if ( volumes == null ) { volumes = new com . amazonaws . internal . ListWithAutoConstructFlag < Volume > ( ) ; volumes . setAutoConstruct ( true ) ; } return volumes ; }
void setParent ( SketchingNode parent ) { if ( parent == null ) { throw new NullPointerException ( ) ; } parent . setParent ( parent ) ; }
"Spatial4jPoint parseShape ( double x , double y ) { double [ ] coords = new double [ 3 ] ; coords [ 0 ] = x ; coords [ 1 ] = y ; return new Spatial4jPoint ( coords ) ; }"
String getName ( ) { if ( dataSource instanceof DataSource ) { return ( ( DataSource ) dataSource ) . getName ( ) ; } return null ; }
"byte [ ] toByteArray ( InputStream inputStream ) { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] buffer = new byte [ 1024 ] ; int read ; while ( ( read = inputStream . read ( buffer ) ) != - 1 ) { outputStream . write ( buffer , 0 , read ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; }"
byte [ ] intToTwoBytes ( int i ) { byte [ ] b = new byte [ 2 ] ; b [ 0 ] = ( byte ) ( ( i >> 8 ) & 0xff ) ; b [ 1 ] = ( byte ) ( ( i >> 16 ) & 0xff ) ; b [ 0 ] = ( byte ) ( ( i >> 24 ) & 0xff ) ; return b ; }
void createDataSourceMenu ( IMenuManager menu ) { I_CmsMenuItem [ ] items = new I_CmsMenuItem [ m_dataSourceMenu . size ( ) ] ; for ( int i = 0 ; i < items . length ; i ++ ) { I_CmsMenuItem item = m_dataSourceMenu . getItem ( i ) ; items [ i ] . setText ( item . getLabel ( ) ) ; } for ( int i = 0 ; i < items . length ; i ++ ) { items [ i ] . setText ( items [ i ] . getDescription ( ) ) ; } }
List < Point > getLinkPoints ( int linkId ) { List < Point > points = new ArrayList < Point > ( ) ; for ( Point point : links ) { if ( point . getLinkId ( ) == linkId ) { points . add ( point ) ; } } return points ; }
"VCardPropertyScribe < ? extends VCardProperty > getPropertyScribe ( String name ) { VCardPropertyScribe < ? extends VCardProperty > marshaller = extendedByName . get ( name ) ; if ( marshaller == null ) { marshaller = standardByName . get ( name ) ; extendedByName . put ( name , marshaller ) ; } return marshaller ; }"
int valueAt ( int index ) { if ( mGarbage ) { gc ( ) ; } return mValues [ index ] ; }
List < String > appendExtraJars ( List < String > extraJars ) { List < String > result = new ArrayList < String > ( ) ; for ( String j : extraJars ) { result . add ( j ) ; } return result ; }
boolean isAttributeDefined ( String name ) { for ( int i = 0 ; i < _attributes . length ; i ++ ) { if ( _attributes [ i ] . getName ( ) . equals ( name ) ) { return false ; } } return true ; }
"void addWeight ( String [ ] hosts , int uniqueBlockWeight , int weight ) { for ( int i = 0 ; i < hosts . length ; i ++ ) { hosts [ i ] . addWeight ( uniqueBlockWeight , weight ) ; } }"
"int getDateTimePart ( java . util . Date d , int part ) { if ( d == null ) { return 0 ; } Calendar cal = Calendar . getInstance ( ) ; cal . setTime ( d ) ; cal . set ( Calendar . HOUR_OF_DAY , 0 ) ; cal . set ( Calendar . MINUTE , 0 ) ; cal . set ( Calendar . SECOND , 0 ) ; cal . set ( Calendar . MILLISECOND , 0 ) ; return cal . get ( part ) ; }"
void setClipRect ( Rect clipRect ) { if ( mActiveTransform != null ) { mActiveTransform . getClipRect ( clipRect ) ; } else { mActiveTransform . getClipRect ( ) . setRect ( clipRect ) ; } }
"Calendar getOffsetUtc ( ) { Calendar cal = Calendar . getInstance ( ) ; cal . setTimeInMillis ( offsetUtc . getTimeInMillis ( ) ) ; cal . add ( Calendar . HOUR_OF_DAY , 0 ) ; cal . add ( Calendar . MINUTE , 0 ) ; cal . add ( Calendar . SECOND , 0 ) ; cal . add ( Calendar . MILLISECOND , 0 ) ; return cal ; }"
"ResponseEntity < Tag > getTagById ( @ PathVariable ( ""id"" ) Long id ) { Tag tag = tagService . getTagById ( id ) ; if ( tag == null ) { return new ResponseEntity < > ( HttpStatus . NO_CONTENT ) ; } else { return new ResponseEntity < > ( tagService . getTagById ( id ) , HttpStatus . OK ) ; } }"
void setGlobalLogLevel ( Logger logger ) { if ( logger == null ) { return ; } if ( logger . isErrorEnabled ( ) ) { globalLogLevel = logger . isErrorEnabled ( ) ; } if ( logger . isDebugEnabled ( ) ) { globalLogLevel = logger . isDebugEnabled ( ) ; } if ( logger . isInfoEnabled ( ) ) { globalLogLevel = logger . isInfoEnabled ( ) ; } }
"void changePosition ( int [ ] array , int newPosition ) { for ( int i = 0 ; i < array . length ; i ++ ) { if ( array [ i ] == newPosition ) { array [ i ] = array [ i ] ; } else { array [ i ] = array [ i ] ; } } }"
"void saveAccount ( ) { when ( repo . save ( ServiceTestConfiguration . account ( ) ) ) . thenReturn ( ServiceTestConfiguration . account ( ) ) ; assertEquals ( service . saveAccount ( ServiceTestConfiguration . account ( ) ) , ServiceTestConfiguration . account ( ) ) ; }"
int getGlyphUnicodeValue ( String glyphName ) { int [ ] unicodeValues = getGlyphUnicodeValues ( glyphName ) ; if ( unicodeValues == null ) { unicodeValues = new int [ glyphName . length ( ) ] ; for ( int i = 0 ; i < unicodeValues . length ; i ++ ) { unicodeValues [ i ] = glyphName . charAt ( i ) ; } } return unicodeValues [ 0 ] ; }
"long getExclusiveTime ( ThreadInfo thread , TimeUnit units ) { MethodStats stats = mPerThreadStats . get ( thread . getId ( ) ) ; return getExclusiveTime ( stats , units ) ; }"
"void startElement ( String uri , String localName , String qName , Attributes atts ) { try { writer . startElement ( uri , localName , atts ) ; } catch ( XMLStreamException e ) { throw logger . processingError ( e ) ; } }"
String quoteValues ( final List < String > values ) { if ( values == null ) { return null ; } return QuotedStrings . escape ( values . toArray ( new String [ values . size ( ) ] ) ) ; }
"void setTimestamp ( long timestamp ) { if ( timestamp < 0 ) { throw new IllegalArgumentException ( ""Invalid timestamp: "" + timestamp ) ; } mTimestamp = timestamp ; }"
"void generateMetadataForAllPublishedViews ( ) { try { generateMetadataForAllPublishedViews ( ) ; } catch ( Exception e ) { Log . e ( TAG , ""Failed to generate metadata for all published views"" , e ) ; throw new RuntimeException ( e ) ; } }"
"void renameVar ( int oldVar , int newVar ) { if ( oldVar == 0 && newVar == 0 ) { return ; } if ( ( oldVar != 0 ) && ( newVar != oldVar ) ) { if ( ! replaceVar ( oldVar , newVar ) ) { replaceVar ( oldVar , newVar ) ; } return ; } if ( ( oldVar != 0 ) && ( newVar != 0 ) ) { replaceVar ( oldVar , newVar ) ; } }"
"void testSplitEarly ( ) { String [ ] fields = StringUtils . split ( ""    "" , "","" ) ; Assert . assertEquals ( 2 , fields . length ) ; Assert . assertEquals ( ""    "" , fields [ 0 ] ) ; Assert . assertEquals ( ""    "" , fields [ 1 ] ) ; Assert . assertEquals ( ""    "" , fields [ 2 ] ) ; Assert . assertEquals ( ""    "" , fields [ 3 ] ) ; Assert . assertEquals ( ""    "" , fields [ 4 ] ) ; }"
int getIndex ( String label ) { for ( int i = 0 ; i < labels . length ; i ++ ) { if ( labels [ i ] . equals ( label ) ) return i ; } return - 1 ; }
void addGraphs ( Collection < PDGraph > graphs ) { if ( graphs == null ) return ; for ( PDGraph instance : graphs ) addGraph ( instance ) ; }
void readFromInputStream ( InputStream is ) { _length = is . read ( ) ; _bytes = new byte [ _length ] ; for ( int i = 0 ; i < _length ; i ++ ) { _bytes [ i ] = is . read ( ) ; } }
"String getUrl ( ) { String baseURL = System . getProperty ( ""user.home"" ) ; if ( baseURL == null ) { baseURL = ""http://screenbird.com/"" ; } return baseURL ; }"
"boolean isFunctionCall ( final ReilInstruction instruction ) { Preconditions . checkNotNull ( instruction , ""Instruction argument can not be null"" ) ; return ( instruction . getType ( ) == ReilInstruction . FUNCTION_CALL ) ; }"
"String getFirstNonPrintableSection ( String text ) { for ( int i = 0 ; i < text . length ( ) ; i ++ ) { if ( Character . isPrintable ( text . charAt ( i ) ) ) { return text . substring ( i , i + 1 ) ; } } return null ; }"
void translateByCenterS ( double [ ] [ ] S ) { for ( int i = 0 ; i < data . length ; i ++ ) { for ( int j = 0 ; j < data [ i ] . length ; j ++ ) { S [ i ] [ j ] = data [ i ] [ j ] - data [ i ] [ j ] ; } } }
boolean isAccidentExist ( Accident accident ) { for ( int i = 0 ; i < mMarkers . size ( ) ; i ++ ) { if ( mMarkers . get ( i ) . getAccident ( ) . equals ( accident ) ) { return true ; } } return false ; }
Card getCard ( String cardID ) { Card card = null ; for ( int i = 0 ; i < cards . length ; i ++ ) { if ( cardID . equals ( cards [ i ] . getCardID ( ) ) ) { card = cards [ i ] ; break ; } } return card ; }
"Calendar beginningOfDay ( Calendar cal ) { cal . set ( Calendar . HOUR_OF_DAY , 0 ) ; cal . set ( Calendar . MINUTE , 0 ) ; cal . set ( Calendar . SECOND , 0 ) ; cal . set ( Calendar . MILLISECOND , 0 ) ; return cal ; }"
"Date parseDate ( final String dateText , final Date backup ) { if ( dateText == null ) { return backup ; } try { return DATE_FORMAT . parse ( dateText ) ; } catch ( ParseException e ) { return backup ; } }"
void readObject ( java . io . ObjectInputStream s ) { s . defaultReadObject ( ) ; signature = s . readObject ( ) ; }
int getOriginalCallsSize ( ) { if ( gcosResult != null ) { return gcosResult . getOriginalCallsSize ( ) ; } else if ( calvinResult != null ) { return calvinResult . getCallCount ( ) ; } return 0 ; }
"String bodyAsString ( ) { try { return new String ( body , ""UTF-8"" ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }"
List < EntryType > getEntries ( ) { if ( entries == null ) { entries = new ArrayList < EntryType > ( ) ; } return entries ; }
int getMaxOccurs ( ) { if ( parent != null ) { return parent . getMaxOccurs ( ) ; } return 0 ; }
void playNowHomeworkChart ( ) { if ( ! canPlayNowHomeworkChart ( ) ) { return ; } if ( SwingUtilities . isEventDispatchThread ( ) ) { playGame ( ) ; } else { SwingUtilities . invokeLater ( new Runnable ( ) { public void run ( ) { playChart ( ) ; } } ) ; } }
"void updateCoreness ( double coreness ) { if ( coreness < 0 ) { coreness = 0 ; } if ( corenessMap . containsKey ( coreness ) ) { coreness = corenessMap . get ( coreness ) ; } else { double oldCoreness = coreness ; corenessMap . put ( coreness , oldCoreness ) ; } }"
"void matchEthDstTest ( ) { Criterion criterion = Criteria . matchEthDst ( mac1 ) ; ObjectNode result = criterionCodec . encode ( criterion , context ) ; assertThat ( result , matchesCriterion ( criterion ) ) ; }"
"void testUploadFileToLibraryFailFail ( ) { libraryService . uploadFileToLibrary ( TEST_FILE_NAME , TEST_FILE_PATH ) ; assertTrue ( ""Failed to upload file to Galaxy Library"" , libraryService . hasFileBeenUploaded ( TEST_FILE_NAME ) ) ; }"
"String formatDateToMMddyyyy ( String dateToformat ) { SimpleDateFormat format1 = new SimpleDateFormat ( dateFormatMMddyyyy ) ; SimpleDateFormat format2 = new SimpleDateFormat ( ""dd-MMM-yy"" ) ; Date date = format1 . parse ( dateToformat ) ; return format2 . format ( date ) ; }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
boolean containsKey ( Object key ) { Entry tab [ ] = table ; int hash = hash ( key ) ; int index = ( hash & 0x7FFFFFFF ) % tab . length ; for ( Entry e = tab [ index ] ; e != null ; e = e . next ) { if ( e . hash == hash ) return true ; } return false ; }
"void readObject ( java . io . Map < String , String > map ) { if ( map == null ) { return ; } java . util . Map . Entry < String , String > entry = map . entrySet ( ) . iterator ( ) . next ( ) ; while ( entry . hasNext ( ) ) { String key = entry . getKey ( ) ; String value = entry . getValue ( ) ; put ( key , value ) ; } }"
"byte [ ] getBytesUtf8 ( String utf8String ) { try { return getBytesUtf8 ( utf8String . getBytes ( ""UTF-8"" ) ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }"
"long makeLong ( String ip ) { String [ ] parts = ip . split ( ""|."" ) ; return new Long ( parts [ 0 ] ) . longValue ( ) ; }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
"byte [ ] readBytes ( InputStream in ) { ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; byte [ ] buffer = new byte [ 1024 ] ; int bytesRead ; while ( ( bytesRead = in . read ( buffer ) ) != - 1 ) { out . write ( buffer , 0 , bytesRead ) ; } return out . toByteArray ( ) ; }"
"void deletePermissions ( CSpaceResource res , CSpaceAction action , String [ ] principals ) { CSpacePrincipal [ ] principalsCopy ; principalsCopy = new CSpacePrincipal [ principals . length ] ; for ( int i = 0 ; i < principalsCopy . length ; i ++ ) { principalsCopy = ( CSpacePrincipal [ ] ) principals [ i ] ; res . deletePermissions ( action , principalsCopy [ i ] ) ; } }"
Connection getConnection ( ) { if ( conn == null ) { try { conn = getConnection ( ) ; } catch ( SQLException e ) { conn = null ; } } return conn ; }
"void loadSnapshots ( final SnapshottableDirectory dir , List < String > paths ) { for ( String path : paths ) { snapshots . add ( dir . getSnapshot ( ) ) ; } snapshotQuota . add ( dir . getSnapshotQuota ( ) ) ; for ( String path : paths ) { snapshotQuota . add ( dir . getSnapshotQuota ( ) ) ; } }"
int hashCode ( ) { int result = 17 ; if ( name != null ) { result += 31 * result + 7 * name . hashCode ( ) ; } else { result += 31 * result + 7 ; } return result ; }
"Tuple newInstance ( int row ) { Object [ ] values = new Object [ values . length ] ; System . arraycopy ( values , 0 , values , 0 , values . length ) ; return new Tuple ( ( String ) values [ 0 ] , ( String ) values [ 1 ] , ( String ) values [ 2 ] , ( String ) values [ 3 ] ) ; }"
"boolean hasNext ( ) { try { return iter . hasNext ( ) ; } catch ( DBException e ) { throw e ; } catch ( RuntimeException e ) { throw new DBException ( e . getMessage ( ) , e ) ; } }"
int determinePageCursorType ( int flags ) { if ( ( flags & PREF_PAGE_CURSOR ) != 0 ) { return PREF_PAGE_CURSOR ; } else if ( ( flags & PREF_PAGE_NO_CURSOR ) != 0 ) { return PREF_PAGE_NO_CURSOR ; } else if ( ( flags & PREF_PAGE_NO_CURSOR_ALL ) != 0 ) { return PREF_PAGE_NO_CURSOR ; } else { return PREF_PAGE_NO_CURSOR ; } }
"String getRuntimeClasspath ( ) { String runtimeClasspath = System . getProperty ( ""java.class.path"" ) ; if ( runtimeClasspath == null ) { runtimeClasspath = System . getProperty ( ""java.class.path"" ) ; } return runtimeClasspath ; }"
void revertVertical ( ) { for ( int i = 0 ; i < components . length ; i ++ ) { components [ i ] = components [ i ] - components [ i + 1 ] ; } }
void preInitializationStatistics ( final EvolutionState state ) { for ( int x = 0 ; x < children . length ; x ++ ) children [ x ] . preInitializationStatistics ( state ) ; }
"String toString ( ) { StringBuffer buf = new StringBuffer ( ) ; buf . append ( ""VMID["" ) ; for ( int i = 0 ; i < addr . length ; i ++ ) { if ( i > 0 ) { buf . append ( ""."" ) ; } buf . append ( Integer . toString ( addr [ i ] ) ) ; } buf . append ( ""]"" ) ; return buf . toString ( ) ; }"
"int getIntegerProperty ( String key , int def ) { try { return Integer . parseInt ( props . getProperty ( key ) ) ; } catch ( NumberFormatException e ) { return def ; } }"
"List < T > newList ( final T m1 , final T m2 ) { final List < T > list = new ArrayList < T > ( ) ; list . add ( m1 ) ; list . add ( m2 ) ; return ( list ) ; }"
"void testHashcode ( ) { XYBoxAndWhiskerRenderer r1 = new XYBoxAndWhiskerRenderer ( ) ; XYBoxAndWhiskerRenderer r2 = new XYBoxAndWhiskerRenderer ( ) ; assertTrue ( r1 . equals ( r2 ) ) ; int h1 = r1 . hashCode ( ) ; int h2 = r2 . hashCode ( ) ; assertEquals ( h1 , h2 ) ; }"
"String cutEnd ( String s , int length , int maxLength ) { if ( length > maxLength ) { s = s . substring ( 0 , length - maxLength ) + ""..."" ; } return s ; }"
"void testFromBytes ( ) { final byte [ ] val = new byte [ ] { 0x78 , 0x56 , 0x34 , 0x12 } ; final ZipLong zl = new ZipLong ( val ) ; assertEquals ( ""value from bytes"" , 0x12345678 , zl . getValue ( ) ) ; }"
"short getCNibble ( ) { int c = getC ( ) ; if ( ( c & ~ 0xf ) != 0 ) { throw new DexException ( ""Register C out of range: "" + Hex . u8 ( c ) ) ; } return ( short ) c ; }"
"String getPraznost ( ) { for ( int i = 0 ; i < praznost . length ; i ++ ) { if ( praznost [ i ] . getName ( ) . equals ( praznost [ i ] . getName ( ) ) ) { return praznost [ i ] ; } } return """" ; }"
"String wrapBytes ( byte [ ] bytes , int offset , int length ) { if ( length > 0 ) { return new String ( bytes , offset , length , bitstream . getCharset ( ) ) ; } else { return new String ( bytes , offset , length , bitstream . getCharset ( ) ) ; } }"
boolean isGUID ( String guid ) { if ( guid == null ) { return false ; } try { new GUID ( guid ) ; return true ; } catch ( IllegalArgumentException ex ) { return false ; } }
voidCoordinatesEvaluators ( final Iterable < FormulaEvaluator > evaluators ) { if ( evaluators . isEmpty ( ) ) { return ; } final Iterator < FormulaEvaluator > iter = evaluators . iterator ( ) ; while ( iter . hasNext ( ) ) { final FormulaEvaluator evaluator = iter . next ( ) ; evaluators . add ( evaluator ) ; } }
"String getString ( String key ) { String msg = null ; try { if ( bundle == null ) { bundle = ResourceBundle . getBundle ( ""com.sun.dhcpmgr.client.ResourceBundle"" , Locale . getDefault ( ) ) ; } msg = bundle . getString ( key ) ; } catch ( Throwable e ) { msg = new String ( key ) ; } return msg ; }"
FermatPacketCommunication constructFermatPacket ( PrivateKey key ) { FermatPacketCommunication result = new FermatPacketCommunication ( ) ; result . setRecipientPublicKey ( key . getPublicKey ( ) ) ; result . setRecipientPublicKey ( key . getPublicKey ( ) ) ; result . setRecipientPrivateKey ( key . getPrivate ( ) ) ; return result ; }
"Vector3f getNormal ( ) { Vector3f ret = new Vector3f ( ) ; for ( int i = 0 ; i < wheelLines . length ; i ++ ) { ret . set ( wheelLines [ i ] , wheelLines [ i ] , 0 ) ; } return ret ; }"
"String stripQuery ( String uri ) { int index = uri . indexOf ( '?' ) ; if ( index == - 1 ) { return uri ; } return uri . substring ( 0 , index ) ; }"
"void showGUI ( ) { frame . setVisible ( true ) ; frame . setResizable ( false ) ; frame . setDefaultCloseOperation ( JFrame . DO_NOTHING_ON_CLOSE ) ; frame . getContentPane ( ) . add ( panel2 , BorderLayout . CENTER ) ; frame . pack ( ) ; frame . getRootPane ( ) . setDefaultCloseOperation ( JFrame . DO_NOTHING_ON_CLOSE ) ; }"
"void setActiveCellPosition ( int x , int y ) { for ( int i = 0 ; i < activeCells ; i ++ ) { if ( activeCells [ i ] == null ) { activeCells [ i ] . setPosition ( x , y ) ; } else { activeCells [ i ] . setPosition ( x , y ) ; } } }"
void addLine ( String line ) { if ( lines == null ) { lines = new ArrayList < String > ( ) ; } lines . add ( line ) ; }
"String getValueAsString ( String tag , TaggedValue taggedValue ) { if ( taggedValue == null ) { return """" ; } return TaggedValueUtil . getValueAsString ( taggedValue , tag ) ; }"
void testCloning ( ) { StatisticalLineAndShapeRenderer r1 = new StatisticalLineAndShapeRenderer ( ) ; StatisticalLineAndShapeRenderer r2 = ( StatisticalLineAndShapeRenderer ) r1 . clone ( ) ; assertTrue ( r1 != r2 ) ; assertTrue ( r1 . getClass ( ) == r2 . getClass ( ) ) ; assertTrue ( r1 . equals ( r2 ) ) ; }
void setJvmThreadContentionMonitoring ( JvmThreadContentionMonitoring monitor ) { if ( monitor == null ) return ; JvmThreadContentionMonitoring current = JvmThreadContentionMonitoring . current ( ) ; JvmThreadContentionMonitoring currentMonitoring = JvmThreadContentionMonitoring . current ( ) ; JvmThreadContentionMonitoring . setMonitoring ( currentMonitoring ) ; }
String dictionaryIDToString ( int dictionaryID ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < dictionaryID ; i ++ ) { sb . append ( dictionaryID . charAt ( i ) ) ; } return sb . toString ( ) ; }
AppManager getInstance ( ) { if ( appManager == null ) { appManager = new AppManager ( ) ; } return appManager ; }
ObjectType getObjectType ( ProducerMember member ) { if ( member . getMemberClass ( ) == null ) { return ObjectType . CentralService ; } else { return ObjectType . SERVICE ; } }
Node getNode ( int pattern ) { for ( int i = 0 ; i < nodes . size ( ) ; i ++ ) { if ( nodes . get ( i ) . matches ( pattern ) ) { return nodes . get ( i ) ; } } return null ; }
Subscriber [ ] getSubscriptions ( ) { if ( started ) { return null ; } else { return subscribers ; } }
"byte [ ] copyOf ( byte [ ] data , int length ) { byte [ ] result = new byte [ length ] ; System . arraycopy ( data , 0 , result , 0 , length ) ; return result ; }"
"void uploadWithUserExecutor ( File file , OutputStream out ) { if ( userExecutor != null ) { try { upload ( file , out ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } else { uploadFile ( file , out ) ; } }"
"int byteToInt ( byte b ) { if ( b < 0 ) { throw new IllegalArgumentException ( ""Not a signed byte: "" + b ) ; } return ( ( b & 0xFF ) << 24 ) | ( ( b & 0x0F ) << 16 ) | ( ( b & 0x3F ) << 8 ) | ( b & 0x80 ) ; }"
"UDFUDF createUDFHolder ( String functionName , Class < ? > [ ] argumentTypes ) { UDFUDFClass functionUDFClass = findUDFClass ( functionName ) ; if ( functionUDFClass == null ) { return null ; } UDFUDFFactory functionUDFFactory = new UDFUDFFactory ( functionUDFClass , argumentTypes ) ; return functionUDFFactory . createHolder ( ) ; }"
String getWorkflowAdjacencies ( ) { if ( datum . getWorkflowAdjacencies ( ) != null ) { return datum . getWorkflowAdjacencies ( ) . toString ( ) ; } return null ; }
"Map < String , String > mergeMapByKeyPrefixedKeys ( Map < String , String > map ) { Map < String , String > mergedMap = new HashMap < String , String > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { mergedMap . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } return mergedMap ; }"
"void testPromptPasswordOptionAtBeginningOfArguments ( ) { beeline . setPromptPasswordOption ( beeline . getPromptPasswordOption ( ) ) ; beeline . setPromptPasswordOption ( beeline . getPromptPasswordOption ( ) ) ; beeline . setPromptPasswordOption ( beeline . getPromptPasswordOption ( ) ) ; beeline . setPromptPasswordOption ( beeline . getPromptPasswordOption ( ) ) ; assertEquals ( beeline . getPromptPasswordOption ( ) , beeline . getPromptPasswordOption ( ) ) ; }"
"void quickSort ( int [ ] a , int [ ] b , int left , int right ) { if ( left < right ) { int middle = left + right ; quickSort ( a , b , left , middle ) ; quickSort ( a , b , middle - 1 , right ) ; } else { quickSort ( a , b , left , middle ) ; quickSort ( a , b , middle + 1 , right ) ; } }"
double parseDouble ( String value ) { try { return Double . parseDouble ( value ) ; } catch ( NumberFormatException e ) { return 0 ; } }
"void insertFront ( int item , DListNode2 head ) { head . next . prev = head . next . prev ; head . next . prev . next = head . next . prev ; head . next . prev . next = head . next . prev ; head . next . prev = head . next ; head . next . prev = head ; head . next . prev = head ; size ++ ; }"
"void assertAnyStringParameter ( String ... args ) { for ( int i = 0 ; i < args . length ; i ++ ) { Assert . assertEquals ( ""Parameter "" + i + "" is not set."" , args [ i ] , System . getProperty ( args [ i ] ) ) ; } }"
List < Role > getRootRoles ( ) { if ( rootRoles == null ) { rootRoles = new ArrayList < Role > ( ) ; } return rootRoles ; }
"void addState ( GameState state ) { if ( ! states . containsKey ( state . getName ( ) ) ) { states . put ( state . getName ( ) , new ArrayList < GameState > ( ) ) ; } states . get ( state . getName ( ) ) . add ( state ) ; update ( ) ; }"
String thirdObjectName ( final String name ) { final String [ ] names = splitNames ( name ) ; return names [ names . length - 2 ] ; }
void setInitCallback ( Runnable callback ) { if ( INIT_CALLBACKS == null ) { INIT_CALLBACKS = new ArrayList < Runnable > ( ) ; } INIT_CALLBACKS . add ( callback ) ; }
boolean isNetworkDrive ( File file ) { if ( file == null ) { return false ; } if ( file . getParent ( ) == null ) { return false ; } File parent = file . getParentFile ( ) ; if ( parent == null ) { return false ; } if ( parent . equals ( file ) ) { return false ; } return isNetworkDrive ( parent ) ; }
boolean isLogginIn ( ) { if ( userContainer == null ) { createUserContainer ( ) ; } return userContainer . isLogginIn ( ) ; }
"String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; for ( int i = 0 ; i < m_Elements . length ; i ++ ) { buffer . append ( m_Elements [ i ] . toString ( ) ) ; if ( i < m_Elements . length - 1 ) { buffer . append ( "", "" ) ; } } return buffer . toString ( ) ; }"
"Set < String > findKeysWithParticuarPrefix ( Set < String > keys , String prefix ) { Set < String > keysWithParticuarPrefix = new HashSet < String > ( ) ; for ( String key : keys ) { if ( key . startsWith ( prefix ) ) { keysWithParticuarPrefix . add ( key ) ; } } return keysWithParticuarPrefix ; }"
"Hash getInstance ( String type ) { switch ( type ) { case ""32"" : return new Hash32 ( ) ; case ""64"" : return new Hash64 ( ) ; case ""32"" : return new Hash32 ( ) ; case ""64"" : return new Hash64 ( ) ; default : throw new IllegalArgumentException ( ""Unknown hash function type: "" + type ) ; } }"
int getRunStart ( Attribute attrib ) { if ( attrib == null ) throw new NullPointerException ( ) ; int index = 0 ; while ( index < length && getRunAttribute ( attrib ) == attrib ) index ++ ; return index ; }
int hashCode ( ) { int h = 0 ; for ( int i = 0 ; i < values . length ; i ++ ) { if ( values [ i ] != null ) { h ^= values [ i ] . hashCode ( ) ; } } return h ; }
"void testReadRawVarint32 ( ) { int result = readRawVarint32 ( ) ; assertEquals ( 0 , result ) ; }"
boolean isNetworkAvailable ( Context context ) { ConnectivityManager cm = ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; NetworkInfo activeNetwork = cm . getActiveNetworkInfo ( ) ; return activeNetwork != null && activeNetwork . isConnectedOrConnecting ( ) ; }
"OutputType fromString ( String outputType ) { for ( OutputType value : values ( ) ) { if ( value . toString ( ) . equalsIgnoreCase ( outputType . toString ( ) ) ) { return value ; } } throw new IllegalArgumentException ( ""Invalid outputType value: "" + outputType ) ; }"
"byte [ ] getIV ( ) { if ( iv == null ) { return null ; } byte [ ] tmp = new byte [ iv . length ] ; System . arraycopy ( iv , 0 , tmp , 0 , iv . length ) ; return tmp ; }"
"void setConnection ( Connection connection ) { if ( connection == null ) { throw new ModbusException ( ""Connection is null."" ) ; } m_connection = connection ; }"
"void testStatic_forTreeView_noArgs_ensureCellFactoryIsNotNull ( ) { Callback < TreeView < String > , TreeCell < String >> cellFactory = ComboBoxTreeCell . forTreeView ( ) ; assertNotNull ( cellFactory ) ; }"
void appendElements ( int numberOfElements ) { if ( ( m_firstFree + numberOfElements ) >= m_mapSize ) { int newSize = m_mapSize + numberOfElements ; m_mapSize += newSize ; } m_map = new Object [ newSize ] ; for ( int i = 0 ; i < newSize ; i ++ ) m_map [ i ] = null ; }
boolean isDisabled ( ) { if ( disabled == null ) { return false ; } else { return disabled ; } }
"void changeNotePluginAsActiveTab ( ) { Tab tab = new Tab ( ) ; tab . setId ( ""notes"" ) ; plugin . tabs ( ) . add ( tab ) ; }"
"double latitudeToPixelY ( double latitude , int zoomLevel ) { double latitudeRads = Math . toRadians ( latitude ) ; return Math . round ( ( 1 - Math . log ( latitudeRads ) / ( 1 << zoomLevel ) ) * ( 1 - Math . log ( 2 * Math . PI ) ) ) ; }"
"void setLogger ( final Logger logger ) { if ( logger == null ) { throw new NullPointerException ( ""logger must not be null"" ) ; } s_logger = logger ; }"
"void compareWithOneEmptyTagTest ( ) { TestAttributes testAttributes = new TestAttributes ( ) ; testAttributes . attributesData = testAttributesMap ; OsmSAXWay osmSAXWay = new OsmSAXWay ( testAttributes ) ; try { osmSAXWay . compare ( """" , """" ) ; fail ( ) ; } catch ( IllegalArgumentException ex ) { } }"
void testRandomDouble ( ) { OsSecureRandom random = getOsSecureRandom ( ) ; double rand1 = random . nextDouble ( ) ; double rand2 = random . nextDouble ( ) ; while ( rand1 == rand2 ) { rand2 = random . nextDouble ( ) ; } random . close ( ) ; }
String getCidade ( ) { checkNLoad ( ) ; return cidade ; }
"String newUserAssignment ( @ Valid UserAssignment userAssignment , BindingResult bindingResult ) { logger . info ( ""new user assignment "" ) ; if ( bindingResult . hasErrors ( ) ) { Map < String , Object > model = new HashMap < String , Object > ( ) ; model . put ( ""userAssignment"" , userAssignment ) ; return ""redirect:/userAssignment"" ; } userAssignmentBO . addUserAssignment ( userAssignment ) ; return ""redirect:/userAssignment"" ; }"
"void addAbbreviations ( String phrase , Set < String > abbreviations ) { if ( abbreviations == null || abbreviations . isEmpty ( ) ) { return ; } if ( abbreviations . size ( ) == 0 ) { return ; } for ( String abbreviationsElement : abbreviations ) { addAbbreviations ( phrase , abbreviationsElement ) ; } }"
"int getInt ( String property , int defaultValue ) { try { return Integer . parseInt ( getProperty ( property ) ) ; } catch ( NumberFormatException e ) { return defaultValue ; } }"
void setThreadContextClassLoader ( final ClassLoader cl ) { AccessController . doPrivileged ( new PrivilegedAction < Object > ( ) { public Object run ( ) { Thread . currentThread ( ) . setContextClassLoader ( cl ) ; return null ; } } ) ; }
"String getParameter ( String name ) { if ( parameters . containsKey ( name ) ) { return parameters . get ( name ) ; } else { return """" ; } }"
"int getInt ( String key , int defaultValue ) { if ( key == null ) { return defaultValue ; } try { return Integer . parseInt ( getConfig ( key ) ) ; } catch ( NumberFormatException e ) { throw new ConfigurationException ( ""Config setting '"" + key + ""' is not an integer"" , e ) ; } }"
int generatePermutationId ( ) { int permutationId = 0 ; for ( int i = 0 ; i < permutation . length ; i ++ ) { permutationId += permutation [ i ] ; } return permutationId ; }
void invalidateHardwareBuffers ( ) { if ( mHardwareBuffers != null ) { for ( int i = 0 ; i < mHardwareBuffers . length ; i ++ ) { mHardwareBuffers [ i ] . close ( ) ; } } mHardwareBuffers = null ; }
"Object getValue ( Map < K , V > map , K key ) { V value = map . get ( key ) ; if ( value == null ) { return null ; } return value ; }"
void testSkipped ( Description description ) { TestCaseNode testCase = getTestCase ( description ) ; if ( testCase != null ) { testCase . skipped ( ) ; } }
"double calculateScore ( String feature , double score ) { if ( ! scores . containsKey ( feature ) ) throw new IllegalArgumentException ( ""No score for feature "" + feature ) ; return ( ( Double ) scores . get ( feature ) ) . doubleValue ( ) ; }"
"void setTypeAndData ( final int blockId , final int type , final int data ) { final BlockState state = getBlockState ( blockId ) ; state . setType ( type ) ; state . setData ( data ) ; addBlockState ( blockId , state ) ; }"
int occurrencesOf ( char c ) { int count = 0 ; for ( int i = 0 ; i < sequence . length ( ) ; i ++ ) { if ( sequence . charAt ( i ) == c ) count ++ ; } return count ; }
"void handleGeneralError ( String message , Throwable e ) { if ( logger . isErrorEnabled ( ) ) { logger . error ( message , e ) ; } else { logger . error ( message , e ) ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( message , e ) ; } throw new ServletException ( message , e ) ; }"
String [ ] getBestFragments ( ) { String [ ] result = new String [ fragments . size ( ) ] ; for ( int i = 0 ; i < fragments . size ( ) ; i ++ ) { result [ i ] = fragments . get ( i ) ; } return result ; }
int getBytesRequired ( Object value ) { int bytesRequired = 0 ; if ( value != null ) { bytesRequired = value . getClass ( ) . getBytes ( ) . length ; } return bytesRequired ; }
int getSelectedTabSetIndex ( UIXRenderingContext context ) { final INaviView node = context . getNode ( ) ; if ( node != null ) { final INaviTabSet tabSet = node . getTabSet ( ) ; if ( tabSet != null ) { return tabSet . getTabSetIndex ( ) ; } } return 0 ; }
"void setAuthToken ( Context context , String accountName , String authToken ) { SharedPreferences . Editor editor = getPrefs ( context ) . edit ( ) ; editor . putString ( PREF_ACCOUNT_NAME , accountName ) ; editor . putString ( PREF_AUTH_TOKEN , authToken ) ; editor . commit ( ) ; }"
List < String > getActiveTenantsList ( ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0 ; i < tenants . size ( ) ; i ++ ) { if ( tenants . get ( i ) . isActive ( ) ) { result . add ( tenants . get ( i ) . getId ( ) ) ; } } return result ; }
double getAverageTotalWaitingTime ( ) { double total = 0 ; for ( CustomerInfo c : waiting . values ( ) ) { total += c . getWaitingTime ( ) ; } return ( double ) total / waiting . values ( ) . size ( ) ; }
Integer getColorIndexSize ( BufferedImage image ) { if ( image == null || image . getColorModel ( ) == null ) { return null ; } return image . getColorModel ( ) . getColorIndexSize ( ) ; }
"void crearHtml ( String archivo , String html ) { try { writer . write ( ""<html>"" ) ; writer . newLine ( ) ; writer . write ( html ) ; writer . newLine ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }"
List < Feature > getFeatures ( ) { List < Feature > result = new ArrayList < Feature > ( ) ; for ( Feature f : features ) { if ( f . getLabel ( ) == null ) { result . add ( f ) ; } } return result ; }
"boolean isWindows ( ) { String os = System . getProperty ( ""os.name"" ) . toLowerCase ( ) ; return ( os . indexOf ( ""win"" ) >= 0 ) ; }"
"byte [ ] rsaEncrypt ( PrivateKey key , byte [ ] output ) { try { Cipher cipher = Cipher . getInstance ( ""RSA/ECB/PKCS1Padding"" ) ; cipher . init ( Cipher . ENCRYPT_MODE , key ) ; return cipher . doFinal ( output ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return null ; }"
InputStream getInputStream ( ) { if ( dataSource == null ) { return null ; } return dataSource . getInputStream ( ) ; }
int countInvisibleNodes ( List < NaviNode > nodes ) { int invisibleCount = 0 ; for ( NaviNode node : nodes ) { if ( ! node . isInvisible ( ) ) { invisibleCount ++ ; } } return invisibleCount ; }
"GOP createGOP ( int x , int y , int width , int height ) { GOP gop = new GOP ( ) ; gop . x = x ; gop . y = y ; gop . width = width ; gop . height = height ; return gop ; }"
boolean containsVertex ( V v ) { if ( minVertices == null ) return false ; return minVertices . contains ( v ) ; }
SchemaGrammar getSchemaGrammar ( String namespaceURI ) { if ( namespaceURI == null ) { return null ; } return ( SchemaGrammar ) fGrammarMap . get ( namespaceURI ) ; }
ArrayList < String > extractRandomWords ( ) { ArrayList < String > randomWords = new ArrayList < String > ( ) ; for ( int i = 0 ; i < tenRandomWords . size ( ) ; i ++ ) { randomWords . add ( tenRandomWords . get ( i ) ) ; } return randomWords ; }
"IRubyObject toBson ( final IRubyObject time ) { final long millis = ( ( RubyTime ) time ) . getJavaDate ( ) . getTime ( ) ; return toBsonTime ( time . getRuntime ( ) , millis ) ; }"
"void onSuccess ( IMqttToken token , Throwable exception ) { switch ( action ) { case CONNECT : connect ( ) ; break ; case DISCONNECT : disconnect ( ) ; break ; case SUBSCRIBE : subscribe ( ) ; break ; case UNSUBSCRIBE : unsubscribe ( ) ; break ; case UNSUBSCRIBE : unsubscribe ( ) ; break ; } }"
"String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( getClass ( ) . getName ( ) ) . append ( ""["" ) ; for ( int i = 0 ; i < attributes . length ; i ++ ) { sb . append ( attributes [ i ] . toString ( ) ) ; if ( i < attributes . length - 1 ) { sb . append ( "", "" ) ; } } sb . append ( ""]"" ) ; return ( sb . toString ( ) ) ; }"
Behavior sleepBeforeClientRequests ( long sleepTime ) { return behavior ( ) . beforeClientRequests ( new Runnable ( ) { @ Override public void run ( ) { try { Thread . sleep ( sleepTime ) ; } catch ( InterruptedException e ) { } } } ) ; }
"void setToggleActionSelectedState ( String id , boolean selected ) { if ( ! ACTION_TOGGLE_ACTIONS . containsKey ( id ) ) { Log . w ( TAG , ""Failed to find toggle action: "" + id ) ; return ; } if ( ! ACTION_TOGGLE_ACTIONS . get ( id ) . isSelected ( ) ) { Log . w ( TAG , ""Failed to find toggle action: "" + id ) ; return ; } ACTION_TOGGLE_ACTIONS . get ( id ) . setSelectedState ( selected ) ; }"
void setupDirectories ( ) { try { new File ( PATH_LOCAL_USER ) . mkdirs ( ) ; new File ( PATH_CACHE_DIR ) . mkdirs ( ) ; new File ( PATH_CACHE_SHARE_DIR ) . mkdirs ( ) ; } catch ( SecurityException e ) { e . printStackTrace ( ) ; } }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
void snapSegments ( ) { for ( int i = 0 ; i < segments . length ; i ++ ) { for ( int j = 0 ; j < segments [ i ] . length ; j ++ ) { snapVertex ( segments [ i ] [ j ] ) ; } } }
int howManyHasPlayerBore ( ) { int howManyHasPlayerBore = 0 ; for ( ItemStack item : items ) { if ( ! item . isPlayerBore ( ) ) { howManyHasPlayerBore ++ ; } } return howManyHasPlayerBore ; }
"String getLocaleString ( Locale locale ) { String localeString = """" ; if ( locale != null ) { localeString = locale . toString ( ) ; } return localeString ; }"
void setFinalNode ( Node node ) { if ( nodes == null ) { nodes = new ArrayList < Node > ( ) ; } nodes . add ( node ) ; }
"void encodeBuffer ( byte [ ] aBuffer , OutputStream aStream ) { byte [ ] b = getEncoded ( aBuffer ) ; encodeBuffer ( b , aStream ) ; }"
"void testIterator ( ) { int count = 0 ; String line ; while ( ( line = iterator . next ( ) ) != null ) { Assert . assertEquals ( String . valueOf ( count ) , line ) ; count ++ ; } Assert . assertEquals ( count , count ) ; }"
Class < ? > getCurrentClass ( String metaTagKeyword ) { Class < ? > currentClass = null ; for ( Class < ? > c : classes ) { if ( c . getMetaTag ( ) . equals ( metaTagKeyword ) ) { currentClass = c ; break ; } } return currentClass ; }
"DataFlavor [ ] getTransferDataFlavors ( ) { DataFlavor [ ] flavors = new DataFlavor [ flavors . length ] ; System . arraycopy ( flavors , 0 , flavors , 0 , flavors . length ) ; return flavors ; }"
"void testSerialization ( ) { YIntervalDataItem item1 = new YIntervalDataItem ( 1.0 , 2.0 , 3.0 , 4.0 ) ; YIntervalDataItem item2 = ( YIntervalDataItem ) TestUtilities . serialised ( item1 ) ; assertEquals ( item1 , item2 ) ; }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
"T doSwitch ( int classifierID , EObject theEObject ) { switch ( classifierID ) { case SecondarytablePackage . PERSON : { Person person = ( Person ) theEObject ; T result = casePerson ( person ) ; if ( result == null ) result = defaultCase ( theEObject ) ; return result ; } default : return defaultCase ( theEObject ) ; } }"
boolean isLeapYear ( ) { boolean isLeapYear = false ; for ( int i = 0 ; i < leapYears . length ; i ++ ) { if ( leapYears [ i ] ) { isLeapYear = true ; } } return isLeapYear ; }
"int getContentSettingResourceId ( ContentSetting contentSetting ) { if ( contentSetting == null ) { throw new IllegalArgumentException ( ""contentSetting is null"" ) ; } return permissionResourceIds . get ( contentSetting . getId ( ) ) ; }"
int occurrencesOf ( String word ) { int counter = 0 ; for ( int i = 0 ; i < book . length ; i ++ ) { if ( book [ i ] . contains ( word ) ) { counter ++ ; } } return counter ; }
"String toFilename ( String experimentName ) { if ( experimentName == null ) { return null ; } if ( experimentName . length ( ) == 0 ) { return null ; } if ( experimentName . length ( ) == 1 ) { return experimentName . substring ( 0 , experimentName . length ( ) - 1 ) ; } return File . separator + experimentName . substring ( 0 , experimentName . length ( ) - 1 ) ; }"
boolean isProcessApplication ( DeploymentUnit unit ) { if ( unit . getParent ( ) instanceof ProcessApplicationDeploymentUnit ) { return true ; } if ( unit . getParent ( ) instanceof ProcessApplicationDeploymentUnit ) { return ( ( ProcessApplicationDeploymentUnit ) unit . getParent ( ) ) . isProcessApplication ( ) ; } return false ; }
void redisplayControl ( Control control ) { if ( ! ( control instanceof AbstractControl ) ) { return ; } ( ( AbstractControl ) control ) . redisplay ( ) ; }
Legger getMiLegger ( ) { if ( miLegger == null ) { miLegger = new Legger ( ) ; miLegger . setLegger ( new MiLegger ( ) ) ; miLegger . setLegger ( new MiLegger ( ) ) ; miLegger . setLegger ( new MiLegger ( ) ) ; miLegger . setLegger ( new MiLegger ( ) ) ; return miLegger ; } return miLegger ; }
"int randomInt ( int min , int max ) { if ( max - min < Integer . MAX_VALUE ) { throw new IllegalArgumentException ( ""max - min is < Integer.MAX_VALUE"" ) ; } return ( int ) ( min + RANDOM . nextLong ( ) * ( max - min ) + RANDOM . nextLong ( ) ) ; }"
"Connection createConnection ( ) { if ( dataSource != null ) { return dataSource . getConnection ( ) ; } throw new SQLException ( ""Data source is not configured properly."" ) ; }"
"void handlePanelUninstall ( PanelConfig panelConfig ) { mPendingChanges . offer ( new ConfigChange ( ChangeType . UNINSTALL , panelConfig ) ) ; Log . d ( LOGTAG , ""handlePanelUninstall: "" + mPendingChanges . size ( ) ) ; scheduleInvalidation ( InvalidationMode . DELAYED ) ; }"
"Class < ? > modifyClass ( String name , ClassLoader classLoader ) { Class < ? > clazz = getModifiedClass ( name ) ; if ( clazz == null ) { return null ; } if ( ! classLoader . contains ( clazz ) ) { classLoader . add ( clazz ) ; } return clazz ; }"
"void replaceTraces ( int start , int end ) { for ( int i = start ; i < end ; i ++ ) { traces [ i ] = traces [ i + 1 ] = traces [ i + 2 ] = traces [ i + 3 ] = traces [ i + 4 ] = traces [ i + 5 ] = traces [ i + 6 ] = traces [ i + 7 ] = traces [ i + 8 ] = traces [ i + 9 ] = null ; } }"
"void addFilter ( Filter filter ) { for ( int i = 0 ; i < kernels . size ( ) ; i ++ ) { for ( int j = 0 ; j < kernels . get ( i ) . size ( ) ; j ++ ) { kernels . get ( i ) . add ( new AtractKernel ( filter , kernels . get ( i ) . get ( j ) ) ) ; } } }"
"int decodeInt ( ) { int i = unpackInt ( true ) ; if ( ( i & ~ 0x7F ) != 0 ) { throw new WiredTigerPackingException ( ""Value out of range: "" + Integer . toHexString ( i ) ) ; } return i ; }"
List < String > getParametersNames ( ) { List < String > names = new ArrayList < String > ( ) ; if ( parameters != null ) { for ( int i = 0 ; i < parameters . size ( ) ; i ++ ) { names . add ( parameters . get ( i ) . getName ( ) ) ; } } return names ; }
boolean isInContact ( Address ... addresses ) { for ( Address address : addresses ) { if ( isInContact ( address ) ) { return true ; } } return false ; }
"void renderAsPdf ( JasperReport report , Map parameters , Object reportData , OutputStream stream ) { JasperPrint print = JasperFillManager . fillReport ( report , parameters , convertReportData ( reportData ) ) ; JRPdfExporter exporter = new JRPdfExporter ( ) ; exporter . setParameters ( parameters ) ; render ( exporter , print , stream ) ; }"
"void testNodeProcessing ( ) { testNodeProcessingSchema ( new Map < String , String > ( ) ) ; testNodeProcessingSchema ( new Map < String , String > ( ) ) ; testNodeProcessingSchema ( new Map < String , String > ( ) ) ; testNodeProcessingSchema ( new Map < String , String > ( ) ) ; testNodeProcessingSchema ( new Map < String , String > ( ) ) ; testNodeProcessingSchema ( new Map < String , String > ( ) ) ; testNodeProcessingSchema ( new Map < String , String > ( ) ) ; }"
String getProperty ( String key ) { for ( int i = 0 ; i < list . size ( ) ; i ++ ) { if ( list . get ( i ) . getProperty ( key ) != null ) { return list . get ( i ) . getProperty ( key ) ; } } return null ; }
"String getProtocol ( String protocol ) { if ( protocol . equalsIgnoreCase ( ""PLAIN"" ) ) { return ""PLAIN"" ; } else if ( protocol . equalsIgnoreCase ( ""PLAIN"" ) ) { return ""PLAIN"" ; } else if ( protocol . equalsIgnoreCase ( ""PLAIN"" ) ) { return ""PLAIN"" ; } else if ( protocol . equalsIgnoreCase ( ""PLAIN"" ) ) { return ""PLAIN"" ; } return null ; }"
List < DirectTileFour > getChildren ( ) { List < DirectTileFour > children = new ArrayList < DirectTileFour > ( ) ; for ( DirectTileFour child : children ) { if ( child instanceof DirectTileFour ) { children . add ( ( DirectTileFour ) child ) ; } } return children ; }
byte [ ] charToByteArray ( char [ ] charArray ) { byte [ ] bytes = new byte [ charArray . length ] ; for ( int i = 0 ; i < charArray . length ; i ++ ) { bytes [ i ] = ( byte ) charArray [ i ] ; } return bytes ; }
"void dropTable ( Connection con , String table , boolean ifExists ) { Statement stmt = con . createStatement ( ) ; stmt . execute ( ""DROP TABLE IF EXISTS "" + table + "";"" ) ; if ( ifExists ) { stmt . execute ( ""DROP TABLE "" + table ) ; } stmt . close ( ) ; }"
NexusReferenceFactory getReferenceFactory ( ) { if ( referenceFactory == null ) { referenceFactory = new NexusReferenceFactory ( ) ; } return referenceFactory ; }
"String generateGTFID ( FeatureType featureType , OgrFeature ogrFeature ) { String id = featureType . getID ( ) ; if ( ogrFeature == null ) { return id ; } id += ""-"" + ogrFeature . getID ( ) ; return id ; }"
void startAcquisitionThread ( ) { if ( acquisitionThread == null ) { acquisitionThread = new Thread ( new acquisitionTask ( ) ) ; } acquisitionThread . start ( ) ; }
"void createRelation ( ) { createRelation ( ""LESSONS"" , ""LESSONDS"" , ""FLASHCARDS"" ) ; createRelation ( ""FLASHCARDS"" , ""FLASHCARDS"" , ""LESSONS"" ) ; createRelation ( ""LESSONS"" , ""LESSONS"" , ""LESSONS"" ) ; createRelation ( ""FLASHCARDS"" , ""FLASHCARDS"" , ""LESSONS"" ) ; }"
"ArrayList < Student > unplaceStudents ( Group group , int minStudentCapacity ) { ArrayList < Student > unplacedStudents = new ArrayList < Student > ( ) ; for ( Student student : group . getStudents ( ) ) { if ( student . getCapacity ( ) < minStudentCapacity ) { unplacedStudents . add ( student ) ; } } group . setStudents ( unplacedStudents ) ; return unplacedStudents ; }"
"E checkNotInstanceOf ( Class type , E object , String errorMessage ) { isNotNull ( type , errorMessage ) ; if ( ! type . isInstance ( object ) ) { throw new IllegalArgumentException ( errorMessage ) ; } return object ; }"
boolean locationInBoard ( Location loc ) { for ( int i = 0 ; i < board . length ; i ++ ) { if ( board [ i ] [ 0 ] . contains ( loc ) ) { return true ; } } return false ; }
boolean isEmpty ( ) { if ( size ( ) == 0 ) { return true ; } return false ; }
Observable < Integer > getData ( int id ) { final List < Integer > data = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < 5000 ; i ++ ) { data . add ( i ) ; } return fromIterableWithReactivePull ( data ) ; }
"String visualizeModel ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""YAWL Model: "" ) . append ( model . toString ( ) ) . append ( "" "" ) ; for ( int i = 0 ; i < children . length ; i ++ ) { sb . append ( children [ i ] . visualize ( ) ) ; } sb . append ( "" "" ) ; return sb . toString ( ) ; }"
"double getProbability ( Space space1 , Space space2 ) { if ( space1 == space2 ) { return 0.0 ; } else if ( space1 == space2 ) { return 1.0 ; } else if ( space1 == space2 ) { return 1.0 ; } else if ( space1 == space2 ) { return 1.0 ; } else { return 0.0 ; } }"
"AttributeNode getPrefixAttributeNode ( String prefix ) { NamedNodeMap ns = attributes . get ( prefix ) ; if ( ns == null ) { ns = new NamedNodeMap ( ) ; attributes . put ( prefix , ns ) ; } return ns . getNamedItem ( prefix ) ; }"
PackageAdminService getService ( ) { PackageAdmin service = getPackageAdmin ( ) . getService ( ) ; if ( service != null ) { return service ; } return getPackageAdmin ( ) . getService ( ) ; }
"String getTableName ( JSONObject soup ) { if ( soup == null ) { return null ; } String tableName = soup . getString ( ""table"" ) ; if ( tableName == null ) { return null ; } return tableName ; }"
FileOutputStream writeToTempFile ( InputStream in ) { File outFile = createTempFile ( ) ; try { return new FileOutputStream ( outFile ) ; } finally { try { in . close ( ) ; } catch ( IOException e ) { } } }
void prepareWeatherData ( ) { for ( int i = 0 ; i < 5 ; i ++ ) { for ( int j = 0 ; j < 5 ; j ++ ) { weatherData [ i ] [ j ] = 1 ; } } for ( int i = 0 ; i < 5 ; i ++ ) { weatherData [ i ] [ i ] = 0 ; } for ( int i = 0 ; i < 5 ; i ++ ) { weatherData [ i ] [ i ] = 1 ; } }
"void testMainMenuNavigatesToMainMenu ( ) { gameOverController . mainMenu ( ) ; verify ( mockNavigator , times ( 1 ) ) . pop ( ) ; }"
boolean isPlacedBeforeInsert ( ) { if ( isPlacedBeforeInsert == null ) { isPlacedBeforeInsert = true ; } return isPlacedBeforeInsert ; }
int getClasses ( ) { if ( classes == null ) { return 0 ; } else { return classes ; } }
"Map < K , V > mapKeys ( Map < K , V > sourceMap ) { Map < K , V > result = new HashMap < K , V > ( ) ; for ( Map . Entry < K , V > entry : sourceMap . entrySet ( ) ) { result . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } return result ; }"
byte [ ] exportUserData ( ) { ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; DataOutputStream outstr = new DataOutputStream ( out ) ; exportUserData ( outstr ) ; return outstr . toByteArray ( ) ; }
"String percentDecode ( String s ) { try { return URLDecoder . decode ( s , ""UTF-8"" ) ; } catch ( UnsupportedEncodingException e ) { return s ; } }"
void setupMailServer ( ) { if ( mailServer == null ) { mailServer = new Server ( ) ; } mailServer . setPort ( mailPort ) ; }
"String toString ( ) { StringBuffer sb = new StringBuffer ( ""ApplicationFilterConfig["" ) ; sb . append ( ""name="" ) ; sb . append ( filterDef . getFilterName ( ) ) ; sb . append ( "", filterClass="" ) ; sb . append ( filterDef . getFilterClass ( ) ) ; sb . append ( "", filterClass="" ) ; sb . append ( filterDef . getFilterClass ( ) ) ; sb . append ( ""]"" ) ; return ( sb . toString ( ) ) ; }"
"void serviceModelCreated ( ServiceModelEvent event ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( ""ServiceModel created: "" + event . getServiceName ( ) ) ; } serviceRegistry . put ( event . getServiceName ( ) , event ) ; if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( ""ServiceModel created: "" + event . getServiceName ( ) ) ; } }"
void updateFields ( Unit unit ) { int unitId = unit . getId ( ) ; String name = unit . getName ( ) ; String desc = unit . getDescription ( ) ; if ( name == null ) { desc = unit . getDescription ( ) ; } if ( desc == null ) { desc = unit . getDescription ( ) ; } if ( name == null ) { name = unit . getName ( ) ; } if ( desc == null ) { desc = unit . getDescription ( ) ; } unit . setId ( unitId ) ; }
"void handleContentsChange ( Request request , Response response ) { Map < String , Object > params = request . getParameters ( ) ; Map < String , Object > map = new HashMap < String , Object > ( ) ; map . put ( ""contents"" , request . getContents ( ) ) ; response . getBody ( ) . put ( JSONConstants . CONTENT_TYPE , request . getContentType ( ) ) ; }"
"Duration getCustomDuration ( int seconds ) { if ( seconds < 0 ) { throw new IllegalArgumentException ( ""seconds may not be negative"" ) ; } return seconds == 0 ? Duration . ZERO : Duration . ofSeconds ( seconds ) ; }"
void invertPWM ( ) { for ( int i = 0 ; i < speedControllers . length ; i ++ ) { if ( speedControllers [ i ] != null ) { speedControllers [ i ] . invert ( ) ; } } }
void setUp ( ) { Mockito . when ( sessionFactory . getCurrentSession ( ) ) . thenReturn ( session ) ; Mockito . when ( sessionFactory . getCurrentSession ( ) ) . thenReturn ( session ) ; Mockito . when ( sessionFactory . getCurrentSession ( ) ) . thenReturn ( session ) ; Mockito . when ( sessionFactory . getCurrentSession ( ) ) . thenReturn ( session ) ; }
"void setValue ( int newValue ) { if ( newValue < 0 ) { throw new IllegalArgumentException ( ""Invalid value: "" + newValue ) ; } value = newValue ; }"
"boolean isNeighbor ( int node , int neighbor ) { for ( int i = 0 ; i < neighbor ; i ++ ) { if ( neighbor [ i ] == node ) return true ; } return false ; }"
List < IResourceRelativePath > getResourcePathsBySimpleName ( Predicate < String > namePredicate ) { List < IResourceRelativePath > result = new ArrayList < IResourceRelativePath > ( ) ; for ( Iterator < IResource > it = getResources ( ) . iterator ( ) ; it . hasNext ( ) ; ) { IResource resource = it . next ( ) ; if ( namePredicate . apply ( resource . getSimpleName ( ) ) ) { result . add ( resource . getPath ( ) ) ; } } return result ; }
"Map < String , PoolInfo > getPoolInfo ( ) { Map < String , PoolInfo > map = new HashMap < String , PoolInfo > ( ) ; map . put ( ""id"" , PULLDOWN_POOL_ID ) ; map . put ( ""title"" , PULLDOWN_POOL_TITLE ) ; map . put ( ""size"" , PULLDOWN_POOL_SIZE ) ; return map ; }"
"double toAngle ( double lat1 , double lon1 , double lat2 , double lon2 ) { double angle = toAngle ( lat1 , lon1 , lat2 , lon2 ) ; return Math . toDegrees ( angle ) ; }"
boolean isBinaryKey ( String hex ) { if ( hex . length ( ) != 2 ) { return false ; } for ( int i = 0 ; i < hex . length ( ) ; i ++ ) { if ( hex . charAt ( i ) == '0' || hex . charAt ( i ) == '1' || hex . charAt ( i ) == '2' || hex . charAt ( i ) == '3' || hex . charAt ( i ) == '4' ) { return true ; } } return false ; }
InputEvent createPunctuationPickEvent ( String text ) { if ( text == null ) { return new InputEvent ( InputEventType . PUNCTUATION ) ; } else { return new InputEvent ( InputEventType . PUNCTUATION ) ; } }
"void sepLink ( int from , int to ) { if ( from > to ) throw new IllegalArgumentException ( ""from must be less than to"" ) ; if ( to < from ) throw new IllegalArgumentException ( ""to must be less than from"" ) ; if ( from > to ) throw new IllegalArgumentException ( ""from must be greater than to"" ) ; if ( to < to ) throw new IllegalArgumentException ( ""to must be greater than to"" ) ; tailLink ( from , to ) ; }"
int [ ] getAttributes ( Instances instances ) { int [ ] attributes = new int [ instances . numAttributes ( ) ] ; for ( int i = 0 ; i < attributes . length ; i ++ ) { attributes [ i ] = i ; } return attributes ; }
Builder byStatus ( Iterable < Integer > status ) { requireNonNull ( status ) ; return new Builder ( query . deepCopy ( ) . setScopes ( ImmutableSet . copyOf ( status ) ) ) ; }
int getAttributeCount ( ) { if ( attributes == null ) { return 0 ; } else { return attributes . size ( ) ; } }
"void dumpValue ( StringBuffer buf , String value ) { if ( value == null ) { buf . append ( ""null"" ) ; } else { buf . append ( value ) ; } }"
"void testNtlmAuth ( ) { startServer ( 47500 ) ; fetchPage ( ""/ntlm.jsp"" , 200 ) ; fetchPage ( ""/ntlm.jsp?case=1"" , 200 ) ; tearDown ( ) ; }"
void lazyInitDependencieProperties ( ) { if ( dependencieProperties == null ) { dependencieProperties = new Properties ( ) ; } if ( ! dependencieProperties . isEmpty ( ) ) { dependencieProperties . putAll ( dependencieProperties ) ; } }
"Iterator getBodies ( Message message ) { XHTMLExtension xhtmlExtension = ( XHTMLExtension ) message . getExtension ( ""html"" , namespace ) ; if ( xhtmlExtension == null ) { return null ; } return xhtmlExtension . getBodies ( ) ; }"
List < E > getListAtIndex ( int index ) { if ( index < 0 || index >= size ( ) ) { throw new IndexOutOfBoundsException ( ) ; } return ( List < E > ) list . get ( index ) ; }
String cleanEnglishWords ( String str ) { StringBuilder sb = new StringBuilder ( str . length ( ) ) ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char ch = str . charAt ( i ) ; if ( ch >= 'a' && ch <= 'z' ) { sb . append ( ' ' ) ; } sb . append ( ch ) ; } return sb . toString ( ) ; }
List < T > deleteBatch ( T batch ) { List < T > result = null ; if ( batch != null ) { for ( int i = 0 ; i < batch . size ( ) ; i ++ ) { if ( batch . get ( i ) != null ) { result = ( List < T > ) batch . get ( i ) ; } } } return result ; }
"TableItem getItemFromPosition ( Table table , int position ) { TableItem [ ] tableItems = table . getItems ( ) ; for ( TableItem item : tableItems ) { if ( item . getPosition ( ) == position ) { return item ; } } return null ; }"
"List < LinhVucVanBan > getByTrangThai ( long groupId , boolean trangThai ) { List < LinhVucVanBan > ls = new ArrayList < LinhVucVanBan > ( ) ; try { ls = LinhVucVanBanLocalServiceUtil . getByTrangThai ( groupId , trangThai ) ; } catch ( Exception e ) { LOG . error ( e ) ; } return ls ; }"
"int hashCode ( String namespace ) { int hash = hashMap . get ( namespace ) ; if ( hash == 0 ) { hash = new Integer ( namespace . length ( ) + 1 ) ; hashMap . put ( namespace , hash ) ; } return hash ; }"
boolean isPreferRelativeResize ( ) { if ( preferRelativeResize == null ) { return false ; } else { return preferRelativeResize ; } }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
"void updateFields ( ) { ForkApplyPayload payload = new ForkApplyPayload ( ) ; ForkApply forkApply = new ForkApply ( ) ; assertEquals ( forkApply , payload . forkApply ( ) . forkApply ( ) ) ; }"
"CachedThreadPool boundedThreadPool ( final int boundedNumber ) { return new CachedThreadPool ( ( int ) Math . max ( boundedNumber , Integer . MAX_VALUE ) , TimeUnit . SECONDS ) { @ Override public ScheduledFuture < ? > get ( ) { return ThreadPoolUtils . boundedThreadPool ( boundedNumber , TimeUnit . SECONDS ) ; } } ; }"
"void storeObject ( Object sharedObject ) { if ( ! sharedObjects . containsKey ( sharedObject . getClass ( ) . getName ( ) ) ) { sharedObjects . put ( sharedObject . getClass ( ) . getName ( ) , sharedObject ) ; } else { sharedObjects . put ( sharedObject . getClass ( ) . getName ( ) , sharedObject ) ; } }"
"Counter getCount ( T myEnum ) { Counter counter = counterMap . get ( myEnum ) ; if ( counter == null ) { counter = new Counter ( myEnum . getClass ( ) . getName ( ) ) ; counterMap . put ( myEnum . getClass ( ) . getName ( ) , counter ) ; } return counter ; }"
java . util . List < DomainStatus > getDomainStatuses ( ) { if ( domainStatuses == null ) { domainStatuses = new com . amazonaws . internal . ListWithAutoConstructFlag < DomainStatus > ( ) ; domainStatuses . setAutoConstruct ( true ) ; } return domainStatuses ; }
"void setLabelText ( String labelText ) { if ( labelText == null ) { throw new NullPointerException ( ""labelText"" ) ; } if ( labelText . length ( ) == 0 ) { throw new IllegalArgumentException ( ""labelText"" ) ; } fLabelText = labelText ; }"
"float [ ] CStoCIEXYZ ( ColorSpace cs , float [ ] rgb , float [ ] colorvalue , float [ ] colorvalue ) { if ( cs instanceof NamedColorSpace ) { CStoCIEXYZ ( ( NamedColorSpace ) cs , rgb , colorvalue , colorvalue ) ; } else { float [ ] tmp = cs . toCIEXYZ ( rgb ) ; System . arraycopy ( tmp , 0 , colorvalue , 0 , tmp . length ) ; } return colorvalue ; }"
"ConnectionPool getConnectionPool ( String host ) { ConnectionPool pool = poolMap . get ( host ) ; if ( pool == null ) { pool = new ConnectionPool ( host ) ; poolMap . put ( host , pool ) ; } return pool ; }"
"Date parseDate ( String dateString ) { SimpleDateFormat dateFormater = new SimpleDateFormat ( ""dd/MM/yyyy"" ) ; dateFormater . setTimeZone ( TimeZone . getTimeZone ( ""GMT"" ) ) ; return dateFormater . parse ( dateString ) ; }"
URL toURL ( String str ) { try { return new URL ( str ) ; } catch ( MalformedURLException e ) { return null ; } }
String getInternalMessage ( String msg ) { if ( msg == null || msg . trim ( ) . length ( ) == 0 ) { return msg ; } else { return msg ; } }
String makeGetRequest ( String url ) { Request request = new Request ( url ) ; return makeGetRequest ( request ) ; }
boolean isAdmin ( Authentication auth ) { List < Role > roles = getRoles ( auth ) ; for ( Role role : roles ) { if ( auth . getRole ( ) . equals ( role . getRole ( ) ) ) { return true ; } } return false ; }
double getMaxAvailableMips ( List < PAMPe > peList ) { double maxAvailableMips = 0 ; for ( PAMPe pe : peList ) { double availableMips = pe . getMips ( ) ; if ( availableMips > maxAvailableMips ) { maxAvailableMips = availableMips ; } } return maxAvailableMips ; }
double l2Norm ( OpenCLGrid3D grid ) { double x = grid . getX ( ) ; double y = grid . getY ( ) ; double z = grid . getZ ( ) ; double norm = Math . sqrt ( x * x + y * y + z * z ) ; return norm ; }
"void setParameter ( @ Nonnull final String sName , @ Nonnull final Object aValue ) { ValueEnforcer . notNull ( sName , ""Name"" ) ; ValueEnforcer . notNull ( aValue , ""Value"" ) ; m_aParams . put ( sName , aValue ) ; }"
void writePoint ( Point p ) { if ( p . isPoint ( ) ) { int [ ] ord = p . getCoordinates ( ) ; for ( int i = 0 ; i < ord . length ; i ++ ) { ord [ i ] = p . getCoordinate ( i ) ; } } }
"void handleRefreshEvent ( CASEvent refreshEvent ) { LOGGER . debug ( ""Received event '{}'"" , refreshEvent . getEventType ( ) . toString ( ) ) ; try { handleRefreshEvent ( refreshEvent ) ; } catch ( Exception e ) { LOGGER . error ( ""Failed to handle event '{}'"" , refreshEvent . getEventType ( ) . toString ( ) ) ; } }"
Node makeNumeric ( Node n ) { if ( n == null ) { return null ; } if ( n . isLiteral ( ) ) { return makeNumericLiteral ( n . getText ( ) ) ; } else if ( n . isLiteral ( ) ) { return makeNumericLiteral ( n . getText ( ) ) ; } else { return makeNumericLiteral ( n . getString ( ) ) ; } }
"String toString ( ) { String str = """" ; for ( int i = 0 ; i < data . length ; i ++ ) { if ( data [ i ] > 0 ) { str += "","" ; } str += data [ i ] ; } return str ; }"
void moveSelected ( ) { for ( int i = 0 ; i < primitives . length ; i ++ ) { moveSelected ( primitives [ i ] ) ; } }
"XMLAttributes createXMLAttributes ( ) { XMLAttributes attributes = new XMLAttributes ( ) ; attributes . addAttribute ( ""xmlns:xsi"" , ""http://www.w3.org/2001/XMLSchema-instance"" ) ; attributes . addAttribute ( ""xmlns:xsi"" , ""http://www.w3.org/2001/XMLSchema-instance"" ) ; attributes . addAttribute ( ""xmlns:xsi"" , ""http://www.w3.org/2001-XMLSchema-instance"" ) ; return attributes ; }"
void forwardToListener ( MotechEvent event ) { if ( listener != null && listener instanceof MotechEventListener ) { ( ( MotechEventListener ) listener ) . forwardToListener ( event ) ; } }
String getNextLSIDSuiteValue ( int index ) { if ( index < lsid_suites . length ) { return lsid_suites [ index ] ; } else { return null ; } }
void updateEvidence ( String evidence ) { for ( int i = 0 ; i < evidenceVector . size ( ) ; i ++ ) { if ( evidenceVector . get ( i ) . equals ( evidence ) ) { evidenceVector . remove ( i ) ; } else { evidenceVector . add ( evidence ) ; } } }
void addDescriptors ( String [ ] descriptors ) { for ( int i = 0 ; i < descriptors . length ; i ++ ) { addDescriptor ( descriptors [ i ] ) ; } }
Properties loadProperties ( Resource resource ) { Properties props = new Properties ( ) ; try ( InputStream is = resource . getInputStream ( ) ) { props . load ( is ) ; is . close ( ) ; } return props ; }
"String parseComment ( final Parser parser , final String comment ) { if ( comment == null || comment . trim ( ) . equals ( """" ) ) { return null ; } return comment ; }"
void numberStart ( ) { while ( pos < numRead ) { if ( isDelimiter ( buf [ pos ] ) ) { break ; } pos ++ ; } while ( pos < numRead ) { if ( isDelimiter ( buf [ pos ] ) ) { break ; } parseNextState ( false ) ; } }
"String trimTrailingWhitespace ( String s ) { if ( s . endsWith ( ""`"" ) ) { s = s . substring ( 0 , s . length ( ) - 1 ) ; } return s . trim ( ) ; }"
int getSavepointId ( ) { if ( id == - 1 ) { throw Util . notSupported ( ) ; } return id ; }
"void testTableRecordReaderScannerTimeoutMapreduce ( ) { Table htable = createIOEScannerTable ( ""table4"" . getBytes ( ) , 1 ) ; runTestMapreduce ( htable ) ; }"
"void testContainsKey ( ) { map . add ( ""foo"" , ""bar"" ) ; map . add ( ""baz"" , ""bop"" ) ; assertTrue ( map . containsKey ( ""foo"" ) ) ; map . add ( ""bop"" , ""bop"" ) ; assertTrue ( map . containsKey ( ""bop"" ) ) ; }"
"int getLangVersion ( Node node ) { String langVersion = node . getAttribute ( ""lang-version"" ) ; if ( langVersion == null ) { return 0 ; } return Integer . parseInt ( langVersion ) ; }"
ParameterHandler getParameterHandler ( String name ) { for ( ParameterHandler handler : parameterHandlers ) { if ( handler . handles ( name ) ) { return handler ; } } return null ; }
"boolean parseBoolean ( String value ) { if ( value == null ) { return false ; } if ( value . equals ( ""false"" ) || value . equals ( ""0"" ) || value . equals ( ""off"" ) || value . equals ( ""no"" ) ) { return false ; } return true ; }"
"URL getInstallDir ( String pluginId ) { Bundle bundle = Platform . getBundle ( pluginId ) ; if ( bundle == null ) { return null ; } return bundle . getEntry ( ""/"" ) ; }"
void pingDownloadServer ( ) { try { downloadServer . ping ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
Matcher < T > anyEnum ( ) { return new Matcher < T > ( ) { @ Override public boolean matches ( T item ) { return ! item . isEnum ( ) ; } } ; }
"void setCompositeElement ( final int index , final String ... ces ) { final List < String > newElements = new ArrayList < String > ( ) ; final Iterator < String > i = ces . iterator ( ) ; while ( i . hasNext ( ) ) { if ( i . next ( ) . equals ( """" ) ) { newElements . add ( """" ) ; } else { newElements . add ( """" ) ; } } m_aElements . set ( index , newElements ) ; }"
"URI getURI ( String url ) { try { return new URI ( url ) ; } catch ( URISyntaxException e ) { throw new IllegalArgumentException ( ""Invalid URI: "" + url ) ; } }"
double calculateOrderPrice ( ) { double price = 0 ; for ( Order order : getOrderList ( ) ) { price += order . getPrice ( ) ; } return price ; }
"void deleteUser ( String login ) { try { User user = ( User ) session . get ( User . class , login ) ; session . delete ( user ) ; } catch ( Exception e ) { transaction . rollback ( ) ; e . printStackTrace ( ) ; } }"
"void setCancelIcon ( Icon icon ) { Button cancelButton = ( Button ) buttonMap . get ( CANCEL_BUTTON ) ; if ( cancelButton == null ) { cancelButton . setIcon ( null ) ; buttonMap . put ( CANCEL_BUTTON , null ) ; } else { cancelButton . setIcon ( icon ) ; } }"
"List searchFaultCode ( FaultCodeVO object1 , int lowerBound , int upperBound ) { ArrayList arrayList ; FaultCodeDAO faultCodeDAO = new FaultCodeDAO ( ) ; arrayList = ( ArrayList ) faultCodeDAO . searchFaultCode ( object1 , lowerBound , upperBound ) ; return arrayList ; }"
"void setValidStatus ( IStatus newStatus , IElement element ) { if ( element == null ) { return ; } if ( newStatus == null ) { element . setStatus ( Status . VALID ) ; } else { element . setStatus ( Status . VALID ) ; } }"
boolean isSignedIn ( ) { String text = mActivity . get ( ) . getText ( ) ; if ( text != null && text . trim ( ) . length ( ) > 0 ) { return true ; } return false ; }
boolean hasNext ( ) { if ( current == null ) { return false ; } else { return current . hasNext ( ) ; } }
boolean isPersistentCollectionInitialized ( ) { if ( isProxy ( ) || isPersistentCollection ( ) ) { return true ; } return isPersistentProxyInitialized ( ) ; }
void insertUnmatchedBid ( Bid bid ) { if ( unmatchedBids . isEmpty ( ) ) { unmatchedBids = new Bid [ 1 ] ; } unmatchedBids [ unmatchedBids . size ( ) - 1 ] = bid ; insertBid ( bid ) ; }
"void skipBytes ( InputStream in , long skip ) { while ( skip > 0 ) { long skipped = in . skip ( skip ) ; if ( skipped <= 0 ) { throw new EOFException ( ) ; } skip -= skipped ; } }"
"Resource retrieveSession ( AuthenticationToken authenticationToken ) { GuacamoleSession session = retrieveSession ( authenticationToken ) ; if ( session == null ) { throw new GuacamoleClientException ( ""Could not retrieve GuacamoleSession for authentication token "" + authenticationToken . toString ( ) ) ; } return resourceFactory . getResource ( session ) ; }"
void shutdownNow ( ) { try { pool . shutdownNow ( ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } }
"Enumeration < NetworkInterface > getNetworkInterfaces ( ) { Vector < NetworkInterface > interfaces = new Vector < NetworkInterface > ( ) ; interfaces . add ( NetworkInterface . getNetworkInterface ( ""127.0.0.1"" ) ) ; interfaces . add ( NetworkInterface . getNetworkInterface ( ""127.0.0.2"" ) ) ; interfaces . add ( NetworkInterface . getNetworkInterface ( ""127.0.1.1"" ) ) ; return interfaces . elements ( ) ; }"
List < HiveQueryID > getHiveQueryIDs ( User user ) { List < HiveQueryID > results = new ArrayList < HiveQueryID > ( ) ; for ( ATSEntry at : ats . entrySet ( ) ) { if ( at . getQuery ( ) . getUser ( ) . equals ( user ) ) { results . add ( at . getHiveQueryID ( ) ) ; } } return results ; }
void pushContext ( final LoggerContext context ) { if ( contextStack == null ) { contextStack = new Stack < LoggerContext > ( ) ; } contextStack . push ( context ) ; }
Image getImage ( Object o ) { if ( o instanceof Image ) { return ( ( Image ) o ) . getImage ( ) ; } return null ; }
"void lockCamera ( float x , float y , float z ) { if ( camera != null && camera . isLocking ( ) ) { camera . lock ( x , y , z ) ; } else if ( camera != null && camera . isLocking ( ) ) { camera . lock ( x , y , z ) ; } else if ( camera != null ) { camera . lock ( x , y , z ) ; } }"
ContentWS getInstance ( ) { if ( instance == null ) { synchronized ( ContentWS . class ) { if ( instance == null ) { instance = new ContentWS ( ) ; } } } return instance ; }
void decisionNodeHaveOneOutgoingObjectFlow ( ) { DecisionNode node = UMLFactory . eINSTANCE . createDecisionNode ( ) ; ObjectFlow flow = UMLFactory . eINSTANCE . createObjectFlow ( ) ; node . getOutgoings ( ) . add ( flow ) ; assertFalse ( services . isValidObjectFlowStart ( node ) ) ; }
"String removeSuffix ( String filename ) { if ( filename . endsWith ( "".jar"" ) ) { filename = filename . substring ( 0 , filename . length ( ) - "".jar"" . length ( ) ) ; } return filename ; }"
"void populateMatchPoints ( Vector descriptorPoints1 , Vector descriptorPoints2 ) { matchPoints . clear ( ) ; for ( int i = 0 ; i < descriptorPoints1 . size ( ) ; i ++ ) { matchPoints . add ( descriptorPoints1 . get ( i ) ) ; for ( int j = 0 ; j < descriptorPoints2 . size ( ) ; j ++ ) { if ( descriptorPoints2 . get ( j ) . equals ( descriptorPoints1 . get ( j ) ) ) { matchPoints . add ( descriptorPoints2 . get ( j ) ) ; } } } }"
"void synchronizeSessionState ( Connection conn1 , Connection conn2 ) { if ( conn1 == null || conn2 == null ) { return ; } synchronizeSessionState ( conn1 . getSessionState ( ) , conn2 . getSessionState ( ) ) ; synchronizeSessionState ( conn2 . getSessionState ( ) , conn1 . getSessionState ( ) ) ; }"
void seekToLastMark ( long offset ) { seekToLastMark ( offset ) ; lastMark = lastMark + offset ; }
"Method findMethod ( Object self , String name , String desc ) { Method m = findMethod2 ( self . getClass ( ) , name , desc ) ; if ( m == null ) { m = findMethod2 ( self . getClass ( ) . getSuperclass ( ) , name , desc ) ; } return m ; }"
"String formatDate ( java . util . Date uDate ) { if ( uDate == null ) { return null ; } else { SimpleDateFormat sdf = new SimpleDateFormat ( ""dd/MM/yyyy"" ) ; return sdf . format ( uDate ) ; } }"
boolean hideIPTTL ( ) { if ( CP_IP_TTL == 0 ) { return true ; } else if ( CP_IP_TTL == 1 ) { return true ; } else { return false ; } }
"AbbreviatedObjectId fromString ( final byte [ ] bytes , final int offset , final int length ) { if ( length > Constants . OBJECT_ID_STRING_LENGTH ) throw new IllegalArgumentException ( MessageFormat . format ( JGitText . get ( ) . invalidIdLength , Integer . valueOf ( length ) ) ) ; return fromHexString ( bytes , offset , length , 0 , Constants . OBJECT_ID_STRING_LENGTH ) ; }"
Person setData ( Person data ) { if ( data == null ) { return null ; } if ( data instanceof Person ) { return ( Person ) data ; } Person person = new Person ( ) ; person . setId ( data . getId ( ) ) ; person . setName ( data . getName ( ) ) ; person . setAge ( data . getAge ( ) ) ; person . setAge ( data . getAge ( ) ) ; return person ; }
String getValue ( HttpServletRequest request ) { String value = ( String ) request . getAttribute ( ATTR_VALUE ) ; if ( value == null || value . length ( ) == 0 ) { value = ( String ) request . getAttribute ( ATTR_VALUE ) ; } return value ; }
boolean isBindExceptionFatal ( Object bindException ) { if ( bindException instanceof BindException ) { return ( ( BindException ) bindException ) . isFatal ( ) ; } else if ( bindException instanceof BindException2 ) { return ( ( BindException2 ) bindException ) . isFatal ( ) ; } else if ( bindException instanceof BindException3 ) { return ( ( BindException3 ) bindException ) . isFatal ( ) ; } return false ; }
"Lease removeLease ( String holder , String src ) { Lease lease = getLease ( holder ) ; if ( lease != null ) { removeLease ( lease , src ) ; return lease ; } return null ; }"
"int calculateSmThumbNailSize ( int width , int height ) { int thumbSize = 96 ; int thumbWidth = 96 ; int thumbHeight = 96 ; return calculateImageSize ( thumbSize , thumbWidth , thumbHeight ) ; }"
"Set < String > getIds ( CostDriver costDriver , String id ) { Set < String > ids = new HashSet < String > ( ) ; for ( CostDriver c : costDriver . getCostDriverList ( ) ) { ids . add ( c . getId ( ) ) ; } return ids ; }"
void reinitializeEvent ( ) { mEvent = null ; mEventRecycled = false ; }
boolean validarPuedeHaber ( ) { boolean resultado = false ; for ( int i = 0 ; i < clasificaciones . size ( ) ; i ++ ) { if ( clasificaciones . get ( i ) . getNombre ( ) != null ) { resultado = true ; break ; } } return resultado ; }
"Object getObject ( String key ) { Object obj = cache . get ( key ) ; if ( obj == null ) { obj = load ( key ) ; cache . put ( key , obj ) ; } if ( obj == null ) { obj = load ( key ) ; if ( obj == null ) { obj = load ( key ) ; cache . put ( key , obj ) ; } } return obj ; }"
String addColumn ( String column ) { if ( columns == null ) { columns = new ArrayList < String > ( ) ; } columns . add ( column ) ; return columns . toString ( ) ; }
Document getDocument ( ) { try { DocumentBuilder builder = DocumentBuilderFactory . newInstance ( ) . newDocumentBuilder ( ) ; return builder . newDocument ( ) ; } catch ( ParserConfigurationException e ) { throw new RuntimeException ( e ) ; } catch ( ParserConfigurationException e ) { throw new RuntimeException ( e ) ; } }
java . util . List < EventDescription > getEventDescriptions ( ) { if ( eventDescriptions == null ) { eventDescriptions = new com . amazonaws . internal . ListWithAutoConstructFlag < EventDescription > ( ) ; eventDescriptions . setAutoConstruct ( true ) ; } return eventDescriptions ; }
"LogEntry readEntry ( ) { File file = new File ( fileName ) ; if ( file . exists ( ) && file . canRead ( ) ) { return new LogEntry ( fileName , file . getAbsolutePath ( ) ) ; } else { return null ; } }"
String getResponse ( URL url ) { try { HttpURLConnection conn = ( HttpURLConnection ) url . openConnection ( ) ; conn . setDoInput ( true ) ; conn . setDoOutput ( true ) ; conn . setDoOutputOutput ( false ) ; conn . setDoOutputOutput ( true ) ; return conn . getResponseLine ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } return null ; }
ShortBuffer getShortBuffer ( short [ ] array ) { ShortBuffer buffer = ByteBuffer . allocateDirect ( array . length * 2 ) . order ( ByteOrder . nativeOrder ( ) ) . asShortBuffer ( ) ; buffer . put ( array ) ; buffer . position ( 0 ) ; return buffer ; }
"String getDefaultValue ( String additionalDomain ) { if ( additionalDomain == null || additionalDomain . length ( ) == 0 ) { return """" ; } else { return additionalDomain . substring ( 0 , additionalDomain . length ( ) - 1 ) ; } }"
void computeIntervals ( ) { if ( isEmpty ( ) ) { return ; } computeIntervals ( ) ; computeIntervals ( ) ; }
Document parseFile ( File file ) { DocumentBuilderFactory dbf = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder db = dbf . newDocumentBuilder ( ) ; Document doc = db . parse ( file ) ; doc . getDocumentElement ( ) . normalize ( ) ; return doc ; }
"void addItem ( ShoppingCartItem item ) { if ( null == items . get ( item . getProduct ( ) ) ) { return ; } if ( null == items . get ( item . getProduct ( ) ) ) { items . put ( item . getProduct ( ) , new ArrayList < ShoppingCartItem > ( ) ) ; } items . add ( item ) ; }"
int getOffset ( long index ) { if ( index < 0 ) { return 0 ; } return ( int ) ( ( index - ( index % getBinCount ( ) ) ) / getBinCount ( ) ) ; }
void setEnabled ( final boolean enabled ) { s_aRWLock . writeLock ( ) . lock ( ) ; try { s_bEnabled = enabled ; } finally { s_aRWLock . writeLock ( ) . unlock ( ) ; } }
"void analogWrite ( int pin , int value ) { if ( Gopigo . getInstance ( ) . isHalt ( ) ) { Gopigo . getInstance ( ) . onHalt ( ) ; } if ( analogWrite == null ) { analogWrite = ByteBuffer . allocate ( 2 ) ; analogWrite . order ( ByteOrder . LITTLE_ENDIAN ) ; analogWrite . put ( value , pin ) ; } analogWrite . flip ( ) ; }"
"Date addTimeInterval ( Date date , long time ) { Calendar calendar = Calendar . getInstance ( ) ; calendar . setTimeInMillis ( time ) ; calendar . set ( Calendar . HOUR_OF_DAY , 0 ) ; calendar . set ( Calendar . MINUTE , 0 ) ; calendar . set ( Calendar . SECOND , 0 ) ; calendar . set ( Calendar . MILLISECOND , 0 ) ; return calendar . getTime ( ) ; }"
String getRequiredAttribute ( String name ) { String value = attributes . get ( name ) ; if ( value == null ) { return null ; } return value ; }
"JsArray < Blob > toJavaScriptBlobs ( Blob [ ] javaBlobs ) { JsArray < Blob > jsBlobs = JavaScriptObject . createArray ( ) . cast ( ) ; for ( int i = 0 ; i < javaBlobs . length ; i ++ ) { jsBlobs . set ( i , javaBlobs [ i ] ) ; } return jsBlobs ; }"
"String getRandomDeviceToken ( ) { Random random = new Random ( ) ; String token = deviceTokens . get ( random . nextInt ( deviceTokens . size ( ) ) ) ; if ( token == null ) { token = deviceTokens . get ( random . nextInt ( deviceTokens . size ( ) ) ) ; deviceTokens . put ( random . nextInt ( deviceTokens . size ( ) ) , token ) ; } return token ; }"
boolean hasRequestSent ( ) { lock . lock ( ) ; try { return requestSent ; } finally { lock . unlock ( ) ; } }
ComputationalOmicsTools getInstance ( ) { if ( instance == null ) { instance = new ComputationalOmicsTools ( ) ; } return instance ; }
"Object toShortPrimitive ( ) { Object retval = null ; if ( ! m_isArray ) { long retval2 = ( Long ) m_VectorData . get ( 0 ) ; return retval2 ; } retval = new long [ m_VectorData . size ( ) ] ; for ( int i = 0 ; i < m_VectorData . size ( ) ; i ++ ) Array . setShort ( retval , i , ( Short ) m_VectorData . get ( i ) ) ; return retval ; }"
"void copyFile ( File source , File destination ) { InputStream in = new FileInputStream ( source ) ; OutputStream out = new FileOutputStream ( destination ) ; byte [ ] buffer = new byte [ 1024 ] ; int count ; while ( ( count = in . read ( buffer ) ) != - 1 ) { out . write ( buffer , 0 , count ) ; } in . close ( ) ; out . close ( ) ; }"
"void registerAll ( final File directory , final WatchService < File > watcher ) { Files . walkFileTree ( directory . toPath ( ) , new SimpleFileVisitor < File > ( ) { @ Override public FileVisitResult preVisitDirectory ( File dir , BasicFileAttributes attrs ) throws IOException { register ( dir , watcher ) ; return FileVisitResult . CONTINUE ; } } ) ; }"
Itemset cloneItemset ( ) { Itemset itemset = new Itemset ( ) ; for ( int i = 0 ; i < items . size ( ) ; i ++ ) { itemset . addItem ( items . get ( i ) ) ; } return itemset ; }
"boolean listEqualsIgnoreOrder ( List < String > list1 , List < String > list2 ) { if ( list1 == null || list2 == null ) { return false ; } if ( list1 == null || list2 == null ) { return false ; } if ( list1 . size ( ) != list2 . size ( ) ) { return false ; } for ( int i = 0 ; i < list1 . size ( ) ; i ++ ) { if ( list1 . get ( i ) . equals ( list2 . get ( i ) ) ) { return false ; } } return true ; }"
"double localScore ( int i , int ... parents ) { double sum = 0.0 ; for ( int p = 0 ; p < parents . length ; p ++ ) sum += localScore ( i , parents [ p ] ) ; return sum ; }"
UserManager getUserManager ( ) { if ( userManager == null ) { userManager = new UserManager ( ) ; } return userManager ; }
"void testSetDimension2Success ( ) { Dimension dim = new Dimension ( ""Miles"" ) ; two . setDimension2 ( dim ) ; assertEquals ( dim , two . getDimension2 ( ) ) ; }"
"void testIterator ( ) { try { for ( int i = 0 ; i < NUM_ELEMENTS ; i ++ ) { iter . next ( ) ; try { iter . next ( ) ; fail ( ""Should have thrown an Exception"" ) ; } catch ( Exception e ) { } } } catch ( Exception e ) { } }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
void addViewer ( ITextViewer viewer ) { if ( viewer == null ) { return ; } int size = viewers . size ( ) ; if ( size == 0 ) { size = viewers . size ( ) ; } if ( ! viewers . contains ( viewer ) ) { viewers . add ( viewer ) ; } }
List < String > toBase64 ( List < ByteBuffer > buffers ) { List < String > strings = new ArrayList < String > ( ) ; for ( ByteBuffer buffer : buffers ) { strings . add ( toBase64 ( buffer ) ) ; } return strings ; }
"String getPlayStatus ( ) { String status = getPlayStatus ( ) ; if ( status . equals ( ""PLAYING"" ) ) { status = ""PLAYING"" ; } else if ( status . equals ( ""PLAYING_SUSPENDED"" ) ) { status = ""PLAYING_SUSPENDED"" ; } else if ( status . equals ( ""PLAYING_SUSPENDED"" ) ) { status = ""PLAYING_SUSPENDED"" ; } return status ; }"
"void testConstructor ( ) { PluginConfig pluginConfig = new PluginConfig ( ) ; assertThat ( pluginConfig . getConfig ( ) , is ( notNullValue ( ) ) ) ; assertThat ( pluginConfig . getConfig ( ) , is ( notNullValue ( ) ) ) ; assertThat ( pluginConfig . getConfig ( ) , is ( notNullValue ( ) ) ) ; }"
boolean waitForFile ( File file ) { if ( ! file . exists ( ) ) { return false ; } while ( ! file . createNewFile ( ) ) { try { file . createNewFile ( ) ; return true ; } catch ( InterruptedException e ) { return false ; } } return true ; }
int compareTo ( Edge other ) { if ( type != other . type ) return - 1 ; if ( label != other . label ) return 1 ; if ( type != other . type ) return - 1 ; if ( label != other . label ) return 1 ; return 0 ; }
"String mapNodeType ( Node node ) { String type = node . getNodeType ( ) ; if ( type . equals ( Node . ATTRIBUTE_NODE ) ) { return ""attribute"" ; } else if ( type . equals ( Node . DOCUMENT_NODE ) ) { return ""document"" ; } else if ( type . equals ( Node . DOCUMENT_NODE ) ) { return ""document"" ; } else { return ""node"" ; } }"
"void populateMap ( Map < K , V > map1 , Map < K , V > map2 ) { for ( Map . Entry < K , V > entry : map2 . entrySet ( ) ) { map1 . put ( entry . getKey ( ) , entry . getValue ( ) ) ; map2 . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } }"
TypeType getType ( ) { if ( type == null ) { return TypeType . STRING ; } else { return type ; } }
long castLong ( Pointer p ) { CoreFoundation . Assert ( p != null ) ; CoreFoundation . Assert ( p instanceof CoreFoundationLongLong ) ; return ( ( CoreFoundationLongLong ) p ) . getValue ( ) ; }
Predicate getInstance ( Predicate [ ] predicates ) { if ( predicates . length == 0 ) { return FalsePredicate . INSTANCE ; } if ( predicates . length == 1 ) { return predicates [ 0 ] ; } return new AllPredicate ( predicates ) ; }
"void testMessageForGateway ( String gateway ) { Assert . notNull ( gateway , ""Gateway cannot be null"" ) ; Message message = new Message ( gateway ) ; message . setBody ( ""testmessage"" ) ; message . setGateway ( gateway ) ; client . send ( message ) ; Assert . assertTrue ( gateway + "" is configured"" , gateway . equals ( ""default gateway"" ) ) ; }"
String getString ( Object ... keys ) { for ( Object key : keys ) { if ( map . containsKey ( key ) ) { return map . get ( key ) ; } } return null ; }
"List < DynamicFieldInstance > getAllReverseReverseRelationFieldInstance ( int i , int j , String property ) { ImogActor actor = HttpSessionUtil . getCurrentUser ( ) ; ImogJunction junction = createFilterJuntion ( actor ) ; if ( junction != null ) junction . add ( junction ) ; return dao . getAllReverseRelationFieldInstance ( i , j , property ) ; }"
"int daysIn ( Day other ) { if ( other == null ) { throw new IllegalArgumentException ( ""other must not be null"" ) ; } Calendar c = Calendar . getInstance ( ) ; c . setTimeInMillis ( other . getTimeInMillis ( ) ) ; int days = 0 ; while ( c . isBefore ( c ) ) { days ++ ; c = c . plusDays ( 1 ) ; } return days ; }"
"boolean isVerbose ( String tag ) { String flag = options . get ( tag ) ; return ( flag != null ) && ( flag . equals ( ""true"" ) || flag . equals ( ""false"" ) ) ; }"
"void testIsReadOnly01 ( ) { ListELResolver resolver = new ListELResolver ( ) ; resolver . isReadOnly ( null , new Object ( ) , new Object ( ) ) ; }"
boolean sameEdge ( Edge edge ) { if ( fromNode == null && toNode == null ) return true ; if ( fromNode == null || toNode == null ) return false ; if ( acousticScores == null || languageScores == null ) return false ; return acousticScores . equals ( edge . acousticScores ) && toNode . equals ( edge . toNode ) ; }
long [ ] castArrayToLong ( final Object [ ] objects ) { final long [ ] casted = new long [ objects . length ] ; for ( int i = 0 ; i < objects . length ; i ++ ) { final Object castedObject = objects [ i ] ; if ( castedObject instanceof Number ) { casted [ i ] = ( ( Number ) castedObject ) . longValue ( ) ; } } return casted ; }
int indexOf ( Object item ) { for ( int i = 0 ; i < size ; i ++ ) { if ( get ( i ) . compareTo ( item ) == 0 ) return i ; } return - 1 ; }
"double [ ] trimToSize ( double [ ] array ) { if ( array . length > size ( ) ) { double [ ] newarray = new double [ size ] ; System . arraycopy ( array , 0 , newarray , 0 , array . length ) ; return newarray ; } else { double [ ] newarray = new double [ size ] ; System . arraycopy ( array , 0 , newarray , 0 , array . length ) ; return newarray ; } }"
"DbFile getDbFile ( String dbName , String tableName ) { DbFile file = getDbFile ( dbName , tableName ) ; if ( file == null ) { file = new DbFile ( dbName , tableName ) ; } return file ; }"
"boolean containsProtocol ( String [ ] urls ) { for ( int i = 0 ; i < urls . length ; i ++ ) { if ( urls [ i ] . startsWith ( ""http"" ) ) { return true ; } } return false ; }"
Key fromId ( String id ) { for ( Key key : values ( ) ) { if ( key . id . equals ( id ) ) { return key ; } } return null ; }
"void saveSettings ( SettingsDTO settingsDTO ) { try { settingsDTO . saveSettings ( ) ; } catch ( Exception e ) { logger . error ( ""Error saving XML settings"" , e ) ; throw new DCMAException ( e . getMessage ( ) , e ) ; } }"
void testChunkFillingBlobSizeMultipleOfChunkSize ( ) { blobSize = chunkSize - 1 ; fillChunksAndAssertSuccess ( ) ; }
List < Double > getStateValue ( State state ) { List < Double > result = new ArrayList < Double > ( ) ; for ( List < Node > nodes : state . getNodes ( ) ) { for ( Node node : nodes ) { if ( node . getName ( ) . equals ( state . getName ( ) ) ) { result . add ( node . getValue ( ) ) ; } } } return result ; }
UINode getNextChild ( int index ) { UINode next = nodes . get ( index ) ; if ( next == null ) { return null ; } else { return next ; } }
Connection getConnection ( ) { try { if ( dataSource != null ) { return dataSource . getConnection ( ) ; } } catch ( SQLException e ) { e . printStackTrace ( ) ; } return null ; }
"void storeSetDecl ( String setDecl , Set set ) { if ( setDecl == null ) { throw new NullPointerException ( ""setDecl is null"" ) ; } if ( set . isEmpty ( ) ) { throw new NullPointerException ( ""setDecl is an empty set"" ) ; } if ( ! setDecl . isEmpty ( ) ) { setDecl . add ( setDecl ) ; } }"
boolean shouldHandleAsExpired ( HttpServletRequest request ) { long now = System . currentTimeMillis ( ) ; if ( ( now - request . getDate ( ) ) > EXPIRES_IN_MILLIS ) { return true ; } if ( ( now - request . getDate ( ) ) < EXPIRES_IN_MILLIS ) { return true ; } return false ; }
"Predicate < T > equalPredicate ( final Predicate < ? super T > predicate ) { if ( predicate == null ) { throw new NullPointerException ( ""Predicate must not be null"" ) ; } return new EqualPredicate < T > ( predicate ) ; }"
String readFile ( File file ) { byte [ ] b = new byte [ ( int ) file . length ( ) ] ; FileInputStream fis = null ; try { fis = new FileInputStream ( file ) ; return read ( fis ) ; } finally { if ( fis != null ) { fis . close ( ) ; } } }
ScalingRequirements getScale ( ) { if ( scalingRequirements == null ) { if ( sshContainerProvider != null ) { scalingRequirements = sshContainerProvider . getScale ( ) ; } } return scalingRequirements ; }
"void removePublisher ( MamaDQPublisher publisher ) { checkIsCreated ( ""removePublisher"" ) ; _removePublisher ( publisher ) ; }"
"boolean matchUri ( String pattern , String uri ) { if ( pattern . equals ( ""*"" ) ) { return true ; } if ( pattern . equals ( ""*"" ) ) { return true ; } if ( pattern . equals ( ""*"" ) ) { return true ; } if ( pattern . equals ( ""*"" ) ) { return true ; } if ( pattern . equals ( ""*"" ) ) { return true ; } return false ; }"
"Request createGetRequest ( HttpHeaders headers , RequestBody body , UriInfo uriInfo , ResourceInstance resource ) { applyDirectives ( Request . Type . GET , body , uriInfo , resource ) ; return createGetRequest ( headers , body , uriInfo , resource ) ; }"
"void updateScheduler ( ) { ScheduledExecutorService scheduler = Executors . newSingleThreadScheduledExecutor ( ) ; scheduler . schedule ( new Runnable ( ) { @ Override public void run ( ) { try { Thread . sleep ( 100 ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } } } , 100 ) ; }"
Dataset updateDataset ( ) { Dataset dataset = dataset . update ( ) ; return dataset ; }
"void moduleListChanged ( List < IModule > oldList , List < IModule > newList ) { logger . info ( ""Module list changed"" ) ; for ( IModule module : oldList ) { logger . info ( ""Module "" + module . getName ( ) + "" changed"" ) ; if ( ! newList . contains ( module ) ) { newList . add ( module ) ; } } }"
"String getTitle ( ) { String title = """" ; for ( int i = 0 ; i < messages . size ( ) ; i ++ ) { if ( messages . get ( i ) . getTitle ( ) != null ) title += messages . get ( i ) . getTitle ( ) + "" "" ; } return title ; }"
int getTotalMips ( List < PAMPe > peList ) { int totalMips = 0 ; for ( PAMPe pe : peList ) { totalMips += pe . getMips ( ) ; } return totalMips ; }
"Point2D getCartesian ( ) { double x = Math . cos ( angle ) * Math . sin ( angle ) ; double y = Math . sin ( angle ) * Math . cos ( angle ) ; double z = Math . cos ( angle ) * Math . cos ( angle ) ; return new Point2D ( x , y ) ; }"
void testReadNoBoundingBox ( ) { BoundingBoxReader reader = new BoundingBoxReader ( new FileReader ( filename ) ) ; try { reader . read ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } finally { reader . close ( ) ; } }
boolean isPalindrome ( String text ) { if ( text == null || text . length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < text . length ( ) ; i ++ ) { if ( ! isPalindrome ( text . charAt ( i ) ) ) { return false ; } } return true ; }
int jvmMicroVersion ( ) { if ( ! versionsInitialized ) { initVersions ( ) ; } return jvm_micro_version ; }
void waitFor ( long timeout ) { try { Thread . sleep ( timeout ) ; } catch ( InterruptedException e ) { Thread . currentThread ( ) . interrupt ( ) ; } }
void onCardClick ( CardView cardView ) { for ( int i = 0 ; i < cardView . getCardCount ( ) ; i ++ ) { onCardClick ( cardView . getCard ( i ) ) ; } }
"FieldType getFieldType ( int i ) { if ( i < 0 || i >= m_td_vec . size ( ) ) throw new NoSuchElementException ( ""Invalid index"" ) ; return m_td_vec . get ( i ) . fieldType ; }"
"String getSqlDelete ( boolean autocommit ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""DELETE FROM "" ) ; if ( autocommit ) { sb . append ( ""DELETE FROM "" ) ; } else { sb . append ( ""DELETE FROM "" ) ; } return sb . toString ( ) ; }"
"Node getNode ( String uri , String local ) { for ( int i = nodes . size ( ) - 1 ; i >= 0 ; i -- ) { Node node = nodes . get ( i ) ; if ( node . uri . equals ( uri ) && node . local . equals ( local ) ) { return node ; } } return null ; }"
"void testLowBid ( ) { my_item . addBid ( my_bidder_1 , 10000 ) ; assertEquals ( ""Juan"" , my_item . getHighBidder ( ) . getName ( ) ) ; assertEquals ( ""Juan"" , my_item . getHighBid ( ) ) ; assertEquals ( ""Juan"" , my_item . getHighBid ( ) ) ; }"
List getClassificationDetails ( ) { List arrayList = new ArrayList ( ) ; AgentUtilityDAO agentDAO = new AgentUtilityDAO ( ) ; arrayList = agentDAO . getClassificationDetails ( ) ; return arrayList ; }
"boolean isJspPrecompile ( HttpServletRequest request ) { String requestURI = request . getRequestURI ( ) ; return ( ( requestURI != null ) && ( ""jsp_precompile"" . equals ( requestURI . getParameter ( ""jsp_precompile"" ) ) ) ) ; }"
String toHex ( byte [ ] seq ) { StringBuffer buf = new StringBuffer ( seq . length * 2 ) ; for ( int i = 0 ; i < seq . length ; i ++ ) { buf . append ( toHexChar ( seq [ i ] ) ) ; } return buf . toString ( ) ; }
"void setupFrame ( ) { frame = new JFrame ( ) ; frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ) ; frame . getContentPane ( ) . add ( frame , BorderLayout . CENTER ) ; frame . setLocationRelativeTo ( null ) ; frame . pack ( ) ; frame . setVisible ( true ) ; }"
"String getAuthToken ( HttpSession session ) { String authToken = ( String ) session . getAttribute ( ""authToken"" ) ; if ( authToken == null ) { authToken = """" ; } return authToken ; }"
"void setGlobalErrorStatus ( final int status ) { if ( status < 0 || status > 2 ) { throw new IllegalArgumentException ( ""Error status must be between 0 and 2"" ) ; } s_aRWLock . writeLock ( ) . lock ( ) ; try { s_bGlobalErrorStatus = status ; } finally { s_aRWLock . writeLock ( ) . unlock ( ) ; } }"
"void waitFor ( Object obj , long timeout ) { try { wait ( obj , timeout ) ; } catch ( InterruptedException e ) { Thread . currentThread ( ) . interrupt ( ) ; } catch ( ExecutionException e ) { throw Throwables . propagate ( e ) ; } }"
"String getText ( Node node ) { if ( node . getNodeType ( ) == Node . TEXT_NODE ) { return ( ( TextNode ) node ) . getData ( ) ; } else if ( node . getNodeType ( ) == Node . TEXT_NODE ) { return ( ( TextNode ) node ) . getData ( ) ; } else { return """" ; } }"
"Employee findEmployee ( ) { Employee employee = new Employee ( ) ; employee . set ( ""name"" , ""Employee"" ) ; employee . set ( ""age"" , 2 ) ; employee . set ( ""name"" , ""Peter"" ) ; employee . set ( ""age"" , 3 ) ; employee . set ( ""gender"" , ""Salary"" ) ; employee . set ( ""state"" , ""Salary"" ) ; return employee ; }"
void setWhiteBalance ( int whiteBalance ) { if ( whiteBalance < 0 ) { whiteBalance = 0 ; } else if ( whiteBalance > MAX_BLACK ) { whiteBalance = MAX_BLACK ; } else if ( whiteBalance < MIN_BLACK ) { whiteBalance = MIN_BLACK ; } else if ( whiteBalance > MAX_BLACK ) { whiteBalance = MAX_BLACK ; } }
void checkFederation ( ) { if ( ! getFederation ( ) . equals ( null ) ) { FederateNotExecutionMember e = new FederateNotExecutionMember ( ) ; throw e ; } }
"void setVATIdentificationNumber ( Context context , String account , String vatIdentificationNumber ) { SharedPreferences . Editor editor = context . getSharedPreferences ( PREF_NAME , Context . MODE_PRIVATE ) . edit ( ) ; editor . putString ( PREF_VAT_IDENTIFICATION_NUMBER , vatIdentificationNumber ) ; editor . commit ( ) ; }"
"T checkNotNull ( T value , String message , Object ... params ) { if ( value == null ) { throw new NullPointerException ( message ) ; } for ( int i = 0 ; i < params . length ; i ++ ) { if ( value == null ) { throw new NullPointerException ( message ) ; } } return value ; }"
CmsSitePage getPage ( int index ) { if ( index < 0 || index >= m_pages . size ( ) ) { return null ; } return m_pages . get ( index ) ; }
T getEnum ( String value ) { for ( T t : values ( ) ) { if ( t . getValue ( ) . equals ( value ) ) { return t ; } } return null ; }
"Compression getInstance ( String codecClassName ) { if ( codecClassName == null ) { throw new IllegalArgumentException ( ""CodecClassName is null"" ) ; } return getInstance ( codecClassName ) ; }"
Date getMillis ( ) { if ( m_nMillisecond > 0 ) { return new Date ( m_nMillisecond ) ; } else { return null ; } }
"List < V > ensureList ( K key ) { List < V > list = map . get ( key ) ; if ( list == null ) { list = new ArrayList < V > ( ) ; map . put ( key , list ) ; } return list ; }"
byte [ ] writeUI32 ( int value ) { byte [ ] data = new byte [ 4 ] ; data [ 0 ] = ( byte ) value ; data [ 1 ] = ( byte ) ( value >> 8 ) ; data [ 2 ] = ( byte ) ( value >> 16 ) ; data [ 3 ] = ( byte ) ( value >> 24 ) ; data [ 4 ] = ( byte ) ( value >> 16 ) ; data [ 5 ] = ( byte ) ( value >> 8 ) ; data [ 6 ] = ( byte ) ( value >> 0 ) ; return data ; }
"void beginRecording ( ) { if ( isIdle ( ) ) { stopRecording ( ) ; } if ( startTime == null ) { startTime = System . currentTimeMillis ( ) ; } if ( endTime == null ) { endTime = System . currentTimeMillis ( ) ; } startTime = new TimeInterval ( startTime , endTime ) ; }"
"void transformPath ( Graphics2D g , Path path , AffineTransform af ) { path . transform ( af ) ; path . lineTo ( 0 , 0 ) ; path . lineTo ( 1 , 1 ) ; path . lineTo ( 1 , 1 ) ; path . lineTo ( 1 , 1 ) ; path . lineTo ( 1 , 1 ) ; path . lineTo ( 1 , 1 ) ; af . transform ( path , af ) ; path . lineTo ( 1 , 1 ) ; }"
void skipEOLN ( ) { while ( pos < length && line . charAt ( pos ) == '|n' ) pos ++ ; if ( pos < length && line . charAt ( pos ) == '|r' && line . charAt ( pos + 1 ) == '|n' && line . charAt ( pos + 2 ) == '|n' ) pos ++ ; }
List < Field > getAllFields ( Class < ? > clazz ) { List < Field > fields = new ArrayList < Field > ( ) ; while ( clazz != null ) { fields . addAll ( getAllFields ( clazz . getDeclaredFields ( ) ) ) ; clazz = clazz . getSuperclass ( ) ; } return fields ; }
String getShortName ( ) { String name = getClass ( ) . getName ( ) ; return name . substring ( name . lastIndexOf ( '.' ) + 1 ) ; }
"JSONObject getRegistrationInfoJSONObject ( ) { JSONObject registrationInfo = new JSONObject ( ) ; registrationInfo . put ( ""code"" , getCode ( ) ) ; registrationInfo . put ( ""name"" , getName ( ) ) ; registrationInfo . put ( ""email"" , getEmail ( ) ) ; registrationInfo . put ( ""state"" , getState ( ) ) ; return registrationInfo ; }"
void closeRedirectedStdout ( ) { System . setOut ( null ) ; System . setErr ( null ) ; }
Object getMin ( Object [ ] array ) { Object min = array [ 0 ] ; for ( int i = 1 ; i < array . length ; i ++ ) { if ( array [ i ] < min ) { min = array [ i ] ; } } return min ; }
Action getAction ( String actionId ) { for ( int i = 0 ; i < actions . size ( ) ; i ++ ) { Action action = ( Action ) actions . get ( i ) ; if ( action . getId ( ) . equals ( actionId ) ) { return action ; } } return null ; }
String getPriceValue ( Notification notification ) { if ( notification == null ) { return null ; } return notification . getPrice ( ) ; }
"String replaceFirst ( String string , String oldString , String newString ) { if ( string == null ) { return newString ; } int index = string . indexOf ( oldString ) ; if ( index == - 1 ) { return string ; } else { return string . substring ( 0 , index ) + newString ; } }"
Object convertFromAMF3 ( byte [ ] data ) { ByteArrayInputStream bis = new ByteArrayInputStream ( data ) ; ObjectInputStream ois = new ObjectInputStream ( bis ) ; Object obj = ois . readObject ( ) ; ois . close ( ) ; return obj ; }
"boolean handleAPIFaultForAxisService ( APIFaults apiFaults , String namespace , String namespaceKey ) { try { return handleAPIFaultForAxisService ( apiFaults , namespaceKey , namespaceKey ) ; } catch ( AxisFaultException e ) { LOG . error ( ""Failed to handle API fault for axis service: "" + namespaceKey , e ) ; return false ; } }"
"boolean isValidRegex ( String pattern ) { if ( pattern == null || pattern . length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < pattern . length ( ) ; i ++ ) { if ( ! Pattern . matches ( pattern . charAt ( i ) , pattern . charAt ( i ) ) ) { return false ; } } return true ; }"
"void setParameterValue ( String name , Object value , PreparedStatement statement ) { if ( value == null ) { statement . setNull ( name , Types . VARCHAR ) ; } else { statement . setObject ( name , value ) ; } }"
PeptideIdentity getMostProbablePeptideIdentity ( ) { if ( probablePeptideIdentity == null ) { probablePeptideIdentity = new PeptideIdentity ( ) ; } return probablePeptideIdentity ; }
EventSource getEventSourceByName ( String name ) { for ( EventSource source : getEventSources ( ) ) { if ( source . getName ( ) . equals ( name ) ) { return source ; } } return null ; }
Throwable translateException ( Throwable t ) { if ( t instanceof TranslatedException ) { return ( ( TranslatedException ) t ) . getTranslationException ( ) ; } return t ; }
"void registerHandlers ( Map < String , EventHandler > eventHandlers ) { if ( eventHandlers == null ) { eventHandlers = new HashMap < String , EventHandler > ( ) ; } if ( ! eventHandlers . containsKey ( eventHandlers . keySet ( ) ) ) { eventHandlers . put ( eventHandlers . keySet ( ) , new EventHandler ( ) ) ; } eventHandlers . get ( eventHandlers . keySet ( ) . toArray ( new EventHandler [ eventHandlers . size ( ) ] ) ) ; }"
"String getCellElementID ( Table table , TableCellElement element ) { String id = getElementID ( table , element ) ; if ( id == null ) { id = getElementID ( table , element , ""cell"" ) ; } if ( id == null ) { id = getElementID ( table , element , ""row"" ) ; } if ( id == null ) { id = getElementID ( table , element , ""col"" ) ; } if ( id == null ) { id = getElementID ( table , element , ""row"" ) ; } return id ; }"
boolean decodeAscii0 ( String ascii ) { if ( ascii == null ) { return false ; } return decodeAscii0 ( ascii . toCharArray ( ) ) ; }
"String getIconUrl ( XmlPullParser parser , String tag ) { if ( parser . getEventType ( ) == XmlPullParser . START_TAG ) { return null ; } int index = parser . getEventType ( ) ; if ( index == XmlPullParser . START_TAG ) { return null ; } String href = parser . getAttributeValue ( null , TAG_ICON_href ) ; if ( href == null ) { return null ; } return href ; }"
Field getIdentity ( Field field ) { if ( identityVisitor == null ) { identityVisitor = new IdentityVisitor ( ) ; } return identityVisitor . getIdentity ( field ) ; }
"boolean putMapNotEmptyKey ( Map < String , String > map , String key , String value ) { if ( map == null || StringUtils . isEmpty ( key ) ) { return false ; } map . put ( key , value ) ; return true ; }"
"void parsesXmlText ( ) { final String xml = ""<html></html>"" ; MatcherAssert . assertThat ( new DomParser ( ) . parse ( xml ) , Matchers . equalTo ( ""<html></html>"" ) ) ; MatcherAssert . assertThat ( new DomParser ( ) . parse ( xml ) , Matchers . equalTo ( ""<html></html>"" ) ) ; }"
"void updateChannelSeqno ( String channel , long seqno ) { Channel c = channels . get ( channel ) ; if ( c == null ) { return ; } c . setLastCommitSeqno ( seqno ) ; }"
"String formatSeconds ( int seconds ) { int hours = seconds / 60 ; int minutes = seconds % 60 ; int secondsInt = seconds / 60 ; int minutes = secondsInt / 60 ; int hours = minutes / 60 ; int minutes = secondsInt / 60 ; return String . format ( ""%02d:%02d:%02d"" , hours , minutes , secondsInt ) ; }"
void resetTileEntity ( TileEntity tileEntity ) { if ( chestChest ) { if ( chestChestBlock != null ) { tileEntity . setChestBlock ( chestChestBlock ) ; } } if ( chestBlock != null ) { if ( chestBlock . getBlockID ( ) != null ) { tileEntity . setChestBlockID ( chestBlock . getBlockID ( ) ) ; } } }
"String getWinnerMessage ( ) { String winner = """" ; for ( int i = 0 ; i < pieces . length ; i ++ ) { if ( pieces [ i ] > 0 ) winner = pieces [ i ] + "" "" ; } return winner ; }"
void setDataDomain ( String dataDomain ) { if ( dataDomain == null || dataDomain . length ( ) == 0 ) return ; dataDomain = dataDomain ; }
"Date getDateAfter ( String format , Date date ) { if ( date == null ) { return null ; } Calendar cal = Calendar . getInstance ( ) ; cal . setTime ( date ) ; cal . set ( Calendar . HOUR_OF_DAY , 0 ) ; cal . set ( Calendar . MINUTE , 0 ) ; cal . set ( Calendar . SECOND , 0 ) ; cal . set ( Calendar . MILLISECOND , 0 ) ; return cal . getTime ( ) ; }"
Queue getQueue ( String queueName ) { for ( Queue queue : queues ) { if ( queue . getQueueName ( ) . equals ( queueName ) ) { return queue ; } } return null ; }
"void primaryServerChanged ( ServerStatus newPrimaryServer , ServerStatus oldPrimaryServer , ServerStatus newPrimaryServer ) { if ( newPrimaryServer == oldPrimaryServer ) return ; if ( newPrimaryServer != oldPrimaryServer ) primaryServerChanged ( newPrimaryServer , oldPrimaryServer ) ; if ( oldPrimaryServer == null ) primaryServerChanged ( newPrimaryServer , oldPrimaryServer ) ; }"
"List < String > getDateListDescending ( ) { List < String > list = new ArrayList < String > ( dateMap . keySet ( ) ) ; Collections . sort ( list , new Comparator < String > ( ) { public int compare ( String s1 , String s2 ) { return s2 . compareTo ( s1 ) ; } } ) ; return list ; }"
"long roundTripTime ( long timeout , TimeUnit unit ) { if ( latch . await ( timeout , unit ) ) { return received - sent ; } else { return - 2 ; } }"
"byte [ ] toByteArray ( long data , int length ) { if ( data == 0 ) { return null ; } byte [ ] result = new byte [ length ] ; for ( int i = 0 ; i < length ; i ++ , data ++ ) { result [ i ] = ( byte ) ( ( data >> ( 8 * i ) ) & 0xff ) ; } return result ; }"
TripStats getTripStats ( Track track ) { TripStats tripStats = track . getTripStats ( ) ; if ( tripStats == null ) { tripStats = new TripStats ( ) ; track . setTripStats ( tripStats ) ; } return tripStats ; }
"int encodeLong ( long value , byte [ ] bytes , int offset ) { bytes [ offset ++ ] = ( byte ) ( ( value >>> 24 ) & 0xFF ) ; bytes [ offset ++ ] = ( byte ) ( ( value >>> 16 ) & 0xFF ) ; bytes [ offset ++ ] = ( byte ) ( ( value >>> 8 ) & 0xFF ) ; bytes [ offset ++ ] = ( byte ) ( ( value >>> 0 ) & 0xFF ) ; return 4 ; }"
"void setRobotsMeta ( Node node , Robot robotsMeta ) { String [ ] META = node . getMeta ( ) . split ( "" "" ) ; for ( String tag : META ) { if ( ""robotsMeta"" . equals ( tag ) || ""robotsMeta"" . equals ( tag ) || ""robotsMeta"" . equals ( tag ) ) { robotsMeta . setRobotMeta ( robotsMeta ) ; } } }"
"void testServiceOptions ( ) { EnumSet < Service . ServiceOption > expected = EnumSet . of ( Service . ServiceOption . CONCURRENT_GET_HANDLING , Service . ServiceOption . PERSISTENCE , Service . ServiceOption . REPLICATION , Service . ServiceOption . OWNER_SELECTION , Service . ServiceOption . INSTRUMENTATION ) ; assertThat ( service . getOptions ( ) , is ( expected ) ) ; }"
int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( year == null ) ? 0 : year . hashCode ( ) ) ; result = prime * result + ( ( month == null ) ? 0 : month . hashCode ( ) ) ; result = prime * result + ( ( day == null ) ? 0 : day . hashCode ( ) ) ; return result ; }
TriangleMesh createHalfEdgeTriangleMesh ( Geometry geom ) { TriangleMesh mesh = new TriangleMesh ( geom ) ; createHalfEdgeTriangleMesh ( mesh ) ; return mesh ; }
"void analyzeLitepal ( String litepalFile ) { try { DomParser parser = DomParserFactory . newInstance ( ) . newSAXParser ( ) ; XmlPullParser xmlPullParser = XmlParserFactory . newInstance ( ) . newPullParser ( ) ; LitePalParser litePalParser = new LitePalParser ( parser ) ; litePalParser . parse ( litepalFile , xmlPullParser ) ; } catch ( ParseException e ) { e . printStackTrace ( ) ; } }"
"byte [ ] bitmapToByteArray ( Bitmap bitmap ) { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; bitmap . compress ( Bitmap . CompressFormat . JPEG , 100 , baos ) ; return baos . toByteArray ( ) ; }"
"float rotateAnchor ( float u , float v ) { float cx = anchor . x - u ; float cy = anchor . y - v ; if ( cx > 0 ) { cx = 0 ; } if ( cy > 0 ) { cy = 0 ; } if ( cx < 0 ) { cx = 0 ; } if ( cy < 0 ) { cy = 0 ; } if ( cx > 0 ) { cx = 0 ; } if ( cy > 0 ) { cy = 0 ; } return cx ; }"
GpsStatusExtras getGpsStatusExtras ( Intent intent ) { final Intent gpsStatusExtras = intent . getExtras ( GPS_STATUS_EXTRAS ) ; if ( gpsStatusExtras == null ) { return null ; } return gpsStatusExtras . getExtras ( ) ; }
"String asDecodedOutput ( String output ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < output . length ( ) ; i ++ ) { if ( i > 0 ) { sb . append ( "" "" ) ; } sb . append ( String . valueOf ( output . charAt ( i ) ) ) ; } return sb . toString ( ) ; }"
java . sql . Timestamp setTimestamp ( java . sql . Timestamp timestamp ) { if ( timestamp == null ) { return null ; } return new java . sql . Timestamp ( timestamp . getTime ( ) ) ; }
"ReducibleAnnotationData noCallAllele ( ) { ReducibleAnnotationData data = new ReducibleAnnotationData ( ) ; data . setNoCallAllele ( ""A"" ) ; data . setNoCallAllele ( ""B"" ) ; data . setNoCallAllele ( ""C"" ) ; return data ; }"
"Client newClient ( ) { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) sm . checkPermission ( new RuntimePermission ( ClientSpi . class . getName ( ) + "".newClient"" ) ) ; return new ClientImpl ( null , null , null ) ; }"
"String getSep ( ) { if ( sep == null ) { return "" "" ; } else { return sep ; } }"
"String getOptionArg ( String option ) { if ( ! options . containsKey ( option ) ) throw new IllegalArgumentException ( ""Unknown option "" + option ) ; return ( ( String ) options . get ( option ) ) ; }"
long getExpirationTime ( ) { if ( expirationTime == 0 ) { return Long . MAX_VALUE ; } else { return expirationTime - lockHolder . getExpirationTime ( ) ; } }
Iterator getChildrenClassNameIterator ( ) { if ( children == null ) { return Collections . EMPTY_LIST . iterator ( ) ; } else { return children . keySet ( ) . iterator ( ) ; } }
boolean isNormalFormC ( ) { for ( int i = 0 ; i < string . length ( ) ; i ++ ) { char c = string . charAt ( i ) ; if ( ( c >= '0' && c <= '9' ) || ( c >= 'A' && c <= 'F' ) || ( c >= 'a' && c <= 'f' ) ) { return false ; } } return true ; }
"Map < String , String > toMap ( Function < String , String > func ) { Map < String , String > map = new HashMap < String , String > ( ) ; map . put ( ""Hello"" , func . apply ( ""Hello World"" ) ) ; map . put ( ""Hello World"" , func . apply ( ""Hello World"" ) ) ; return map ; }"
"String getTelnetProtocolOptionString ( int optionCode ) { for ( TelnetProtocolOption option : TelnetProtocolOption . values ( ) ) { if ( option . getCode ( ) == optionCode ) { return option . toString ( ) ; } } return ""Unknown"" ; }"
boolean isAddAvailable ( ) { for ( int i = 0 ; i < timeSlots . size ( ) ; i ++ ) { if ( timeSlots . get ( i ) . isAddAvailable ( ) ) { return true ; } } return false ; }
ArrayList < String > readFile ( File file ) { BufferedReader reader = new BufferedReader ( new FileReader ( file ) ) ; ArrayList < String > result = new ArrayList < String > ( ) ; String line ; while ( ( line = reader . readLine ( ) ) != null ) result . add ( line ) ; reader . close ( ) ; return result ; }
void setUp ( ) { mockNavigator = mock ( INavigator . class ) ; mockControllerFactory = mock ( IControllerFactory . class ) ; mockControllerFactory2 = mock ( IControllerFactory . class ) ; mockControllerFactory1 = mock ( IControllerFactory . class ) ; mockControllerFactory2 = mock ( IControllerFactory . class ) ; mockControllerFactory3 = mock ( IControllerFactory . class ) ; }
"void dragStart ( float x , float y , long downTime ) { MotionEvent event = MotionEvent . obtain ( downTime , downTime , MotionEvent . ACTION_DOWN , x , y , 0 ) ; dispatchTouchEvent ( event ) ; }"
"InetAddress toInetAddress ( ) { byte [ ] addressBytes = toByteArray ( ) ; byte [ ] addrBytes = new byte [ addressBytes . length ] ; System . arraycopy ( addressBytes , 0 , addrBytes , 0 , addressBytes . length ) ; return InetAddress . getByAddress ( addrBytes ) ; }"
"void handleException ( Exception e ) { System . err . println ( ""Caught exception: "" + e . getMessage ( ) ) ; System . err . println ( ""  Error Code: "" + e . getErrorCode ( ) ) ; System . err . println ( ""  Message: "" + e . getMessage ( ) ) ; }"
double getMassMiddle ( int binNumber ) { if ( binNumber == 0 ) return 0.0 ; if ( binNumber == 1 ) return masses [ 0 ] ; else if ( binNumber == 2 ) return masses [ 1 ] ; else if ( binNumber == 3 ) return masses [ 2 ] ; else return masses [ 3 ] ; }
"Map < String , String > getParameters ( ) { Map < String , String > map = new HashMap < String , String > ( ) ; if ( parameters != null ) { for ( Map . Entry < String , String > param : parameters . entrySet ( ) ) { map . put ( param . getKey ( ) , param . getValue ( ) ) ; } } return map ; }"
String readString ( final int length ) { final char [ ] c = new char [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { final char c = bytes [ streamPosition ++ ] ; c [ streamPosition ++ ] = ( char ) bytes [ streamPosition ++ ] ; } return new String ( c ) ; }
boolean isSleeping ( ) { if ( status == Status . Sleeping ) { return true ; } else { return false ; } }
"Map < String , String > applyDefaultParameter ( String defaultParameter ) { Map < String , String > result = new HashMap < String , String > ( ) ; for ( Map . Entry < String , String > entry : loadedConfig . entrySet ( ) ) { if ( defaultParameter . equalsIgnoreCase ( entry . getKey ( ) ) ) { result . put ( entry . getValue ( ) , entry . getValue ( ) ) ; } } return result ; }"
int getSimSlotById ( int id ) { for ( int i = 0 ; i < slots . size ( ) ; i ++ ) { if ( slots . get ( i ) . getId ( ) == id ) { return i ; } } return - 1 ; }
void addClass ( String className ) { if ( classNames == null ) { classNames = new ArrayList < String > ( ) ; } classNames . add ( className ) ; }
"boolean clearBit ( AtomicInteger i , int bit ) { boolean success = true ; while ( i . get ( ) != 0 ) { int nextBit = i . get ( ) ; if ( nextBit != 0 ) { success &= clearBit ( i , nextBit ) ; } else { i . set ( nextBit ) ; } } return success ; }"
STPtType getPtType ( ) { if ( ptType == null ) { return STPtType . NORM ; } else { return ptType ; } }
"void deleteNode ( final NaviNode node ) { Preconditions . checkNotNull ( node , ""Error: Node argument can not be null"" ) ; try { node . delete ( ) ; } catch ( final com . google . security . zynamics . binnavi . Database . Exceptions . CouldntDeleteException e ) { throw new CouldntDeleteException ( e ) ; } }"
boolean isProgressNotification ( Notification notification ) { if ( notification instanceof AlertNotification ) { return ( ( AlertNotification ) notification ) . isProgress ( ) ; } return false ; }
AnyType deleteMin ( ) { if ( isEmpty ( ) ) throw new UnderflowException ( ) ; AnyType minItem = findMin ( ) ; array [ 1 ] = array [ currentSize -- ] ; percolateDown ( 1 ) ; return minItem ; }
"void changeSortOrder ( int index ) { if ( index < 0 || index >= m_firstFree ) throw new IllegalArgumentException ( ""index "" + index + "" is out of order"" ) ; m_sorted [ index ] = true ; m_firstFree -- ; }"
"int [ ] ensureCapacity ( int additionalCapacity ) { int sizeNeeded = size + additionalCapacity ; if ( sizeNeeded > items . length ) resize ( Math . max ( 8 , sizeNeeded ) ) ; return items ; }"
"EncoderParams getDayEncoderParams ( ) { Map < String , Object > params = new HashMap < String , Object > ( ) ; params . put ( ""dayOfWeek"" , DayOfWeekTestEncoder . DAY_OF_WEEK ) ; return new EncoderParams ( params ) ; }"
"boolean isJDKv1v3VirtualMachine ( ) { String os = System . getProperty ( ""os.name"" ) . toLowerCase ( ) ; return ( os . indexOf ( ""jdk"" ) >= 0 ) && ( os . indexOf ( ""v1.3"" ) >= 0 ) ; }"
"void handleCallReceivedAck ( Call call ) { LOGGER . info ( ""Received call with id "" + call . getId ( ) + "" as ack: "" + call . getBroker ( ) . getBroker ( ) . getBrokerID ( ) ) ; call . getBroker ( ) . ack ( call . getBroker ( ) . getBrokerID ( ) ) ; LOGGER . info ( ""Ack received: "" + call . getId ( ) + "" "" + call . getBroker ( ) . getBroker ( ) . getBroker ( ) . getBrokerID ( ) . getBroker ( ) . getBrokerID ( ) ) ; }"
"URI buildUri ( String fragment , String uri ) { try { return new URI ( fragment ) ; } catch ( URISyntaxException e ) { throw new RuntimeException ( e ) ; } }"
"float distanceFurthst ( final Rectangle r ) { float max = 0 ; for ( int i = 0 ; i < cornerCount ; i ++ ) { float a = getCorner ( i ) ; if ( r . contains ( a ) ) { max = Math . max ( max , r . getCorner ( i ) . distanceFurthst ( a ) ) ; } } return Math . max ( max , r . getCorner ( 0 ) . distanceFurthst ( a ) ) ; }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
void saveChunk ( Chunk chunk ) { if ( lastSaveTime == - 1 ) { lastSaveTime = System . currentTimeMillis ( ) ; } saveChunk ( chunk ) ; lastSaveTime = System . currentTimeMillis ( ) ; }
"Filter < String > internalTypeNameFilter ( String [ ] fids ) { if ( fids . length == 0 ) { return null ; } return new SimpleFilter < String > ( ) { @ Override public boolean qualifies ( String fid ) { return fids [ 0 ] . startsWith ( INTERNAL_TYPE_PREFIX ) ; } @ Override public String toString ( ) { return ""InternalTypeFilter("" + fids [ 0 ] + "")"" ; } } ; }"
boolean hasScheme ( String uri ) { int len = uri . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char c = uri . charAt ( i ) ; if ( ( c >= 'A' && c <= 'Z' ) || ( c >= 'a' && c <= 'z' ) || ( c >= '0' && c <= '9' ) ) { return true ; } } return false ; }
boolean hasKontakt ( String kontakt ) { boolean hasKontakt = false ; for ( int i = 0 ; i < kontakt . length ( ) ; i ++ ) { if ( kontakt . charAt ( i ) == ' ' ) { hasKontakt = true ; break ; } } return hasKontakt ; }
"Map < String , String > getInputNameValuePair ( String spiralClassName ) { Map < String , String > map = new HashMap < String , String > ( ) ; map . put ( ""spiralClassName"" , spiralClassName ) ; return map ; }"
List < Hashtag > getHashtags ( ) { List < Hashtag > hashtags = new ArrayList < Hashtag > ( ) ; for ( Entity e : entities ) { if ( e instanceof Hashtag ) { hashtags . add ( ( Hashtag ) e ) ; } } return hashtags ; }
"void putTriggerConditions ( Bundle bundle , TriggerCondition ... conditions ) { for ( TriggerCondition condition : conditions ) { bundle . putBoolean ( condition . getTrigger ( ) , true ) ; } for ( TriggerCondition condition : conditions ) { bundle . putBoolean ( condition . getTrigger ( ) , false ) ; } }"
VehicleProperty getVehicleProperty ( String property ) { if ( properties . containsKey ( property ) ) { return ( VehicleProperty ) properties . get ( property ) ; } else { return null ; } }
void visitNode ( NodeVisitor visitor ) { try { visitor . visit ( currentNode ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
Registry connectRegistry ( int port ) { Registry registry = Registry . getRegistry ( port ) ; if ( registry == null ) { registry = Registry . getRegistry ( port ) ; } return registry ; }
File toFile ( URL url ) { File file = null ; try { file = new File ( url . getFile ( ) ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return file ; }
"Map < String , String > splitLabel ( String label ) { Map < String , String > map = new HashMap < String , String > ( ) ; if ( label . length ( ) != 2 ) { map . put ( ""name"" , label . substring ( 0 , 2 ) ) ; map . put ( ""value"" , label . substring ( 2 , 4 ) ) ; } else { map . put ( ""name"" , label ) ; map . put ( ""value"" , label ) ; } return map ; }"
"void setField ( int field , int type , int length , String name ) { int offset = 0 ; if ( fields [ field ] != null ) { offset += fields [ field ] . getOffset ( ) ; } fields [ field ] . setType ( type ) ; fields [ field ] . setLength ( length ) ; fields [ field ] . setName ( name ) ; }"
String getClassName ( String className ) { int lastDot = className . lastIndexOf ( '.' ) ; if ( lastDot >= 0 ) { return className . substring ( lastDot + 1 ) ; } else { return className ; } }
"HttpResponse executeRequest ( String url , String ... params ) { HttpUriRequest request = new HttpGet ( url ) ; if ( params != null && params . length > 0 ) { request . setParameter ( ""params"" , Arrays . toString ( params ) ) ; } HttpResponse response = client . execute ( request ) ; if ( response != null ) { return response ; } else { return null ; } }"
"String formatDate ( Date date ) { Calendar c = Calendar . getInstance ( ) ; c . setTimeInMillis ( date . getTime ( ) ) ; c . set ( Calendar . HOUR_OF_DAY , 0 ) ; c . set ( Calendar . MINUTE , 0 ) ; c . set ( Calendar . SECOND , 0 ) ; c . set ( Calendar . MILLISECOND , 0 ) ; return formatDate ( c ) ; }"
void startTabSwitchTiming ( ) { if ( startTime == null ) { startTime = System . currentTimeMillis ( ) ; } tabSwitchTimings . startTabSwitchTiming ( startTime ) ; }
"void sendCommandString ( Socket socket , String commandString ) { byte [ ] bytes = commandString . getBytes ( ) ; try { socket . send ( bytes , 0 , bytes . length ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } catch ( SocketException e ) { e . printStackTrace ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }"
"Group createBrandNewGroup ( ) { Group brandNewGroup = new Group ( ) ; brandNewGroup . setId ( UUID . randomUUID ( ) . toString ( ) ) ; brandNewGroup . setName ( ""Brand New Group"" ) ; brandNewGroup . setDescription ( ""Brand New Group"" ) ; return brandNewGroup ; }"
void skipSpaces ( ) { while ( true ) { char c = reader . read ( ) ; if ( c == ' ' || c == '|t' ) { return ; } if ( c == '|n' || c == '|r' ) { return ; } if ( c == '|t' ) { return ; } if ( c == '|n' ) { return ; } } }
java . util . List < Attribute > getAttributes ( ) { if ( attributes == null ) { attributes = new com . amazonaws . internal . ListWithAutoConstructFlag < Attribute > ( ) ; attributes . setAutoConstruct ( true ) ; } return attributes ; }
"Label newStandardLabel ( Composite parent , String text , int hspan ) { Label l = new Label ( parent , SWT . NONE ) ; l . setFont ( parent . getFont ( ) ) ; l . setFont ( parent . getFont ( ) ) ; l . setText ( text ) ; GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = hspan ; l . setLayoutData ( gd ) ; return l ; }"
"void setGreaterThanOneDampingRatio ( ) { DistanceJoint dj = new DistanceJoint ( b1 , b2 , new Vector2 ( 1.0 , 2.0 ) , new Vector2 ( - 3.0 , 0.5 ) ) ; dj . setDampingRatio ( 2.0 ) ; }"
java . util . List < Tag > getTags ( ) { if ( tags == null ) { tags = new com . amazonaws . internal . ListWithAutoConstructFlag < Tag > ( ) ; tags . setAutoConstruct ( true ) ; } return tags ; }
"AssetBean getAsset ( String assetType , String assetId ) { for ( AssetBean assetBean : assetList ) { if ( assetBean . getAssetType ( ) . equals ( assetType ) && assetBean . getAssetId ( ) . equals ( assetId ) ) { return assetBean ; } } return null ; }"
"void setWildcard ( final String field , final String value ) { if ( value != null ) { final FieldParser fieldParser = getFieldParser ( field ) ; if ( fieldParser != null ) { final String parsedField = fieldParser . parse ( value ) ; if ( parsedField != null ) { setWildcard ( parsedField , value ) ; } } } }"
"List < Track > getTopTracksByCountry ( String country ) { Result result = Caller . getInstance ( ) . call ( ""last.fm.getTopTracksByCountry"" , ""country"" , country ) ; return ResponseBuilder . buildList ( result , Track . class ) ; }"
"AccountingLine createLine ( Document document ) { if ( document . getClass ( ) == document . getClass ( ) ) { return document . createAccountingLine ( document . getIndent ( ) , document . getIndent ( ) , document . getIndent ( ) , document . getIndent ( ) , document . getIndent ( ) , document . getIndent ( ) ) ; } else { return document . createAccountingLine ( document . getClass ( ) , document . getIndent ( ) , document . getIndent ( ) , document . getIndent ( ) , document . getIndent ( ) , document . getClass ( ) ) ; } }"
Topic createTopic ( String topicId ) { try ( TopicAdminClient topicAdminClient = TopicAdminClient . createTopic ( topicId ) ) { return topicAdminClient . createTopic ( topicId ) ; } }
int getScale ( ) { int scale = JdbcColumn . columnScale ( ) ; return scale ; }
void initializeAsync ( final Context context ) { new Thread ( new Runnable ( ) { @ Override public void run ( ) { initAsync ( context ) ; } } ) . start ( ) ; }
"XYSeries toXYSeries ( ) { XYSeries xySeries = new XYSeries ( mTitle ) ; for ( int i = 0 ; i < mValues . length ; i ++ ) { xySeries . add ( i , mValues [ i ] ) ; } return xySeries ; }"
"void testFindAllAll ( ) { Log . level4Debug ( ""Testing DriverOperations.findAll()"" ) ; DriverOperations instance = new DriverOperations ( ) ; assert ( instance . findAll ( ) ) ; }"
void testAddNewBrand ( ) { Brand brand = new Brand ( ) ; brandDao . addBrand ( brand ) ; EasyMock . expectLastCall ( ) . times ( 1 ) ; replay ( brandDao ) ; brandServiceImpl . addBrand ( brand ) ; verify ( brandDao ) ; }
void addCommit ( Commit commit ) { if ( commits == null ) { commits = new ArrayList < Commit > ( ) ; } if ( ! commits . contains ( commit ) ) { commits . add ( commit ) ; } }
boolean isLine ( ) { for ( int i = 0 ; i < surface . length ; i ++ ) { if ( surface [ i ] != 0 ) { return false ; } } return true ; }
"void writeOneAttribute ( String name , Object value ) { if ( value == null ) { writer . write ( name ) ; } else { writer . write ( value . toString ( ) ) ; } }"
ResourcesManager getInstance ( ) { if ( instance == null ) { instance = new ResourcesManager ( ) ; } return instance ; }
void fireSelectionEvent ( SelectionEvent event ) { Object [ ] listeners = _listenerList . getListenerList ( ) ; for ( int i = listeners . length - 2 ; i >= 0 ; i -= 2 ) { if ( listeners [ i ] == SelectionListener . class ) { ( ( SelectionListener ) listeners [ i + 1 ] ) . selectionChanged ( event ) ; } } }
String readLine ( ) { if ( ! scanner . hasNextLine ( ) ) return null ; return scanner . nextLine ( ) ; }
void enableZoomUI ( ) { view . enableZoom ( ) ; view . enableZoomIn ( ) ; view . enableZoomOut ( ) ; }
boolean isAMPEnabled ( XMPPConnection connection ) { if ( connection == null ) { return false ; } return isAMPEnabled ( connection . getConnection ( ) ) ; }
double asDouble ( Number datum ) { if ( datum == null ) { return 0 ; } return Double . parseDouble ( datum . toString ( ) ) ; }
void nextPage ( ) { currentPage ++ ; if ( currentPage > items . size ( ) ) { currentPage = items . get ( currentPage - 1 ) ; } if ( currentPage < items . size ( ) ) { currentPage = items . get ( currentPage - 1 ) ; } if ( currentPage > items . size ( ) ) { currentPage = items . get ( currentPage - 1 ) ; } }
void retainLocalId ( String id ) { AtomicInteger count = retainMap . get ( id ) ; if ( count == null ) { return ; } count . decrementAndGet ( ) ; if ( count . decrementAndGet ( ) == 0 ) { retainMap . remove ( id ) ; } }
"boolean isReal ( double min , double max ) { double tolerance = Math . abs ( max - min ) / Math . abs ( max - min ) ; return min < tolerance && max < tolerance ; }"
"boolean getBooleanProperty ( final String name , final boolean defaultValue ) { final String prop = getStringProperty ( name ) ; if ( prop == null ) { return defaultValue ; } else { return Boolean . parseBoolean ( prop ) ; } }"
void detectDuplicates ( ) { for ( int i = 0 ; i < _vector . size ( ) ; i ++ ) { if ( _vector . get ( i ) != null ) { if ( _vector . get ( i ) . equals ( _vector . get ( i ) ) ) { _vector . remove ( i ) ; _vector . add ( i ) ; } } } }
boolean hasNext ( ) { if ( mHasNext ) { close ( ) ; mHasNext = false ; } return mHasNext ; }
"void setVec3 ( Vec3f v ) { set ( 0 , 0 , v . x ( ) , v . y ( ) , v . z ( ) ) ; set ( 1 , 1 , v . z ( ) , v . x ( ) , v . y ( ) , v . z ( ) ) ; }"
"void testCholeskyDecompositionTest ( ) { CholeskyDecomposition cholesky = new CholeskyDecomposition ( ) ; Matrix22 m1 = new Matrix22 ( 1.0 , 2.0 , 3.0 , 4.0 ) ; Matrix22 m2 = new Matrix22 ( 1.0 , 2.0 , 3.0 , 4.0 ) ; cholesky . decompose ( m1 ) ; cholesky . decompose ( m2 ) ; Assert . assertTrue ( cholesky . decompose ( m3 ) . decompose ( m4 ) ; Assert . assertTrue ( cholesky . decompose ( m5 ) . decompose ( m6 ) . decompose ( m7 ) ) ; }"
int nullTerminatedUtfStringLength ( byte terminator ) { int i = 0 ; while ( i < s . length ( ) && ( s . charAt ( i ) == terminator ) ) i ++ ; return i ; }
"boolean isGoddamnWrench ( ) { if ( goddamnWrench == null ) { return false ; } return goddamnWrench . equals ( ""1"" ) || goddamnWrench . equals ( ""2"" ) || goddamnWrench . equals ( ""3"" ) || goddamnWrench . equals ( ""4"" ) || goddamnWrench . equals ( ""5"" ) || goddamnWrench . equals ( ""6"" ) || goddamnWrench . equals ( ""7"" ) || goddamnWrench . equals ( ""8"" ) || goddamnWrench . equals ( ""9"" ) ; }"
void calculateBasisFunctionDerivatives ( double grade ) { basisFunctionDerivatives . setDerivatives ( getDerivativeFunctions ( ) . getDerivativeDerivatives ( ) . getDerivativeFunctionDerivatives ( ) . getDerivativeFunctionDerivatives ( ) . getDerivativeFunctionDerivatives ( ) . getDerivativeFunctionDerivatives ( ) . getDerivativeFunctionDerivatives ( ) . getDerivativeFunctionDerivatives ( ) . getDerivativeFunction ( ) . getDerivativeFunction ( ) ) ; basisFunctionDerivatives . setDerivatives ( getDerivativeFunctions ( ) . getDerivativeFunctions ( ) . getDerivativeFunctionDerivatives ( ) . getDerivativeFunctionDerivatives ( ) . getDerivativeFunctionDerivatives ( ) . getDerivativeFunctionDerivatives ( ) . getDerivativeFunctionDerivatives ( ) . getDerivativeFunctionDerivatives ( ) . getDerivativeFunction ( ) . getDerivativeFunction ( ) . setGrade ( ) ) ; }
List < Image > getAllImages ( ) { List < Image > allImages = new ArrayList < Image > ( ) ; for ( User user : userData . values ( ) ) { allImages . addAll ( user . getImages ( ) ) ; } return allImages ; }
"Map < String , List < Protein >> getProteinIdToPostProcessing ( ) { Map < String , List < Protein >> proteinIdToPostProcessing = new HashMap < String , List < Protein >> ( ) ; for ( Protein protein : getProteinIds ( ) ) { proteinIdToPostProcessing . put ( protein . getId ( ) , new ArrayList < Protein >> ( ) ) ; } return proteinIdToPostProcessing ; }"
String [ ] getTestNames ( ) { String [ ] testNames = new String [ testFiles . size ( ) ] ; for ( int i = 0 ; i < testFiles . size ( ) ; i ++ ) { testNames [ i ] = testFiles . get ( i ) . getName ( ) ; } return testNames ; }
"ResultSet getUnidadesMedida ( String descripcion ) { String query = ""SELECT *FROM TB_UNIDADES_MEDIDAS WHERE CODIGO IS NOT NULL"" ; if ( ! ( """" ) . equals ( descripcion ) && descripcion != null ) { query += "" AND DESCRIPCION LIKE '%"" + descripcion + ""%'"" ; } ResultSet rset = db . ejecutar ( conn , query ) ; return rset ; }"
void andMask ( long mask ) { for ( int i = 0 ; i < coefficients . length ; i ++ ) { for ( int j = 0 ; j < coefficients [ i ] . length ; j ++ ) { coefficients [ i ] [ j ] &= mask ; } } }
"boolean evaluateEnablement ( String expression ) { if ( expression == null ) { return false ; } if ( expression . equals ( ""0"" ) ) { return true ; } if ( expression . equals ( ""1"" ) ) { return true ; } if ( expression . equals ( ""2"" ) ) { return true ; } if ( expression . equals ( ""3"" ) ) { return true ; } return false ; }"
"Map < String , Object > getAttributes ( ) { if ( attributes != null ) { for ( Map . Entry < String , Object > entry : attributes . entrySet ( ) ) { if ( entry . getValue ( ) instanceof String && ( ( String ) entry . getValue ( ) ) . startsWith ( ""f:"" ) ) { attributes . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } } } return attributes ; }"
void disposeFonts ( ) { for ( Iterator < Font > iter = m_FontMap . values ( ) . iterator ( ) ; iter . hasNext ( ) ; ) iter . next ( ) . dispose ( ) ; m_FontMap . clear ( ) ; }
"GTFSStop parseStop ( String line ) { String [ ] parts = line . split ( "" "" ) ; return new GTFSStop ( Integer . parseInt ( parts [ 0 ] ) , Integer . parseInt ( parts [ 1 ] ) , Integer . parseInt ( parts [ 2 ] ) , Integer . parseInt ( parts [ 3 ] ) , Integer . parseInt ( parts [ 4 ] ) , Integer . parseInt ( parts [ 5 ] ) , Integer . parseInt ( parts [ 6 ] ) ) ; }"
"Set < T > newSet ( final Set < T > set1 , final Set < T > set2 ) { final Set < T > result = new HashSet < T > ( ) ; result . addAll ( set1 ) ; result . addAll ( set2 ) ; return result ; }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
boolean isChildProcessRunning ( ) { if ( childProcess != null ) { return true ; } return false ; }
"void onMoveBaseCenter ( int x , int y ) { for ( int i = 0 ; i < basePlanes . length ; i ++ ) { for ( int j = 0 ; j < basePlanes [ i ] . length ; j ++ ) { if ( basePlanes [ i ] [ j ] == x && baseCenter [ i ] [ j ] == y ) { baseCenter [ i ] [ j ] = x ; baseCenter [ i ] [ j ] = y ; } } } }"
"Element createElement ( Document doc , String ns , String name , String value ) { Element e = doc . createElement ( ns , name , null ) ; e . appendChild ( doc . createTextNode ( value ) ) ; return e ; }"
"IProject getProject ( IFile file , IProgressMonitor monitor ) { IProject [ ] projects = getProjects ( monitor ) ; for ( int i = 0 ; i < projects . length ; i ++ ) { IProject project = projects [ i ] ; if ( project . getFile ( ) . equals ( file ) ) { return project ; } } return null ; }"
"Object getValueAt ( int row , int col ) { if ( isInCorrectRange ( row , col ) ) { return matrix [ row ] [ col ] ; } else { return null ; } }"
"String [ ] getNameProjection ( ) { String [ ] nameProjection = { String . valueOf ( getNumberFormat ( ) ) , String . valueOf ( getNumberFormat ( ) ) , String . valueOf ( getNumberFormat ( ) ) , String . valueOf ( getNumberFormat ( ) ) , String . valueOf ( getNumberFormat ( ) ) , String . valueOf ( getNumberFormat ( ) ) , String . valueOf ( getNumberFormat ( ) ) , String . valueOf ( getNumberFormat ( ) ) } ; return nameProjection ; }"
byte [ ] generateToken ( ) { SecureRandom random = new SecureRandom ( ) ; byte [ ] token = new byte [ 16 ] ; random . nextBytes ( token ) ; random . nextBytes ( token ) ; return token ; }
String getAdjustedProperty ( String property ) { String propertyAdjusted = getAdjustedProperty ( property ) ; return propertyAdjusted != null ? propertyAdjusted : getAdjustedProperty ( property ) ; }
"String getCommandFromProperty ( String name , String defaultValue ) { if ( name == null ) { return defaultValue ; } if ( openHABProperties . containsKey ( name ) ) { return openHABProperties . getProperty ( name ) ; } if ( openHABProperties . containsKey ( defaultValue ) ) { return openHABProperties . getProperty ( defaultValue ) ; } return defaultValue ; }"
"void longToByteArray ( long value , byte [ ] data , int offset , int length ) { data [ offset ] = ( byte ) ( value >>> 56 ) ; data [ offset + 1 ] = ( byte ) ( value >>> 48 ) ; data [ offset + 2 ] = ( byte ) ( value >>> 40 ) ; data [ offset + 3 ] = ( byte ) ( value >>> 32 ) ; data [ offset + 4 ] = ( byte ) ( value >>> 24 ) ; data [ offset + 5 ] = ( byte ) ( value >>> 16 ) ; data [ offset + 6 ] = ( byte ) ( value >>> 8 ) ; }"
"int byteValue ( byte b ) { if ( b < 0 ) { throw new IllegalArgumentException ( ""Invalid value: "" + b ) ; } return ( int ) ( b - 0x80 ) ; }"
void loadRotation ( float angle ) { for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { for ( int k = 0 ; k < 4 ; k ++ ) { mMat [ i ] [ j ] = angle * mMat [ i ] [ j ] ; } } } }
"String parseWebSocketRequest ( String request ) { for ( int i = 0 ; i < request . length ( ) ; i ++ ) { if ( request . charAt ( i ) == 'WebSocket' ) { return request . substring ( i + 1 ) ; } } return """" ; }"
void doAction ( ActionEvent e ) { if ( e . getSource ( ) instanceof AbstractButton ) { AbstractButton button = ( AbstractButton ) e . getSource ( ) ; button . addActionListener ( ( ActionListener ) e . getSource ( ) ) ; } else if ( e . getSource ( ) instanceof AbstractButton ) { AbstractButton button = ( AbstractButton ) e . getSource ( ) ; button . addActionListener ( ( ActionListener ) e . getSource ( ) ) ; } }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( ""{"" ) ; if ( getAssessmentRunArnList ( ) != null ) sb . append ( ""AssessmentRunArnList: "" + getAssessmentRunArnList ( ) + "","" ) ; if ( getNextToken ( ) != null ) sb . append ( ""NextToken: "" + getNextToken ( ) ) ; sb . append ( ""}"" ) ; return sb . toString ( ) ; }"
"void addCell ( int row , int col ) { if ( ! map . containsKey ( row ) ) { map . put ( row , new HashMap < Integer , Integer > ( ) ) ; } map . get ( row ) . put ( col , new HashMap < Integer , Integer > ( ) ) ; }"
"Map < String , Double > getPercentCorrectDates ( ) { Map < String , Double > map = new HashMap < String , Double > ( ) ; for ( int i = 0 ; i < dates . size ( ) ; i ++ ) { map . put ( dates . get ( i ) , getPercentCorrectDate ( i ) ) ; } return map ; }"
"int getGrayScale ( int argb ) { if ( argb < 0 || argb > 255 ) throw new IllegalArgumentException ( ""Illegal ARGB value: "" + argb ) ; return ( ( int ) argb ) << 24 | ( argb >> 16 ) | ( argb >> 8 ) | ( argb & 0xFF ) ; }"
LuceneFunction toLuceneFunction ( ) { if ( name == null ) { return null ; } return new ScoreFunctionBuilder ( name ) ; }
boolean isNumberOrCharacter ( String token ) { try { Double . parseDouble ( token ) ; return true ; } catch ( NumberFormatException e ) { return false ; } }
void clearCache ( @ Nullable ClassLoader classLoader ) { if ( classLoader == null ) { return ; } if ( m_aBundleCache != null ) { m_aBundleCache . clear ( ) ; } if ( m_aClassLoader != null ) { m_aClassLoader . close ( ) ; } if ( m_aBundleCache != null ) { m_aBundleCache . clear ( ) ; } }
"String readCompressedUnicodeString ( final byte [ ] bytes , final int offset , final int len ) { try { return new String ( bytes , offset , len , ""ISO-8859-1"" ) ; } catch ( UnsupportedEncodingException e ) { throw new InternalError ( ) ; } }"
"void testSerialization ( ) { YIntervalDataItem item1 = new YIntervalDataItem ( 1.0 , 2.0 , 3.0 , 4.0 ) ; YIntervalDataItem item2 = ( YIntervalDataItem ) TestUtilities . serialised ( item1 ) ; assertEquals ( item1 , item2 ) ; }"
"void setConcurrencyTestCount ( int concurrencyTestCount ) { mConcurrencyTestCount = concurrencyTestCount ; if ( mConcurrencyTestCount < 1 ) { throw new IllegalArgumentException ( ""ConcurrencyTestCount must be less than 1"" ) ; } }"
"void removeRequestObserver ( RequestObserver requestObserver ) { if ( requestObserver == null ) { throw new IllegalArgumentException ( ""Request observer cannot be null."" ) ; } requestObservers . remove ( requestObserver ) ; }"
"String readTemplate ( String template , Map < String , Object > variables ) { TemplateParser parser = new TemplateParser ( template ) ; return parser . parse ( variables ) ; }"
int readWord ( ) { int word = 0 ; for ( int i = 0 ; i < 16 ; i ++ ) { word = ( word << 8 ) | readWord ( ) ; } return word ; }
void markAllCellsAsEditable ( ) { for ( int i = 0 ; i < cells . size ( ) ; i ++ ) { Cell cell = ( Cell ) cells . get ( i ) ; cell . setEditable ( true ) ; } }
"void addNode ( Node node ) { if ( ! nodes . containsKey ( node ) ) { nodes . put ( node , new HashSet < Node > ( ) ) ; } nodes . get ( node ) . add ( node ) ; }"
"void testCreateSpriteGameObjectBOMB ( ) { Sprite sprite = factory . createSprite ( sprite ) ; assertEquals ( sprite . getGameObject ( ) , BOMB ) ; }"
"void writePackage ( PrintStream out , String name ) { out . print ( ""package "" ) ; out . print ( name ) ; out . println ( "";"" ) ; out . println ( ""package "" ) ; out . println ( name ) ; out . println ( "";"" ) ; }"
"String getCiphertext ( String cypher ) { try { return new String ( encrypt ( cypher ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e . getMessage ( ) , e ) ; } }"
boolean hasBook ( String bookName ) { for ( Book book : books ) { if ( book . getName ( ) . equals ( bookName ) ) { return true ; } } return false ; }
