byte [ ] readByteCode ( ZipInputStream zip ) { final ByteArrayOutputStream bout = new ByteArrayOutputStream ( ) ; final InputStream in = new BufferedInputStream ( zip ) ; int b ; while ( ( b = in. read ( ) )!= - 1 ) { bout. write ( b ) ; } return bout. toByteArray ( ) ; }
"Set getReferencedBindings ( ComputedColumnHandle target , List allHandleList ) { Set bindings = new HashSet ( ) ; Iterator iter = allHandleList. iterator ( ) ; while ( iter. hasNext ( ) ) { BindingHandle binding = ( BindingHandle ) iter. next ( ) ; bindings. add ( binding ) ; } return bindings ; }"
"void printNodeData ( Node rootNode , String tab ) { if ( rootNode == null ) return ; System. out. print ( tab + rootNode. getData ( ) + "" "" ) ; }"
"String getProduct ( ) { try { return ioOperations. getProduct ( ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return """" ; } }"
void setFunctions ( ParametricCurve curve ) { functions. clear ( ) ; functions. add ( curve. functions ) ; }
ServerHostProperties getInstance ( ) { if ( instance == null ) { instance = new ServerHostProperties ( ) ; } return instance ; }
"void deleteAsync ( FsVolumeImpl volume , File blockFile , File metaFile , ExtendedBlock block , String trashDirectory ) { LOG. info ( ""Scheduling "" + block. getLocalBlock ( ) + "" file "" + blockFile + "" for deletion"" ) ; ReplicaFileDeleteTask deletionTask = new ReplicaFileDeleteTask ( volume, blockFile, metaFile, block, trashDirectory ) ; execute ( volume. getCurrentDir ( ), deletionTask ) ; }"
"String getStrTime ( Calendar c ) { int h = c. get ( Calendar. HOUR_OF_DAY ) ; int m = c. get ( Calendar. MINUTE ) ; int s = c. get ( Calendar. SECOND ) ; return String. format ( ""%02d:%02d:%02d"", h, m, s ) ; }"
_Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case 1 : return COLUMN_FAMILY ; case 2 : return SUPER_COLUMN ; case 3 : return COLUMN ; default : return null ; } }
"Class < ? super T > getRawType ( TypeToken < T > token , Class < ? super T > raw ) { if ( token!= null ) return token. getRawType ( ) ; if ( raw!= null ) return getRawType ( raw ) ; throw new IllegalStateException ( ""Both indicators of type are null"" ) ; }"
"ByteArray readByteArray ( ) { ByteArray bytes = new ByteArray ( ) ; while ( true ) { byte b = readChar ( ) ; if ( b == - 1 ) { return null ; } bytes. write ( b ) ; } bytes. write ( 'N' ) ; if ( bytes. length == - 1 ) { return null ; } bytes. write ( ""NIL"". getBytes ( ) ) ; return bytes ; }"
"Map < String , byte [ ] > lowerCaseMappings ( ) { Map < String, byte [ ] > result = new HashMap < String, byte [ ] > ( ) ; for ( Entry < String, byte [ ] > entry : map. entrySet ( ) ) { byte [ ] value = entry. getValue ( ) ; value = StringUtils. toLowerCase ( value [ 1 ] ) ; result. put ( entry. getKey ( ), value ) ; } return result ; }"
"String toString2D ( float a [ ] [ ] , String format ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < a. length ; i ++ ) { sb. append ( String. format ( DEFAULT_LOCALE, format, a [ i ] ) ) ; } return sb. toString ( ) ; }"
boolean isClientError ( HttpResponse response ) { if ( response == null ) { return false ; } StatusLine status = response. getStatusLine ( ) ; return status == HttpStatus. SC_OK || status == HttpStatus. SC_BAD_REQUEST ; }
void beginSampling ( int capacity ) { startSampling ( capacity ) ; lastSampleTime = System. currentTimeMillis ( ) ; }
String getPortName ( Port p ) { String name = p. getName ( ) ; List < String > innerPorts = p. getInnerPorts ( ) ; if ( innerPorts!= null ) { return innerPorts. get ( 0 ). toString ( ) ; } else { return name ; } }
"void testCleanup ( ) { buildRule. executeTarget ( ""testCleanup"" ) ; AntAssert. assertTrue ( buildRule. getLog ( ). contains ( ""Package: org.apache.tools.ant.util.facade"" ) ) ; AntAssert. assertFalse ( buildRule. getLog ( ). contains ( ""Package: org.apache.tools.ant.util.facade"" ) ) ; }"
void cleanUpErrorTag ( ) { if ( errorTag!= null ) { errorTag. delete ( ) ; errorTag = null ; } }
"List < Card > generateWeaponDeck ( ) { List < Card > deck = new ArrayList < Card > ( ) ; for ( int i = 0 ; i < weapon. size ( ) ; i ++ ) { deck. add ( new Card ( weapon. get ( i ), weapon. getColor ( ) ) ) ; } return deck ; }"
"ConfigurationService getConfigurationService ( ) { if ( configurationService == null ) { configurationService = ServiceUtils. getService ( bundleContext, ConfigurationService. class ) ; } return configurationService ; }"
"String normalizeName ( String name ) { String normalizedName = """" ; for ( int i = 0 ; i < name. length ( ) ; i ++ ) { normalizedName = normalizedName. replaceAll ( ""[^a-z0-9]+"", """" ) ; } return normalizedName ; }"
"void testWriteHierarchicalToOptionalNotExistingPojoPath ( ) { Pojo p = Pojo. make ( ""head"", ""subName"" ) ; Expression expr = PathExpressionChain. parse ( ""sub.(o)sub.name"" ) ; expr. execAssign ( new ExprExecCtxt ( p ), ""newValue"" ) ; }"
"IndicatesAnnotation getBooleanIndicatorIfAny ( AnnotationSummary method , int paramIndex , boolean value ) { for ( AnnotationSummary param : method. getParameterAnnotations ( ) ) { if ( param. value ( ) == value ) { return param ; } } return null ; }"
"void checkErrorMessage ( By by , String message ) { checkElement ( by ) ; Assert. assertTrue ( locateElement ( by ). getText ( ). equalsIgnoreCase ( message ) ) ; }"
T newInstance ( Class < T > clazz ) { try { return clazz. newInstance ( ) ; } catch ( InstantiationException | IllegalAccessException ex ) { throw new RuntimeException ( ex ) ; } }
DefaultLiteralComparator getInstance ( ) { if ( instance == null ) { instance = new DefaultLiteralComparator ( ) ; } return instance ; }
"void testObjectListToStringArray ( ) { final Object [ ] input = new Object [ ] { 1, null } ; final String [ ] output = Util. objectListToStringArray ( input ) ; assertEquals ( 3, output. length ) ; assertEquals ( ""1"", output [ 0 ] ) ; assertNull ( output [ 1 ] ) ; assertEquals ( ""2"", output [ 2 ] ) ; }"
void nonMutableCreatedAt ( ) { Milestone milestone = new Milestone ( ) ; milestone. setCreatedAt ( new Date ( 30000 ) ) ; milestone. setCreatedAt ( new Date ( 40000 ) ) ; assertTrue ( milestone. getCreatedAt ( ). getTime ( )!= 0 ) ; }
int varLengthBytes ( int value ) { int result = 1 ; while ( value!= 0 ) { value >>>= 7 ; result ++ ; } return result ; }
"AbstractClassPathLocation newClasspathLocation ( JARCache cache , String realm , URI location ) { if ( location == null ) { throw new IllegalArgumentException ( ""null location"" ) ; } return new ClassPathLocation ( cache, realm, location ) ; }"
"void removeStudentRole ( String usersFirstName , String usersSurname ) { WebElement firstNameElement = driver. findElement ( By. xpath ( "".//x/select[contains(.,'"" + usersFirstName + "" "" + usersSurname + ""')]"" ) ) ; firstNameElement. click ( ) ; WebElement secondNameElement = driver. findElement ( By. xpath ( "".//x/select[contains(.,'"" + usersSurname + ""')]"" ) ) ; secondNameElement. click ( ) ; }"
"int readPacket ( byte [ ] packet , int offset , int psize ) { int length = 0 ; try { while ( length < psize ) { int len = inStream. read ( packet, offset + length, psize - length ) ; if ( len == - 1 ) { return length ; } length += len ; } return length ; } catch ( Exception e ) { logger. error ( e ) ; } return length ; }"
"long getSCN ( int csid , int sid ) { HsqlIntKeyHashMap scsMap ; Long scn ; scsMap = ( HsqlIntKeyHashMap ) validationMap. get ( sid ) ; if ( scsMap == null ) { return Long. MIN_VALUE ; } scn = ( Long ) scsMap. get ( csid ) ; return ( scn == null )? Long. MIN_VALUE : scn. longValue ( ) ; }"
"void setSettings ( String xmlWalletSetting , String walletPublicKey ) { settings. put ( ""xmlWalletSetting"", xmlWalletSetting ) ; settings. put ( ""walletPublicKey"", walletPublicKey ) ; }"
ArrayList < String > getAllOreNames ( ItemStack stack ) { ArrayList < String > allOreNames = stackNames. get ( new ItemWrapper ( stack ) ) ; return allOreNames == null? stackNames : allOreNames ; }
"void testRemoveIndexSuffix ( ) { String callnum = ""M1522 IFFT 1"" ; String result = removeIndexSuffix ( callnum ) ; assertEquals ( ""M1522"", result ) ; }"
int lengthOfCurrentString ( ) { int len = 0 ; while ( bytes [ streamPosition + len ]!= 0 ) { len ++ ; } return len ; }
"void testFindChildByEnabled ( ) { List < Child > children = new ArrayList < > ( ) ; children. add ( new Child ( ) ) ; children. add ( new Text ( ""child1"" ) ) ; children. add ( new Text ( ""child2"" ) ) ; List < Child > result = childFacade. findChildByEnabled ( ""child3"", true ) ; assertEquals ( 2, result. size ( ) ) ; assertEquals ( ""child4"", result. get ( 0 ). getName ( ) ) ; }"
Iterator getChains ( ) { List l = new ArrayList ( ) ; List chainList = new ArrayList ( ) ; int size = getData ( ). size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { chainList. add ( getData ( ). get ( i ) ) ; } return l. iterator ( ) ; }
List < UnresolvedClass > getUnresolvedClasses ( ) { synchronized ( unresolvedClassList ) { List < UnresolvedClass > list = new ArrayList < UnresolvedClass > ( unresolvedClassList ) ; unresolvedClassList. clear ( ) ; return list ; } }
int convertStrToInt ( String str ) { int output = 0 ; try { output = Integer. parseInt ( str. trim ( ) ) ; } catch ( Exception e ) { output = - 1 ; } return output ; }
long arraySize ( Object [ ] values ) { long count = 0 ; for ( Object value : values ) { count += objectSize ( value ) ; } return count ; }
"void sendMessage ( String username , String message , int lifetimeInMilliseconds , @ Nullable BriefMessengerCallback < Message > messageCallback ) { throwIfNotValid ( username, ""username"" ) ; throwIfNotValid ( message, ""message"" ) ; sendMessage ( username, message, lifetimeInMilliseconds, messageCallback ) ; }"
long getContourW ( ) { if ( contourW == null ) { return 0L ; } else { return contourW ; } }
Ray getFHRoutingStartConstraint ( ) { switch ( getFHSourceAnchorLoc ( ) ) { case CenteredConnectionAnchor. BOTTOM : return ManhattanConnectionRouterEx. DOWN ; default : return ManhattanConnectionRouterEx. RIGHT ; } }
"HTMLNode findInContext ( String name , HTMLNode el ) { while ( el!= null ) { if ( el. getName ( ). equals ( name ) ) return el ; el = el. getParent ( ) ; } return null ; }"
"String stripFileExt ( String fname ) { int idx = fname. lastIndexOf ( ""."" ) ; if ( idx!= - 1 ) { fname = fname. substring ( 0, idx ) ; } return fname ; }"
"boolean isSmsIntentRegistered ( Context context ) { final Intent intent = new Intent ( Intent. ACTION_SENDTO, Uri. fromParts ( Constants. SCHEME_SMSTO, """", null ) ) ; return isIntentRegistered ( context, intent ) ; }"
"Database < Customer > getDb ( ) { if ( null == customerDatabase ) { customerDatabase = new Database < Customer > ( ""customer"" ) ; } return customerDatabase ; }"
String getSessionId ( ) { SessionInfo sessionInfo = reader. getSessionInfo ( ) ; return sessionInfo. getSessionId ( ). getValue ( ) ; }
"boolean connectUserTo ( String transport , String user ) { SessionSession session = sessionMap. get ( transport ) ; if ( session == null ) { session = new SessionSession ( transport, user ) ; sessionMap. put ( transport, session ) ; return true ; } return false ; }"
double getBinnedCumulativeProbability ( double intensity ) { for ( int i = 0 ; i < binnedCumulativeProbs. length ; i ++ ) { if ( intensity <= binnedCumulativeProbs [ i ] ) { return binnedCumulativeProbs [ i ] ; } } return 0.0 ; }
"void indexPage ( String url , Elements paragraphs ) { TermCounter tc = new TermCounter ( url ) ; tc. processElements ( paragraphs ) ; pushtoRedis ( tc ) ; }"
JRadioButton getExecutionButton ( ) { if ( executionButton == null ) { executionButton = new JRadioButton ( ) ; executionButton. setText ( EXECUTION_BUTTON_TEXT ) ; executionButton. setSelected ( true ) ; } return executionButton ; }
RatingModel getRatingFrom ( UserModel user ) { if ( user == null ) { return null ; } List < RatingModel > ratings = ratingRepository. findByUser ( user ) ; if ( ratings!= null && ratings. size ( ) > 0 ) { return ratings. get ( 0 ) ; } return null ; }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"void showToastMessage ( final String message ) { if ( Display. getCurrent ( )!= null ) { Display. getCurrent ( ). syncExec ( new Runnable ( ) { @ Override public void run ( ) { Toast. makeText ( context, message, Toast. LENGTH_LONG ). show ( ) ; } } ) ; } }"
"Quaternion getInverse ( ) { if ( ( 3.0 * m!= 0.0 ) ^ ( 3.0 * m!= 0.0 ) ) { throw new IllegalArgumentException ( ) ; } return new Quaternion ( m, m, 0 ) ; }"
long getBestBidPrice ( ) { long bestBidPrice = 0l ; for ( Item item : items. values ( ) ) { if ( item!= null && item. getPrice ( ) > bestBidPrice ) { bestBidPrice = item. getPrice ( ) ; } } return bestBidPrice ; }
"Session getSession ( ) { Session session = null ; try { session = SessionFactory. getCurrentSession ( ) ; } catch ( HibernateException ex ) { Logger. getLogger ( DataAccess. class. getName ( ) ). log ( Level. SEVERE, null, ex ) ; } catch ( HibernateException ex ) { Logger. getLogger ( DataAccess. class. getName ( ) ). log ( Level. SEVERE, null, ex ) ; } return session ; }"
"void assertNextNode ( IterableProcessEventListener it , String nodeName ) { TrackedEvent event = getEvent ( it ) ; Assertions. assertThat ( event. getMethod ( ) ). isEqualTo ( BEFORE_TRIGGERED_NODE_ACTION ) ; CachedProcessNodeTriggeredEvent orig = event. getEvent ( ) ; Assertions. assertThat ( orig. getNodeName ( ) ). isEqualTo ( nodeName ) ; }"
"Collection < ContentStream > toContentStreams ( final String str , final String contentType ) { List < ContentStream > l = new ArrayList < ContentStream > ( ) ; l. add ( toContentStream ( str, contentType ) ) ; return l ; }"
"int addField ( String fieldName , int rows , int cols , Serializable data ) { if ( data instanceof byte [ ] ) { ( ( byte [ ] ) data ) [ 0 ] = '|0' ; } int fieldIndex = 0 ; for ( int row = 0 ; row < rows ; ++ row ) { String newFieldName = fieldName. replace ('', '_' ) ; addField ( newFieldName, cols, data ) ; fieldIndex ++ ; } return fieldIndex ; }"
"boolean isWindows ( ) { String os = System. getProperty ( ""os.name"" ) ; return ( os!= null ) && os. toLowerCase ( ). startsWith ( ""win"" ) ; }"
void addVertex ( ValueGraphVertex v ) { if ( vertices. add ( v ) ) { if ( v. representsParameter ( ) ) { nParameter ++ ; } if ( representativeV == v ) { representativeV = v ; } } }
DragTree getLocalDragTree ( ) { if ( localDragTree == null ) { DragTreeFactory df = new DragTreeFactory ( ) ; localDragTree = df. getDragTree ( ) ; } return localDragTree ; }
"void addAttribute ( AttributeInfo info ) { if ( attribute == null ) attribute = new LinkedList ( ) ; AttributeInfo. remove ( attribute, info. getName ( ) ) ; attribute. add ( info ) ; }"
int createUser ( int id ) { for ( int i = 0 ; i < users. length ; i ++ ) { if ( users [ i ] == null ) { users [ i ] = new User ( ) ; } users [ i ]. id = id ; return i ; } return - 1 ; }
boolean isSorted ( T data [ ] ) { for ( int i = 1 ; i < data. length ; i ++ ) if ( data [ i ]. compareTo ( data [ i - 1 ] ) > 0 ) return false ; return true ; }
"void testProbability ( ) { double [ ] points = new double [ ] { - 2.0, - 1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 } ; double [ ] results = new double [ ] { 0, 0.2, 0, 0, 0 } ; for ( int i = 0 ; i < points. length ; i ++ ) { Assert. assertEquals ( results [ i ], distribution. getProb ( points [ i ] ), 0.0 ) ; } } }"
"RGB getRGBValue ( int rgbValue ) { if ( rgbValue == 0 ) { return 0xRRGGBB ; } else if ( rgbValue == 1 ) { return 0xGBB ; } else { return new RGB ( ( rgbValue & 0x00FF0000 ) >> 16, ( rgbValue & 0x0000FF00 ) >> 8, ( rgbValue & 0x000000FF ) ) ; } }"
"void testGetEventTypeWithoutType ( ) { List < Quadruple > quadruple = new ArrayList < Quadruple > ( ) ; quadruple. add ( new Quadruple ( GRAPHNAME, OTHER_SUBJECT, RDF. first. asNode ( ), EVENT_TYPE_2 ) ) ; CompoundEvent event = new CompoundEvent ( quadruple ) ; assertEquals ( EVENT_TYPE_DEFAULT. toString ( ), EventCloudHelpers. getEventType ( event ) ) ; }"
int getOther ( int vertexIndex ) { if ( vertexIndex == vertices. length - 1 ) { return - 1 ; } return vertices [ vertexIndex ] ; }
"ByteArrayOutputStream getByteArrayOutputStream ( RemoteInvocation invocation ) { ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; serialize ( invocation, out ) ; return out ; }"
"boolean isAnnotatedBy ( AnnotatedElement annotatedElement , Class < ? extends Annotation > ... annotation ) { if ( ArrayUtils. isEmpty ( annotation ) ) return false ; for ( Class <? extends Annotation > c : annotation ) { if ( annotatedElement. isAnnotationPresent ( c ) ) return true ; } return false ; }"
"boolean needsQuoting ( String str ) { if ( str == null ) { return false ; } byte [ ] bytes = str. getBytes ( Charsets. UTF_8 ) ; return needsQuoting ( bytes, 0, bytes. length ) ; }"
long getTagCountSum ( Collection < Tag > tags ) { long count = 0 ; for ( Tag tag : tags ) { count += tag. getCount ( ) ; } return count ; }
"Object staticFieldBase ( Class clazz , String fieldName ) { try { return clazz. getField ( fieldName ). get ( null ) ; } catch ( NoSuchFieldException e ) { return null ; } catch ( IllegalAccessException e ) { return null ; } }"
"void replayPhase2 ( ) { if ( _theAction!= null ) { _theAction. replayPhase2 ( ) ; } else { throw new IllegalStateException ( ""Replay phase 2 not supported."" ) ; } }"
osid . shared . Properties getPropertiesByType ( osid . shared . Type propertiesType ) { try { return properties. getPropertiesByType ( propertiesType ) ; } catch ( UnknownType e ) { throw new osid. shared. UnknownTypeException ( e. getMessage ( ) ) ; } }
"void initRange ( ) { mMinX = MathHelper. NULL_VALUE ; mMaxX = - MathHelper. NULL_VALUE ; mMinY = MathHelper. NULL_VALUE ; mMaxY = - MathHelper. NULL_VALUE ; int length = getItemCount ( ) ; for ( int k = 0 ; k < length ; k ++ ) { double x = getX ( k ) ; double y = getY ( k ) ; updateRange ( x, y ) ; } }"
"CellNote removeNumber ( int number ) { if ( number < 1 || number > 9 ) throw new IllegalArgumentException ( ""Number must be between 1-9."" ) ; Set < Integer > notedNumbers = new HashSet < Integer > ( getNotedNumbers ( ) ) ; notedNumbers. remove ( number ) ; return new CellNote ( notedNumbers ) ; }"
int getIndex ( DirectedEdge dirEdge ) { sortEdges ( dirEdge ) ; return dirEdge. getIndex ( ) ; }
"String getDeploymentNames ( OperationalString deployment ) { List < String > deploymentNames = new ArrayList < String > ( ) ; if ( deployment. getComponent ( )!= null ) { deploymentNames. addAll ( Arrays. asList ( deployment. getComponent ( ). getDeployments ( ) ) ) ; } return StringUtils. join ( deploymentNames, "","" ) ; }"
"Set < Integer > splitStartSets ( Set < Integer > a , Set < Integer > b ) { Set < Integer > result = new HashSet < Integer > ( ) ; for ( Integer i : a ) { if (! b. contains ( i ) ) result. add ( i ) ; } return result ; }"
boolean isSimpleType ( String typeName ) { SQLTypeInfo sqlTypeInfo = DataTypeManager. getInstance ( ). getSchemaType ( typeName ) ; return sqlTypeInfo!= null && sqlTypeInfo. isSimpleType ( ) ; }
"Map < String , String > generateExtraOptions ( final String connType , int numberOfOptions ) { final Map < String, String > extraOptions = new HashMap < > ( ) ; for ( int i = 0 ; i < numberOfOptions ; i ++ ) { final String key = connType + ""."" + ( i + 1 ) ; extraOptions. put ( key, generateExtraOptions ( connType, numberOfOptions ) ) ; } return extraOptions ; }"
"double getResultContinuous ( double [ ] incoming ) { assert isContinuous ( incoming. length ) ; return getResult ( incoming, 0, incoming. length ) ; }"
"void existProperty ( ) { PropertyIsEqualTo eq = assertFilter ( ""aProperty EXISTS"", PropertyIsEqualTo. class ) ; Expression expr = eq. getExpression1 ( ) ; Assert. assertTrue ( expr instanceof PropertyExistsFunction ) ; }"
int maxIndex ( float [ ] xs ) { int am = 0 ; float m = xs [ 0 ] ; for ( int i = 1 ; i < xs. length ; ++ i ) { float v = xs [ i ] ; if ( v > m ) { m = v ; am = i ; } } return am ; }
"double [ ] getLoessParameterEstimates ( final double [ ] y ) { assert ( y!= null ) ; final double [ ] z = new double [ y. length ] ; System. arraycopy ( y, 0, z, 0, y. length ) ; return z ; }"
"void loadDefaults ( ) { s_aRWLock. writeLock ( ). lock ( ) ; try { s_aItems = new Hashtable < String, StoreItem > ( ) ; s_aItems. put ( StoreItem. KEY, new StoreItem ( ) ) ; s_aItems. put ( StoreItem. KEY, new StoreItem ( ) ) ; s_aRWLock. writeLock ( ). unlock ( ) ; } finally { s_aRWLock. writeLock ( ). unlock ( ) ; } }"
"void setSuggestionsForCategory ( @ CategoryInt int category , List < SnippetArticle > suggestions ) { if ( mCategorySuggestions. get ( category ) == null ) { mCategorySuggestions. put ( category, new ArrayList < SnippetArticle > ( ) ) ; } else { mCategorySuggestions. get ( category ). clear ( ) ; } }"
"Vec2 getScreenToWorld ( float screenX , float screenY ) { Vec2 screen = new Vec2 ( screenX, screenY ) ; viewportTransform. getScreenToWorld ( screen, screen ) ; return screen ; }"
"void logReadTaskException ( final Logger logger , final Task < Revision > task , final Exception e ) { if ( task!= null ) { logger. logError ( Level. WARNING, ""Error while reading a task: "" + task. toString ( ), e ) ; } else { logger. logError ( Level. WARNING, ""Error while reading a task: "" + e ) ; } }"
NetworkInterface getByName ( String name ) { if ( name == null ) return null ; VMNetworkInterface [ ] netifs = VMNetworkInterface. getVMInterfaces ( ) ; for ( int i = 0 ; i < netifs. length ; i ++ ) { if ( netifs [ i ]. name. equals ( name ) ) return new NetworkInterface ( netifs [ i ] ) ; } return null ; }
"String applyJson ( byte [ ] json ) { Object dto = KubernetesHelper. loadJson ( json ) ; apply ( dto, ""REST call"" ) ; return """" ; }"
"void prepareSocket ( Socket sock , HttpContext context , HttpParams params ) { sock. setTcpNoDelay ( HttpConnectionParams. getTcpNoDelay ( params ) ) ; sock. setSoTimeout ( HttpConnectionParams. getSoTimeout ( params ) ) ; int linger = HttpConnectionParams. getLinger ( params ) ; if ( linger >= 0 ) { sock. setSoLinger ( linger > 0, linger ) ; } }"
List < Parameter > getDefaultTransportParams ( ) { if ( defaultTransportParams == null ) { defaultTransportParams = new ArrayList < Parameter > ( ) ; } return defaultTransportParams ; }
"String formatLocalDateFromLong ( String dateFormat , long localTime ) { SimpleDateFormat sdf = new SimpleDateFormat ( dateFormat ) ; sdf. setCalendar ( Calendar. getInstance ( ) ) ; sdf. setTime ( localTime ) ; return sdf. format ( sdf. getTime ( ) ) ; }"
String returnTax ( ) { StringBuilder rval = new StringBuilder ( ) ; while ( tax. doubleValue ( ) * 100 ) { rval. append ( tax. doubleValue ( ) ) ; } return rval. toString ( ) ; }
void finishTemporarilyDisableReadonlyCheckSession ( ) { Set < String > variables = futureReadOnlyVariables. pop ( ) ; readOnlyVariables. addAll ( variables ) ; if (! futureReadOnlyVariables. isEmpty ( ) ) { futureReadOnlyVariables. peek ( ). addAll ( variables ) ; } }
void setState ( int state ) { if ( state < MIN_STATE ) { state = MIN_STATE ; } if ( state > MAX_STATE ) { state = MAX_STATE ; } mState = state ; }
"byte [ ] getIV ( ) { if ( iv == null ) { return null ; } byte [ ] result = new byte [ iv. length ] ; System. arraycopy ( iv, 0, result, 0, iv. length ) ; return result ; }"
String unapplyWinAnsiEncoding ( byte [ ] replace_bytes ) { WinAnsiEncoding out = new WinAnsiEncoding ( ) ; out. replaceBytes ( replace_bytes ) ; return out. toString ( ) ; }
Task . TaskKey getPrevTaskInGroup ( Task t ) { int i = indexOf ( t ) ; if ( ( i > - 1 ) && ( i + 1 ) < getTaskCount ( ) ) { return mTaskKeys. get ( i + 1 ) ; } return null ; }
"String reverseRecursive ( String input ) { validateInput ( input ) ; return reverseRecursiveInner ( input, 1 ) ; }"
"String toString ( ) { StringBuffer buf = new StringBuffer ( ) ; buf. append ( m_status ). append ( "" ("" ). append ( m_timestamp ). append ( "", "" ). append ( m_clientId ). append ( "", "" ). append ( m_action ). append ( "">"" ) ; if ( m_reason!= null ) { buf. append ( m_reason ). append ( "" ("" ). append ( m_reason ). append ( "")"" ) ; } return buf. toString ( ) ; }"
"Integer getExportBackups ( ) { try { return new Integer ( System. getProperty ( ""export.backups"" ) ) ; } catch ( Exception e ) { return null ; } }"
"boolean elementAvailable ( String ns , String elemName ) { boolean isAvailable = false ; if ( ( ns!= null ) && ( ns. length ( ) > 0 ) ) { ExtensionHandler extNS = ( ExtensionHandler ) m_extensionNamespaces. get ( ns ) ; if ( extNS!= null ) isAvailable = extNS. elementAvailable ( elemName ) ; } return isAvailable ; }"
"GVRAssimpImporter readFileFromSDCard ( GVRContext gvrContext , String filename ) { File file = new File ( filename ) ; try { return readFileFromSDCard ( gvrContext, file ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; return null ; } }"
"Pair < String , EnumSet < ProfilerTask >> typeFilter ( String description , ProfilerTask ... tasks ) { EnumSet < ProfilerTask > filter = EnumSet. noneOf ( ProfilerTask. class ) ; for ( ProfilerTask task : tasks ) { if ( task. getStatus ( )!= ProfilerTask. ACTION_LOCK ) { filter. add ( task ) ; } } return Pair. of ( description, filter ) ; }"
void addMany ( int ... elements ) { Node new_node = new Node ( elements ) ; while ( new_node. next!= null ) { new_node = new_node. next ; } numElements ++ ; }
"String getRandomString ( Random rnd , int minLength , int maxLength ) { int len = rnd. nextInt ( maxLength - minLength + 1 ) + minLength ; char [ ] data = new char [ len ] ; for ( int i = 0 ; i < data. length ; i ++ ) { data [ i ] = ( char ) ( rnd. nextInt ( maxLength - minLength + 1 ) + minLength ) ; } return new String ( data ) ; }"
void loadIdentity ( ) { loadIdentity ( ) ; mMat [ 0 ] = 0 ; mMat [ 1 ] = 0 ; mMat [ 2 ] = 0 ; mMat [ 3 ] = 0 ; mMat [ 4 ] = 0 ; mMat [ 5 ] = 0 ; mMat [ 6 ] = 0 ; mMat [ 7 ] = 0 ; mMat [ 8 ] = 0 ; mMat [ 9 ] = 0 ; mMat [ 10 ] = 0 ; mMat [ 11 ] = 0 ; mMat [ 12 ] = 0 ; mMat [ 13 ] = 0 ; }
"BigInteger getDepth ( ) { if ( depth == null ) { return new BigInteger ( ""0"" ) ; } else { return depth ; } }"
void ensureName ( String local_name ) { _name = local_name ; if ( _name == null ) { _name = local_name ; } }
"PlayerResultsScoreComparator getAscendingTournamentInstance ( ) { if ( ascTourneyInstance == null ) ascTourneyInstance = new PlayerResultsScoreComparator ( true, false ) ; return ascTourneyInstance ; }"
"String getRDBShowInTheColumn ( ) { String result = """" ; for ( int i = 0 ; i < RDB_SIZE ; i ++ ) { char c = ( char ) RDB_TABLE [ i ] ; result = result + c ; } return result ; }"
boolean restoreSession ( String hash ) { if ( hash == null ) { return false ; } IPentahoSession sess = getSession ( ) ; if ( sess == null ) { return false ; } return sess. restoreSession ( hash ) ; }
"HazelcastInstance getHazelcastInstance ( final SessionFactory sessionFactory ) { if (! ( sessionFactory instanceof SessionFactoryImplementor ) ) { LOGGER. warning ( ""SessionFactory is expected to be instance of SessionFactoryImplementor."" ) ; return null ; } return getHazelcastInstance ( ( SessionFactoryImplementor ) sessionFactory ) ; }"
Query namedQuery ( Query query ) { QueryFull copy = new QueryFull ( query ) ; copy. setTypeName ( getSchema ( ). getTypeName ( ) ) ; return copy ; }
"Bead getBead ( String pos , int numBead ) { int idx = pos. indexOf ( '-' ) ; Bead bead = null ; for ( int i = 0 ; i < numBead ; i ++ ) { bead = ( Bead ) beadMap. get ( idx ) ; if ( bead. getBead ( ). getPos ( ). equals ( pos ) ) { return bead ; } } return null ; }"
"Element toXML ( ) { Element jdom = new Element ( ""jdom"" ) ; jdom. setAttribute ( ""xmlns:xsi"", ""http://www.w3.org/2001/XMLSchema-instance/"" ) ; jdom. setAttribute ( ""version"", VERSION ) ; jdom. setAttribute ( ""xmlns:xsi"", ""http://www.w3.org/2001/XMLSchema-instance/"" ) ; toXML ( jdom ) ; return jdom ; }"
"void setStatus ( IContext context , system . proxies . EventStatus status ) { if ( status == null ) getMendixObject ( ). setValue ( context, MemberNames. STATUS. toString ( ), null ) ; else getMendixObject ( ). setValue ( context, MemberNames. STATUS. toString ( ), status. getMendixObject ( ). getId ( ) ) ; }"
"boolean checkColumn ( int [ ] [ ] grid , int whichCol ) { final int size = grid. length ; boolean [ ] found = new boolean [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { int row = grid [ whichCol ] [ i ] - 1 ; if (! found [ row ] ) { found [ row ] = true ; } else { return false ; } } return true ; }"
"void addExistingItem ( ResultItem item ) { if ( item == null ) { throw new IllegalArgumentException ( ""item is null"" ) ; } if (! items. contains ( item ) ) { items. add ( item ) ; } }"
"Command prepareSelect ( String args ) { Optional < Integer > index = parseIndex ( args ) ; if (! index. isPresent ( ) ) { return new IncorrectCommand ( String. format ( MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand. MESSAGE_USAGE ) ) ; } return new SelectCommand ( index. get ( ) ) ; }"
"boolean isLower ( String version1 , String version2 , boolean inclusive ) { int result = staticVersionComparator. compare ( version1, version2 ) ; return result >= ( inclusive? 0 : 1 ) ; }"
"void drawRgb ( int textureId , float [ ] texMatrix , int frameWidth , int frameHeight , int viewportX , int viewportY , int viewportWidth , int viewportHeight ) { prepareShader ( RGB_FRAGMENT_SHADER_STRING ) ; nativeDrawRgb ( textureId, texMatrix, frameWidth, frameHeight, viewportX, viewportY, viewportWidth, viewportHeight ) ; }"
"void setTaskName ( final String name ) { if ( name!= null ) { data. put ( TASK_LABEL_KEY, name ) ; } else { data. remove ( TASK_LABEL_KEY ) ; } }"
Color pickAColor ( ) { Color color = null ; for ( int i = 0 ; i < colors. length ; i ++ ) { if ( colors [ i ]!= null ) { color = colors [ i ] ; break ; } } return color ; }
InetAddress asInetAddress ( String key ) { String value = delegate. getProperty ( key ) ; return value == null? null : InetAddress. getByName ( value ) ; }
float readFloat ( int nBytes ) { int endValue = 0 ; int tmp = 0 ; for ( int i = 0 ; i < nBytes ; i ++ ) { tmp = b. get ( ) & 0xFF ; endValue |= ( tmp << i * 8 ) ; } return endValue ; }
"byte [ ] getIcon ( ) { byte [ ] icon = new byte [ 0 ] ; try { icon = ImageIO. read ( new File ( BASE_DIR + ""icon.png"" ) ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } return icon ; }"
int readUnsignedShort ( ) { int b1 = _dstream. readUnsignedByte ( ) ; int b2 = _dstream. readUnsignedByte ( ) ; crc. update ( ( b1 << 8 ) + b2 ) ; return b1 ; }
AnnexLibrary getActualAnnexLibrary ( AnnexLibrary annexObj ) { if ( annexObj!= null ) { return annexObj ; } return annexObj ; }
void finishRecord ( ) { if ( currentMap!= null ) { for ( Map. Entry entry : currentMap. entrySet ( ) ) { if ( entry. getValue ( )!= null ) { currentMap. remove ( entry. getKey ( ) ) ; } } currentMap = null ; } }
void appendLong ( final BigInteger number ) { for ( int i = 3 ; i >= 0 ; -- i ) { byteData. add ( Byte. valueOf ( ( byte ) ( number. longValue ( ) ) ) ) ; } }
String getHttpExcludedHosts ( ) { ProxyPreference preference = getProxyDao ( ). get ( ProxyKey. HTTP_EXCLUDE ) ; return preference!= null? preference. getValue ( ) : StringUtils. EMPTY ; }
"AttributeType findAttribute ( AttributeSetType ast , int attributeID ) { AttributeType attr = findAttribute ( ast, attributeID ) ; if ( attr == null ) attr = findAttribute ( ast, attributeID ) ; return attr ; }"
HoodieFileFormat getROFileFormat ( ) { if ( roFileFormat == null ) { roFileFormat = DEFAULT_RO_FILE_FORMAT ; } return roFileFormat ; }
"ImageView bindCommitter ( final RepositoryCommit commit , final AvatarLoader avatars , final ImageView view ) { User committer = commit. getCommitter ( ) ; if ( committer!= null ) { avatars. bind ( view, committer ) ; } return view ; }"
"boolean isMultipart ( ) { for ( Parameter p : getParameters ( ) ) { if ( p. getValue ( ). equalsIgnoreCase ( ""boundary"" ) ) { return true ; } } return false ; }"
void writeExternal ( ObjectOutput out ) { out. writeInt ( classVersion ) ; out. writeInt ( protocolVersion ) ; out. writeInt ( revisionID ) ; out. writeObject ( className ) ; out. writeObject ( accessTime ) ; out. writeObject ( modificationTime ) ; out. writeByte ( flags ) ; }
"String getFastaServiceURL ( String dbCode , String id ) { String prefix = ""jdbc:fasta:rmi://"" ; if ( dbCode!= null &&! """". equals ( dbCode ) && id!= null &&! """". equals ( id ) ) { prefix = ""jdbc:fasta:rmi://"" ; } return prefix + dbCode + ""/"" + id ; }"
Order addOrder ( String cashierName ) { Order order = new Order ( cashierName ) ; order. setCashierName ( cashierName ) ; _allOrders. add ( order ) ; notifyCashierWaitingForOrder ( order ) ; return order ; }
"void toFile ( String contents , File file ) { try { BufferedWriter outWriter = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( file ), ""utf-8"" ) ) ; outWriter. write ( contents ) ; outWriter. close ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }"
"void writeBytes ( byte [ ] b ) { if ( Trace. isTraceOn ( ) ) Trace. log ( Trace. PROXY, Thread. currentThread ( ). getName ( ) + "" out < "" + b. length ) ; out_. write ( b ) ; }"
Gen < T > oneOf ( Gen < T > ... generators ) { int random = ( int ) ( Math. random ( ) * generators. length ) ; List < Gen < T >> choices = new ArrayList < > ( ) ; for ( Gen < T > gen : generators ) { choices. add ( gen. random ( ) ) ; } return choices. isEmpty ( )? null : choices. get ( 0 ) ; }
"int readInt ( int memPtr , int bitOffset , int mask ) { int value = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { value |= ( bytes [ memPtr + bitOffset + i ] & ( ~ mask ) ) << ( i * 8 ) ; } return value ; }"
boolean removeOption ( T option ) { boolean result = options. remove ( option ) ; return result ; }
String getAlgorithm ( ) { SecureRandom sr = getSecureRandom ( ) ; if ( sr == null ) { return null ; } return sr. getAlgorithm ( ) ; }
"Point2D curveMidPoint ( ) { double x = pts [ 0 ]. getMinX ( ) + pts [ 0 ]. getMaxX ( ) / 2 ; double y = pts [ 1 ]. getMinY ( ) + pts [ 1 ]. getMaxY ( ) / 2 ; return new Point2D ( x, y ) ; }"
"void invokeInsn ( final int opcode , final Type type , final MethodDescriptor method ) { if ( method. isInvoke ( ) ) { code = Opcodes. INVOKESPECIAL ; invokeInsn ( opcode, type, method ) ; } else { code = Opcodes. INVOKESPECIAL ; invokeInsn ( opcode, type, method ) ; } }"
"void sendInfo ( GameInfo info ) { if ( game == null && info!= null ) { throw new IllegalArgumentException ( ""null info"" ) ; } synchronized ( game ) { game. sendInfo ( info ) ; } }"
boolean canIssue ( ) { try { return key!= null && key. canIssue ( ) ; } catch ( KeyStoreException e ) { return false ; } }
"boolean addCookie ( final Cookie cookie , final HttpServletResponse response ) { if ( cookie == null ) { return false ; } response. addCookie ( cookie ) ; return true ; }"
Array < ControllerListener > getListeners ( ) { if ( listeners == null ) { listeners = new Array < ControllerListener > ( ) ; } return listeners ; }
"void setWidgetIDForUpdate ( String key , ArrayList < Integer > value ) { if ( key!= null ) { SharedPreferences. Editor editor = sharedPreferences. edit ( ) ; editor. putString ( key, value ) ; editor. commit ( ) ; } }"
"Map < String , Path > generateSnapshotToRestoreDirMapping ( Collection < String > snapshots , Path baseRestoreDir ) { Map < String, Path > snapshotToRestoreDirMap = new HashMap < > ( ) ; for ( String snapshot : snapshots ) { snapshotToRestoreDirMap. put ( snapshot, baseRestoreDir. resolve ( snapshot ) ) ; } return snapshotToRestoreDirMap ; }"
"boolean getUnseenMessages ( String subject ) { Set < String > unseen = unseenMessages. get ( subject ) ; if ( unseen == null ) { unseen = new HashSet < > ( ) ; unseenMessages. put ( subject, unseen ) ; } return unseen. isEmpty ( ) ; }"
"String parseStopId ( JsonNode place ) { String stopValue = place. get ( ""stop_id"" ). asText ( ) ; return stopValue ; }"
"Hashtable toHashtable ( ) { Hashtable < String, Object > table = new Hashtable < String, Object > ( ) ; for ( int i = 0 ; i < values. length ; i ++ ) { table. put ( values [ i ], values [ i ] ) ; } return table ; }"
Uri getDirectoryPathname ( ) { Bundle data = mMessage. getData ( ) ; return data. getParcelable ( DIRECTORY_PATHNAME ) ; }
void resetSerialNumbers ( ) { if ( ( serialNumbers!= null ) && ( serialNumbers. length!= 0 ) ) { serialNumbers = new int [ serialNumbers. length ] ; for ( int i = 0 ; i < serialNumbers. length ; i ++ ) { serialNumbers [ i ] = 0 ; } } }
"char [ ] encodeHex ( byte [ ] data ) { int l = data. length ; char [ ] out = new char [ l << 1 ] ; for ( int i = 0, j = 0 ; i < l ; i ++ ) { out [ j ++ ] = DIGITS_LOWER [ ( 0xF0 & data [ i ] ) >>> 4 ] ; out [ j ++ ] = DIGITS_LOWER [ 0x0F & data [ i ] ] ; } return out ; }"
List < I > createList ( K key ) { I item = map. get ( key ) ; if ( item!= null ) { return Collections. singletonList ( item ) ; } return Collections. emptyList ( ) ; }
"Double getRatio ( String reporterIonName , NormalizationFactors normalizationFactors ) { if ( normalizationFactors!= null ) { for ( Map. Entry < String, NormalizationFactors > entry : normalizationFactors. entrySet ( ) ) { if ( entry. getKey ( ). equals ( reporterIonName ) ) { return entry. getValue ( ) ; } } } return null ; }"
"boolean containsInt ( int [ ] array , int theInt ) { for ( int i = 0 ; i < array. length ; i ++ ) { if ( array [ i ] == theInt ) { return true ; } } return false ; }"
String toString ( ) { StringBuilder r = new StringBuilder ( ) ; for ( LogEntry e : entries ) { r. append ( e. getLogLine ( ) ) ; r. append ( '|n' ) ; } return r. toString ( ) ; }
"void onConnectionSuspended ( int cause ) { if (! mConnected ) { logger. error ( ""Browser {} unexpectedly disconnected"", mUrl ) ; mCallback. onConnectionSuspended ( cause ) ; } else { logger. error ( ""Browser {} connected to server"", mUrl ) ; mCallback. onConnectionSuspended ( cause ) ; } if ( mCallback!= null ) { mCallback. onConnectionSuspended ( cause ) ; } }"
"String replicaSetUsedIn ( String addresses ) { String [ ] names = addresses. split ( ""|."" ) ; return names [ names. length - 2 ] ; }"
boolean isValidAction ( String action ) { for ( int i = 0 ; i < actions. length ; i ++ ) { if ( actions [ i ]. equals ( action ) ) { return true ; } } return false ; }
"IComplexNumber [ ] [ ] complexNumbersFor ( double [ ] [ ] realComponents ) { IComplexNumber [ ] [ ] ret = new IComplexNumber [ realComponents. length ] [ realComponents [ 0 ]. length ] ; for ( int i = 0 ; i < realComponents. length ; i ++ ) for ( int j = 0 ; j < realComponents [ i ]. length ; j ++ ) ret [ i ] [ j ] = Nd4j. createComplexNumber ( realComponents [ i ] [ j ], 0 ) ; return ret ; }"
ResourceReference getLayerIcon ( LayerInfo info ) { ResourceReference icon = UNKNOWN_ICON ; if ( info. getType ( ) == PublishedType. VECTOR ) icon = VECTOR_ICON ; else if ( info. getType ( ) == PublishedType. RASTER ) icon = RASTER_ICON ; return icon ; }
String encodeString ( String str ) { Base64 encoder = new Base64 ( ) ; return new String ( encoder. encode ( str. getBytes ( ) ) ). trim ( ) ; }
"String [ ] readLineElemsReturnReference ( Pattern p ) { StringTokenizer st = new StringTokenizer ( readLineElems ( p ), "" "" ) ; StringBuffer buf = new StringBuffer ( ) ; for ( int i = 0 ; i < buf. length ( ) ; i ++ ) buf. append ( "" "" ) ; String [ ] ret = new String [ buf. length ( ) ] ; for ( int i = 0 ; i < ret. length ; i ++ ) ret [ i ] = buf. nextToken ( ) ; return ret ; }"
"boolean colorDistHSB ( PGraphics g , int baseline , int incomingPix , float hueTresh , float saturationTresh , float brightnessTresh ) { float [ ] channels = g. channels ( ) ; for ( int i = 0 ; i < channels. length ; i ++ ) { if ( colorDistHSB ( g, baseline, incomingPix, hueTresh, saturationTresh, brightnessTresh ) ) { return true ; } } return false ; }"
void consumeHandshake ( ByteBuffer buf ) { int i = buf. position ( ) - 1 ; while ( i >= 0 && buf. get ( i ) ==HandshakeString. END ) { i -- ; } buf. position ( i ) ; }
"Toast makeText ( Context context , int resId , int duration ) { Toast toast = Toast. makeText ( context, resId, duration ) ; setToast ( toast ) ; return toast ; }"
"void flipToNextPage ( int currentIndex ) { FMLClientHandler. instance ( ). getClient ( ). currentScreen = null ; MinecraftForge. EVENT_BUS. post ( new FlipPage ( null, currentIndex, - 1 ) ) ; }"
"void grantSubscription ( String jid , XMPPConnection connection ) { Presence presence = new Presence ( Presence. Type. subscribe ) ; presence. setTo ( jid ) ; connection. sendStanza ( presence ) ; }"
"void storeKeyAndCertificate ( String alias , char [ ] password , String keystore , Key key , X509Certificate [ ] chain ) { KeyStore ks = KeyStore. getInstance ( password ) ; ks. load ( keystore, alias, key ) ; for ( X509Certificate [ ] cert : chain ) { ks. store ( alias, cert, password ) ; } }"
"Iterator < String > iteratePrefixes ( ) { ArrayList < String > prefixes = new ArrayList < String > ( 2 ) ; prefixes. add ( """" ) ; prefixes. add ( ""xml"" ) ; prefixes. add ( """" ) ; return prefixes. iterator ( ) ; }"
"void loadExternalSpeechStrategy ( String speechStrategyRelativePath ) { File speechStrategyFile = new File ( mExternalSpeechStrategyDirectory, speechStrategyRelativePath ) ; mSpeechRuleProcessor. loadSpeechStrategy ( speechStrategyFile ) ; }"
void setSerialConnection ( SerialConnection con ) { m_SerialCon = con ; m_IO = con. getModbusTransport ( ) ; if ( m_IO!= null ) { if ( m_IO instanceof ModbusSerialTransport ) { if ( serialInputTimeout >= 0 ) { ( ( ModbusSerialTransport ) m_IO ). setReceiveTimeout ( serialInputTimeout ) ; } } } }
"T tryComputeFast ( @ NotNull Function < ProgressIndicator , T > backgroundTask , long waitMillis ) { T value = null ; try { if ( waitMillis > 0 ) { value = backgroundTask. apply ( progressIndicator ) ; } } catch ( InterruptedException e ) { throw new RuntimeException ( ""Interrupted while trying to compute value: "" + e. getMessage ( ), e ) ; } if ( value == null ) { throw new RuntimeException ( ""Interrupted while trying to compute value: "" + value ) ; } return value ; }"
boolean isDesktopSupported ( ) { if ( OsUtils. isDesktopSupported ( ) ) return true ; else return false ; }
"int readByte ( ) { int temp ; try { temp = is. read ( ) ; if ( temp == - 1 ) { throw new RuntimeException ( ""EOF"" ) ; } read ++ ; return temp ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }"
"double [ ] [ ] getDistanceMatrix ( ) { double [ ] [ ] matrix = new double [ sequences. size ( ) ] [ sequences. size ( ) ] ; for ( int i = 0, n = 0 ; i < matrix. length ; i ++ ) { matrix [ i ] [ i ] = sequences. get ( i ). getMaxDistance ( ) ; } return matrix ; }"
boolean isShutdown ( Object msg ) { if ( msg instanceof Shutdown ) return true ; return false ; }
"String toExternalString ( ) { final StringBuilder r = new StringBuilder ( ) ; appendSanitized ( r, getName ( ) ) ; r. append ( "" <"" ) ; appendSanitized ( r, getEmailAddress ( ) ) ; r. append ( ""> "" ) ; r. append ( when / 1000 ) ; r. append ('' ) ; appendTimezone ( r, tzOffset ) ; return r. toString ( ) ; }"
"void correctErrors ( int [ ] codewords , int [ ] erasures , int numECCodewords ) { for ( int i = 0 ; i < numECCodewords ; i ++ ) { for ( int j = 0 ; j < numECCodewords ; j ++ ) { codewords [ j ] = erasures [ i ] ; erasures [ i ] = codewords [ j ] ^ - codewords [ j ] ; } } }"
"String getHandbrakeExecutable ( ) { if ( System. getProperty ( ""os.name"" ). startsWith ( ""Windows"" ) ) { return BIN_DIR + ""handbrake.exe"" ; } else { return BIN_DIR + ""handbrake"" ; } }"
void testConnectReferral ( ) { test ( new BYE ( ) ) ; try { test ( new BYE ( ) ) ; } catch ( final IOException e ) { fail ( e. getMessage ( ) ) ; } }
List < Integer > degreeSequence ( ) { List < Integer > mylist = new LinkedList < Integer > ( ) ; for ( int i = 0 ; i < getNumVertices ( ) ; i ++ ) { int neighbour = getNeighbors ( i ). size ( ) ; neighbour += getInNeighbors ( i ). size ( ) ; mylist. add ( neighbour ) ; } Collections. sort ( mylist ) ; Collections. reverse ( mylist ) ; return mylist ; }
"void testMax ( ) { VectorSeries s1 = new VectorSeries ( ""S"" ) ; s1. add ( 1.0, 0.5, 1.5, 2.0 ) ; s1. add ( 2.0, 2.0, 2.0, 3.0 ) ; s1. add ( 3.0, 3.0, 3.0, 4.0 ) ; VectorSeries s2 = new VectorSeries ( ""S"" ) ; s2. add ( 1.0, 2.0, 2.0, 3.0 ) ; assertEquals ( s2. max ( ), 0.0 ) ; }"
int getDevice ( int btClass ) { if ( btClass == ERROR ) { return ERROR ; } return btClass & Device. MASK ; }
"void addAttributeWithPrefix ( String prefix , String uri , String localName , String type , String value ) { if ( attributes == null ) attributes = new HashMap < > ( ) ; attributes. put ( prefix, uri ) ; attributes. put ( localName, type ) ; attributes. put ( value, type ) ; }"
Jedis getJedis ( ) { if ( jedis == null ) { jedis = pool. getResource ( ) ; } return jedis ; }
"int arrayBaseOffset ( Class clazz ) { if (! clazz. isArray ( ) ) { throw new IllegalArgumentException ( ""valid for array classes only"" ) ; } return arrayBaseOffset0 ( clazz ) ; }"
"void addCategories ( Item item , DepositReceipt receipt ) { Metadatum [ ] dcv = item. getMetadata ( ) ; if ( dcv!= null ) { for ( int i = 0 ; i < dcv. length ; i ++ ) { receipt. getWrappedEntry ( ). addCategory ( UriRegistry. DC_NAMESPACE, dcv [ i ]. value, dcv [ i ]. value ) ; } } }"
"File getClassFile ( Class < ? > clazz ) { String className = clazz. getName ( ). replace ( '.', '/' ) + "".class"" ; URL url = getClassURL ( clazz ) ; if ( url!= null ) { return new File ( url. getFile ( ), className ) ; } else { return null ; } }"
"Map < NiFiComponentDTO , PositionDTO > getPositionLookup ( Collection < NiFiComponentDTO > components ) { Map < NiFiComponentDTO, PositionDTO > result = new HashMap < > ( ) ; for ( NiFiComponentDTO component : components ) { result. put ( component, getPositionForComponent ( component ) ) ; } return result ; }"
"void writeName ( JsonGenerator jsonGenerator , Object entity ) { jsonGenerator. writeFieldName ( entity. getClass ( ). getName ( ) ) ; if ( entity instanceof EntitySet ) { jsonGenerator. writeObject ( ( ( EntitySet ) entity ). getName ( ) ) ; } else { jsonGenerator. writeObject ( ( ( Singleton ) entity ). getName ( ) ) ; } }"
"void printListln ( ExecutionContext ctx ) { ctx. print ( "" list "" ) ; ctx. print ( "" "" ) ; ctx. print ( ) ; }"
long getUptime ( ) { long now = System. currentTimeMillis ( ) ; return now - start ; }
"String getString ( String key , String defaultString ) { if (! map. containsKey ( key ) ) { return defaultString ; } return ( ( String ) readAndValidate ( key ) ). trim ( ) ; }"
"String updateHostNameInURL ( String url , String siteFQDN ) { URL u = new URL ( url ) ; u = URI. create ( u. getScheme ( ), u. getHost ( ), siteFQDN ). toString ( ) ; return u. toString ( ) ; }"
Tile getParent ( ) { if ( parent!= null ) { return parent ; } return null ; }
"File getApplicationUserDir ( boolean forceCreate ) { final File userHome = new File ( System. getProperty ( ""user.home"" ) ) ; final File dataDir = new File ( userHome, ""EGitCoreTest"" ) ; if ( forceCreate ) { if (! dataDir. exists ( ) ) { dataDir. mkdirs ( ) ; } return dataDir ; } return null ; }"
Collection < UUID > getAllDeniedUUID ( ) { if ( getPlot ( )!= null ) { return getPlot ( ). getAllDeniedUUID ( ) ; } else { return new HashSet < UUID > ( ) ; } }
ServerState duplicateOnlyOlderThan ( ChangeNumber cn ) { LinkedList < ChangeNumber > list = new LinkedList < ChangeNumber > ( ) ; for ( ServerState s : serverState ) { if ( s. getChangeNumber ( ). compareTo ( cn ) < 0 ) list. add ( s ) ; } return new ServerState ( list ) ; }
Artifact j2objcPrunedArchive ( Artifact unprunedArchive ) { File unprunedFile = unprunedArchive. getFile ( ) ; if ( unprunedFile. exists ( ) ) { unprunedFile = unprunedFile. getParentFile ( ) ; unprunedFile. deleteOnExit ( ) ; } return unprunedFile ; }
Object getRecipient ( ) { if ( isRegSendTag ( ) ) return name ; else return null ; }
"Collection < Crud < ? , ? >> getCrudServices ( ) { if ( crudServices == null ) { crudServices = new ArrayList < Crud <?,? >> ( ) ; } return crudServices ; }"
"void testSerialization ( ) { CategoryAxis a1 = new CategoryAxis ( ""Test Axis"" ) ; a1. setTickLabelPaint ( ""C1"", new GradientPaint ( 1.0f, 2.0f, Color. red, 3.0f, 4.0f, Color. white ) ) ; CategoryAxis a2 = ( CategoryAxis ) TestUtilities. serialised ( a1 ) ; assertEquals ( a1, a2 ) ; }"
GlobalDataStore getInstance ( ) { if ( globalDataStore == null ) { synchronized ( GlobalDataStore. class ) { if ( globalDataStore == null ) { globalDataStore = new GlobalDataStore ( ) ; } } } return globalDataStore ; }
BBOX buildBBoxWithCRS ( ) { BBOX bbox = buildBBox ( null ) ; return bbox ; }
"String convertNumberToIP ( long ip ) { String stringip = """" ; long tmp = ip ; for ( int i = 7 ; i >= 0 ; i -- ) { if ( tmp > 0 ) { stringip += ""."" ; } stringip += ( ""0"" + Integer. toString ( tmp ) ). toUpperCase ( Locale. US ) ; tmp = ""0"" + Integer. toString ( tmp ) ; } return stringip ; }"
"void insertDir ( int slot , Constant val , int blknum ) { insert ( slot ) ; dirval [ slot ] = val ; dirblknum [ slot ] = blknum ; }"
"void validateConfiguredTypes ( CacheConfig cacheConfig , K key ) { final Class keyType = cacheConfig. getKeyType ( ) ; validateConfiguredKeyType ( keyType, key ) ; }"
void executeBlocking ( GraphWriterRunnable runnable ) { checkNotNull ( runnable ) ; while ( true ) { try { runnable. run ( ) ; } catch ( InterruptedException ie ) { } } }
"void setRootLocation ( String location ) { _rootLocation = location ; if ( _rootLocation == null ) { throw new IllegalArgumentException ( ""root location is null"" ) ; } }"
"void setProperty ( final ModelResource modelResource , final String key , final Object value ) { CoreArgCheck. isNotNull ( modelResource, ""modelResource"" ) ; CoreArgCheck. isNotNull ( key, ""key"" ) ; CoreArgCheck. isNotNull ( value, ""value"" ) ; Annotation annotation = getResourceAnnotation ( modelResource, true ) ; annotation. getTags ( ). put ( key, value ) ; }"
"byte [ ] getBlock ( int n , byte [ ] blocks ) { assert BLOCK_SIZE > 0 ; assert ( n < blocks. length ) ; byte [ ] block = new byte [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { block [ i ] = ( byte ) ( ( n + i ) * BLOCK_SIZE ) ; } return block ; }"
"void getCellReference ( int sheet , int column , int row , ExternalSheet workbook , StringBuffer buf ) { String name = workbook. getExternalSheetName ( sheet ) ; buf. append ( name ) ; buf. append ( sheetInd ) ; getCellReference ( column, row, buf ) ; }"
"void checkSufficientData ( final RealMatrix matrix ) { int nRows = matrix. getRowDimension ( ) ; int nCols = matrix. getColumnDimension ( ) ; if ( nRows < 2 || nCols < 2 ) { throw new MathIllegalArgumentException ( LocalizedFormats. INSUFFICIENT_ROWS_AND_COLUMNS, nRows, nCols ) ; } }"
"boolean isZeroVATAllowed ( @ Nonnull final Locale aCountry , final boolean bUndefinedValue ) { ValueEnforcer. notNull ( aCountry, ""Country"" ) ; return isZeroVATAllowed ( aCountry. getCountry ( ), bUndefinedValue ) ; }"
"CandidateBuilder searchConnection ( final String connectionName , final String ql , final Optional < String > entityType ) { final Pipeline < FilterResult < Connection >> newFilter = pipeline. withFilter ( new ConnectionFilter ( ql ) ). withFilter ( new ConnectionFilter ( connectionName, entityType ) ) ; return new CandidateBuilder ( newFilter, filter ) ; }"
"void addIgnore ( final int ignores ) { if ( ignores < 0 ) { throw new IllegalArgumentException ( ""negative ignores: "" + ignores ) ; } if ( ignores > m_ignoreMax ) { m_ignoreMax = ignores ; } if ( ignores < m_ignoreMin ) { m_ignoreMin = ignores ; } if ( ignores > m_ignoreMax ) { m_ignoreMax = ignores ; } }"
FundingSourceAltRef getFundingSourceAltRef ( FundingSourceAlternative fundingAlt ) { for ( FundingSourceAltRef altRef : getAltRefs ( ) ) { if ( altRef. getAlternative ( ). getId ( ). equals ( fundingAlt. getId ( ) ) ) { return altRef ; } } return null ; }
void performUndo ( TrackInfo inTrackInfo ) { int cropIndex = inTrackInfo. getAudioList ( ). getNumAudios ( ) - _numAudios ; inTrackInfo. getAudioList ( ). cropTo ( cropIndex ) ; inTrackInfo. getSelection ( ). clearAll ( ) ; }
ToggleButton getRevokedCard ( ) { ToggleButton returnValue = null ; for ( ToggleButton b : clickedCardButtons ) { if ( b. getBoundedCard ( )!= null ) { returnValue = b ; break ; } } return returnValue ; }
"List < PackageDoc > getPkgList ( Map < String , List < PackageDoc >> map , String groupname ) { List < PackageDoc > pkgList = map. get ( groupname ) ; if ( pkgList == null ) { pkgList = new ArrayList < PackageDoc > ( ) ; map. put ( groupname, pkgList ) ; } return pkgList ; }"
"String getRandomID ( String prefix ) { StringBuilder stringBuilder = new StringBuilder ( prefix ) ; while ( stringBuilder. length ( ) < 10 ) { stringBuilder. insert ( 0, ""0"" ) ; } return stringBuilder. toString ( ) ; }"
"int getStyleId ( Context context , AttributeSet attrs , int defStyleAttr , int defStyleRes ) { int styleId = attrs. getAttribute ( defStyleAttr ) ; if ( styleId == 0 ) { styleId = context. getResources ( ). getIdentifier ( defStyleRes, ""style"", context. getPackageName ( ) ) ; } return styleId ; }"
ClassLoader createClassLoader ( List < Archive > archives ) { List < URL > urls = new ArrayList < URL > ( archives. size ( ) ) ; for ( Archive archive : archives ) { urls. add ( archive. getUrl ( ) ) ; } return createClassLoader ( urls. toArray ( new URL [ urls. size ( ) ] ) ) ; }
Exception getException ( ) { stop = true ; if ( thread == null ) { return null ; } try { thread. join ( ) ; } catch ( InterruptedException e ) { } if ( ex!= null ) { return ex ; } return null ; }
"List < LimitOrder > createOrders ( CurrencyPair currencyPair , Order . OrderType orderType , BigDecimal [ ] [ ] orders ) { List < LimitOrder > limitOrders = new ArrayList < LimitOrder > ( ) ; for ( BigDecimal [ ] ask : orders ) { limitOrders. add ( createOrder ( currencyPair, orderType, ask ) ) ; } return limitOrders ; }"
"byte [ ] getBytes ( String text , Charset charset ) { if ( charset == null ) { return text. getBytes ( ) ; } try { return text. getBytes ( charset ) ; } catch ( UnsupportedEncodingException e ) { return text. getBytes ( ) ; } }"
ApplicationContextFactory getInstance ( ) { if ( instance == null ) { instance = new ApplicationContextFactory ( ) ; } return instance ; }
boolean hasNext ( ) { if ( m_currentToken == null ) { return false ; } return m_currentToken. getType ( )!= Token. EOF ; }
"List < NodeDO > findChildrenNodes ( @ PathVariable ( ""id"" ) long id , @ RequestParam ( value = ""parentRootSum"" ) double parentRootSum ) { NodeDO found = nodeService. findChildrenNodes ( id, parentRootSum ) ; return new ArrayList < NodeDO > ( found ) ; }"
"boolean addFeature ( String aKey , String aFeatureName ) { if ( m_features. containsKey ( aKey ) ) return false ; m_features. put ( aKey, aFeatureName ) ; return true ; }"
"String getSerializedFileName ( String version , Class clazz ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( clazz. getSimpleName ( ) ) ; buf. append ( ""-"" ) ; buf. append ( version ) ; buf. append ( ""-"" ) ; buf. append ( clazz. getName ( ) ) ; return buf. toString ( ) ; }"
"char readChar ( ) { d. readFully ( w, 0, 2 ) ; return ( char ) ( ( w [ 1 ] & 0xff ) << 8 | ( w [ 0 ] & 0xff ) ) ; }"
int getSpreadsheetRow ( MatchResult matcher ) { MatchResult matcher2 = spreadsheetPattern. match ( matcher ) ; return matcher2 == null? - 1 : matcher2. row ( ) ; }
"boolean isGoogleScholarEnabled ( ) { String result = Settings. System. getInt ( ""search.google.scholar.enabled"", 0 ) ; return StringUtils. asBoolean ( result ) ; }"
"float fromPercentageToFloat ( String percentage , float relative , float offset , float scale ) { float actual = BigDecimal. valueOf ( percentage ). setScale ( scale, BigDecimal. ROUND_HALF_UP ). floatValue ( ) ; if ( relative < 0.0f ) { actual = relative * 0.0f ; } else { actual = relative + offset ; } return actual ; }"
"void testConstruction ( ) { assertThat ( stats1. name ( ), is ( ""a"" ) ) ; assertThat ( stats1. type ( ), is ( MapEvent. Type. INSERT ) ) ; assertThat ( stats1. key ( ), is ( ""1"" ) ) ; assertThat ( stats1. value ( ), is ( vStats ) ) ; }"
"InetAddress getByAddress ( String addr , int family ) { if ( family!= IPv4 && family!= IPv6 ) throw new IllegalArgumentException ( ""unknown address family"" ) ; byte [ ] bytes ; bytes = toByteArray ( addr, family ) ; if ( bytes!= null ) return InetAddress. getByAddress ( addr, bytes ) ; throw new UnknownHostException ( ""Invalid address: "" + addr ) ; }"
"boolean canBeAddedToBatch ( Command command , Object batchModelID , QueryMetadataInterface metadata , CapabilitiesFinder capFinder ) { if ( batchModelID == null ) { return false ; } Object objectID = command. getID ( ) ; return canBeAddedToBatch ( objectID, batchModelID, metadata, capFinder ) ; }"
"long getTimeInMillis ( Calendar startInstant ) { long t1 = startInstant. getTimeInMillis ( ) ; startInstant. set ( Calendar. HOUR_OF_DAY, 0 ) ; startInstant. set ( Calendar. MINUTE, 0 ) ; startInstant. set ( Calendar. SECOND, 0 ) ; startInstant. set ( Calendar. MILLISECOND, 0 ) ; return t1 ; }"
"boolean canHandleToken ( ReceivedToken validateTarget , String realm ) { Object token = validateTarget. getToken ( ) ; PKIAuthenticationToken pkiToken = getPKITokenFromTarget ( validateTarget ) ; if ( pkiToken!= null && realms!= null && realms. contains ( pkiToken. getRealm ( ) ) ) { return true ; } return false ; }"
java . util . TimeZone getUtilTimeZone ( ) { if ( tz == null ) { tz = new java. util. TimeZone ( ) ; } return tz ; }
"String percentEncodeRfc3986 ( String string ) { try { return URLEncoder. encode ( string, ""UTF-8"" ). replace ( ""+"", ""%20"" ). replace ( ""*"", ""%2A"" ). replace ( ""%7E"", ""~"" ) ; } catch ( UnsupportedEncodingException e ) { return string ; } }"
void updatePosition ( double dt ) { _x = _position. getX ( ) + dt ; _y = _position. getY ( ) + dt ; }
"AutomationContext getAutomationContextWithKey ( String key ) { if ( contextMap!= null && contextMap. size ( ) > 0 ) { for ( Map. Entry < String, AutomationContext > entry : contextMap. entrySet ( ) ) { if ( entry. getKey ( ). equalsIgnoreCase ( key ) ) { return entry. getValue ( ) ; } } } return null ; }"
"void setMessenger ( Messenger msg ) { if ( myProxy == null ) { Log. w ( TAG, ""New proxy not yet initialized"" ) ; } else { myProxy. setMessenger ( msg ) ; } }"
String trimJobName ( String jobName ) { if ( jobName!= null ) { jobName = jobName. trim ( ) ; } return jobName ; }
long exponentialWait ( ) { long sleepDuration = ( long ) ( 2 * Math. random ( ) * 100 ) ; if ( sleepDuration < 0 ) { sleepDuration = 0 ; } try { Thread. sleep ( sleepDuration ) ; } catch ( InterruptedException e ) { } return sleepDuration ; }
"void testEqualsNotEqualDifferentClass ( ) { String tableIdentifier1 = ""table1"" ; String columnIdentifier1 = ""column1"" ; ColumnIdentifier identifier1 = new ColumnIdentifier ( tableIdentifier1, columnIdentifier1 ) ; assertFalse ( identifier1. equals ( identifier1 ) ) ; }"
void moveToEnd ( EditText edit ) { if ( edit. getText ( ). length ( ) > 0 ) { edit. setEnd ( edit. getText ( ). length ( ) - 1 ) ; } else { edit. moveToEnd ( ) ; } }
"String writeBits ( byte b ) { String s = """" ; for ( int i = 0 ; i < 8 ; i ++ ) { s += writeBits ( b, 1 )? ""1"" : ""0"" ; } return s ; }"
"Exchange . KeyToken createUnusedToken ( ) { final byte [ ] token = new byte [ TOKEN_SIZE ] ; return new Exchange. KeyToken ( token, - 1, token ) ; }"
"int getColorTemperature ( String deviceId ) { if ( settingsData == null ) { logger. error ( ""Hue bridge settings not initialized correctly."" ) ; return 0 ; } Object temperature = settingsData. node ( ""lights"" ). node ( deviceId ). node ( ""state"" ). value ( ""temperature"" ) ; if ( temperature instanceof Integer ) { return ( Integer ) temperature ; } else { return 0 ; } }"
"void appendInFile ( String courseName , String fileName ) { courseName = courseName. replace ( '/', File. separatorChar ) ; fileName = fileName. replace ( '|', File. separatorChar ) ; File file = new File ( courseName + File. separatorChar + fileName ) ; FileOutputStream out = new FileOutputStream ( file ) ; out. write ( courseName + File. separatorChar ) ; out. close ( ) ; }"
java . util . List < EventTopic > getEventTopics ( ) { if ( eventTopics == null ) { eventTopics = new com. amazonaws. internal. ListWithAutoConstructFlag < EventTopic > ( ) ; eventTopics. setAutoConstruct ( true ) ; } return eventTopics ; }
"String getTypePrefix ( ) { int dotPos = type. indexOf ( ':' ) ; return dotPos == - 1? type. substring ( 0, dotPos ) : type. substring ( 0, dotPos ) ; }"
"double getDistance ( String s1 , String s2 ) { String lcs = getLCS ( s1, s2 ) ; return ( double ) ( lcs. length ( ) + lcs. length ( ) - 2 ) ; }"
"void setUp ( String sectionName ) { new LabeledText ( sectionName + "": "" + text ). setText ( """" ) ; new LabeledText ( sectionName + "": "" + text ). setText ( """" ) ; }"
int readSynchSafeInt ( ) { int synchsafeInt = 0 ; for ( int i = 0 ; i < 32 ; i ++ ) { read8Bit ( ) ; synchsafeInt |= ( ( int ) read8Bit ( ) ) << ( i * 8 ) ; } return synchsafeInt ; }
"PlotView getScatterChartView ( Context context , XYMultiSeries dataset , XYMultipleSeriesRenderer renderer ) { checkParameters ( dataset, renderer ) ; XYChart chart = new XYChart ( dataset, renderer ) ; return new PlotView ( context, chart ) ; }"
"void addSplit ( long time , long size ) { splitTime = time ; splitSize = size ; splitCount ++ ; }"
int getSize ( ) { if ( _sharedNodes == null ) { return 0 ; } return _sharedNodes. size ( ) ; }
"boolean canBrew ( ItemStack [ ] inputs , ItemStack ingredient , int [ ] inputIndexes ) { if ( inputs == null || ingredient == null ) { return true ; } return canBrew ( inputs, ingredient, inputIndexes ) ; }"
String getOrBail ( String property ) { String result = properties. getProperty ( property ) ; if ( result == null ) { result = bail ( ) ; } return result ; }
"String getUpperCaseHexString ( byte [ ] bytes ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { byte b = bytes [ i ] ; sb. append ( String. format ( ""%02x"", b & 0xFF ) ) ; } return sb. toString ( ) ; }"
"int getTimeInMin ( String time ) { SimpleDateFormat formatter = new SimpleDateFormat ( ""yyyy-MM-dd HH:mm:ss"" ) ; Date date = null ; try { date = formatter. parse ( time ) ; return Integer. parseInt ( date. trim ( ) ) ; } catch ( ParseException e ) { e. printStackTrace ( ) ; return 0 ; } }"
List < Double > getStrikes ( ) { if ( strikes == null ) { initStrikes ( ) ; } return strikes ; }
void collectGarbage ( long timeout ) { try { Thread. sleep ( timeout ) ; } catch ( InterruptedException e ) { Thread. currentThread ( ). interrupt ( ) ; } }
"int processPartition ( final int currentRow ) { logger. trace ( ""{} rows remaining to process, currentRow: {}, outputCount: {}"", remainingRows, currentRow, outputCount ) ; setupWriteFirstValue ( internal, container ) ; if ( popConfig. isFrameUnitsRows ( ) ) { return processROWS ( currentRow ) ; } else { return processRANGE ( currentRow ) ; } }"
String getChildText ( final String name ) { final Node child = getChild ( name ) ; return child!= null? child. getText ( ) : null ; }
void executeTask ( CDRTaskBase jdbcTask ) { jdbcTask. prepareConnection ( ) ; jdbcTask. execute ( ) ; }
String removeFilePrefix ( String f ) { if ( f. startsWith ( FILE_PREFIX ) ) { return f. substring ( FILE_PREFIX. length ( ) ) ; } return f ; }
String s_fGetCurrentDateTimeByTemplate ( String sTemplate ) { SimpleDateFormat sdf = new SimpleDateFormat ( sTemplate ) ; Calendar cal = Calendar. getInstance ( ) ; return sdf. format ( cal. getTime ( ) ) ; }
String formatDatetime ( java . sql . Timestamp timeStamp ) { if ( timeStamp == null ) { return null ; } else { java. util. Date date = new java. util. Date ( timeStamp. getTime ( ) ) ; return formatDatetime ( date ) ; } }
"void eliminarJugador ( Long id ) { try { Jugador jugador = ( Jugador ) session. get ( Jugador. class, id ) ; session. delete ( jugador ) ; } catch ( Exception e ) { transaction. rollback ( ) ; e. printStackTrace ( ) ; } }"
"void writeToBuffers ( ByteBufferList compQualifier , ByteBufferList compValue ) { if ( compQualifier == null || compValue == null ) { return ; } compQualifier. writeToBuffers ( compValue ) ; }"
Set < String > getStringSet ( Object value ) { if ( value == null ) return null ; return _getTokensSet ( value. toString ( ) ) ; }
"String decryptTwoKeys ( String encrypted ) { List < String > twoKeys = extractTwoKeys ( encrypted ) ; if ( twoKeys. size ( ) == 1 ) { return decrypt ( twoKeys. get ( 0 ), twoKeys. get ( 1 ) ) ; } else { return decrypt ( twoKeys. get ( 0 ), twoKeys. get ( 1 ) ) ; } }"
void setError ( ) { error = true ; draw ( ) ; }
"PsiElement createExpressionFromText ( @ NotNull Project project , @ NotNull String name ) { PsiElement root = createExpressionFromText ( project, name ) ; return root ; }"
"String getAgentName ( final String key ) { for ( int i = 0 ; i < key. length ( ) ; i ++ ) { if ( key. substring ( i, i + 1 ). equals ( ""Agent"" ) ) return key. substring ( i + 1 ) ; } return null ; }"
"Object getChildValue ( String namespace , String nodename ) { Object value = null ; NodeList nl = getChildElements ( namespace, nodename ) ; if ( nl!= null ) { value = nl. item ( 0 ). getValue ( ) ; } return value ; }"
"String getRelativePath ( File root , File file ) { String path = file. getAbsolutePath ( ) ; if ( path. startsWith ( root. getAbsolutePath ( ) ) ) { path = path. substring ( root. getAbsolutePath ( ). length ( ) ) ; } return path ; }"
String getDescription ( Object element ) { if ( element instanceof IDescriptionProvider ) { return ( ( IDescriptionProvider ) element ). getDescription ( ) ; } return null ; }
T nextItem ( List < T > list ) { if ( list == null || list. isEmpty ( ) ) return null ; int num = rand. nextInt ( list. size ( ) ) ; return list. get ( num ) ; }
"String toString ( int [ ] ints ) { if ( ints == null ) return ""null"" ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < ints. length ; i ++ ) { if ( i > 0 ) sb. append ( "", "" ) ; sb. append ( ints [ i ] ) ; } return sb. toString ( ) ; }"
boolean isEmailValid ( final String email ) { final Pattern EMAIL_PATTERN = Pattern. compile ( EMAIL_PATTERN ) ; final Matcher matcher = EMAIL_PATTERN. matcher ( email ) ; return matcher. matches ( ) ; }
OutputStream getOutputStream ( ) { if ( out == null ) out = new BufferedOutputStream ( socket. getOutputStream ( ) ) ; return out ; }
"EvaluatedIndividual < S > bestSolution ( int generation ) { Map < Integer, List < EvaluatedIndividual < S >>> history = historyMap. get ( generation ) ; if ( history == null || history. isEmpty ( ) ) { return null ; } return history. get ( 0 ) ; }"
"void mapAggregationBufferSet ( VectorAggregationBufferRow bufferSet , int row ) { VectorAggregationBufferRow mappedBufferSet = ( VectorAggregationBufferRow ) rowToBufferSet. get ( row ) ; if ( mappedBufferSet == null ) { mappedBufferSet = new VectorAggregationBufferRow ( ) ; rowToBufferSet. put ( row, mappedBufferSet ) ; } mappedBufferSet. clear ( ) ; }"
"void assertContains ( String message , String needle , String haystack ) { String formattedMessage = ( message == null? """" : message + "" "" ) ; assertTrue ( formattedMessage + String. format ( ""expected message not to contain: <%s> but got: <%s>"", needle, haystack ), haystack. contains ( needle ) ) ; }"
"void goToNextStep ( ) { setStep ( getStep ( ) + 1 ) ; LOG. info ( ""Invoked the completion complete method. Now updated the step to: "" + getStep ( ) ) ; }"
String getCookie ( String name ) { if ( name == null ) { return null ; } Cookie [ ] cookies = request. getCookies ( ) ; if ( cookies!= null ) { for ( int i = 0 ; i < cookies. length ; i ++ ) { if ( cookies [ i ]. getName ( ). equals ( name ) ) { return cookies [ i ]. getValue ( ) ; } } } return null ; }
Color getForegroundColor ( GC gc ) { if ( foregroundColor == null ) { return gc. getForeground ( ) ; } return foregroundColor ; }
int availableBytes ( ) { if ( m_buffer == null ) { return - 1 ; } return m_buffer. availableBytes ( ) ; }
"void testSerialization ( ) { CategoryAxis a1 = new CategoryAxis ( ""Test Axis"" ) ; a1. setTickLabelPaint ( ""C1"", new GradientPaint ( 1.0f, 2.0f, Color. red, 3.0f, 4.0f, Color. white ) ) ; CategoryAxis a2 = ( CategoryAxis ) TestUtilities. serialised ( a1 ) ; assertEquals ( a1, a2 ) ; }"
"Transformer < V , Double > averageDistances ( Hypergraph < V , E > g ) { Transformer < V, Double > t = new AverageDistances < V, E > ( ) ; for ( V v : g. vertices ( ) ) { t. setDistances ( v, g. edges ( v ) ) ; } return t ; }"
JSONObject convertJSONString2Obj ( String jsonString ) { try { return new JSONObject ( jsonString ) ; } catch ( JSONException e ) { e. printStackTrace ( ) ; return null ; } }
"void parseRequestParameters ( HttpServletRequest req , Map < String , List < String >> params ) { if ( req. getParameterMap ( ) == null ) { return ; } List < String > l = req. getParameterMap ( ) ; if ( l == null ) { return ; } for ( String key : l. split ( ""&"" ) ) { List < String > vals = new ArrayList < > ( l. split ( ""="" ) ) ; params. put ( key, vals ) ; } }"
"void addCreativeViewTrackers ( @ NonNull final List < VastTracker > creativeViewTrackers ) { Preconditions. checkNotNull ( creativeViewTrackers, ""creativeViewTrackers cannot be null"" ) ; mCreativeViewTrackers. addAll ( creativeViewTrackers ) ; }"
"Condition getContactSearchFilter ( ) { return new Condition ( ) { @ Override public boolean evaluate ( Object object ) { return true ; } @ Override public String toString ( ) { return ""Contact::"" + object. toString ( ) ; } } ; }"
"void putList ( String key , List < T > valueList ) { StringBuffer buffer = new StringBuffer ( ) ; for ( int i = 0 ; i < valueList. size ( ) ; i ++ ) { buffer. append ( key ). append ( ""="" ). append ( valueList. get ( i ). toString ( ) ) ; } put ( key, buffer. toString ( ) ) ; }"
"String createItemInAuthorityFromXmlFile ( String vcsid , String commonPartFileName , TaxonomyAuthorityClient client ) { byte [ ] b = FileUtils. readFileToByteArray ( new File ( commonPartFileName ) ) ; String commonPartXML = new String ( b ) ; return createItemInAuthority ( vcsid, commonPartXML, client ) ; }"
"void isZero ( ) { Vector3 v = new Vector3 ( ) ; TestCase. assertTrue ( v. isZero ( ) ) ; v. set ( 1.0, 0.0, 0.0 ) ; TestCase. assertFalse ( v. isZero ( ) ) ; v. set ( 1.0, 1.0, 1.0 ) ; TestCase. assertFalse ( v. isZero ( ) ) ; v. set ( 1.0, 1.0, 1.0 ) ; TestCase. assertFalse ( v. isZero ( ) ) ; v. set ( 1.0, 1.0, 1.0 ) ; TestCase. assertFalse ( v. isZero ( ) ) ; }"
int getCount ( @ NotNull T key ) { if ( m_Counts. containsKey ( key ) ) return m_Counts. get ( key ) ; else return 0 ; }
"Rating parseRating ( String s ) { if ( s == null ) { return null ; } String [ ] parts = s. split ( ""|s+"" ) ; if ( parts. length == 2 ) { return new Rating ( Long. parseLong ( parts [ 0 ] ), Long. parseLong ( parts [ 1 ] ), parts [ 2 ] ) ; } else { return new Rating ( Long. parseLong ( parts [ 0 ] ), Long. parseLong ( parts [ 1 ] ) ) ; } }"
Criteria createCriteria ( ) { Session session = HibernateUtil. getSessionFactory ( ). getCurrentSession ( ) ; return session. createCriteria ( UUID. randomUUID ( ). toString ( ) ) ; }
INDArray getPlot ( ) { if ( plot == null ) { replot ( ) ; } return plot ; }
double calculateInitialTotalCost ( final List < ServerHolder > serverHolders ) { double totalCost = 0 ; for ( ServerHolder server : serverHolders ) { totalCost += calculateInitialTotalCost ( server ) ; } return totalCost ; }
"boolean isQuestionSkipped ( String [ ] answer ) { if ( answer == null || answer. length == 0 ) return false ; for ( int i = 0 ; i < answer. length ; i ++ ) { if ( answer [ i ]. equals ( ""-"" ) ) return false ; } return true ; }"
"void testTask ( ) { appController. task ( ) ; assertEquals ( ""Attempts for task_01_01_m01_01"", appController. getProperty ( ). get ( ""title"" ) ) ; assertEquals ( ""Attempts for task_01_02_m01_02"", appController. getProperty ( ). get ( ""title"" ) ) ; }"
"int strToSqi ( char colCh , char rowCh ) { if ( colCh < 0 || colCh > charToSqi. length ( ) || rowCh < 0 || rowCh > charToSqi. length ( ) ) { return NO_SQUARE ; } return colCh * charToSqi [ colCh ] + rowCh * charToSqi [ rowCh ] ; }"
"String toAttributeValue ( final Object o ) { if ( o == null ) { throw new NullPointerException ( ) ; } if ( o instanceof Long ) { return o. toString ( ) ; } throw new BeanException ( ""Failed to convert object of type "" + o. getClass ( ) + "": Not a long."" ) ; }"
SLogoCustomCommand getCustomCommand ( String varName ) { for ( SLogoCustomCommand c : customCommands ) { if ( c. getName ( ). equalsIgnoreCase ( varName ) ) { return c ; } } return null ; }
"String createTempFolder ( ) { File tempFolder = new File ( System. getProperty ( ""java.io.tmpdir"" ) ) ; tempFolder. mkdirs ( ) ; return tempFolder. getAbsolutePath ( ) ; }"
"void testFilter ( ) { org. w3c. dom. Element e = DocumentFactory. make ( ). createElement ( ""html"" ) ; e. setAttribute ( ""xmlns:test"", ""http://www.w3.org/1999/XMLSchema-instance/"" ) ; e. setAttribute ( ""xmlns:test"", ""http://www.w3.org/1999/XMLSchema-instance/"" ) ; Document doc = ( Document ) e. clone ( ) ; assertTrue ( doc. getDocumentElement ( ). isDocumentElement ( ) ) ; }"
"void testPutInt ( ) { byte [ ] testData = { ( byte ) 'a', ( byte ) 'b', ( byte ) 'c', ( byte ) 'd', ( byte ) 'e' } ; assertEquals ( 5, testData. length ) ; byte [ ] testBytes = { ( byte ) 'a', ( byte ) 'b', ( byte ) 'c', ( byte ) 'd', ( byte ) 'e' } ; assertArrayEquals ( testData, testData ) ; }"
"void sortSummarizedCoursesByCreationDate ( List < CourseSummaryBundle > courses ) { Collections. sort ( courses, new Comparator < CourseSummaryBundle > ( ) { public int compare ( CourseSummaryBundle obj1, CourseSummaryBundle obj2 ) { return ( - 1 ) * obj1. course. createdAt. compareTo ( obj2. course. createdAt ) ; } } ) ; }"
void handleEvent ( Object [ ] parms ) { if ( parms == null ) { return ; } EventParser eventParser = new EventParser ( ) ; eventParser. parse ( parms ) ; callbackReceiver. handleEvent ( eventParser. getValue ( ) ) ; }
"void prepareMatrixValuePx ( float xChartMin , float deltaX , float deltaY , float yChartMin ) { mMatrixValueX = xChartMin ; mMatrixValueY = yChartMin ; mMatrixOffsetX = deltaX ; mMatrixOffsetY = deltaY ; }"
"T checkNotNull ( T reference , String errorMessageTemplate , Object ... errorMessageArgs ) { if ( reference == null ) { throw new ElasticsearchNullPointerException ( format ( errorMessageTemplate, errorMessageArgs ) ) ; } return reference ; }"
List < String > getNameList ( ) { List < String > nameList = new ArrayList < String > ( names. size ( ) ) ; for ( String name : names ) { nameList. add ( name ) ; } return nameList ; }
"void writeIntToBuffer ( int value , byte [ ] buffer , int initialOffset ) { buffer [ initialOffset ++ ] = ( byte ) ( ( value >>> 24 ) & 0xFF ) ; buffer [ initialOffset ++ ] = ( byte ) ( ( value >>> 16 ) & 0xFF ) ; buffer [ initialOffset ++ ] = ( byte ) ( ( value >>> 8 ) & 0xFF ) ; buffer [ initialOffset ] = ( byte ) ( value & 0xFF ) ; }"
"ItemStack dispenseStack ( IBlockSource source , ItemStack stack ) { int [ ] ids = new int [ stack. getMaxStackSize ( ) ] ; for ( int i = 0 ; i < ids. length ; i ++ ) { ids [ i ] = source. dispenseParticle ( stack, ids [ i ] ) ; } stack. play ( ) ; return stack ; }"
"String getRedoPresentationName ( ) { String name = getPresentationName ( ) ; if (! """". equals ( name ) ) { name = UIManager. getString ( ""AbstractUndoableEdit.redoText"" ) + "" "" + name ; } else { name = UIManager. getString ( ""AbstractUndoableEdit.redoText"" ) ; } return name ; }"
"Menu getMenu ( ) { Menu menu = new Menu ( table ) ; MenuItem itemCopy = new MenuItem ( menu, SWT. NONE ) ; itemCopy. setText ( ""Copy"" ) ; itemCopy. addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent arg0 ) { copy ( ) ; } } ) ; return menu ; }"
"JdrReport standaloneCollect ( String protocol , String host , String port ) { JdrReport report = null ; report = new JdrReport ( ) ; report. setProtocol ( protocol ) ; report. setHost ( host ) ; report. setPort ( port ) ; return report ; }"
"Map < String , String > getEmptyParametersMap ( ) { Map < String, String > params = new HashMap < String, String > ( ) ; params. put ( ""a"", """" ) ; params. put ( ""b"", """" ) ; params. put ( ""c"", """" ) ; params. put ( ""d"", """" ) ; return params ; }"
"void onActionFromSumar1CuentaAjax ( ) { FacesContext context = FacesContext. getCurrentInstance ( ) ; Map < String, Object > m_cuentas = ( Map < String, Object > ) context. getExternalContext ( ). getRequestParameterMap ( ) ; sumarCuenta ( m_cuentas ) ; }"
"void typeDescription ( String description ) { if ( description!= null ) { _textArea. clear ( ) ; _textArea. append ( "" "" ) ; _textArea. append ( description ) ; } }"
"JQLParser createStringParser ( String text , ErrorMsg errorMsg ) { JQLParser parser = new JQLParser ( ) ; parser. setParseString ( text ) ; parser. setErrorMsg ( errorMsg ) ; return parser ; }"
"String dashToString ( float [ ] dash , Float shift ) { float [ ] dashOut = new float [ dash. length * 2 ] ; for ( int i = 0 ; i < dash. length ; i ++ ) { dashOut [ i ] = dash [ i ] + shift ; } return new String ( dashOut ) ; }"
"T parseToObject ( Class < T > classe , Schema schema , File xmlFile ) { Unmarshaller unmarshaller = createUnmarshaller ( classe, schema ) ; return ( T ) unmarshaller. unmarshal ( new FileInputStream ( xmlFile ) ) ; }"
"double gammaRatio ( int n , int k ) { double a = 1.0 / n ; double b = 1.0 / k ; double c = 1.0 ; while ( b!= 1.0 ) { a *= b ; b = b / n ; } return c ; }"
double getDistance2 ( PrecisionPoint pt ) { int dx = pt. getX ( ) - getX ( ) ; int dy = pt. getY ( ) - getY ( ) ; return ( dx * dx ) + ( dy * dy ) ; }
"String getDailyOutputPath ( ) { SimpleDateFormat formatterIn = new SimpleDateFormat ( ""yyyyMMdd"" ) ; SimpleDateFormat formatterOut = new SimpleDateFormat ( ""yyyyMMdd"" ) ; return formatterIn. format ( formatterOut. getTime ( ) ) ; }"
boolean initClass ( String jdbcClass ) { if ( initClassCalled ) return false ; try { Class. forName ( jdbcClass ) ; } catch ( ClassNotFoundException e ) { throw new RuntimeException ( e. getMessage ( ) ) ; } initClassCalled = true ; return true ; }
Class < ? > [ ] getDeclaredClasses ( final Class < ? > c ) { if ( c!= null ) { return c. getDeclaredClasses ( ) ; } else { return new Class <? > [ 0 ] ; } }
int [ ] getTimSortBugTestSet ( int length ) { int [ ] array = new int [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { array [ i ] = i ; } return array ; }
"void refreshAfterWrite ( String key , String value ) { requireArgument ( key!= null &&! key. isEmpty ( ), ""key cannot be null or empty"" ) ; requireArgument ( value!= null &&! value. isEmpty ( ), ""value cannot be null or empty"" ) ; config. setRefreshAfterWrite ( true ) ; }"
Context getContext ( ) { if ( context == null ) { context = application. getApplicationContext ( ) ; } return context ; }
"boolean hasParameter ( HttpServletRequest request , String name ) { List < String > list = request. getParameterNames ( ) ; for ( String s : list ) { if ( name. equals ( s ) ) { return true ; } } return false ; }"
Method getMethod ( ) { if ( action!= null ) { return action. getMethod ( ) ; } return method ; }
"boolean checkProperty ( T prop , Object value ) { try { return prop. equals ( value ) ; } catch ( ClassCastException e ) { return false ; } catch ( Exception e ) { return false ; } }"
"int getMaxLength ( Validator validator ) { int maxLen = 0 ; for ( LengthValidator lengthValidator : validator. getLengthValidators ( ) ) { maxLen = Math. max ( maxLen, lengthValidator. getMaxLength ( ) ) ; } return maxLen ; }"
Long generateID ( ) { long id = generator. nextLong ( ) ; return new Long ( id ) ; }
boolean hasBinding ( String locationId ) { Iterator iter = bindings. iterator ( ) ; while ( iter. hasNext ( ) ) { Binding binding = ( Binding ) iter. next ( ) ; if ( binding. getLocation ( ). equals ( locationId ) ) { return true ; } } return false ; }
"M putIn ( final M map ) { if ( mapping == null ) { return map ; } for ( final Entry < String, Integer > entry : mapping. entrySet ( ) ) { final int col = entry. getValue ( ). intValue ( ) ; if ( col < values. length ) { map. put ( entry. getKey ( ), values [ col ] ) ; } } return map ; }"
"List < RoleRepresentation > getAvailableClientScopeMappings ( ) { auth. requireView ( ) ; Set < RoleModel > roles = scopedClient. getRoles ( ) ; return ScopeMappedResource. getAvailable ( scopeContainer, roles ) ; }"
void nextTrack ( boolean browsing ) { mIsBrowsing = browsing ; mNavigator. browseNextTrack ( ) ; if (! mIsBrowsing && isPlaying ( ) ) { play ( ) ; } }
"boolean gameOver ( ) { int h = 0, r = 0 ; for ( int i = 0 ; i < humanPit ( ) ; i ++ ) { h += getPit ( i ) ; r += getPit ( i + humanPit ( ) + 1 ) ; } return ( h == 0 || r == 0 ) ; }"
PerfRate cloneAndReset ( ) { PerfRate rate = ( PerfRate ) clone ( ) ; rate. reset ( ) ; return rate ; }
void resumeProcessing ( ) { lock. lock ( ) ; try { processing = false ; } finally { lock. unlock ( ) ; } }
"Lane getLane ( Point3f position ) { double [ ] point = new double [ 2 ] ; point [ 0 ] = position. x ; point [ 1 ] = position. y ; MaxHeap < Lane > nearestNeighbour = kdTree. findNearestNeighbors ( point, 1, distanceFunction ) ; return nearestNeighbour. getMax ( ) ; }"
"void writeErrorFormat ( String format , Object ... args ) { try { for ( int i = 0 ; i < args. length ; i ++ ) { Object o = args [ i ] ; writeError ( String. format ( Locale. US, format, o ) ) ; } } catch ( Exception e ) { e. printStackTrace ( ) ; } }"
"void updateCrc ( Buffer buffer , long byteCount ) { byte [ ] bytes = new byte [ byteCount ] ; buffer. get ( bytes, 0, byteCount ) ; crc. update ( bytes, 0, byteCount ) ; }"
int hashCode ( ) { int result = 23 ; result = 31 * result + ( int ) playerTurn ; result = 31 * result + ( int ) winner ; result = 31 * result + gameMode. hashCode ( ) ; result = 31 * result + Arrays. deepHashCode ( board ) ; result = 31 * result + LastMoveDetails. hashCode ( ) ; return result ; }
"void deleteAllPhoto ( String path ) { File file = new File ( path ) ; File file1 = new File ( ""C:|"" + path ) ; File file2 = new File ( ""C:|"" + path ) ; file1. delete ( ) ; file2. delete ( ) ; }"
COperandTree getEmptyOperand ( final INaviModule module ) { final COperandTree result = new COperandTree ( module ) ; result. setEmpty ( true ) ; return result ; }
TracerSupport getInstance ( ) { if ( instance == null ) instance = new TracerSupport ( ) ; return instance ; }
boolean isLastRow ( ) { if ( lastRow == null ) { return false ; } else { return lastRow ; } }
"String encodeZipFileName ( String fileName ) { String result = fileName. replace ( '|', '/' ) ; result = result. replace ( '/', '|' ) ; result = result. replace ( '|', '/' ) ; result = result. replace ( '/', '|' ) ; result = result. replace ( '|', '/' ) ; return result ; }"
"void opEqualsTest ( ) { IntStatistics h = new IntStatistics ( 10 ) ; h. addValue ( 3 ) ; h. addValue ( 3 ) ; h. addValue ( 3 ) ; h. addValue ( 3 ) ; Assert. assertTrue ( h. estimateSelectivity ( Op. EQUALS, 3 ) > 0.9 ) ; Assert. assertTrue ( h. estimateSelectivity ( Op. EQUALS, 8 ) < 0.001 ) ; }"
"void addRect ( float x , float y , float width , float height ) { if ( path == null ) { path = new Path ( ) ; } path. moveTo ( x, y ) ; path. lineTo ( x + width, y + height ) ; path. lineTo ( x + width, y + height ) ; path. close ( ) ; }"
"Date convertStringToDate ( String aMask , String strDate ) { SimpleDateFormat df = null ; Date date = null ; df = new SimpleDateFormat ( aMask ) ; try { date = df. parse ( strDate ) ; } catch ( ParseException pe ) { throw new ParseException ( pe. getMessage ( ), pe. getErrorOffset ( ) ) ; } return ( date ) ; }"
void postRound ( ) { if ( roundNumber == 0 ) { return ; } else { for ( Card c : cards ) { if (! c. isExpired ( ) ) { cardDeck. add ( c ) ; } roundNumber ++ ; } } }
AttributeField getAttribute ( String attribute_name ) { for ( int i = 0 ; i < av. size ( ) ; i ++ ) { AttributeField af = ( AttributeField ) av. elementAt ( i ) ; if ( af. getAttributeName ( ). equals ( attribute_name ) ) return af ; } return null ; }
"Schema createSchema ( InputStream is ) { SchemaFactory factory = SchemaFactory. newInstance ( ) ; SchemaBuilder builder = new SchemaBuilder ( ) ; builder. addSource ( is ) ; Schema schema = factory. build ( ) ; schema. setSchemaURI ( ""http://www.w3.org/2001/XMLSchema"" ) ; return schema ; }"
void removeLocalInstance ( Account account ) { if ( localStore == null ) { localStore = new Store ( ) ; } synchronized ( localStore ) { localStore. remove ( account ) ; } }
"Axis generateAxisFromRange ( float start , float stop , float step ) { float value = stop - start ; Axis axis = new Axis ( value ) ; while ( value > stop ) { axis. addValue ( value / step ) ; value -= step ; } return axis ; }"
"int getIndexForRelationChild ( Relation parent , Relation child ) { if ( parent == null ) return - 1 ; int index = 0 ; for ( RelationMember member : parent. getMembers ( ) ) { if ( member. isRelation ( child ) ) { return index ; } index ++ ; } for ( RelationMember member : parent. getMembers ( ) ) { if ( member. isRelation ( child ) ) { return index ; } } return - 1 ; }"
"XQueryService storeXMLStringAndGetQueryService ( String documentName , String content ) { XQueryService xqueryService = null ; try { xqueryService = XQueryServiceFactory. newInstance ( ). newXQueryService ( ) ; xqueryService. storeXMLStringAndGetQueryService ( documentName, content ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } return xqueryService ; }"
List < String > getStringListFromJsonArray ( JSONArray jArray ) { List < String > returnList = new ArrayList < String > ( ) ; for ( int i = 0 ; i < jArray. length ( ) ; i ++ ) { try { returnList. add ( getStringFromJsonItem ( jArray. get ( i ) ) ) ; } catch ( JSONException e ) { returnList. add ( null ) ; } } return returnList ; }
"boolean startsWith ( String value , String startsWith ) { Preconditions. checkNotNull ( value ) ; Preconditions. checkNotNull ( startsWith ) ; return value. regionMatches ( true, 0, startsWith, 0, startsWith. length ( ) ) ; }"
"void assertCollectionContentsEquals ( Collection expected , Collection actual ) { assertEquals ( expected. size ( ), actual. size ( ) ) ; Iterator i = expected. iterator ( ) ; while ( i. hasNext ( ) ) { assertEquals ( i. next ( ), actual. get ( i ) ) ; } }"
"void addDoc ( final byte [ ] xqdoc , final FElem parent ) { final byte [ ] doc = new byte [ xqdoc. length ] ; System. arraycopy ( xqdoc, 0, doc, 0, doc. length ) ; parent. setDoc ( doc ) ; }"
"void currentState ( long state , Model currentModel ) { for ( int i = 0 ; i < _states. length ; i ++ ) { if ( _states [ i ] == state ) { _currentStates [ i ] = currentModel ; break ; } } }"
"int [ ] rallongerTableauDeUnElement ( int [ ] tab , int a ) { int [ ] tableau = null ; if ( tab == null ) { tableau = tab ; } else { tableau = new int [ tab. length + 1 ] ; for ( int i = 0 ; i < tab. length ; i ++ ) { tableau [ i ] = tab [ i ] ; } tableau [ tab. length ] = a ; } return tableau ; }"
"String toXml ( Instance instance ) { TransformerProperties transformerProperties = new TransformerProperties ( ) ; transformerProperties. addOutputProperty ( OutputKeys. INDENT, ""yes"" ) ; return toXml ( instance, transformerProperties ) ; }"
"void listDict ( PdfDictionary dictionary ) { out. println ( ""<<"" ) ; PdfObject value ; for ( PdfName key : dictionary. getKeys ( ) ) { value = dictionary. get ( key ) ; out. print ( key. toString ( ) ) ; out. print ('' ) ; listAnyObject ( value ) ; } out. println ( "">>"" ) ; }"
void updateComponentTreeUI ( Component c ) { if ( c instanceof Container ) { Component [ ] components = ( ( Container ) c ). getComponents ( ) ; for ( int i = 0 ; i < components. length ; i ++ ) components [ i ]. updateUI ( ) ; } }
"void logAdminUI ( ) { String httpPort = environment. resolvePlaceholders ( ADMIN_PORT ) ; Assert. notNull ( httpPort, ""Admin server port is not set."" ) ; logger. info ( ""Admin web UI: "" + String. format ( ""http://%s:%s/%s"", RuntimeUtils. getHost ( ), httpPort, ConfigLocations. XD_ADMIN_UI_BASE_PATH ) ) ; }"
SwingComponentDecorationFactory getDefault ( ) { if ( defaultFactory == null ) { defaultFactory = new SwingComponentDecorationFactory ( ) ; } return defaultFactory ; }
AvlNode < AnyType > rotateWithLeftChild ( AvlNode < AnyType > k2 ) { k2. left = k2. right ; k2. right = k1. left ; k1. left = k2 ; return k1 ; }
"void flushAndCloseOutStream ( OutputStream aStream ) { try { Flushables. flush ( aStream, false ) ; Closeables. close ( aStream, false ) ; } catch ( final IOException e ) { LOG. debug ( ""Unable to flush and close output stream."", e ) ; } }"
void deleteAll ( ) { if ( _root == null ) return ; ZNode [ ] children = _root. getChildren ( ) ; for ( int i = 0 ; i < children. length ; i ++ ) { delete ( children [ i ] ) ; } }
void removeDisallowClassPattern ( String classNamePattern ) { synchronized ( lock ) { if ( disallowClassPatterns!= null ) disallowClassPatterns. remove ( classNamePattern ) ; clearClassCache ( ) ; } }
"double getLinearWorldSpaceValueAtXGivenActualValue ( final double actualValue , boolean reverseTransformedDataOrder ) { double offset = ( reverseTransformedDataOrder )? - 1 : 1 ; return getLinearWorldSpaceValueAtXGivenActualValue ( actualValue, offset ) ; }"
"byte [ ] hexDecode ( String string ) { int len = string. length ( ) ; byte [ ] data = new byte [ len / 2 ] ; for ( int i = 0 ; i < len ; i += 2 ) { data [ i / 2 ] = ( byte ) ( ( Character. digit ( string. charAt ( i ), 16 ) << 4 ) + Character. digit ( string. charAt ( i + 1 ), 16 ) ) ; } return data ; }"
"int [ ] initializeRandomInputArray ( ) { int length = StdRandom. uniform ( 0, 100 ) ; int [ ] randomInputArray = new int [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { randomInputArray [ i ] = StdRandom. uniform ( 0, 100 ) ; } return randomInputArray ; }"
Set < ConditionsTreeNode > getLeafSet ( ) { Set < ConditionsTreeNode > leafSet = new HashSet < ConditionsTreeNode > ( ) ; for ( ConditionsTreeNode child : children ) { if ( child. isLeaf ( ) ) { leafSet. add ( child ) ; } } return leafSet ; }
boolean esPantallaRevanchaDosOpciones ( BufferedImage imagen ) { VerificacionRegiones puntos = new VerificacionRegiones ( ) ; boolean valido_revancha_3_op = puntos. pc_revancha_3_op. validar ( imagen ) ; return valido_revancha_3_op ; }
"boolean sphereInFrustumWithoutNearFar ( float x , float y , float z , float radius ) { for ( int i = 2 ; i < 6 ; i ++ ) if ( ( planes [ i ]. normal. x * x + planes [ i ]. normal. y * y + planes [ i ]. normal. z * z ) < ( - radius - planes [ i ]. d ) ) return false ; return true ; }"
"String formatImmediate ( long immediate ) { if ( isReal ( immediate ) && immediate > 0 ) { return String. format ( ""%d (%d)"", immediate, immediate ) ; } else { return String. format ( ""%d (%d)"", immediate, immediate ) ; } }"
Element nextSiblingElement ( Node n ) { while ( n!= null && n. getNodeType ( ) == Node. ELEMENT_NODE ) { n = n. getNextSibling ( ) ; } return ( Element ) n ; }
void setOrigShort ( boolean v ) { origShort = v ; origShortRes = withoutCustomHandle && origShort ; }
"boolean isSimpleMap ( Element inputElement ) { if ( inputElement instanceof Element ) { Element element = ( Element ) inputElement ; for ( Element child : element. getChildren ( ) ) { if ( child. getTagName ( ). equals ( ""map"" ) ) { return true ; } } } return false ; }"
"void addDefaultProfile ( SpringApplication app ) { Map < String, Object > defProperties = new HashMap < > ( ) ; defProperties. put ( SPRING_PROFILE_DEFAULT, Constants. SPRING_PROFILE_DEVELOPMENT ) ; app. setDefaultProperties ( defProperties ) ; }"
"void removeDisconnectListener ( ForceDisconnectListener listener ) { if ( listener == null ) { Trace. log ( Trace. ERROR, ""Parameter 'listener' is null."" ) ; throw new NullPointerException ( ""listener"" ) ; } disconnectEventSupport_. removeDisconnectListener ( listener ) ; }"
int getMaxCount ( ) { int max_count = 0 ; for ( final Cell cell : cells ) { if ( cell. getMaxCount ( ) > max_count ) max_count = cell. getMaxCount ( ) ; } return max_count ; }
"CarbonDictionaryColumnMetaChunk getChunkMetaObjectForLastSegmentEntry ( ) { CarbonDictionaryColumnMetaChunk dictionaryColumnMetaObject = null ; try { dictionaryColumnMetaObject = dictionaryColumnMetaObjectForLastSegmentEntry. read ( ) ; } catch ( Exception e ) { LOGGER. error ( ""Could not read the dictionary chunk metadata thrift object for last entry"", e ) ; } return dictionaryColumnMetaObject ; }"
void readObject ( java . io . ObjectInputStream s ) { s. defaultReadObject ( ) ; size = s. readInt ( ) ; }
String getRequestId ( ) { if ( responseMetadata == null ) { return null ; } return responseMetadata. getRequestId ( ) ; }
"String getArrayAsString ( String [ ] a ) { if ( a == null ) { return """" ; } StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < a. length ; i ++ ) { if ( i > 0 ) { sb. append ( "","" ) ; } sb. append ( a [ i ] ) ; } return sb. toString ( ) ; }"
"AbstractNode createHigherLevels ( List boundablesOfALevel , int level ) { List < AbstractNode > levels = boundablesOfALevel. subList ( 0, level ) ; List < AbstractNode > higherLevels = new ArrayList < AbstractNode > ( ) ; for ( Iterator iter = levels. iterator ( ) ; iter. hasNext ( ) ; ) { AbstractNode higher = ( AbstractNode ) iter. next ( ) ; higherLevels. add ( higher ) ; } return higherLevels. get ( 0 ) ; }"
"void testAcceptsFile ( ) { String fileName = ""test/file.txt"" ; IBasicFile testFile = new DummyBasicFile ( ) ; IBasicFileFilter filter = new GenericBasicFileFilter ( ) ; Assert. assertTrue ( filter. accept ( testFile ) ) ; }"
"String getFieldNameFromURI ( String uri ) { try { String [ ] parts = uri. split ( ""/"" ) ; return parts [ parts. length - 1 ] ; } catch ( IndexOutOfBoundsException e ) { return """" ; } }"
"Data getData ( final Face face , final Name name ) { Map < String, byte [ ] > params = new HashMap < > ( ) ; params. put ( ""name"", name ) ; return getData ( face, params ) ; }"
AbstractWebAuthorizationHelper getWebAuthorizationHelper ( SecurityContext sc ) { if ( authHelperClass == null ) { authHelperClass = SecurityActions. getWebAuthorizationHelperClass ( ) ; } AbstractWebAuthorizationHelper awh = ( AbstractWebAuthorizationHelper ) authHelperClass. newInstance ( ) ; awh. setSecurityContext ( sc ) ; return awh ; }
"void addDataToModel ( ModelMap model ) { SearchData dataForSearch = new SearchData ( ) ; dataForSearch. setSearchType ( ""natural"" ) ; dataForSearch. setSortField ( ""date"" ) ; dataForSearch. setLimit ( 10 ) ; dataForSearch. setCurrentPage ( 1 ) ; model. put ( ""advancedSearchData"", dataForSearch ) ; }"
"void setAppUserNick ( String username , TextView textView ) { if ( textView!= null ) { User user = getAppUserInfo ( username ) ; Log. e ( TAG, ""user="" + user ) ; if ( user!= null && user. getMUserNick ( )!= null ) { textView. setText ( user. getMUserNick ( ) ) ; } else { textView. setText ( username ) ; } } }"
"String getMimeType ( Context context , File file ) { String mimeType = MIME_TYPES. get ( context. getContentResolver ( ) ) ; if ( mimeType == null && file!= null ) { mimeType = MimeTypeMap. getSingleton ( ). getMimeTypeFromExtension ( file. getName ( ) ) ; } return mimeType ; }"
"void setPoint ( int index , Point p ) { int pointIndex = ( index < 0 )? 0 : index ; points [ pointIndex * 2 ] = p. x ; points [ pointIndex * 2 + 1 ] = p. y ; }"
"Response getHttpResultSet ( @ QueryParam ( ""sessionid"" ) UUID publicId , @ PathParam ( ""queryHandle"" ) String queryHandle ) { SessionHandle sessionHandle = SessionHandle. fromString ( queryHandle ) ; ResultSet rs = sessionHandle. getResultSet ( publicId, sessionHandle ) ; if ( rs!= null ) return Response. ok ( rs ). build ( ) ; else return Response. status ( Status. NOT_FOUND ). build ( ) ; }"
"String getAsciiString ( final byte [ ] data , int offset , int length ) { if ( data == null ) { throw new IllegalArgumentException ( ""Parameter may not be null"" ) ; } try { return new String ( data, offset, length, HTTP. US_ASCII ) ; } catch ( UnsupportedEncodingException e ) { throw new HttpClientError ( ""HttpClient requires ASCII support"" ) ; } }"
"String [ ] addToArray ( String [ ] array , String element ) { String [ ] array2 = new String [ array. length + 1 ] ; for ( int i = 0 ; i < array. length ; i ++ ) { array2 [ i ] = array [ i ] ; } array2 [ array. length ] = element ; return array2 ; }"
boolean getExtensionBit ( ) { if ( ( extBits & 0x01 ) == 0 ) { return true ; } else { return false ; } }
"long dayDiff ( long time1 , long time2 ) { long diff = time1 - time2 ; return ( diff < 0 )? - diff : diff ; }"
boolean addVarArgs ( JSType type ) { if ( type. isVarArgs ( ) ) { return false ; } else if ( type. isVarArgs ( ) ) { varArgs. add ( type ) ; return true ; } else { return false ; } }
GristType getSecondaryGrist ( GristType primary ) { if ( GristType. B ) { return GristType. B ; } else if ( GristType. C ) { return GristType. C ; } else if ( GristType. A ) { return GristType. A ; } else if ( GristType. B ) { return GristType. B ; } else { return GristType. Unknown ; } }
"Server createVirtPlatformHostWithGuest ( User user ) { Server s = createTestSystem ( user ) ; user. addPermanentRole ( RoleFactory. ORG_ADMIN ) ; UserTestUtils. addGuestSystem ( user, 1 ) ; ServerTestUtils. addVirtualizationPlatform ( user, 1 ) ; SystemTestUtils. addGuestSystem ( user, 1 ) ; return s ; }"
GridColumnData createGridColumnData ( org . topcased . gpm . business . serialization . data . GridColumn pSerializationDataObject ) { GridColumnData lGridColumnData = new GridColumnData ( ) ; lGridColumnData. setName ( pSerializationDataObject. getName ( ) ) ; lGridColumnData. setEditorType ( pSerializationDataObject. getEditorType ( ) ) ; return lGridColumnData ; }
"int updatePrior ( int snapshot , int prior ) { int newSnapshot = snapshot ; if ( ( prior < 0 ) && ( newSnapshot > 0 ) ) { newSnapshot = - 1 ; } return newSnapshot ; }"
"void testMessageRecipientInvalid ( ) { prepareHttpRequest ( ""message/SAMLResponseInvalid.xml"", ""POST"", ""http://localhost:8081/spring-security-saml2-webapp/saml/SSO"", ""text/html"" ) ; replayMock ( ) ; processor. retrieveMessage ( samlContext ) ; verifyMock ( ) ; }"
"void addSpecialCorpora ( ArrayList < Corpus > corpora , Sources sources ) { for ( Corpus corpus : corpora ) { if (! sources. isSimpleSource ( corpus ) ) { corpora. add ( corpus ) ; } } for ( Corpus source : sources. getAllSources ( ) ) { addSpecialCorpora ( corpora, source ) ; } }"
"IALG getInstance ( final String algorithm ) { if ( algorithm == null ) { throw new IllegalArgumentException ( ""algorithm == null"" ) ; } try { return new IALG ( algorithm, null ) ; } catch ( NoSuchAlgorithmException e ) { throw new NoSuchAlgorithmException ( ) ; } }"
"String getLogFormatString ( LogLevel logLevel , String tag , String message ) { SimpleDateFormat formatter = new SimpleDateFormat ( ""hh:mm:ss"", Locale. getDefault ( ) ) ; return String. format ( ""%s %c/%s: %s "", formatter. format ( new Date ( ) ), logLevel. getPriorityLetter ( ), tag, message ) ; }"
"void cleanRepository ( final File mavenRepo , final String testId ) { final File localRepo = new File ( mavenRepo, ""master"" ) ; if ( localRepo. exists ( ) && localRepo. getName ( ). contains ( testId ) ) { localRepo. delete ( ) ; } }"
"StatusWeatherData currentWeatherAtStation ( int stationId ) { try { return ioOperations. currentWeatherAtStation ( stationId ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return null ; } }"
java . util . List < ReservedCacheNodesOffering > getReservedCacheNodesOfferings ( ) { if ( reservedCacheNodesOfferings == null ) { reservedCacheNodesOfferings = new com. amazonaws. internal. ListWithAutoConstructFlag < ReservedCacheNodesOffering > ( ) ; reservedCacheNodesOfferings. setAutoConstruct ( true ) ; } return reservedCacheNodesOfferings ; }
Script createOutputScript ( Address to ) { checkArgument ( to!= null ) ; return new ScriptBuilder ( ). data ( to. toByteArray ( ) ). build ( ) ; }
"String downloadJars ( ModelMap model , Model m ) { String path = model. get ( ""path"" ) ; File f = new File ( path ) ; if ( f. exists ( ) ) { return downloadFile ( f, m ) ; } return null ; }"
"void signBlobAndQueueRequest ( final StorageCredentials creds , final java . net . HttpURLConnection request , final long contentLength , OperationContext opContext ) { if ( creds. getClass ( ). equals ( StorageCredentialsAccountAndKey. class ) ) { opContext = opContext == null? new OperationContext ( ) : opContext ; BaseRequest. signRequestForBlobAndQueueSharedKey ( request, ( ( StorageCredentialsAccountAndKey ) creds ). getCredentials ( ), contentLength, opContext ) ; } }"
"void removeListener ( SerialDataListener ... listener ) { if ( listener. length < 1 ) { throw new IllegalArgumentException ( ""Listener array must be at least 1"" ) ; } listeners. remove ( listener ) ; }"
"void addNewTask ( Task task ) { if ( task. isScheduled ( ) ) { throw new IllegalStateException ( ""Task "" + task. getId ( ) + "" is already scheduled."" ) ; } else { if ( priorityQueue. offerFirst ( task ) ) { priorityQueue. pollLast ( ) ; } else { queue. addLast ( task ) ; } } }"
void setEventHandler ( DdeServiceEventHandler eventHandler ) { if (! _ddeServiceHelper. isConnected ( ) ) { _ddeServiceHelper. setEventHandler ( eventHandler ) ; } else { _ddeServiceHelper. setEventHandler ( eventHandler ) ; } }
void setMaxOptRMSD ( Double param ) { if ( param <= 0.0 ) { maxOptRMSD = 99 ; return ; } if ( param > 100.0 ) { maxOptRMSD = 100.0 ; return ; } if ( param < 1000.0 ) { maxOptRMSD = 1000.0 ; return ; } if ( param > 99.0 ) { maxOptRMSD = 99.0 ; return ; } setOptRMSD ( param ) ; }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
int getRowCount ( ) { try { return rs. getRowCount ( ) ; } catch ( SQLException e ) { return 0 ; } }
double getModelLossMoment ( double frequency ) { doubleLossMoment = 0 ; for ( int gearIndex = 0 ; gearIndex < gearModels. length ; gearIndex ++ ) {LossMoment += gearModels [ gearIndex ]. getModelLossMoment ( frequency ) ; } returnLossMoment ; }
"void setUsersOrganizationalUnit ( CmsObject cms , String ouFqn , String userName ) { CmsOrganizationalUnit orgUnit = readOrganizationalUnit ( cms, ouFqn ) ; m_securityManager. setUsers ( cms. getRequestContext ( ), orgUnit, userName ) ; }"
"ParallelLoopResult < R > forLoop ( List < T > source , final LoopBody < T , R > loopBody ) { checkNotNull ( source, ""Source list cannot be null"" ) ; checkNotNull ( loopBody, ""Loop body cannot be null"" ) ; return forLoop ( source, loopBody ) ; }"
File getCanonicalRoot ( String ... names ) { if ( names == null || names. length == 0 ) { return null ; } return getCanonicalRoot ( new File ( names [ 0 ] ) ) ; }
"void setShort ( final int offset , final int shortval ) { buf. put ( offset, ( byte ) ( shortval & 0xFF ) ) ; buf. put ( offset + 1, ( byte ) ( ( shortval >> 8 ) & 0xFF ) ) ; }"
boolean isBase64 ( byte octect ) { if ( octect == 0 ) return false ; return isBase64 ( new byte [ ] { octect } ) ; }
"void displayContent ( String repository , boolean changeHistory ) { IWorkspace root = ResourcesPlugin. getWorkspace ( ). getRoot ( ) ; displayContent ( repository, root, changeHistory ) ; Iterator < IWorkspace > it = root. getChildren ( ). iterator ( ) ; while ( it. hasNext ( ) ) { displayContent ( ( IWorkspace ) it. next ( ) ) ; } }"
ActiveMQBuffer getWriteBodyBuffer ( ) { if ( writeBodyBuffer == null ) { writeBodyBuffer = message. getBodyBuffer ( ) ; } return writeBodyBuffer ; }
BufferedImage getImage ( boolean disabled ) { if ( image == null ) { image = Activator. getImageDescriptor ( imageId ). createImage ( disabled ) ; } return image ; }
"String getRecoveryManagerTag ( ) { if ( recoveryManagerTag!= null ) { return recoveryManagerTag ; } else { return ""unknown"" ; } }"
List < String > getValues ( ) { List < String > result = new ArrayList < String > ( ) ; for ( DataAttribute attribute : dataAttributes ) { String value = attribute. getValue ( ) ; if ( value!= null ) result. add ( value ) ; } return result ; }
"List < Insurance > sortInsurancesByRiskReduction ( ) { Collections. sort ( insurances, new InsuranceComparator ( ) ) ; return insurances ; }"
"void setCharset ( String charset ) { if ( charset == null ) { _logger. error ( ""Parameter 'charset' is null."" ) ; } else { _logger. error ( ""Parameter 'charset' is null."" ) ; } _charset = charset ; }"
"Matcher getMatcher ( @ Nonnull @ RegEx final String sRegEx , @ Nonnull final String sValue ) { ValueEnforcer. notNull ( sValue, ""Value"" ) ; return RegExCache. getPattern ( sRegEx ). matcher ( sValue ) ; }"
Double [ ] meanAvrPrec ( List < Double [ ] > apList ) { Double [ ] sum = new Double [ apList. size ( ) ] ; for ( int i = 0 ; i < apList. size ( ) ; i ++ ) { sum [ i ] = apList. get ( i ). length ; } return sum ; }
void testNextFloat ( ) { Random r = new Random ( ) ; int f = r. nextFloat ( ) ; int i = 0 ; while ( i < NCALLS && r. nextFloat ( ) == f ) ++ i ; assertTrue ( i < NCALLS ) ; }
void addComponents ( Collection < Component > newComponents ) { if ( newComponents == null ) { return ; } components. addAll ( newComponents ) ; }
"boolean configureExpireAfterAccess ( ) { if ( config. getExpireAfterAccess ( ). isPresent ( ) ) { caffeine. expireAfterAccess ( config. getExpireAfterAccess ( ). getAsLong ( ), TimeUnit. NANOSECONDS ) ; } return config. getExpireAfterAccess ( ). isPresent ( ) ; }"
"void whenAddingAVariationCountIsIncreasedByOne ( ) { setVariationCount ( 1 ) ; SQLInjectionAnalyzerEntry entry = new SQLInjectionAnalyzerEntry ( ""select sysdate from dual"", 1 ) ; assertEquals ( 1, entry. getVariationCount ( ) ) ; }"
int getHitType1 ( ) { int v = 0 ; for ( int i = 0 ; i < hitTypes. length ; i ++ ) { if ( hitTypes [ i ] == hitType1 ) return v ; } return - 1 ; }
int getPageNumber ( ) { if ( pageSize <= 0 ) { return 0 ; } int pageNum = ( currentPage - 1 ) * pageSize ; return pageNum ; }
HashSet < Node > unvisitedConnectingNodes ( ) { HashSet < Node > nodes = new HashSet < Node > ( ) ; Collection < Node > allNodes = connectingNodes. values ( ) ; for ( Node n : allNodes ) { if (! n. getVisited ( ) ) { nodes. add ( n ) ; } } return nodes ; }
"Integer countModules ( String batchClassIdentifier ) { LOGGER. info ( ""Fetching modules for batch class '"" + batchClassIdentifier + ""'"" ) ; return batchClassDao. countModules ( batchClassIdentifier ) ; }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
DispatcherOutputStream getDestination ( HttpServletResponse response ) { out = new DispatcherOutputStream ( response. getOutputStream ( ) ) ; return out ; }
void validateResults ( Path ... directories ) { final List < Path > resultFiles = Arrays. asList ( directories ) ; validateResults ( resultFiles ) ; }
"void testParseArgs4 ( ) { String [ ] args = { ""-d"", ""Datenbank"", ""-h"", ""127.0.0.1"", ""-p"", ""127.0.1.1"" } ; assertEquals ( true, Main. parseArgs ( args ) ) ; }"
List < Key > orderBy ( List < CujoProperty > properties ) { List < Key > result = new ArrayList < Key > ( ) ; for ( CujoProperty p : properties ) { result. add ( createOrderBy ( p ) ) ; } return result ; }
"BloomFilter createFromMeta ( DataInput meta , HFile . Reader reader ) { switch ( meta. getVersion ( ) ) { case HFile. VERSION_1 : return new BloomFilterV1 ( reader ) ; case HFile. VERSION_2 : return new BloomFilterV2 ( reader ) ; case HFile. VERSION_3 : return new BloomFilter3 ( reader ) ; default : throw new IllegalArgumentException ( ) ; } }"
boolean isChordal ( ) { for ( Vertex v : nodes. values ( ) ) { if ( v. weight ( ) > 1 ) return false ; } return true ; }
GlyphTable getGlyph ( ) { GlyphTable g = ( GlyphTable ) tables. get ( GlyphTable. TAG ) ; if ( g!= null &&! g. getInitialized ( ) ) { readTable ( g ) ; } return g ; }
"Object doSwitch ( int classifierID , EObject theEObject ) { switch ( classifierID ) { case MyPackagePackage. MY_CLASS : { MyClass myClass = ( MyClass ) theEObject ; Object result = caseMyClass ( myClass ) ; if ( result == null ) result = defaultCase ( theEObject ) ; return result ; } default : return defaultCase ( theEObject ) ; } }"
"PdfTemplate createTemplateWithBarcode ( PdfContentByte cb , Color barColor , Color textColor ) { PdfTemplate template = new PdfTemplate ( cb ) ; if ( barColor!= null ) { template. setBarcodeColor ( barColor ) ; } if ( textColor!= null ) { template. setTextColor ( textColor ) ; } return template ; }"
Promise < Void > waitBlocked ( Promise < ? > ... waitFor ) { LinkedList < Promise <? >> blocked = new LinkedList < > ( ) ; for ( Promise <? > p : waitFor ) { blocked. add ( p ) ; } return waitForBlocked ( blocked ) ; }
byte [ ] toByteArray ( ) { byte [ ] out = new byte [ 8 ] ; out [ 0 ] = ( byte ) ( sValue & 0xFF ) ; out [ 1 ] = ( byte ) ( sEventTime >> 8 ) ; out [ 2 ] = ( byte ) ( sValue & 0xFF ) ; out [ 3 ] = ( byte ) ( sSensorId >> 8 ) ; out [ 4 ] = ( byte ) ( sSensorId & 0xFF ) ; return out ; }
LockType valueOf ( int mode ) { switch ( mode ) { case READ : return LockType. READ ; case WRITE : return LockType. WRITE ; case READ_ONLY : return LockType. READ_ONLY ; default : return LockType. NONE ; } }
"Element createEdge ( final Element parentElement , final String sourceId , final String targetId , final String sourcePort , final String targetPort ) { final Element edgeElt = appendChild ( parentElement, ""edge"" ) ; edgeElt. setAttribute ( ""source"", sourcePort ) ; edgeElt. setAttribute ( ""target"", targetPort ) ; edgeElt. setAttribute ( ""sourcePort"", sourcePort ) ; edgeElt. setAttribute ( ""targetPort"", targetPort ) ; return edgeElt ; }"
"ComponentName getComponentName ( QueryString q ) { String moduleName = getComponentName ( q. getPackage ( ) ) ; return new ComponentName ( moduleName, q. getName ( ) ) ; }"
"void addMapping ( String path , LockService lockService ) { synchronized ( lockServices ) { List < String > paths = lockServices. get ( path ) ; if ( paths == null ) { paths = new ArrayList < String > ( ) ; lockServices. put ( path, paths ) ; } paths. add ( path ) ; } }"
"MotorPort getInstance ( int id ) { MotorPort result = instances. get ( id ) ; if ( result == null ) { result = new MotorPort ( id ) ; instances. put ( id, result ) ; } return result ; }"
"int hammingDistance ( String a , String b ) { int h = 0 ; for ( int i = 0 ; i < a. length ( ) ; i ++ ) { for ( int j = 0 ; j < b. length ( ) ; j ++ ) { if ( a. charAt ( i )!= b. charAt ( j ) ) { h += Math. abs ( a. charAt ( i ) - b. charAt ( j ) ) ; } } } return h ; }"
"void saveAsJSON ( List < Annonce > annonces , String jsonFileName ) { JSONObject annoncesJSON = new JSONObject ( ) ; annoncesJSON. put ( ""annonces"", annonces ) ; try { jsonFile. write ( jsonFileName. getBytes ( ) ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } }"
"int diffQuarter ( Date d1 , Date d2 ) { Calendar calendar = getCalendarOfStartingTime ( ) ; return ( diffSecond ( calendar. getTime ( ), d2 ) + 3000 * 60 * 60 * 24 * 7 ) / ( 60 ) - ( diffSecond ( calendar. getTime ( ), d1 ) + 3000 * 60 * 60 * 24 * 7 ) / ( 60 ) ; }"
"long toLong ( String str , long defval ) { try { return Long. valueOf ( str ) ; } catch ( Throwable e ) { return defval ; } }"
ConfigWriter getInstance ( ) { if ( instance == null ) { instance = new ConfigWriter ( ) ; } return instance ; }
boolean isCompleted ( ) { Iterator < Polygon > iter = polygons. iterator ( ) ; while ( iter. hasNext ( ) ) { if (! iter. next ( ). isCompleted ( ) ) { return false ; } } return true ; }
"ScriptEngine createEngine ( ) { final Bindings bindings = new Bindings ( ) ; return new ScriptEngine ( engines, bindings ) ; }"
void addRecordError ( String message ) { if ( recordErrors == null ) { recordErrors = new Vector ( ) ; } recordErrors. addElement ( message ) ; }
"List < T > mergeList ( List < T > left , List < T > right ) { List < T > result = new ArrayList < T > ( left. size ( ) + right. size ( ) ) ; for ( int i = 0 ; i < left. size ( ) ; i ++ ) { result. add ( left. get ( i ) ) ; } return result ; }"
void decrementQuantityOfProduct ( int productId ) { if ( productId >= 1 ) { quantityOfProduct. decrementQuantity ( productId ) ; } else { quantityOfProduct. decrementQuantity ( ) ; } }
"boolean isDragOk ( final Logger out , final DropTargetDragEvent evt ) { boolean ok = false ; final DataFlavor [ ] flavors = evt. getCurrentDataFlavors ( ) ; int i = 0 ; while (! ok && i < flavors. length ) { if ( flavors [ i ]. equals ( DataFlavor. javaFileListFlavor ) ) ok = true ; i ++ ; } return ok ; }"
void computeOutput ( int i ) { for ( int j = 0 ; j < neurons. length ; j ++ ) neurons [ j ]. computeOutput ( i ) ; }
double getDouble ( ) { long bits = readLong ( ) ; return ( double ) bits ^ ( ( double ) ( bits >> 32 ) ) ; }
"Map < String , Collection < String >> readHeaders ( final ODataBatchLineIterator iterator ) { Map < String, Collection < String >> headers = new HashMap < > ( ) ; while ( iterator. hasNext ( ) ) { final String key = iterator. next ( ). getName ( ) ; final Collection < String > values = readHeaderValues ( key, iterator ) ; headers. put ( key, values ) ; } return headers ; }"
"long [ ] ensureCapacity ( int additionalCapacity ) { int sizeNeeded = size + additionalCapacity ; if ( sizeNeeded >= items. length ) resize ( Math. max ( 8, sizeNeeded ) ) ; return items ; }"
int setValues ( Values v ) { int count = 0 ; for ( int i = 0 ; i < v. size ( ) ; i ++ ) { setValues ( v. get ( i ) ) ; count ++ ; } return count ; }
RegisteredSnapshotCategories sharedInstance ( ) { if ( instance == null ) { instance = new RegisteredSnapshotCategories ( ) ; } return instance ; }
"String getString ( String param ) { try { return ( String ) map. get ( param ) ; } catch ( Exception e ) { LOGGER. log ( Level. FINEST, ""Returning null. Reason: "" + param + "" value is not a String"" ) ; return null ; } }"
void auditTrace ( Object msg ) { defaultLog. trace ( msg ) ; if ( synCtx. getServiceLog ( )!= null ) { synCtx. getServiceLog ( ). trace ( msg ) ; } if ( traceOn ) { traceLog. trace ( msg ) ; } }
"int scoreByFormat ( Option < FormatOption > formatOption , MediaType requiredMediaType ) { if ( formatOption. isDefined ( ) && formatOption. get ( ). isJson ( ) ) { MediaType formatMediaType = formatOption. get ( ). mediaType ( ) ; if ( formatMediaType!= null ) { return formatMediaType. compare ( requiredMediaType ) ; } } return 0 ; }"
"URL getBootURL ( String args [ ] ) { String bootURL = ""${"" + SGW_HOME + ""}"" + BOOT_URL ; return getURL ( bootURL ) ; }"
void fireEvent ( EsculapaCallEvent callEvent ) { callEvent. setCallListener ( activeCallListener ) ; for ( CallListener listener : listeners ) { listener. callEventOccurred ( callEvent ) ; } }
"void GetRandomData ( APDU apdu ) { byte [ ] buf = apdu. getData ( ) ; apdu. GetRandomData ( buf, 0, buf. length ) ; }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
Pokeball getItemBall ( double encounterProbability ) { for ( Pokeball pokeball : itemBallCatchers ) { if ( pokeball. getEncounterProbability ( ) >= encounterProbability ) { return pokeball ; } } return null ; }
"void setInputFromSavedData ( ) { compressedDirectBufLen = Math. min ( userBufLen, directBufferSize ) ; compressedDirectBuf. rewind ( ) ; ( ( ByteBuffer ) compressedDirectBuf ). put ( userBuf, userBufOff, compressedDirectBufLen ) ; userBufOff += compressedDirectBufLen ; userBufLen -= compressedDirectBufLen ; }"
"int getPieceType ( int color , int row , int col ) { for ( int i = 0 ; i < 4 ; i ++ ) { if ( board [ color ] [ row ] [ col ] ) return PieceType. WHITE ; else if ( board [ color ] [ row ] [ col ] ) return PieceType. BLACK ; else if ( board [ color ] [ row ] [ col ] ) return PieceType. WHITE ; } return PieceType. NONE ; }"
"boolean isSimpleStyle ( ) { boolean isSimpleStyle = false ; int dotPos = name. lastIndexOf ( '-' ) ; if ( dotPos == - 1 ) { isSimpleStyle = true ; } else { isSimpleStyle = false ; } name = name. substring ( 0, dotPos ) ; if ( isSimpleStyle ) { isSimpleStyle = true ; } return isSimpleStyle ; }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"char [ ] getPassword ( ) { if ( password == null ) { return null ; } char [ ] buffer = new char [ password. length ] ; System. arraycopy ( password, 0, buffer, 0, password. length ) ; return buffer ; }"
"void initializeFromFile ( final File file ) { checkNotNull ( ""file"", file ) ; try ( final InputStream input = new FileInputStream ( file ) ) { initializeFromStream ( input ) ; } catch ( final FileNotFoundException e ) { throw new AmazonClientException ( ""Unable to find region metadata from file: "" + file. getAbsolutePath ( ), e ) ; } }"
"void pressKeyCode ( Display display , int keyCode ) { SWTUtils. sleep ( TimePeriod. SHORT ) ; SWTUtils. keyPress ( display, keyCode ) ; SWTUtils. sleep ( TimePeriod. SHORT ) ; }"
Date getDate ( ) { if ( _lastUpdate == null ) return null ; return new Date ( _lastUpdate. getTime ( ) ) ; }
"void writeViaChannelPipeline ( ChannelHandlerContext context ) { ChannelHandlerContext ctx = context ; ctx. write ( Unpooled. copiedBuffer ( ""Netty in Action"", CharsetUtil. UTF_8 ) ) ; ctx. write ( Unpooled. copiedBuffer ( ""Netty in Action"", CharsetUtil. UTF_8 ) ) ; }"
"String getResourceSetsForCurrentUser ( Model m , Authentication auth ) { Collection < ResourceSet > resourceSets = resourceSetFacade. getResourcesForCurrentUser ( auth ) ; m. addAttribute ( ""resourceSets"", resourceSets ) ; return RESOURCE_SET_LIST ; }"
"void intToNetworkByteOrder ( int num , byte [ ] buf , int start , int count ) { for ( int i = 0 ; i < count ; i ++ ) { buf [ start + i ] = ( byte ) ( ( num >> ( 8 * ( count - i - 1 ) ) ) & 0xff ) ; } }"
"String getPackageName ( Class < ? > cls ) { String name = cls. getName ( ) ; int lastDotIndex = name. lastIndexOf ( '.' ) ; return lastDotIndex!= - 1? name. substring ( 0, lastDotIndex ) : """" ; }"
"File getArtifactFile ( AbstractWisdomMojo mojo , String artifactId , String type ) { File file = mojo. project. getArtifact ( artifactId ) ; if (! file. exists ( ) ) { file = mojo. project. getFile ( new Path ( artifactId ) ) ; } if ( type!= null && type. equalsIgnoreCase ( ""txt"" ) ) { file = mojo. project. getFile ( new Path ( type ) ) ; } return file ; }"
int getAveragePercent ( ) { if ( size == 0 ) { return 0 ; } double sum = 0 ; for ( int i = 0 ; i < size ; i ++ ) { sum += possibleIVs [ i ] ; } return ( int ) ( sum / size ) ; }
"void testFromByteArrayCompliesWithRfc7250 ( ) { byte [ ] bytes = new byte [ ] { ( byte ) 'a', ( byte ) 'b', ( byte ) 'c', ( byte ) 'd', ( byte ) 'e' } ; try { Certificate cert = CertificateUtils. fromByteArrayComplies ( new ByteArrayInputStream ( bytes ), ""RSA"" ) ; fail ( ) ; } catch ( CertificateEncodingException e ) { } }"
"String escapeMetaDataPattern ( String pattern ) { pattern = pattern. replaceAll ( ""[^a-zA-Z0-9]+"", ""|$1"" ) ; pattern = pattern. replaceAll ( ""[^a-zA-Z0-9]+"", ""|$1"" ) ; pattern = pattern. replaceAll ( ""[^a-zA-Z0-9]+"", ""|$1"" ) ; return pattern ; }"
"String hexEncode ( byte [ ] b ) { if ( b == null ) return ( """" ) ; else { char [ ] r = new char [ b. length << 1 ] ; int v ; for ( int i = 0, j = 0 ; i < b. length ; i ++ ) { v = b [ i ] & 0xff ; r [ j ++ ] = hc [ v >>> 4 ] ; r [ j ++ ] = hc [ v & 0x0f ] ; } return ( new String ( r ) ) ; } }"
"Collection < String > getFKRemovingScripts ( ) { List < String > scripts = new ArrayList < String > ( ) ; scripts. add ( ""DELETE FROM JCR_ITEM "" ) ; scripts. add ( ""DELETE FROM JCR_ITEM_FK "" ) ; scripts. add ( ""DELETE FROM JCR_ITEM "" ) ; return scripts ; }"
"QueryCollectorContext createFilteredCollectorContext ( IndexSearcher searcher , Query query ) { List < QueryFilter > filter = createFilterList ( searcher, query ) ; return new QueryCollectorContext ( query, filter ) ; }"
String toString ( int [ ] ver ) { StringBuilder s = new StringBuilder ( ) ; for ( int i = 0 ; i < ver. length ; i ++ ) { s. append ( ver [ i ] ) ; if ( i + 1 < ver. length ) s. append ( '.' ) ; } return s. toString ( ) ; }
void handleAuthRequest ( LoadListener loader ) { if ( Config. DEBUG ) { Assert. assertNotNull ( loader ) ; } AuthRequest request = new AuthRequest ( ) ; request. setUsername ( loader. getUsername ( ) ) ; request. setPassword ( loader. getPassword ( ) ) ; loader. handleAuthRequest ( request ) ; }
"void setParameterBindings ( String [ ] names , Object [ ] values ) { if ( names == null || values == null ) { return ; } for ( int i = 0 ; i < names. length ; i ++ ) { setParameterBinding ( names [ i ], values [ i ] ) ; } }"
boolean isValid ( ) { long now = System. currentTimeMillis ( ) ; Date period = new Date ( ) ; return period. before ( now ) && period. after ( now ) ; }
"void postProcess ( final BatchInstanceID batchInstanceID , String pluginWorkflow ) { Assert. notNull ( batchInstanceID ) ; final String batchInstanceIdentifier = batchInstanceID. getID ( ) ; BackUpFileService. backUpBatch ( batchInstanceIdentifier, pluginWorkflow, batchInstanceService. getSystemFolderForBatchInstanceId ( batchInstanceIdentifier ) ) ; }"
void setNodos ( String [ ] nodos ) { ArrayList < String > copy = new ArrayList < String > ( ) ; for ( int i = 0 ; i < nodos. length ; i ++ ) { copy. add ( nodos [ i ] ) ; } setNodos ( copy ) ; }
"void buildFigure ( ) { fig = new Figure ( ) ; for ( int i = 0 ; i < args. length ; i ++ ) { if ( args [ i ]. length ( ) > 0 ) { fig. add ( args [ i ] [ 0 ], args [ i ] [ 1 ] ) ; } else { fig. add ( args [ i ] [ 0 ], args [ i ] [ 1 ] ) ; } } }"
"String generateEmail ( String baseString ) { Date date = new Date ( ) ; StringBuilder emailString = new StringBuilder ( ) ; emailString. append ( baseString ) ; emailString. append ( ""@"" ) ; emailString. append ( date. getTime ( ) ) ; emailString. append ( ""."" ) ; emailString. append ( emailString. substring ( emailString. length ( ) - 3, emailString. length ( ) ) ) ; return emailString. toString ( ) ; }"
"void testRedirectReadTimeout ( ) { startSingleTemporaryRedirectResponseThread ( true ) ; try { fs. getFileChecksum ( new Path ( ""/file"" ) ) ; fail ( ""expected timeout"" ) ; } catch ( SocketTimeoutException e ) { GenericTestUtils. assertExceptionContains ( fs. getUri ( ). getAuthority ( ) + "": Read timed out"", e ) ; } }"
ArrayList < Track > findTracks ( Predicate pred ) { ArrayList < Track > results = new ArrayList < Track > ( ) ; for ( Track track : tracks ) { if ( pred. isMatch ( track ) ) { results. add ( track ) ; } } return results ; }
void removeTypingRunListener ( ITypingRunListener listener ) { fListeners. remove ( listener ) ; if ( fListeners. size ( ) == 0 ) { disconnect ( ) ; } }
ResourceBundle getBundle ( ) { if ( msgBundle == null ) { msgBundle = ResourceBundle. getBundle ( MESSAGE_BUNDLE_KEY ) ; } return msgBundle ; }
"void setKerberosDebug ( @ Value ( ""${cas.spnego.kerb.debug:false}"" ) final String kerberosDebug ) { if ( StringUtils. isNotBlank ( kerberosDebug ) ) { logger. debug ( ""kerberosDebug is set to : {}"", kerberosDebug ) ; System. setProperty ( SYS_PROP_KERBEROS_DEBUG, kerberosDebug ) ; } }"
void addSort ( Sort sort ) { if ( sort == null ) return ; _sorts. add ( sort ) ; }
"Set < T1 > getKeys ( T2 value ) { Set < T1 > result = new HashSet < > ( ) ; for ( Entry < T1, T2 > entry : reverseMap. entrySet ( ) ) { if ( entry. getValue ( ) == value ) result. add ( entry. getKey ( ) ) ; } return result ; }"
"String traverseTrieCBN ( TrieNode start ) { String toReturn = """" ; if ( start!= null ) { if ( start. getWord ( )!= null ) toReturn += start. getWord ( ) + "" "" ; for ( int i = 0 ; i < start. getChildren ( ). size ( ) ; i ++ ) { toReturn += traverseCBN ( start. getChildren ( ). get ( i ) ) ; } } return toReturn ; }"
void runGC ( ) { int maxMemory = Runtime. getRuntime ( ). maxMemory ( ) ; for ( int i = 0 ; i < maxMemory ; i ++ ) { Map. Entry entry = ( Map. Entry ) Thread. currentThread ( ). next ( ) ; entry. getValue ( ) ; if ( entry. isEmpty ( ) ) { break ; } } Runtime. getRuntime ( ). gc ( ) ; }
"void replaceWith ( Node < T > toBeReplaced , Node < T > replacement ) { if ( toBeReplaced == root && toBeReplaced!= null ) { link ( toBeReplaced. prev, null, replacement ) ; toBeReplaced. prev = null ; } else { link ( toBeReplaced. next, null, replacement ) ; toBeReplaced. next = null ; } }"
"void sortAsInViewer ( List < Object > objects ) { Collections. sort ( objects, new Comparator < Object > ( ) { @ Override public int compare ( Object o1, Object o2 ) { return Integer. compare ( o1. hashCode ( ), o2. hashCode ( ) ) ; } } ) ; }"
void normalizeSyntax ( ) { normalize ( ) ; encode ( ) ; }
void normaliseNewItem ( double [ ] vector ) { double sum = 0 ; for ( int i = 0 ; i < vector. length ; i ++ ) { sum += vector [ i ] ; } for ( int i = 0 ; i < vector. length ; i ++ ) { vector [ i ] = sum / vector [ i ] ; } }
"String toHelp ( String header , Option [ ] options ) { StringBuilder sb = new StringBuilder ( header ) ; for ( int i = 0 ; i < options. length ; i ++ ) { if ( i > 0 ) sb. append ( "" "" ) ; sb. append ( options [ i ]. getDescription ( ) ) ; } return sb. toString ( ) ; }"
"SortedSet < KeyValuePair > setFromProperties ( final Properties props , final Comparator < KeyValuePair > c ) { SortedSet < KeyValuePair > result = new TreeSet < KeyValuePair > ( ) ; fromProperties ( props, result, c ) ; return result ; }"
List < SearchResultRow > searchRecords ( SearchRecordsRequest searchRecordsRequest ) { SolrSolrResponse response = solrClient. searchRecords ( searchRecordsRequest. getResults ( ) ) ; return response. getRows ( ) ; }
Collection < MetricDatum > filterOSMetrics ( Collection < MetricDatum > data ) { List < MetricDatum > filteredData = new ArrayList < > ( ) ; for ( MetricDatum metric : data ) { if (! MetricUtils. isOS ( metric ) ) { filteredData. add ( metric ) ; } } return filteredData ; }
"void testRegressionDifferentMessageForException ( ) { String input = ""$"" ; try { Integer. parseInt ( input ) ; } catch ( NumberFormatException e ) { e. printStackTrace ( ) ; } }"
int maxBucketsPerElement ( long numElements ) { int bucketCount = numElements / BitSet. SIZE ; while ( bucketCount > 1 ) { bucketCount /= 2 ; } return bucketCount ; }
double getValue ( ) { if ( serviceLevel == null ) { return 0.0 ; } else { return serviceLevel. getValue ( ) ; } }
"double [ ] homogeneRelativeVector ( double [ ] v ) { assert ( v. length == dim + 1 ) ; double [ ] dv = Arrays. copyOf ( v, dim + 1 ) ; dv [ dim ] = 1.0 ; return dv ; }"
"void putTicketGrantingTicketInScopes ( final RequestContext context , @ NotNull final String ticketValue ) { final String ticketScope = ( String ) context. getSession ( ). getAttribute ( ""ticketGrantingTicket"" ) ; putTicketGrantingTicketInScopes ( context, ticketScope, ticketValue ) ; }"
"List < RoleRepresentation > getClientScopeMappings ( ) { auth. requireView ( ) ; Set < RoleModel > roles = scopedClient. getRoles ( ) ; return ScopeMappedResource. getMappedRoles ( client, roles ) ; }"
"void examineNpc ( Player player , Packet packet ) { final int npc = packet. getShort ( ) ; player. getActionSender ( ). sendMessage ( ""It's an NPC!"" ) ; }"
void restartNetwork ( ) { checkEphemeralPortAssigned ( ) ; Preconditions. checkState (! connectionFactory. isAlive ( ) ) ; startNetwork ( ) ; }
"void calculateSCCs ( NBA graph , SCCs result , boolean disjoint ) { result. setSccs ( new HashSet < Integer > ( ) ) ; for ( int i = 0 ; i < graph. getNumVertices ( ) ; i ++ ) { result. setSccs ( new SCC ( graph, i, disjoint ) ) ; } }"
void lineCol ( ) { lineCol = 0 ; while ( lineCol < _lines. size ( ) ) { _lineCol += _lines. get ( lineCol ). length ( ) ; } }
"Response getReplicationStatus ( @ PathParam ( ""path"" ) String path ) { List < Role > roles = roleService. getRoles ( ) ; for ( Role role : roles ) { if ( role. name ( ). equals ( path ) ) { return Response. ok ( role. replicationStatus ( ) ). build ( ) ; } } return Response. status ( Status. NOT_FOUND ). build ( ) ; }"
"String getOptionalParameter ( final HttpServletRequest request , final String parameterName ) { Preconditions. checkNotNull ( request, ""The provided request was invalid"" ) ; return getParameter ( request, parameterName, false ) ; }"
"void connectFailed ( Connection connection , IOException failure ) { if ( errorListener!= null ) { errorListener. connectFailed ( connection, failure ) ; } routeDatabase. failed ( connection, failure ) ; }"
String getClaimDialect ( ) { if ( claimDialect == null ) { claimDialect = ClaimSourceFactory. getClaimSource ( ). getClaimDialect ( ) ; } return claimDialect ; }
boolean [ ] readBoolean1D ( ) { int N = StdIn. readInt ( ) ; boolean [ ] a = new boolean [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = StdIn. readBoolean ( ) ; } return a ; }
boolean showSummary ( ) { for ( int i = 0 ; i < summary. length ; i ++ ) { if ( summary [ i ] ) { return true ; } } return false ; }
"Bitmap getBitmapFromUrl ( String imageUrl , int readTimeOut , Map < String , String > requestProperties ) { URL url = new URL ( imageUrl ) ; return getBitmapFromUrl ( url, readTimeOut, requestProperties ) ; }"
void notifyError ( IOException error ) { if ( errorInIOThread == null ) { errorInIOThread = error ; } final NotificationListener listener = registeredListener. getAndSet ( null ) ; if ( listener!= null ) { listener. onNotification ( ) ; } }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"String getImplementationVersion ( ) { if ( productVersion!= null ) { return productVersion ; } return """" ; }"
"String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < names. size ( ) ; i ++ ) { sb. append ( names. get ( i ) ) ; if ( i < names. size ( ) - 1 ) { sb. append ( "","" ) ; } } return sb. toString ( ) ; }"
int compareTo ( Object that ) { if ( that instanceof PassengerCarriages ) { return ( ( PassengerCarriages ) that ). comfortLevel ( ) - ( ( PassengerCarriages ) that ). comfortLevel ( ) ; } else { return count ( ) - ( ( PassengerCarriages ) that ). count ( ) ; } }
CallBackWorkFlowVO viewCallBackWorkFlow ( CallBackWorkFlowVO callBackVO ) { ArrayList < CallBackWorkFlowVO > arrayList = new ArrayList < CallBackWorkFlowVO > ( ) ; CallBackWorkFlowDAO callBackDAO = new CallBackWorkFlowDAO ( ) ; arrayList = callBackDAO. viewCallBackWorkFlow ( callBackVO ) ; return arrayList ; }
"Rectangle2D getBounds ( ) { if ( bounds == null ) { int w = getWidth ( ) ; int h = getHeight ( ) ; if ( w == 0 || h == 0 ) return new Rectangle2D. Double ( 0, 0, ( int ) width, ( int ) height ) ; else return new Rectangle2D. Double ( 0, 0, ( int ) width, ( int ) height ) ; } else return bounds ; }"
"char [ ] encodeHex ( byte [ ] data ) { int l = data. length ; char [ ] out = new char [ l << 1 ] ; for ( int i = 0, j = 0 ; i < l ; i ++ ) { out [ j ++ ] = DIGITS_LOWER [ ( 0xF0 & data [ i ] ) >>> 4 ] ; out [ j ++ ] = DIGITS_LOWER [ 0x0F & data [ i ] ] ; } return out ; }"
void testHashCode ( ) { StandardXYSeriesLabelGenerator g1 = new StandardXYSeriesLabelGenerator ( ) ; StandardXYSeriesLabelGenerator g2 = new StandardXYSeriesLabelGenerator ( ) ; assertTrue ( g1. equals ( g2 ) ) ; assertTrue ( g1. hashCode ( ) == g2. hashCode ( ) ) ; }
"Trade adaptTrade ( BTCChinaTrade btcChinaTrade , String currency , String tradableIdentifier ) { BigDecimal amount = btcChinaTrade. getAmount ( ) ; BigMoney price = MoneyUtils. parse ( currency + "" "" + btcChinaTrade. getPrice ( ) ) ; Date date = DateUtils. fromMillisUtc ( btcChinaTrade. getDate ( ) * 1000L ) ; return new Trade ( null, amount, tradableIdentifier, currency, price, date, BTCChinaAdapters. adaptTrade ( btcChinaTrade ) ) ; }"
boolean tryLockAtVersion ( final long version ) { if ( lockAtVersion ( version ) ) { return true ; } return false ; }
"void removeArticle ( final Article article ) { if ( article == null ) { throw new IllegalArgumentException ( ""The given article must not be null"" ) ; } articles. remove ( article ) ; }"
void fireAndForget ( ) { if ( null!= listeners ) { listeners. fireAndForget ( ) ; } else { listeners. fireAndForget ( ) ; } }
BigInteger toUnsigned ( BigInteger b ) { if ( b. signum ( ) == - 1 ) { return b ; } byte [ ] bytes = b. toByteArray ( ) ; int i = 0 ; while ( i < bytes. length ) { i ++ ; } return BigInteger. valueOf ( bytes [ i ] ) ; }
"boolean containsOrEquals ( Integer itemset1 [ ] , Integer itemset2 [ ] ) { if ( itemset1 == null ) { return itemset2 == null ; } for ( int i = 0 ; i < itemset1. length ; i ++ ) { if ( itemset1 [ i ] == itemset2 [ i ] ) { return true ; } } return false ; }"
Service requireService ( ZFrame serviceFrame ) { Service service = locateService ( serviceFrame ) ; if ( service == null ) { service = createService ( serviceFrame ) ; } return service ; }
"String getMime ( @ NotNull String file , String defaultMimeType ) { String ext = null ; int idx = file. lastIndexOf ( '.' ) ; if ( idx!= - 1 ) { ext = file. substring ( idx + 1 ) ; } return ext!= - 1? ext : defaultMimeType ; }"
"void testCreateCriterionForSetBid_excludedNode_fails ( ) { childNode = childNode. asExcludedUnitNode ( ) ; testCommonAttributes ( childNode, ProductPartitionNodeAdapter. createCriterionForSetBid ( childNode, adGroupId, biddingConfig ), false ) ; }"
"void addEventListener ( String a_eventName , GeneticEventListener a_eventListenerToAdd ) { List eventListeners = ( List ) m_listeners. get ( a_eventName ) ; if ( eventListeners == null ) { eventListeners = new LinkedList ( ) ; m_listeners. put ( a_eventName, eventListeners ) ; } eventListeners. add ( a_eventListenerToAdd ) ; }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"void startSample ( long sampleTimeUs , int offset ) { _timestampUs = sampleTimeUs ; _startPoint = new SampleInfo ( _timestampUs, offset ) ; _nextSample = _startPoint ; }"
SimpleGeocode convertLocation ( edu . jhuapl . c2s2 . pp . observation . Geocode geocode ) { if ( geocode == null ) { return null ; } try { return new SimpleGeocode ( geocode. getCode ( ) ) ; } catch ( IllegalArgumentException e ) { return null ; } }
"boolean existsOwnedTerritoryOnContinent ( Continent c , String player ) { List < Country > countryOnContinent = c. getCountryOnContinent ( ) ; for ( Country country : countryOnContinent ) { if ( country. getOwner ( ). getName ( ). equals ( player ) ) { return true ; } } return false ; }"
void setDefaultSolenoidModule ( final int moduleNumber ) { checkSolenoidModule ( moduleNumber ) ; SensorBase. m_defaultSolenoidModule = moduleNumber ; }
"PDate getModDate ( ) { Object tmp = attributes. get ( ""ModDate"" ) ; if ( tmp!= null && tmp instanceof StringObject ) { StringObject text = ( StringObject ) tmp ; return new PDate ( securityManager, text. getDecryptedLiteralString ( securityManager ) ) ; } return null ; }"
"JSONObject buildRecipientPart ( String recipientId ) { JSONObject recipientPart = new JSONObject ( ) ; recipientPart. put ( ""recipient"", buildRecipientPart ( recipientId ) ) ; return recipientPart ; }"
StatusDetailType getType ( ) { if ( type == null ) { return StatusDetailType. NONE ; } else { return type ; } }
"@ Nullable T isInstanceOf ( Object anObject , Class < T > aClass ) { if ( anObject == null ) return null ; Class <? > objectClass = anObject. getClass ( ) ; if ( aClass. isAssignableFrom ( objectClass ) ) return ( T ) anObject ; return null ; }"
int readUnsignedShort ( ) { int b1 = buffer. get ( ) & 0xFF ; int b2 = buffer. get ( ) & 0xFF ; return ( ( b1 << 8 ) + b2 ) ; }
UShort getNumCommonPairs ( ) { if ( gcosResult!= null ) { return gcosResult. getNumCommonPairs ( ) ; } else if ( calvinResult!= null ) { return calvinResult. getNumPairs ( ) ; } return UShort. ZERO ; }
"String readNextInstruction ( final BufferedReader br ) { String str ; while ( ( str = br. readLine ( ) )!= null &&! str. startsWith ( ""#"" ) ) { str = str. replaceAll ( ""#"", """" ) ; } return str ; }"
boolean containsNamedService ( String serviceName ) { for ( NamedService namedService : namedServices ) { if ( namedService. getName ( ). equals ( serviceName ) ) { return true ; } } return false ; }
byte [ ] getIntBytes ( int c ) { byte [ ] result = new byte [ 4 ] ; result [ 0 ] = ( byte ) ( c >>> 24 ) ; result [ 1 ] = ( byte ) ( c >>> 16 ) ; result [ 2 ] = ( byte ) ( c >>> 8 ) ; result [ 3 ] = ( byte ) ( c ) ; return result ; }
"void logJVMInfo ( ) { RuntimeMXBean bean = ManagementFactory. getRuntimeMXBean ( ) ; String name = bean. getName ( ) ; String version = bean. getVersion ( ) ; LOG. info ( String. format ( ""jvm version %d: %s"", name, version ) ) ; }"
LocalDate toLocalDate ( XMLGregorianCalendar date ) { if ( date == null ) { return null ; } else { return date. toGregorianCalendar ( ). toLocalDate ( ) ; } }
"void instantiateFileList ( List < String > pFiles , String pProcess ) { for ( int i = 0 ; i < pFiles. size ( ) ; i ++ ) { File pFile = new File ( pFiles. get ( i ) ) ; if ( pFile. isFile ( ) ) { pFiles. add ( pFile. getAbsolutePath ( ) ) ; } else { pProcessFiles. add ( pFile. getAbsolutePath ( ) ) ; } } }"
"long getLong ( String param , long def ) { String val = get ( param ) ; try { return val == null? def : Long. parseLong ( val ) ; } catch ( Exception ex ) { throw new SolrException ( SolrException. ErrorCode. BAD_REQUEST, ex. getMessage ( ), ex ) ; } }"
"void setBackButtonEnabled ( boolean enabled ) { Boolean newValue = enabled ; Boolean oldValue = getBackButtonEnabled ( ) ; if (! newValue. equals ( oldValue ) ) { buttonEnabledHashmap. put ( BACK_BUTTON_ENABLED_PROPERTY, newValue ) ; firePropertyChange ( BACK_BUTTON_ENABLED_PROPERTY, oldValue, newValue ) ; } }"
Uri parseSound ( String path ) { String uriString = path ; try { uriString = AudioSystem. class. getResource ( uriString ). toString ( ) ; } catch ( Exception e ) { } return Uri. fromFile ( uriString ) ; }
String getSchemaName ( int column ) { ColumnInfo info = getColumnInfo ( column ) ; return info == null? null : info. schema ; }
"Collection < T > matchToString ( Collection < T > values , String name ) { List < T > result = new ArrayList < > ( ) ; for ( T value : values ) { if ( value == null ) { continue ; } if ( startsWithIgnoreCase ( value. toString ( ), name ) ) { result. add ( value ) ; } } return result ; }"
"String getConfigRoot ( int storageId ) { synchronized ( lock ) { if ( storageId!= rootStorageId ) { throw new IllegalArgumentException ( ""Storage id "" + storageId + "" is not initialized."" ) ; } return rootStorageId ; } }"
void resetCacheUsageStats ( ) { s_aRWLock. writeLock ( ). lock ( ) ; try { s_cacheUsage = 0 ; } finally { s_aRWLock. writeLock ( ). unlock ( ) ; } }
int hashCode ( ) { int retval = 0 ; byte [ ] enc = getEncoded ( ) ; for ( int i = 1 ; i < enc. length ; i ++ ) { retval += enc [ i ] * i ; } return ( retval ) ; }
"void openEnterAmountInterface ( int interfaceId , int slot , int id ) { _currInterface = getInterfaceById ( interfaceId ) ; setSlotId ( slot ) ; _openAmountInterface ( id ) ; }"
"boolean isExcluded ( String className , String methodName ) { List < Method > methods = session. getMethods ( ) ; for ( Method method : methods ) { if ( method. getName ( ). contains ( className ) && method. getName ( ). toLowerCase ( ). contains ( methodName. toLowerCase ( ) ) ) { return true ; } } return false ; }"
"boolean isValidInteger ( String toCheck , NumberFieldAttributes attr ) { try { Integer. parseInt ( toCheck, attr ) ; return true ; } catch ( NumberFormatException e ) { return false ; } }"
Optional < MeasureVariations > toMeasureVariations ( ) { if (! isAnySet ( ) ) { return Optional. absent ( ) ; } Double [ ] variations = new Double [ values. length ] ; for ( int i = 0 ; i < values. length ; i ++ ) { if ( values [ i ]. isSet ( ) ) { variations [ i ] = values [ i ]. getValue ( ) ; } } return Optional. of ( new MeasureVariations ( variations ) ) ; }
"void onItemClick ( AdapterView < ? > parent , View view , int position , long id ) { switch ( position ) { case 1 : onClick ( parent, view, id ) ; break ; case 2 : onClick ( parent, view, id ) ; break ; case 3 : onClick ( parent, view, id ) ; break ; } }"
int runCommandLine ( String command ) { Command c = new Command ( command ) ; return c. run ( ) ; }
Iterator < String > getRendererTypes ( String componentFamily ) { Set < String > rendererTypes = _componentFamilies. get ( componentFamily ) ; if ( rendererTypes == null ) { return Collections. emptyIterator ( ) ; } else return Collections. unmodifiableSet ( rendererTypes ). iterator ( ) ; }
Customer getCustomer ( int id ) { for ( Customer c : customers ) { if ( c. getId ( ) == id ) { return c ; } } return null ; }
"void testPrefix ( ) { final String originals = ""originals"" ; final GpContext gpContext = mock ( GpContext. class ) ; final GpConfig gpConfig = new GpConfig. Builder ( ). originals ( originals ). build ( ) ; assertEquals ( originals. length ( ) - 1, gpConfig. priority ( gpContext ) ) ; }"
"void onSuccess ( StreamState state ) { logger. info ( String. format ( ""[repair #%s] streaming task succeed, returning response to %s"", initiator. initiatorId, request. initiatorName ) ) ; MessagingService. instance ( ). sendOneWay ( new SyncComplete ( initiator, request. src, request. dst, true ). createMessage ( ), request. initiatorName ) ; }"
"Builder bySlave ( String slaveHost , String ... slaveHosts ) { requireNonNull ( slaveHosts ) ; return new Builder ( query. deepCopy ( ). setSlaveHosts ( ImmutableSet. copyOf ( slaveHosts ) ) ) ; }"
boolean loggedIn ( ) { if ( deviceId!= null && username!= null && password!= null ) { return true ; } return false ; }
MBeanParameterInfo [ ] convertSignature ( javax . management . MBeanParameterInfo [ ] source ) { MBeanParameterInfo [ ] signature = new MBeanParameterInfo [ source. length ] ; for ( int i = 0 ; i < source. length ; i ++ ) { signature [ i ] = new MBeanParameterInfo ( source [ i ] ) ; } return signature ; }
void createReader ( String fileName ) { try { createReader ( new FileInputStream ( fileName ) ) ; } catch ( FileNotFoundException e ) { e. printStackTrace ( ) ; } }
void addRemovedObject ( TCatalogObject catalogObject ) { if ( catalogObject == null ) { return ; } removedObjects. add ( catalogObject ) ; }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"void setSymLink ( String hdf_name_src , String hdf_name_dest ) { if ( hdf_name_src == null ) throw new NullPointerException ( ""HDF is closed."" ) ; hdf_name_src = hdf_name_src ; hdf_name_dest = hdf_name_dest ; }"
"void performFieldTransformations ( List < AccountingLineFieldRenderingTransformation > fieldTransformations , AccountingLine accountingLine , Map unconvertedValues ) { for ( Iterator < AccountingLineFieldRenderingTransformation > iterator = fieldTransformations. iterator ( ) ; iterator. hasNext ( ) ; ) { AccountingLineFieldRenderingTransformation transformation = iterator. next ( ) ; transformation. performFieldTransformation ( accountingLine, unconvertedValues ) ; } }"
ByteBuf newByteBuffer ( int capacity ) { ByteBuf buf = Unpooled. buffer ( capacity ) ; buf. order ( ByteOrder. nativeOrder ( ) ) ; return buf ; }
"void computedFactorialZero ( ) { Factorial fact = new Factorial ( ) ; final int n = 0 ; final int totalFact = 120 ; int result = fact. mult ( n ) ; assertThat ( result, is ( 0 ) ) ; }"
"void addResponseTrailer ( String key , String val ) { if ( responseTrailer == null ) { responseTrailer = new Map < > ( ) ; } responseTrailer. put ( key, val ) ; }"
void addAttributeFilter ( String attributeName ) { if ( attributeName == null ) return ; attributeFilters. add ( attributeName ) ; }
"void addMember ( String name , String [ ] values ) { String [ ] valuesMap = new String [ values. length ] ; for ( int i = 0 ; i < values. length ; i ++ ) { valuesMap [ i ] = values [ i ] ; } addMember ( name, valuesMap ) ; }"
List < IEncryptionHelper > getEncryptionHelpers ( ) { if ( encryptionHelpers == null ) encryptionHelpers = new ArrayList < IEncryptionHelper > ( Arrays. asList ( EncryptionHelper. getEncryptionHelpers ( ) ) ) ; return encryptionHelpers ; }
"CertPathValidator getInstance ( String algorithm ) { if ( algorithm == null ) { throw new NullPointerException ( ""algorithm == null"" ) ; } Engine. SpiAndProvider sap = ENGINE. getInstance ( algorithm, null ) ; return new CertPathValidator ( ( CertPathValidatorSpi ) sap. spi, sap. provider, algorithm ) ; }"
"double stdDev ( Collection < ? extends Number > collection , boolean sample ) { if ( sample ) { return Utils. stdDev ( collection ) ; } else { double sum = 0 ; for ( Number n : collection ) { sum += n. doubleValue ( ) ; } return Math. sqrt ( sum / ( collection. size ( ) - 1 ) ) ; } }"
"void testVariable ( ) { assertEquals ( ""a"", Parser. parseVariable ( ""a"" ). getType ( ) ) ; assertEquals ( ""b"", Parser. parseVariable ( ""b"" ). getType ( ) ) ; assertEquals ( ""c"", Parser. parseVariable ( ""c"" ). getType ( ) ) ; assertEquals ( ""d"", Parser. parseVariable ( ""d"" ). getType ( ) ) ; }"
void setCurrentLocalSpan ( Span span ) { if ( span!= null && span. localSpan ( )!= null ) { localSpan = span ; } else { pushLocalSpan ( ) ; } }
int [ ] cloneIntArray ( int array [ ] ) { int arrayNew [ ] = new int [ array. length ] ; for ( int i = 0 ; i < array. length ; i ++ ) { arrayNew [ i ] = array [ i ] ; } return arrayNew ; }
Transaction getTransaction ( ) { Transaction tx = null ; while ( true ) { try { Thread. sleep ( 100 ) ; } catch ( InterruptedException e ) { break ; } if ( e instanceof SystemException ) { throw ( SystemException ) e ; } else { break ; } } return tx ; }
"String getResourceString ( String key , Object [ ] args ) { try { return MessageFormat. format ( getResourceString ( key ), args ) ; } catch ( MissingResourceException e ) { return key ; } catch ( NullPointerException e ) { return ""!"" + key + ""!"" ; } }"
"String addVersion ( String requestPath , String version ) { Map < String, String > versionMap = new HashMap < String, String > ( ) ; versionMap. put ( requestPath, version ) ; return addVersion ( requestPath, versionMap ) ; }"
"void testFullPackage ( ) { final Set < Class <? >> list = Classes. getClasses ( ""net.meisen.general.genmisc.test"" ) ; assertEquals ( list. size ( ), 1 ) ; list. clear ( ) ; }"
"List < EditorError > createErrorList ( Editor < T > editor , T value , String messageKey ) { List < EditorError > list = new ArrayList < EditorError > ( ) ; list. add ( new EditorError ( editor, value, messageKey ) ) ; return list ; }"
"X86Decoder fromXML ( Model cpu , ExecutionMode mode , String xmlPath , String dtdPath ) { X86Decoder decoder = new X86Decoder ( ) ; decoder. model = cpu ; decoder. mode = mode ; decoder. xmlPath = xmlPath ; decoder. dtdPath = dtdPath ; return decoder ; }"
"Page GetPage ( int pageno ) { if ( pageno < 1 || pageno > getPageCount ( ) ) { throw new Exception ( ""Page number out of range - "" + pageno ) ; } Page page = new Page ( pageno ) ; return page ; }"
"DoubleMatrix feedForward ( DoubleMatrix input ) { DoubleMatrix output = Double. dense. dense ; for ( int i = 0 ; i < input. rows ( ) ; i ++ ) { for ( int j = 0 ; j < input. columns ( ) ; j ++ ) { output. put ( i, feedForward ( input. getQuick ( i, j ) ) ) ; } } return output ; }"
void addEdge ( UndirectedEdge edge ) { check ( edge. source ( ) ) ; check ( edge. destination ( ) ) ; adj [ edge. source ( ) ]. add ( edge ) ; edges ++ ; }
"String getElasticSearchUrl ( ) { String value = System. getProperty ( ""context.param.elasticsearch.url"" ) ; if (! StringUtils. hasText ( value ) ) throw new NullPointerException ( ""param.elasticsearch.url cannot be null!"" ) ; return value ; }"
java . util . List < BundleTask > getBundleTasks ( ) { if ( bundleTasks == null ) { bundleTasks = new com. amazonaws. internal. SdkInternalList < BundleTask > ( ) ; } return bundleTasks ; }
boolean isBw ( ) { if ( bw == null ) { return false ; } else { return bw ; } }
int flagOfSN ( ) { int result = 1 ; for ( int i = 0 ; i < _nodeSN. size ( ) ; i ++ ) { if ( _nodeSN. get ( i ) == null ) { result ++ ; } } return result ; }
"void addCertificateSection ( int enumeratedIconId , String headline , String description , String label ) { TLV certificateSection = new TLV ( enumeratedIconId, headline, description, label ) ; certificateList. add ( certificateSection ) ; }"
int [ ] getScaledData ( ) { cachedScaledData = new int [ data. length ] ; for ( int i = 0 ; i < data. length ; i ++ ) { cachedScaledData [ i ] = data [ i ] ; } return cachedScaledData ; }
String [ ] getLogInfoLines ( ) { if ( logInfoLines == null ) { logInfoLines = new String [ 0 ] ; } return logInfoLines ; }
ArrayList < HWISessionItem > findAllSessionItems ( ) { ArrayList < HWISessionItem > result = new ArrayList < HWISessionItem > ( ) ; for ( HWISessionItem item : allSessionItems ) { result. add ( item ) ; } return result ; }
void setType ( byte value ) { type = value ; update ( ) ; }
"void compressFiles ( List < File > listFiles , String destZipFile ) { FileOutputStream fos = new FileOutputStream ( destZipFile ) ; compressFiles ( listFiles, fos ) ; fos. close ( ) ; }"
"NodeId getNodeId ( DatasetGraph ds , Node node ) { if ( ds == null ) return null ; NodeTable nodeTable = ds. getQuadTable ( ). getNodeTupleTable ( ). getNodeTable ( ) ; NodeId nodeId = nodeTable. getNodeIdForNode ( node ) ; return nodeId ; }"
void testCloning ( ) { LineRenderer3D r1 = new LineRenderer3D ( ) ; LineRenderer3D r2 = ( LineRenderer3D ) r1. clone ( ) ; assertTrue ( r1!= r2 ) ; assertTrue ( r1. getClass ( ) == r2. getClass ( ) ) ; assertTrue ( r1. equals ( r2 ) ) ; }
"T getCurrent ( ) { if (! hasCurrent ( ) ) throw new NoSuchElementException ( ""No current element exists."" ) ; return current ; }"
"void setEndPage ( int end ) { if ( end <= 0 ) { throw new Exception ( ""Error split must be at least one page."" ) ; } endPage = end ; }"
short getMagnitude ( ) { if ( magnitude == null ) { return ( ( short ) 1 ) ; } else { return magnitude ; } }
Set < Property > getProperties ( String name ) { Set < Property > result = new HashSet < Property > ( ) ; for ( Property p : properties ) { if ( p. getName ( ). equals ( name ) ) { result. add ( p ) ; } } return result ; }
"String getHoverDateString ( Date date ) { SimpleDateFormat fullDateFormat = new SimpleDateFormat ( ""yyyy-MM-dd'T'HH:mm:ssZ"" ) ; return fullDateFormat. format ( date ) ; }"
"boolean enterIfNotStopped ( ) { onEnter ( ) ; rwLock. readLock ( ) ; return checkState ( false, false ) ; }"
int getNumberOfTargets ( ) { int result = 0 ; for ( int i = 0 ; i < targets. length ; i ++ ) { result += targets [ i ]. getNumberOfMethods ( ) ; } return result ; }
"Cursor userQuery ( Context context , String username ) { String selection = ""SELECT * FROM "" + DatabaseHelper. TABLE_USER + "" WHERE username = '"" + username + ""'"" ; return context. getContentResolver ( ). query ( DatabaseHelper. TABLE_USER, selection, null, null, null ) ; }"
"CornerPinSurface createCornerPinSurface ( int w , int h , int res ) { CornerPinSurface surface = ( CornerPinSurface ) mEGLSurface. createCornerPinSurface ( w, h, res ) ; registerSurface ( surface, res ) ; return surface ; }"
void setColumnConstraint ( int column ) { if ( column < 0 ) { column = UNDEFINED ; } fColumn = column ; }
"void testSetValue01 ( ) { ArrayELResolver resolver = new ArrayELResolver ( ) ; resolver. setValue ( null, new Object ( ), new Object ( ), new Object ( ) ) ; }"
void removeUserSession ( Long sessionId ) { UserSession userSession = userSessions. get ( sessionId ) ; if ( userSession!= null ) { userSessions. remove ( sessionId ) ; } }
"void testLocalVars ( ) { HashMap < String, String > map = new HashMap < > ( ) ; map. put ( ""a"", ""b"" ) ; map. put ( ""c"", ""d"" ) ; map. put ( ""e"", ""f"" ) ; assertEquals ( ""a"", new String ( map. keySet ( ) ) ) ; assertEquals ( ""b"", new String ( map. get ( ""c"" ) ) ) ; assertEquals ( ""d"", new String ( map. get ( ""e"" ) ) ) ; }"
"Object createOrb ( String [ ] args , Properties props ) { ORB orb = new ORB ( args, props ) ; return orb ; }"
NativeSize [ ] toNS ( int [ ] ints ) { NativeSize [ ] nls = new NativeSize [ ints. length ] ; for ( int i = 0 ; i < ints. length ; i ++ ) nls [ i ] = toNS ( ints [ i ] ) ; return nls ; }
Set < String > getForceRslsPaths ( ) { Set < String > rslsPaths = new HashSet < String > ( ) ; for ( Swcs swcs : getForceRsls ( ) ) { rslsPaths. add ( swcs. getLocation ( ). toFile ( ). getAbsolutePath ( ) ) ; } return rslsPaths ; }
SootClass createSootClass ( ) { Class [ ] allClasses = readClass ( ) ; SootClass s = new SootClass ( ) ; allClasses [ 0 ] = s ; for ( int i = 1 ; i < allClasses. length ; i ++ ) { s. addConstructor ( allClasses [ i ] ) ; } return s ; }
"void testPutHelper ( int N ) { YearlyRecord rec = new YearlyRecord ( ) ; for ( int i = 0 ; i < N ; i ++ ) { rec. insert ( ""String"", RandomStringUtils. randomAlphabetic ( 10 ) ) ; rec. insert ( ""String"", RandomStringUtils. randomAlphabetic ( 10 ) ) ; } rec. close ( ) ; }"
"Definition getDefinition ( QName portType ) { Definition def = defMap. get ( portType ) ; if ( def == null ) { def = defMap. get ( portType. getNamespaceURI ( ) + "":"" + portType. getLocalPart ( ) ) ; if ( def == null ) { def = defMap. get ( portType. getNamespaceURI ( ) + "":"" + portType. getLocalPart ( ) ) ; } } return def ; }"
"void registerMessages ( ) { messages = new HashMap < String, String > ( ) ; for ( int i = 0 ; i < exceptions. length ; i ++ ) { messages. put ( exceptions [ i ]. getCode ( ), messages [ i ]. getCode ( ) ) ; } }"
"SWTBot newExport ( IExport export ) { bot. menu ( ""File"" ). menu ( ""Import..."" ). click ( ) ; SWTBotShell shell = bot. shell ( ""Import"" ) ; shell. activate ( ) ; selectTreeNode ( export ) ; bot. button ( ""Next >"" ). click ( ) ; return bot ; }"
"void navigateToPageWithServiceWorkerAndManifest ( EmbeddedTestServer testServer , Tab tab , String manifestUrl ) { navigateToPageWithServiceWorker ( testServer, tab ) ; navigateToPageWithManifest ( tab, manifestUrl ) ; }"
boolean isHSQLDialect ( SessionFactory sessionFactory ) { if ( sessionFactory instanceof SessionFactoryImplementor ) { SessionFactoryImplementor impl = ( SessionFactoryImplementor ) sessionFactory ; if ( impl. getDialect ( ). equals ( SessionFactory. HSQL ) ) { return true ; } } return false ; }
void loadStaticProperties ( ) { File configFile = new File ( ConfigurationManager. class. getProtectionDomain ( ). getCodeSource ( ). getLocation ( ) ). getAbsoluteFile ( ) ; loadStaticProperties ( configFile ) ; }
List < Point > sanitizePointList ( List < Point > points ) { List < Point > sanitized = new LinkedList < Point > ( ) ; for ( Point point : points ) { if (! point. isValid ( ) ) { sanitized. add ( point ) ; } } return sanitized ; }
"void insertInTx ( ArrayList < V > entities ) { SQLiteDatabase db = helper. getWritableDatabase ( ) ; insertInTx ( db, entities ) ; }"
Period getWindowEnd ( WindowName windowName ) { MutablePeriod period = new MutablePeriod ( ) ; for ( MilestoneWindow window : milestoneWindows ) { if ( window. getName ( ). equals ( windowName ) ) { break ; } period. add ( window. getPeriod ( ) ) ; } return period. toPeriod ( ) ; }
"boolean getInput ( String filePath ) { List < String > lines = new ArrayList < String > ( ) ; BufferedReader reader = new BufferedReader ( new FileReader ( filePath ) ) ; String line = null ; while ( ( line = reader. readLine ( ) )!= null ) { if ( line. equals ( ""Enter"" ) ) { return true ; } } reader. close ( ) ; return false ; }"
JSONArray asJSONArray ( ) { if ( cachedJSON == null ) { cachedJSON = new JSONArray ( ) ; if ( bytes!= null ) { for ( int i = 0 ; i < bytes. length ( ) ; i ++ ) { cachedJSON. put ( bytes. get ( i ) ) ; } } } return cachedJSON ; }
Iterator < V > poolViewIterator ( ) { List < V > views = new ArrayList < V > ( ) ; Iterator < V > iterator = views. iterator ( ) ; while ( iterator. hasNext ( ) ) { views. add ( iterator. next ( ) ) ; } return views. iterator ( ) ; }
float getTextureXOffset ( ) { if ( textureAtlases!= null ) { return textureAtlases. getXOffset ( ) ; } else { return 0f ; } }
"CharSequence readText ( ) { char [ ] buffer = new char [ DEFAULT_BUFFER_SIZE ] ; for ( int i = 0 ; i < DEFAULT_BUFFER_SIZE ; i ++ ) { buffer [ i ] = ( char ) reader. read ( ) ; } return new String ( buffer, 0, buffer. length ) ; }"
DatePanel createDatePanel ( ) { DatePanel retorno = new DatePanel ( ) ; setter. customize ( retorno ) ; return retorno ; }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"void conditionallyReThrow ( T e , boolean rethrow , Logger logger , String m , Level level ) { if ( rethrow ) { if ( e!= null ) { throw rethrow ; } else { logger. log ( level, m, e ) ; } } else { logger. log ( level, m, e ) ; } }"
"void showPosition ( final File file , final int line , final int column ) { final BufferedReader reader = new BufferedReader ( new FileReader ( file ) ) ; final String ln = """" ; for ( int i = 0 ; i < line ; i ++ ) { ln = reader. readLine ( ) ; } reader. close ( ) ; }"
String xmlForObject ( Object toArchive ) { XStream xs = new XStream ( ) ; return xs. toXML ( toArchive ) ; }
Request getAndRemove ( int requestCode ) { Request request = requests. get ( requestCode ) ; requests. remove ( requestCode ) ; return request ; }
"FacesMessage createMessage ( String value , String label , AbstractSelectComponent select , FacesContext facesContext ) { String id = null ; if ( value == null ) { id = ( String ) select. getClientId ( facesContext ) ; } else { id = ( String ) select. getClientId ( facesContext ) ; } FacesMessage message = new FacesMessage ( FacesMessage. SEVERITY_ERROR, id, value, label, select. getClientId ( facesContext ) ) ; return message ; }"
"void encodeStrategy ( final Name strategy , final TlvEncoder encoder ) { int saveLength = encoder. getLength ( ) ; for ( int i = 0 ; i < strategy. size ( ) ; ++ i ) { encoder. writeBlobTlv ( Tlv. ControlParameters_Strategy, strategy. get ( i ). getValue ( ). buf ( ) ) ; } encoder. writeTypeAndLength ( Tlv. ControlParameters_Strategy, encoder. getLength ( ) - saveLength ) ; }"
"String propertyMatches ( String resourceName , String key , String pattern ) { String value = propertyMatches ( resourceName, key, pattern ) ; return value ; }"
"void checkPosition ( int nP , int mP ) { if ( mP == m_end ) { markVisited ( nP ) ; } else if ( nP == m_start ) { markVisited ( nP ) ; } else { moveOn ( mP ) ; } }"
"cuComplex cuCmplx ( float r , float i ) { if ( i < 0 || r > 1.0f || i > 1.0f ) { throw new ArithmeticException ( ""Invalid value: "" + r + "" - "" + i ) ; } return new cuComplex ( r, i ) ; }"
HashSet < Emoticon > getEmoticons ( ) { HashSet < Emoticon > result = new HashSet < > ( ) ; for ( Emoticon emoticon : userEmoticons ) { if ( emoticon. getEmoteset ( ) == null ) { result. add ( emoticon ) ; } } return result ; }
"Session reserveSession ( long sessionId ) { Session s = activeSessions. get ( sessionId ) ; if ( s == null ) { s = new Session ( sessionId ) ; activeSessions. put ( sessionId, s ) ; } return s ; }"
"TaskWrapper tryUpdatedVersion ( final Plugin plugin , final BukkitScheduler scheduler , Runnable runnable , long firstDelay , long repeatDelay ) { try { return scheduler. updatedVersion ( plugin, null, runnable, firstDelay, repeatDelay ) ; } catch ( final IllegalStateException e ) { return null ; } }"
String getHostMap ( String hostName ) { String map = UNKNOWN_HOSTNAME ; try { InetAddress ip = InetAddress. getByName ( hostName ) ; map = ip. getHostMap ( ) ; } catch ( UnknownHostException e ) { map = UNKNOWN_HOSTNAME ; } return map ; }
int indexOf ( Thread thread ) { for ( int i = 0 ; i < ownerList. size ( ) ; i ++ ) { Owner owner = ( Owner ) ownerList. get ( i ) ; if ( owner. toString ( ). equals ( thread. toString ( ) ) ) return i ; } return - 1 ; }
void addEncodedExtensions ( List < String > encoded ) { for ( String extension : encoded ) { checkNotNull ( extension ) ; } extensions. addAll ( encoded ) ; }
void addToCommitted ( int pages ) { committed += pages ; totalPages. addAndGet ( pages ) ; }
"String getProperty ( final DomainProperty domainProperty , final DocumentTypeDTO documentTypeDTO ) { String name = domainProperty. getName ( ) ; return name. substring ( name. lastIndexOf ( ""."" ) + 1, name. length ( ) ) ; }"
int getSelectiveSuspendTimeout ( ) { getReadLock ( ). lock ( ) ; try { return m_config. getSelectiveSuspendTimeout ( ) ; } finally { getReadLock ( ). unlock ( ) ; } }
"int getIndex ( int factor , IndexedParent parent ) { if ( parent == null ) { throw new NullPointerException ( ""parent must not be null"" ) ; } if ( parent. getParent ( ) == factor ) { return - 1 ; } return getIndex ( factor, parent. getParent ( ) ) ; }"
Method [ ] getDeclaredMethods ( final Class < ? > c ) { if ( c == null ) return null ; return c. getDeclaredMethods ( ) ; }
"String getKeyHash ( @ Nonnull PublicKey pubkey , @ Nonnull String algorithm ) { try { MessageDigest md = MessageDigest. getInstance ( algorithm ) ; md. update ( pubkey. getEncoded ( ) ) ; return bytesToHex ( md. digest ( ) ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
void writePixels ( ) { int len = pixels. length ; out. write ( len * 2 ) ; for ( int i = 0 ; i < len ; i ++ ) { out. write ( ( int ) pixels [ i ] ) ; } }
"ArrayList < Qso > getLastSpContacts ( ) { try { return ioOperations. getLastSpContacts ( ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return null ; } }"
Integer getSessionId ( ) { if ( _sessionId == null ) { return null ; } return _sessionId ; }
"double [ ] toArray ( double [ ] dest ) { if ( dest == null || dest. length < size ( ) ) { dest = new double [ size ] ; } System. arraycopy ( data, 0, dest, 0, size ) ; return dest ; }"
boolean findWord ( String word ) { Iterator < String > iter = words. iterator ( ) ; while ( iter. hasNext ( ) ) { if ( iter. next ( ). equals ( word ) ) { return true ; } } return false ; }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"void multipleDeleteEntities ( String keyName1 , String keyName2 ) { Key key1 = datastore. newKeyFactory ( ). setKind ( ""MyKind"" ). newKey ( keyName1 ) ; Key key2 = datastore. newKeyFactory ( ). setKind ( ""MyKind"" ). newKey ( keyName2 ) ; datastore. delete ( key1, key2 ) ; }"
List < URI > stringCollectionAsURIs ( Collection < String > names ) { List < URI > uris = new ArrayList < URI > ( names. size ( ) ) ; for ( String name : names ) { uris. add ( new URI ( name ) ) ; } return uris ; }
"NinePatch createNinePatch ( URL fileUrl , boolean convert ) { byte [ ] bytes = Files. readAllBytes ( fileUrl. openStream ( ) ) ; NinePatch patch = new NinePatch ( ) ; patch. setBytes ( bytes ) ; if ( convert ) { patch. convert ( ) ; } return patch ; }"
void keyEvent ( KeyEvent event ) { if ( isWindow ) ( ( GWinApplet ) app ). keyEvent ( event ) ; for ( GAbstractControl control : windowControls ) { if ( ( control. registeredMethods & KEY_METHOD ) == KEY_METHOD ) control. keyEvent ( event ) ; } }
"boolean isClick ( MotionEvent upEvent , float xDown , float yDown , float xUp , float yUp ) { int dx = xDown - upEvent. getX ( ) ; int dy = yDown - upEvent. getY ( ) ; return isClick ( upEvent, dx, dy ) ; }"
Grantee getGrantee ( String name ) { if ( name!= null ) { Set < Role > set = roles. keySet ( ) ; for ( Role role : set ) { if ( role. getName ( ). equalsIgnoreCase ( name ) ) { return role. getGrantee ( ) ; } } } return null ; }
Set < MatcherAndAlert > getNotes ( Edge edge ) { Set < MatcherAndAlert > ret = new HashSet < MatcherAndAlert > ( ) ; for ( MatcherAndAlert alert : notes ) { if ( alert. getMatcher ( ). equals ( edge ) ) ret. add ( alert ) ; } return ret ; }
"Size2D arrangeRN ( BlockContainer container , Graphics2D g2 , RectangleConstraint constraint ) { Size2D s1 = arrangeNN ( container, g2 ) ; if ( constraint. getWidthRange ( ). contains ( s1. width ) ) { return s1 ; } else { RectangleConstraint c = constraint. toFixedWidth ( constraint. getWidthRange ( ). getUpperBound ( ) ) ; return arrangeFN ( container, g2, c ) ; } }"
int hashCode ( ) { int hash = address. hashCode ( ) ; return hash ; }
"DestinationMapNode getChildOrCreate ( String path ) { DestinationMapNode child = children. get ( path ) ; if ( child == null ) { child = new DestinationMapNode ( path ) ; children. put ( path, child ) ; } return child ; }"
boolean isCompressedFilename ( String filename ) { String lower = filename. toLowerCase ( Locale. ENGLISH ) ; int n = lower. length ( ) ; for ( int i = 2 ; i <= 5 && i < n ; i ++ ) { if ( uncompressSuffix. containsKey ( lower. substring ( n - i ) ) ) { return true ; } } return false ; }
boolean isServerNumberFormat ( ) { if ( serverNumberFormat == null ) { return true ; } else { return serverNumberFormat ; } }
"void ensureCapacity ( int size ) { if ( size > m_interferenceNodes. length * 2 ) { int [ ] newNodes = new int [ size ] ; System. arraycopy ( m_interferenceNodes, 0, newNodes, 0, m_interferenceNodes. length ) ; m_interferenceNodes = newNodes ; } }"
"String getChipType ( ) { for ( int i = 0 ; i < chipTypes. length ; i ++ ) { if ( chipTypes [ i ]!= null ) { return chipTypes [ i ] ; } } return ""unknown"" ; }"
"PrivateKey getPrivateKeyFromFile ( File cert , String alias , String password ) { CertificateFactory cf = CertificateFactory. getInstance ( ""X.509"" ) ; CertificateFactory cf = cf. generateCertificateFactory ( password ) ; return ( PrivateKey ) cf. generatePrivate ( cert, alias ) ; }"
void updateFormulaireCand ( FormulaireCand formulaireCand ) { if ( _listeForm == null ) { _listeForm = new FormulaireCandListe ( formulaireCand ) ; } else { _listeForm. updateFormulaireCand ( formulaireCand ) ; } }
"void setMinMaxScaleX ( float minScaleX , float maxScaleX ) { m_minScaleX = minScaleX ; m_maxScaleX = maxScaleX ; }"
"OTMConnection acquireConnection ( PBKey pbKey ) { if ( connMap. containsKey ( pbKey ) ) return connMap. get ( pbKey ) ; else OTMConnection connection = new OTMConnection ( pbKey ) ; connMap. put ( pbKey, connection ) ; return connection ; }"
"boolean playTrick ( int cardIndex , Deck trick ) { Card card = trick. getCard ( cardIndex ) ; if (! card. play ( ) ) return false ; return true ; }"
"String getPrincipalWithoutRealm ( final String principal ) { int i = principal. indexOf ( ""/"" ) ; if ( i == - 1 ) { i = principal. indexOf ( ""@"" ) ; } return principal. substring ( i + 1 ) ; }"
"void registerService ( String path , String data ) { try { zkClient. create ( path, data. getBytes ( Charset. forName ( ""UTF-8"" ) ), ZooDefs. Ids. OPEN_ACL_UNSAFE, CreateMode. EPHEMERAL ) ; } catch ( KeeperException ke ) { throw new IOException ( ke ) ; } }"
void defaultState ( ) { TreeNode node = new TreeNode ( ) ; assertNull ( node. getNode ( ) ) ; assertNull ( node. getName ( ) ) ; assertNull ( node. getUrl ( ) ) ; }
boolean getParticipantScrollDownDisabled ( ) { if ( presentation!= null ) { if ( ( presentation. getParticipantsSize ( ) < VIEW_SIZE ) || ( position == ( presentation. getParticipantsSize ( ) - 1 ) ) ) { return true ; } } return false ; }
File [ ] listFilesSorted ( File dir ) { List < File > list = new LinkedList < File > ( ) ; listFilesSorted ( list ) ; return list. toArray ( new File [ list. size ( ) ] ) ; }
"String copyFile ( Configuration conf , Path inFile ) { FileSystem fs = FileSystem. get ( inFile, conf ) ; FSDataOutputStream out = null ; try { out = fs. create ( inFile, true ) ; copy ( inFile, out ) ; } finally { if ( out!= null ) { out. close ( ) ; } } return inFile. getAbsolutePath ( ) ; }"
"GatewayManager getInstanceFor ( Connection connection ) { GatewayManager gatewayManager = instances. get ( connection ) ; if ( gatewayManager == null ) { gatewayManager = new GatewayManager ( connection ) ; instances. put ( connection, gatewayManager ) ; } return gatewayManager ; }"
byte [ ] sendAndReadBytes ( ) { send ( ) ; byte [ ] result = in. read ( ) ; in. close ( ) ; return result ; }
Boolean [ ] asBooleans ( List < Object > values ) { ValueFactory < Boolean > factory = valueFactories. getBooleanFactory ( ) ; Boolean [ ] res = new Boolean [ values. size ( ) ] ; for ( int i = 0 ; i < res. length ; i ++ ) { res [ i ] = factory. create ( values. get ( i ) ) ; } return res ; }
AuthorizationClient authorizationClient ( ) { return new AuthorizationClient ( ) { @ Override public boolean isAuthorized ( ) { return true ; } } ; }
"String printPath ( List < GeographicPoint > path ) { StringBuilder builder = new StringBuilder ( ) ; for ( GeographicPoint point : path ) { builder. append ( point + "" "" ) ; } return builder. toString ( ) ; }"
"void mergeSort ( int from , int to ) { if ( from < to ) { to = mergeSort ( from, to - 1 ) ; T x = data. get ( from ) ; for ( int i = from + 1 ; i <= to ; i ++ ) mergeSort ( x, i ) ; data. set ( from, i ) ; } }"
"String readStringType ( Element parentElement , String elementName , String typeName ) { String elementString = readStringType ( parentElement, elementName, typeName ) ; return elementString!= null? elementString : """" ; }"
"void showFunction ( final CGraphWindow parent , final IViewContainer container , final INaviFunction function ) { Preconditions. checkNotNull ( parent, ""IE01704: Parent argument can not be null"" ) ; Preconditions. checkNotNull ( container, ""IE01705: Container argument can not be null"" ) ; CToolkit. showFunction ( parent, container, function ) ; }"
void updateComboBox ( JComboBox < Schedule > box ) { box. removeAllItems ( ) ; for ( Schedule sch : getSchedulesByNameList ( ) ) { box. addItem ( sch ) ; } }
"UniqueEntityLoader buildLoader ( OuterJoinLoadable persister , int batchSize , LockOptions lockOptions , SessionFactoryImplementor factory , LoadQueryInfluencers influencers ) { if ( batchSize <= 1 ) { return buildNonBatchingLoader ( persister, lockOptions, factory, influencers ) ; } return buildBatchingLoader ( persister, batchSize, lockOptions, factory, influencers ) ; }"
"void showPassiveFocusAtCenter ( ) { mMainThread. execute ( new Runnable ( ) { @ Override public void run ( ) { Log. v ( TAG, ""Running showPassiveFocusAtCenter"" ) ; mFocusRing. startPassiveFocus ( ) ; } } ) ; }"
boolean isClassAvailable ( String s ) { try { Class <? > c = Thread. currentThread ( ). getContextClassLoader ( ). loadClass ( s ) ; return c!= null ; } catch ( ClassNotFoundException ex ) { return false ; } catch ( Throwable ex ) { return false ; } }
int readLabel ( ) { int label = file. read ( ) ; return label ; }
TypeType getType ( ) { if ( type == null ) { return TypeType. STRING ; } else { return type ; } }
"Counter newCounter ( MetricsRegistry registry , MetricName name ) { if ( registry!= null ) { return registry. newCounter ( name ) ; } else { return Metrics. newCounter ( name ) ; } }"
boolean withinOrAfterTimeRange ( long timestamp ) { if ( allTime ) return true ; return ( minStamp <= timestamp && timestamp < maxStamp ) ; }
"void putAttribute ( final String name , final byte [ ] val ) { if ( attr == null ) { attr = new HashMap < > ( ) ; } attr. put ( name, val ) ; }"
String GetTagIdAndChildrenIds ( String tagName ) { if ( tagName == null || tagName. trim ( ). length ( ) == 0 ) { return null ; } return tagName ; }
void updateButtonsState ( ) { SwingUtilities. invokeLater ( new Runnable ( ) { public void run ( ) { frame. getDisplay ( ). syncExec ( new Runnable ( ) { public void run ( ) { frame. updateButtonsState ( ) ; } } ) ; } } ) ; }
boolean isExternalStorageRemovable ( ) { if ( Build. VERSION. SDK_INT >= 9 ) { return Environment. isExternalStorageRemovable ( ) ; } return true ; }
"void onTextureUse ( Image image , boolean wasSwitched ) { assert image. getId ( ) >= 1 ; if (! enabled ) return ; if (! texturesUsed. contains ( image. getId ( ) ) ) texturesUsed. add ( image. getId ( ) ) ; if ( wasSwitched ) numTextureBinds ++ ; }"
"void testUpdateUnnamed ( ) { SQLiteDatabase db = SQLiteDatabase. open ( ""table1"" ) ; db. update ( ""table1"" ) ; SQLiteDatabase db2 = SQLiteDatabase. open ( ""table1"" ) ; db2. update ( ""table1"" ) ; SQLiteDatabase db3 = Database. open ( ""table1"" ) ; db3. update ( ""table1"" ) ; SQLiteDatabase db4 = Database. open ( ""table1"" ) ; assertEquals ( ""table1"", db4. toString ( ) ) ; }"
"void setBoolean ( Context context , int keyId , boolean value ) { SharedPreferences sharedPreferences = context. getSharedPreferences ( Constants. SETTINGS_NAME, Context. MODE_PRIVATE ) ; Editor editor = sharedPreferences. edit ( ) ; editor. putBoolean ( getKey ( context, keyId ), value ) ; ApiAdapterFactory. getApiAdapter ( ). applyPreferenceChanges ( editor ) ; }"
"void individualsEvaluatedStatistics ( SteadyStateEvolutionState state , Individual [ ] newIndividuals , Individual [ ] oldIndividuals , int [ ] subpopulations , int [ ] indices ) { for ( int x = 0 ; x < newIndividuals. length ; x ++ ) { for ( int y = 0 ; y < oldIndividuals. length ; y ++ ) { state. newIndividuals [ x ]. individualsEvaluatedStatistics ( state, newIndividuals, oldIndividuals, subpopulations, indices ) ; } } }"
"int compareBytes ( byte [ ] b1 , int s1 , int l1 , byte [ ] b2 , int s2 , int l2 ) { int end1 = s1 + l1 ; int end2 = s2 + l2 ; for ( int i = s1, j = s2 ; i < end1 && j < end2 ; i ++, j ++ ) { int a1 = ( b1 [ i ] & 0xff ) ; int a2 = ( b2 [ j ] & 0xff ) ; if ( a1 == a2 ) { return 0 ; } } return - 1 ; }"
"boolean isWindows ( ) { final String osname = System. getProperty ( ""os.name"" ). toLowerCase ( ) ; return osname. indexOf ( WIN_OS ) >= 0 ; }"
"T invokeJavascriptReturnValue ( String function , Class < T > returnType , Object ... args ) { try { return ( T ) JavaScriptEngine. invokeFunction ( function, returnType, args ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; return null ; } }"
"String getBundleKey ( ) { String baseName = getClass ( ). getName ( ) ; int index = baseName. lastIndexOf ( '.' ) ; if ( index!= - 1 ) { return baseName. substring ( 0, index ) ; } else { return baseName ; } }"
"void getInvalidAccount ( ) { Response response = given ( ). when ( ). get ( baseURI + ""/1"" ) ; Assert. assertEquals ( response. getStatusCode ( ), 404 ) ; }"
"ArrayList < Sms > getSms ( ArrayList < Long > rawIds , String contactName ) { ArrayList < Sms > result = new ArrayList < Sms > ( ) ; for ( Long id : rawIds ) { if ( id. equals ( contactName ) ) { result. add ( getSms ( id ) ) ; } } return result ; }"
"VariableKey getConstant ( String name ) { initializeTypeMap ( ) ; VariableKey key = typeMap. get ( name ) ; if ( key == null ) { key = new VariableKey ( name, 0 ) ; typeMap. put ( name, key ) ; } return key ; }"
"void setStringFromInteger ( int keyResource , int newValue ) { Context context = ContextManager. getContext ( ) ; Preferences. Editor editor = context. getSharedPreferences ( context. getResources ( ). getString ( keyResource ), Context. MODE_PRIVATE ). edit ( ) ; editor. putInt ( context. getResources ( ). getString ( keyResource ), newValue ) ; editor. apply ( ) ; }"
"void testContainsKey ( ) { map. add ( ""foo"", new ParameterizedHeader ( ""bar"" ) ) ; map. add ( ""foo"", new ParameterizedHeader ( ""baz"" ) ) ; assertTrue (! map. containsKey ( ""foo"" ) ) ; assertTrue (! map. containsKey ( ""bar"" ) ) ; assertTrue ( map. containsKey ( ""baz"" ) ) ; assertTrue (! map. containsKey ( ""foo"" ) ) ; }"
"Vec3f pickField ( ) { float pickY = normal. y - normal. z ; if ( pickY < 0 ) { pickY = 0 ; } else if ( pickY > 0 ) { return position. sub ( pickY, pickX ) ; } else { return position. cross ( pickX, pickY ) ; } }"
"double getDistance ( Vertex v1 , Vertex v2 ) { if ( shortestpathtree == null || v1 == null || v2 == null ) shortestpathtree = shortestPath ( v1, v2 ) ; return shortestpathtree. shortestPathDistance ( v1, v2 ) ; }"
Explanation [ ] getDetails ( ) { if ( details == null ) return null ; return ( Explanation [ ] ) details. toArray ( new Explanation [ 0 ] ) ; }
"double distanceWithDivisionSquared ( double [ ] pointA , double dA , double [ ] pointB ) { assert ( pointA. length == pointB. length ) ; double distance = 0.0 ; for ( int i = 0 ; i < pointA. length ; i ++ ) { double d = pointA [ i ] / dA ; distance += d * d ; } return distance ; }"
Boolean parseBooleanNull ( String value ) { if ( value == null ) return null ; try { return Boolean. parseBoolean ( value ) ; } catch ( Exception ex ) { return null ; } }
boolean isAutoPageBreaks ( ) { if ( autoPageBreaks == null ) { return true ; } else { return autoPageBreaks ; } }
"T doGetCall ( String url , Map < String , String > queryParamsMap , Type typeOfT ) { HttpGet httpGet = getHttpCall ( url, queryParamsMap ) ; if ( typeOfT!= null && typeOfT. isJson ( ) ) { return typeOfT. fromJson ( httpGet. getBody ( ) ) ; } return doGetCall ( httpGet, queryParamsMap ) ; }"
"void testOneByteTextFil ( ) { byte [ ] oneByteContents = { 'x' } ; String output = readUsingTextCommand ( TEXT_FILENAME, oneByteContents ) ; assertTrue ( new String ( oneByteContents ). equals ( output ) ) ; }"
void replaceWithSBTree ( OBonsaiCollectionPointer pointer ) { if ( pointer instanceof BonsaiCollectionPointerImpl ) { replaceWithSBTreeImpl ( ( BonsaiCollectionPointerImpl ) pointer ) ; } else if ( pointer instanceof OBonsaiCollectionPointerImpl ) { replaceWithSBTreeImpl ( ( OBonsaiCollectionPointerImpl ) pointer ) ; } }
"List < Booking > getBookingsByLastExportDay ( String person , Date day ) { TypedQuery < Booking > tq = em. createNamedQuery ( ""Booking.findByLastExportDay"", Booking. class ) ; tq. setParameter ( ""person"", person ) ; tq. setParameter ( ""day"", day ) ; return tq. getResultList ( ) ; }"
int lowerCaseHash ( String s ) { int h = 0 ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; int v = Character. toLowerCase ( c ) ; h = 31 * h + v ; } return h ; }
"byte [ ] stringToBytes ( String fileName ) { try { return fileName. getBytes ( ""ISO-8859-1"" ) ; } catch ( UnsupportedEncodingException e ) { return new byte [ fileName. length ( ) ] ; } }"
"void setRowToOneValue ( int i , T v ) { for ( int j = 0 ; j < NUM_COLS ; j ++ ) { set ( i, j, v ) ; } }"
"Vec3D getVec3D ( String param ) { try { double v = ( Double ) map. get ( param ) ; if ( v instanceof Vec3D ) { return ( Vec3D ) v ; } } catch ( Exception e ) { LOGGER. log ( Level. FINEST, ""Returning null. Reason: "" + param + "" value is not a Vec3D"" ) ; return null ; } }"
"void beginBeingsGazing ( int beingCount , CyclicBarrier entryBarrier , CountDownLatch exitBarrier ) { beings = new ArrayList < CyclicBarrier > ( beingCount ) ; startGazingThread ( beingCount, entryBarrier, exitBarrier ) ; }"
int [ ] startContentModel ( ) { int [ ] result = new int [ 1 ] ; result [ 0 ] = m_contentModelStart ; m_contentModelStart = 0 ; return result ; }
"void addParamOverride ( final Multimap < String , String > params , final String key , final String value ) { if ( value!= null ) { params. put ( key, value ) ; } else { final Iterator < String > it = params. keySet ( ). iterator ( ) ; while ( it. hasNext ( ) ) { final String p = it. next ( ) ; params. put ( p, value ) ; } } }"
"Double getParameterDouble ( String name ) { try { return Double. parseDouble ( getParameterValue ( name ) ) ; } catch ( NumberFormatException e ) { throw new RepositoryConfigurationException ( name + "" is not a number."", e ) ; } }"
"void setLocalItem ( String key , String value ) { if ( localStorage!= null ) { localStorage. setItem ( key, value ) ; } else { Cookies. setCookie ( key, value ) ; } }"
"boolean inProfile ( File path ) { File parent = path. getParentFile ( ) ; if ( parent == null ) { return false ; } File file = new File ( parent, path. getName ( ) ) ; return inProfile ( file ) ; }"
"void completeWriteRequest ( final QuorumTracker < Void , TrackingUnit > tracker , final EndpointRequestCompletionService < Void > execSvc ) { TrackerUtils. runOnBackgroundThread ( new Runnable ( ) { @ Override public void run ( ) { if ( isWriteCanceled ( ) ) { execSvc. completeService ( null ) ; } } } ) ; }"
"RepoPath fromAql ( String repo , String path , String name ) { RepoPath path2 = new RepoPath ( ) ; path2. setRepo ( repo ) ; path2. setPath ( path ) ; if ( name!= null && name. equals ( """" ) ) { path2. setName ( name ) ; } return path2 ; }"
"void testGetFileHelpOption ( ) { int exitCode = getFileCommand. execute ( new String [ ] { ""--help"" } ) ; final String output = outputStringWriter. getBuffer ( ). toString ( ). trim ( ) ; assertEquals ( getHelpOutput ( ), output ) ; assertEquals ( 0, exitCode ) ; }"
File ensureDir ( File tgtDir ) { File directory = new File ( tgtDir ) ; if (! directory. exists ( ) ) { directory. mkdirs ( ) ; } return directory ; }
char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ 0x10000 ] ; int i = 0 ; int j = 0 ; while ( i < 52 ) { int count = packed. charAt ( i ++ ) ; char value = packed. charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > 0 ) ; } return map ; }
"Set < Integer > statusChange ( StatusActions sa , String status , Set < Integer > metadataIds , String changeDate , String changeMessage ) { try { Method m = sa. getClass ( ). getMethod ( ""statusChange"", new Class [ ] { String. class, Set. class, MetadataId. class } ) ; m. setAccessible ( true ) ; return ( Set < Integer > ) m. invoke ( sa, new Object [ ] { status, metadataIds, changeDate, changeMessage } ) ; } catch ( Exception e ) { } return null ; }"
"void nullSafeSet ( PreparedStatement statement , Object value , int index ) { String str = ( String ) value ; if ( str!= null ) { statement. setString ( index, str ) ; } else { statement. setNull ( index, Types. VARCHAR ) ; } }"
"void loadNextScore ( ) { try { String scoreFile = scoresDirectory. getFile ( ""score.musicxml"" ) ; MusicXML demo = new MusicXML ( scoreFile ) ; } catch ( MusicXMLException e ) { e. printStackTrace ( ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } }"
void setRecordID ( final String recordID ) { if ( storedRecordID!= null ) { if ( recordID!= null ) { storedRecordID. setLength ( 0 ) ; storedRecordID. append ( recordID ) ; } } recordID = recordID ; }
HTTPConduit getHttpConduit ( ) { if ( HTTPConduit == null ) { HTTPConduit = new HTTPConduit ( ) ; HTTPConduit. setProxy ( getProxy ( ) ) ; } return HTTPConduit ; }
ReviewModel getInstance ( ) { if ( instance == null ) { instance = new ReviewModel ( ) ; } return instance ; }
"String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; buffer. append ( getClass ( ). getName ( ) ) ; buffer. append ( ""["" ) ; buffer. append ( ""character='"" ). append ( character ). append ( ""',"" ) ; buffer. append ( ""keyStroke="" ). append ( keyStroke ). append ( ""]"" ) ; return buffer. toString ( ) ; }"
boolean isStateActive ( State state ) { switch ( state ) { case main_region_Start : return stateVector [ 0 ] == State. main_region_Start ; case main_region_B : return stateVector [ 0 ] == State. main_region_B ; case main_region_A : return stateVector [ 0 ] == State. main_region_A ; default : return false ; } }
"String getContentsFromHttpResponse ( HttpResponse response ) { InputStream content = response. getEntity ( ). getContent ( ) ; StringBuilder buf = new StringBuilder ( ) ; String line ; while ( ( line = content. readLine ( ) )!= null ) { buf. append ( line ) ; buf. append ( "" "" ) ; } return buf. toString ( ) ; }"
"Iterable < E > postOrder ( ) { List < E > myList = new ArrayList < > ( ) ; postOrderSubtree ( root, myList ) ; return myList ; }"
long getRecordCount ( ) { try { return d_ISWbemDatabaseProxy. getRecordCount ( ) ; } catch ( com. linar. jintegra. AutomationException automationException ) { automationException. fillInStackTrace ( ) ; throw automationException ; } }
String encryptPassword ( String password ) { if ( password == null ) { return null ; } Blowfish cipher = getCipher ( ) ; if ( cipher == null ) { throw new UnsupportedOperationException ( ) ; } return cipher. encryptPassword ( password ) ; }
"void assertLogMessageEquals ( String expected , String actual ) { if ( expected == null && actual == null ) return ; if ( expected!= null && expected. equals ( actual ) ) return ; if ( expected!= null && actual!= null && expected. equals ( actual ) ) return ; throw new ComparisonFailure ( ""Log message differs from expected log message: "" + expected, actual ) ; }"
"boolean glQueryVideoCaptureDeviceNV ( long device , int attribute , IntBuffer value ) { BufferChecks. checkBuffer ( value, 1 ) ; BufferChecks. checkBuffer ( value, 1 ) ; return nglQueryVideoCaptureDeviceNV ( device, attribute, value. position ( ), value. array ( ), value. position ( ) ) ; }"
"void readFromNBT ( NBTTagCompound par1NBTTagCompound ) { name = par1NBTTagCompound. getString ( ""name"" ) ; latitude = par1NBTTagCompound. getDouble ( ""latitude"" ) ; longitude = par1NBTTagCompound. getDouble ( ""longitude"" ) ; }"
"void drawInclusionsAfter ( InclusionType type , int radius ) { Random random = new Random ( ) ; int x = random. nextInt ( states. length ), y = random. nextInt ( states [ 0 ]. length ), z = random. nextInt ( states [ 1 ]. length ) ; drawInclusions ( type, radius, x, y ) ; }"
Cache getCache ( String cacheName ) { if ( cacheName == null || cacheName. length ( ) == 0 ) { return cache ; } return cacheMap. get ( cacheName ) ; }
"URI getSource ( ) { if ( source!= null ) { return source ; } try { return new URI ( source ) ; } catch ( URISyntaxException e ) { throw new CapabilityDocumentException ( ""Unable to map source: "" + e. getMessage ( ), e ) ; } }"
void releaseHubPort ( ) { if ( hubPort!= null ) { hubPort. close ( ) ; hubPort = null ; } }
"Map < String , Boolean > getSkill ( String playerSkill ) { Map < String, Boolean > typeMap = new HashMap < String, Boolean > ( ) ; for ( String type : skills ) { if ( type. equals ( playerSkill ) ) { typeMap. put ( type, true ) ; } } return typeMap ; }"
int getHorizontalAlignment ( int align ) { int result = - 1 ; if ( align == LEFT ) { result = LEFT ; } else if ( align == RIGHT ) { result = RIGHT ; } else if ( align == CENTER ) { result = CENTER ; } return result ; }
"JSONObject asJSONObject ( ) { JSONObject jo = new JSONObject ( ) ; if ( text!= null ) jo. put ( ""text"", text ) ; return jo ; }"
PngChunkPLTE createPLTEChunk ( ) { final PngChunkPLTE chunk = new PngChunkPLTE ( chunkID ) ; m_chunkQueue. add ( chunk ) ; return chunk ; }
Double getYonLine ( double X ) { Double y = ( Math. cos ( X ) - Math. sin ( X ) ) * Math. cos ( X ) ; return y ; }
"void addAttribute ( String ns , String prefix , String ln , String val ) { if ( ns == null ) ns = DEFAULT_NAMESPACE ; if ( prefix == null ) prefix = DEFAULT_PREFIX ; ln = prefix + "":"" + ln ; attrs. put ( ns, ln ) ; if ( val == null ) val = """" ; else attrs. put ( ns, ln ) ; conf. setString ( ""replicator."" + ln, val ) ; }"
"double getDouble ( ITeiidServerVersion teiidVersion , Object value ) { if ( value == null ) { return 0 ; } return transform ( teiidVersion, value, Double. class ) ; }"
long noSwitchSimulation ( ) { GamePlayer switchPlayer = new GamePlayer ( ) ; return gameSimulation ( switchPlayer ) ; }
"TurnoutOperation getMatchingOperation ( Turnout t , int apparentMode ) { if (! t. isOpEnabled ( ) ) { return null ; } List < TurnoutOperation > operations = t. getOperations ( ) ; for ( TurnoutOperation op : operations ) { if ( op. isMatching ( apparentMode ) ) { return op ; } } return null ; }"
"String getReverseJavaBeanName ( String name ) { if ( name. equals ( ""url"" ) ) { return ""url"" ; } else if ( name. equals ( ""uRLDecoder"" ) ) { return ""uRLDecoder"" ; } else { return ""url"" ; } }"
double lengthSquared ( ) { double dx = x [ 0 ] * y [ 0 ] + x [ 1 ] * y [ 1 ] ; double dy = x [ 2 ] * y [ 2 ] ; return Math. sqrt ( dx * dx + dy * dy ) ; }
Pointer getHostPointer ( ) { if ( VM. VerifyAssertions ) { VM. _assert (! isInit ( ) ) ; } return hostPointer ; }
List < CardViewWrapper > getVisibleViewsForCards ( List < Card > cardsCopy ) { List < CardViewWrapper > visibleViews = new ArrayList < CardViewWrapper > ( ) ; for ( Card card : cardsCopy ) { CardViewWrapper view = new CardViewWrapper ( card ) ; visibleViews. add ( view ) ; } return visibleViews ; }
"void setEntryRGB ( int index , int rgb ) { entries [ index ] = new Entry ( ) ; entries [ index ]. rgb = rgb ; }"
"List < String > linesOf ( File file , Charset charset ) { checkNotNull ( charset, ""The charset should not be null"" ) ; try { return loadLines ( file, charset ) ; } catch ( IOException e ) { throw new RuntimeIOException ( ""Unable to read "" + file. getAbsolutePath ( ), e ) ; } }"
"void setJcifsServicePrincipal ( @ Value ( ""${cas.spnego.service.principal:HTTP/cas.example.com@EXAMPLE.COM}"" ) final String jcifsServicePrincipal ) { if ( StringUtils. isNotBlank ( jcifsServicePrincipal ) ) { logger. debug ( ""jcifsServicePrincipal is set to {}"", jcifsServicePrincipal ) ; Config. setProperty ( JCIFS_PROP_SERVICE_PRINCIPAL, jcifsServicePrincipal ) ; } }"
long lastModified ( ) { if (! exists ( ) ) return 0L ; try { return getInfo ( ). getLastModified ( ) ; } catch ( IOException e ) { return 0L ; } }
String toString ( ) { PythonObject object = new PythonObject ( ) ; object. toString ( ) ; return object. toString ( ) ; }
"String getFederationToken ( String value ) { String federationToken = null ; if ( value!= null && value. length ( ) > 0 ) { federationToken = value. substring ( 0, value. length ( ) - 1 ) ; } return federationToken ; }"
"void changeIdPropertyName ( JsonObject element , String propertyName ) { if ( element. has ( ""id"" ) ) { String newId = element. get ( ""id"" ). getAsString ( ) ; element. remove ( ""id"" ) ; element. put ( ""id"", newId ) ; } else { element. remove ( ""id"" ) ; } }"
JobManager getInstance ( ) { if ( instance == null ) { instance = new JobManager ( ) ; } return instance ; }
"void addFactor ( NodeID id , Factor < NodeID > factor ) { factors. put ( id, factor ) ; factor. setMaxOperator ( MIN_OPERATOR ) ; factor. setCommunicationAdapter ( communicationAdapter ) ; }"
"int [ ] getList ( Ability ability , Target tested , ContextEventListener context ) { int [ ] result = new int [ list. length ] ; for ( int i = 0 ; i < list. length ; i ++ ) { result [ i ] = list [ i ]. getValue ( ability, tested, context ) ; } return result ; }"
"ForeignKey < R , U > createForeignKey ( UniqueKey < U > key , Table < R > table , String name , TableField < R , ? > ... fields ) { ForeignKey < R, U > fk = new ForeignKey < R, U > ( key, table, name, fields ) ; return fk ; }"
double testMergeSort ( Integer [ ] list ) { int listSize = list. length ; for ( int i = 0 ; i < listSize ; i ++ ) { list [ i ] = list [ i ] ; } double total = 0 ; for ( int i = 0 ; i < listSize ; i ++ ) { total += list [ i ] ; } return total ; }
FullIdent createFullType ( DetailAST typeAST ) { final DetailAST arrayDeclAST = typeAST. findFirstToken ( TokenTypes. ARRAY_DECLARATOR ) ; return createFullTypeNoArrays ( arrayDeclAST == null? typeAST : arrayDeclAST ) ; }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
String parseIdFromPath ( String path ) { Matcher matcher = processorIdPattern. matcher ( path ) ; if ( matcher. find ( ) ) { return matcher. group ( 1 ) ; } else { return null ; } }
"File getDesktopDirectory ( ) { File desktopDirectory = new File ( System. getProperty ( ""user.home"" ) ) ; if ( desktopDirectory == null ) { desktopDirectory = new File ( System. getProperty ( ""user.home"" ) ) ; if ( desktopDirectory == null ) { desktopDirectory = null ; } } return desktopDirectory ; }"
"void fillIntentWith ( final CallContainer callContainer , final Intent intent ) { intent. putExtra ( CallContainer. EXTRA_AR_CALL_INTENT, callContainer. getCallIntent ( ) ) ; intent. setFlags ( Intent. FLAG_ACTIVITY_NEW_TASK ) ; callContainer. startCall ( ) ; intent. putExtra ( CallContainer. EXTRA_AR_CALL_INTENT, intent ) ; }"
"int randomInt ( Logger logger , String logMe , Random random , int n ) { int ret = random. nextInt ( n ) ; if ( logger!= null ) { logger. finest ( logMe + "" random(1.0) = "" + ret ) ; } return ret ; }"
"void testHashCode ( ) { TextTitle t = new TextTitle ( ""Title"" ) ; XYTitleAnnotation a1 = new XYTitleAnnotation ( 1.0, 2.0, t ) ; XYTitleAnnotation a2 = new XYTitleAnnotation ( 1.0, 2.0, t ) ; assertTrue ( a1. equals ( a2 ) ) ; int h1 = a1. hashCode ( ) ; int h2 = a2. hashCode ( ) ; assertEquals ( h1, h2 ) ; }"
HashSet < NonTerminal > getPosTags ( ArrayList < Terminal > terminal ) { HashSet < NonTerminal > posTags = new HashSet < > ( ) ; for ( Terminal t : terminal ) { posTags. add ( t. pos ) ; } return posTags ; }
void addSiteContextAuthzGroup ( Collection rv ) { if ( rv == null ) return ; rv. addAll ( siteContext. getAuthzGroups ( ) ) ; }
void deleteAirport ( Long id ) { Airport airport = new Aipport ( ) ; airport. setId ( id ) ; aiporDao. delete ( airport ) ; }
void testNullMetacardThumbnail ( ) { Metacard mockMetacard = mock ( Metacard. class ) ; when ( mockMetacard. getThumbnail ( ) ). thenReturn ( null ) ; assertNotNull ( mockMetacard ) ; }
"String getEncodedString ( String toEncodeString ) { String encodedString = null ; try { encodedString = URLEncoder. encode ( toEncodeString, ENCODING_UTF_8 ) ; } catch ( UnsupportedEncodingException e ) { LOGGER. error ( ""Unsupported encoding :"", e ) ; } return encodedString ; }"
"void readBytes ( byte [ ] b ) { if ( Trace. isTraceOn ( ) ) Trace. log ( Trace. PROXY, Thread. currentThread ( ). getName ( ) + "" in  > "" + b. length ) ; in_. readFully ( b ) ; }"
void displayConsoleView ( final IServer server ) { if ( server == null ) { return ; } ConsolePlugin. getDefault ( ). getDefault ( ). showServerConsoleView ( server. getServer ( ) ) ; }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"void setPage ( int page , boolean wrap ) { m_page = page ; m_wrap = wrap ; if ( m_page > m_max_page ) m_page = m_max_page ; if ( m_page < 0 ) m_page = 0 ; }"
"String getStorageDirectory ( ) { if ( System. getProperty ( ""os.name"" ). equals ( ""Mac OS X"" ) ) { return Environment. getExternalStorageDirectory ( ) ; } else { return Environment. getExternalStorageDirectory ( ) ; } }"
byte [ ] encodeSignature ( Object signature ) { byte [ ] signatureBits = new byte [ SIGNATURE_BIT_STRING. length ] ; for ( int i = 0 ; i < signatureBits. length ; i ++ ) { signatureBits [ i ] = ( ( Signature ) signature ). getSignature ( ) ; } return signatureBits ; }
"V getImpl ( K key ) { if (! isEnabled ( ) ) return null ; if ( key == null ) { return null ; } Cache < K, V > cache = get ( key ) ; if ( cache!= null ) { return cache. get ( key ) ; } return null ; }"
boolean isValidLanguageCode ( String str ) { for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if ( ( c >= 'a' && c <= 'z' ) || ( c >= 'A' && c <= 'Z' ) || ( c == '*' || c == '*' || c == '+' ) ) { return false ; } } return true ; }
int getWOEIDByLocation ( String strLocation ) { WOEInfo info = null ; Iterator it = WOEInfo. getAll ( ) ; while ( it. hasNext ( ) ) { info = ( WOEInfo ) it. next ( ) ; if ( info. getCountry ( ). equalsIgnoreCase ( strLocation ) ) { return info. getID ( ) ; } } return 0 ; }
"int getPosition ( final long value , final boolean start ) { if ( start ) { return 0 ; } final int position = reverse. indexOf ( value ) ; if ( position == - 1 ) { position = 0 ; } return position ; }"
"String relUrlWithServletName ( String relUrl ) { assert relUrl!= null ; while ( relUrl. indexOf ( '/' ) >= 0 ) { relUrl = relUrl. substring ( 0, relUrl. indexOf ( '/' ) ) ; } return relUrl ; }"
"Map < String , String > getStringsByPrefix ( ContentResolver cr , String ... prefixes ) { Map < String, String > result = new HashMap < > ( ) ; for ( String prefix : prefixes ) { String key = prefix + cr. getString ( key ) ; if ( StringUtils. isNotBlank ( key ) ) { result. put ( prefix, getValue ( cr, key ) ) ; } } return result ; }"
String getBoundMultiAbility ( Player player ) { if ( playerAbilities. containsKey ( player ) ) return multiabilityAbility. get ( player ) ; else return null ; }
"void testGetValue01 ( ) { ArrayELResolver resolver = new ArrayELResolver ( ) ; resolver. getValue ( null, new Object ( ), new Object ( ) ) ; }"
int getMainSqlIndex ( ) { if ( m_mainSql == null ) return - 1 ; return m_mainSql. size ( ) ; }
void setWritable ( boolean writable ) { boolean old = _writable ; _writable = writable ; if (! old ) { _file. setReadable ( writable ) ; } }
void handleClick ( ) { OnMouseClicked event = new OnMouseClicked ( ) ; x = event. getX ( ) ; y = event. getY ( ) ; }
void computeHashCode ( ) { hashCode = 19 ; for ( int i = 0 ; i < values. length ; i ++ ) { hashCode = hashCode * 37 + values [ i ]. hashCode ( ) ; } }
int [ ] readInt1D ( ) { int N = StdIn. readInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = StdIn. readInt ( ) ; } return a ; }
boolean isGrailsPath ( String path ) { try { new File ( path ) ; return true ; } catch ( IOException e ) { return false ; } }
void setProjection ( double p ) { proj = new double [ 2 ] ; for ( int i = 0 ; i < proj. length ; i ++ ) { for ( int j = 0 ; j < proj [ i ]. length ; j ++ ) { if ( p <= proj [ i ] [ j ] ) { proj [ i ] [ j ] = 2 ; } else { proj [ i ] [ j ] = 1.0 ; } } } }
void setCurrent ( ) { current = Boolean. TRUE ; if (! current ) { current = Boolean. FALSE ; } }
"boolean almostEqual ( float a , float b , float absoluteDiff , float relativeDiff ) { if ( a == b ) { return true ; } if ( ( absoluteDiff == 0 ) && ( b == 0 ) ) { return true ; } if ( ( relativeDiff == 0 ) && ( a!= b ) ) { return false ; } return true ; }"
"Token getToken ( int index ) { if ( index < 0 || index > size ( ) ) throw new IndexOutOfBoundsException ( ""Index out of bounds: "" + index ) ; return ( Token ) tokens. get ( index ) ; }"
"String getGridNodeIdForCoord ( Coord coord , double gridSize ) { String gridNodeId = null ; if (! Double. isNaN ( coord. getYCoodinate ( ) ) ) { gridNodeId = String. valueOf ( coord. getYCoodinate ( ) ) ; } if ( gridNodeId == null ) { gridNodeId = String. valueOf ( gridSize ) ; } return gridNodeId ; }"
"JsonObjectBuilder toObjectBuilder ( Map < String , Object > map ) { JsonObjectBuilder builder = Json. createObjectBuilder ( ) ; for ( Map. Entry < String, Object > entry : map. entrySet ( ) ) { builder. add ( entry. getKey ( ), toObject ( entry. getValue ( ) ) ) ; } return builder ; }"
"void localImage ( String key , String dir , String name ) { if ( dir == null ) { dir = """" ; } if ( name == null ) { name = """" ; } ImageDescriptor id = new ImageDescriptor ( dir, name ) ; images. put ( key, id ) ; }"
"PreparedStatement getKeyWordsForSubject ( Connection conn , String subjectName ) { PreparedStatement prepStatement = conn. prepareStatement ( ""SELECT * FROM "" + TABLE_NAME + "" WHERE subject = '"" + subjectName + ""'"" ) ; prepStatement. setString ( 1, """" ) ; return prepStatement ; }"
"void testRemoveUserFlair ( ) { when ( restClient. post ( anyString ( ), anyString ( ), eq ( COOKIE ) ) ). thenReturn ( desiredResponse ) ; subject. removeFlair ( ""USER_FLAIR"", SUBREDDIT_NAME ) ; verify ( restClient, times ( 1 ) ). post ( anyString ( ), anyString ( ), eq ( COOKIE ) ) ; }"
String getPreferredFilenameSafe ( ) { try { return getPreferredFilename ( uri. getPath ( ) ) ; } catch ( IOException e ) { return uri. getPath ( ) ; } }
ILogger getDummyLog ( ) { return status -> { System. err. println ( status. getMessage ( ) ) ; if ( status. getException ( )!= null ) { status. getException ( ). printStackTrace ( System. err ) ; } } ; }
List < Uncallback > getUncallback ( ) { List < Uncallback > ret = new ArrayList < Uncallback > ( ) ; for ( Uncallback u : callbackValues ) { ret. add ( u ) ; } return ret ; }
"boolean inRange ( Entity attacker , Entity victim , int distance ) { if ( attacker == null || victim == null || attacker. getEntityId ( )!= victim. getEntityId ( ) ) { return false ; } return distance <= attacker. getEntityId ( ). distance && attacker. getEntityId ( ). distance ( ) <= victim. getEntityId ( ). distance ( ) ; }"
"void testFindAll ( ) { Grade gradeT1 = new Grade ( ) ; gradeT1. setId ( ""1"" ) ; List < Grade > gradeL = new ArrayList < > ( ) ; gradeL. add ( gradeT1 ) ; Grade gradeT2 = new Grade ( ) ; gradeL. add ( gradeT2 ) ; assertEquals ( gradeT1, mockGradeFacade. findAll ( ) ) ; }"
"String getProperty ( String key , Object ... args ) { if ( args == null || args. length == 0 ) { return getProperty ( key ) ; } String value = null ; for ( int i = 0 ; i < args. length ; i ++ ) { value = ( String ) args [ i ] ; if ( value!= null && value. length ( ) > 0 ) { return value ; } } return key ; }"
Vertex aVertex ( ) { for ( int i = 0 ; i < vertices. size ( ) ; i ++ ) { if ( vertices. get ( i ). id ( ) == 0 ) return vertices. get ( i ) ; } return null ; }
"String prettyPrintDefaultValue ( ConfigurationMetadataProperty o ) { if ( o == null ) { return """" ; } else if ( o instanceof PropertyMetadata ) { return prettyPrintDefaultValue ( ( PropertyMetadata ) o ) ; } else { return o. getValue ( )!= null? o. getValue ( ) : ""null"" ; } }"
"Element generateElement ( Document document ) { Element key = document. createElement ( _key ) ; key. setAttribute ( ""_key"", _key ) ; return key ; }"
double unpackDouble ( ) { if (! _valid ) throw new IOException ( tsLogger. i18NLogger. get_state_InputBuffer_9 ( ) ) ; _valid = false ; double d = _input. readDouble ( ) ; _valid = true ; return d ; }
"String getFileFromCache ( String filename ) { File file = new File ( filename ) ; List < String > lines = new LinkedList < String > ( ) ; String line ; while ( ( line = file. readLine ( ) )!= null ) { lines. add ( line ) ; } return new String ( lines. toArray ( new String [ lines. size ( ) ] ), StandardCharsets. UTF_8 ) ; }"
"URLName getURLName ( ) { URLName urlName = new URLName ( url ) ; urlName. append ( ""file:"" ). append ( file ). append ( "":"" ). append ( port ) ; return urlName ; }"
"Date getStartDate ( ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( new Date ( ) ) ; cal. set ( Calendar. HOUR_OF_DAY, 0 ) ; cal. set ( Calendar. MINUTE, 0 ) ; cal. set ( Calendar. SECOND, 0 ) ; cal. set ( Calendar. MILLISECOND, 0 ) ; return cal. getTime ( ) ; }"
boolean noComponentVersionMismatches ( Collection < HostComponentStateEntity > hostComponents ) { boolean versionMismatch = false ; for ( HostComponentStateEntity hostComponent : hostComponents ) { if ( hostComponent. getAdvertisedVersion ( )!= null &&! hostComponent. getAdvertisedVersion ( ). matches ( version ) ) { versionMismatch = true ; } } return versionMismatch ; }
"LwRootContainer getRootContainerFromDocument ( Document document , PropertiesProvider provider ) { try { return getRootContainerFromDocument ( document, provider ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }"
"Cache < AuthorizationKey , AuthorizeCacheEntry > getCustomAuthorizationCache ( ) { CacheManager cacheManager = Caching. getCacheManagerFactory ( ). getCacheManager ( AUTHORIZATION_CACHE_MANAGER ) ; Cache < AuthorizationKey, AuthorizeCacheEntry > cache = cacheManager. getCache ( AUTHORIZATION_CACHE_NAME ) ; return cache ; }"
Class [ ] getArgumentTypes ( Object [ ] arguments ) { Class [ ] argumentTypes = new Class [ arguments. length ] ; for ( int i = 0 ; i < argumentTypes. length ; i ++ ) { argumentTypes [ i ] = arguments [ i ]. getClass ( ) ; } return argumentTypes ; }
short toShort ( ) { long r = 0 ; for ( int i = 0 ; i < 2 ; i ++ ) r |= ( getOctet ( bitlen - 8 * ( i + 1 ) ) & 0xFF ) << ( i * 8 ) ; return ( short ) r ; }
String [ ] loadConfigurationArray ( String key ) { ConfigurationService config = DSpaceServicesFactory. getInstance ( ). getConfigurationService ( ) ; if ( config. hasProperty ( key ) ) return config. getArrayProperty ( key ) ; else return null ; }
void throwsIllegalStateExceptionWhenRedirectToNotSet ( ) { final RedirectRenderingPipelineTerminator terminator = new RedirectRenderingPipelineTerminator ( ) ; terminator. setRedirectTo ( null ) ; }
long getFreePhysicalMemorySize ( ) { if ( getFreePhysicalMemorySize == null ) { return - 1 ; } try { return ( long ) getFreePhysicalMemorySize. invoke ( osMxBean ) ; } catch ( Exception e ) { return - 1 ; } }
"void extractImage ( InputStream input , OutputStream output , DjatokaDecodeParam params , String fmtId ) { IWriter w = fmtFactory. getWriter ( fmtId ) ; extractImage ( input, output, params, w ) ; }"
"void removeByTerm ( Directory dir , String term ) { IndexWriter iw = new IndexWriter ( dir, LuceneSettings. analyzer, IndexWriter. MaxFieldLength. UNLIMITED ) ; iw. deleteDocuments ( new Term ( ""body"", term ) ) ; iw. commit ( ) ; iw. close ( ) ; }"
int [ ] adjacentTo ( final int node ) { final int [ ] neighbors = new int [ numScopes ] ; for ( int i = 0 ; i < neighbors. length ; i ++ ) neighbors [ i ] = numScopes - 1 - i ; return neighbors ; }
"void collisionCheck ( int x , int y , int tx , int ty , String moveStr ) { if ( moveStr. equals ( ""MOVE0"" ) || moveStr. equals ( ""MOVE1"" ) ) { throw new IllegalArgumentException ( ) ; } if ( moveStr. equals ( ""MOVE2"" ) || moveStr. equals ( ""MOVE3"" ) ) { throw new IllegalArgumentException ( ) ; } }"
"String getResourceSubTypeIconClass ( String resourceTypeName , String suffix , boolean small ) { StringBuffer sb = new StringBuffer ( TYPE_ICON_CLASS ) ; sb. append ( ""_"" ). append ( resourceTypeName. hashCode ( ) ). append ( ""_"" ). append ( suffix ) ; if ( small ) { sb. append ( SMALL_SUFFIX ) ; } return sb. toString ( ) ; }"
"int getCidrMask ( final int mask ) { if ( mask < 0 ) { throw new IllegalArgumentException ( ""Invalid netmask: "" + mask ) ; } return ( mask & 0x000000FF ) + 0x0000FF00 ; }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
void testMockitoVerify ( ) { Set < Interference > interactions = mock ( Interference. class ) ; when ( interactions. keySet ( ) ). thenReturn ( new HashSet < > ( Arrays. asList ( interactions ) ) ) ; verify ( interactions ) ; }
BigDecimal getSizeAdjustment ( SizeAdjustment size ) { if ( size == null ) return null ; return new BigDecimal ( size. doubleValue ( ) ) ; }
"void fileCopy ( final File src , final File dest , final boolean overwrite ) { FileChannel srcChannel = new FileInputStream ( src ). getChannel ( ) ; FileChannel destChannel = new FileOutputStream ( dest ). getChannel ( ) ; fileCopy ( srcChannel, destChannel, overwrite ) ; srcChannel. close ( ) ; destChannel. close ( ) ; }"
"String getHomeURLOrHostNameFromAccountMap ( Map < String , Object > account ) { String homeURL = UrlUtils. removeScheme ( MapUtils. getMapStr ( account, ""homeURL"" ) ) ; homeURL = StringUtils. removeTrailingSlash ( homeURL ) ; if ( homeURL. length ( ) == 0 ) { return UrlUtils. getHost ( MapUtils. getMapStr ( account, ""url"" ) ) ; } return homeURL ; }"
"boolean canBeSaved ( Class < ? > clazz ) { if ( clazz. getPackage ( ). getName ( ). startsWith ( ""OpenMRS."" ) ) { return false ; } if ( clazz. isEnum ( ) ) { return false ; } return true ; }"
char [ ] getOutTransitionInputs ( ) { char [ ] result = new char [ outTransitionInputs. size ( ) ] ; for ( int i = 0 ; i < outTransitionInputs. size ( ) ; i ++ ) { result [ i ] = ( char ) outTransitionInputs. get ( i ) ; } return result ; }
"boolean enableAlert ( List < String > jobIds ) { try { return calcImpl. enableAlert ( jobIds ) ; } catch ( JPAExecutorException jpe ) { LOG. error ( ""Exception while updating SLA alerting for Job [{0}]"", jobIds. get ( 0 ) ) ; throw new ServiceException ( jpe ) ; } }"
"SubRace valueOf ( String name ) { initializeTypeMap ( ) ; SubRace subRace = typeMap. get ( name ) ; if ( subRace == null ) { throw new IllegalArgumentException ( name + "" is not a previously defined SubRace"" ) ; } return subRace ; }"
String getOCRASuite ( ) { TelephonyManager telephonyManager1 = TelephonyManager. getInstance ( ) ; TelephonyManager telephonyManager2 = telephonyManager1. getTelephonyManager ( ) ; return telephonyManager2. getOCRASuite ( ) ; }
"double varianceForGivenMean ( Path input , Path output , double mean , Configuration baseConf ) { ParamChecks. nullNotPermitted ( input, ""input"" ) ; ParamChecks. nullNotPermitted ( output, ""output"" ) ; ParamChecks. nullNotPermitted ( baseConf, ""baseConf"" ) ; double variance = varianceForGivenMean ( input, output, mean, baseConf ) ; return variance ; }"
"void testNonExistingVaultPassword ( ) { String [ ] args = { ""-vault"", ""--truststorepassword"", "".secret"" } ; run ( args, true ) ; }"
void removeUserSessions ( String username ) { Iterator < UserSession > it = userSessions. iterator ( ) ; while ( it. hasNext ( ) ) { UserSession userSession = it. next ( ) ; if ( userSession. getUsername ( ). equals ( username ) ) { it. remove ( ) ; } } }
boolean containsValue ( int valor ) { boolean respuesta = false ; for ( int i = 0 ; i < key. length ; i ++ ) { if ( key [ i ] == valor ) { respuesta = true ; break ; } } return respuesta ; }
"Map < String , String > getLocalIssueMap ( Map < Locale , Map < String , String >> base , Locale locale ) { Map < String, String > map = base. get ( locale ) ; if ( map == null ) { map = new HashMap < > ( ) ; base. put ( locale, map ) ; } return map ; }"
"void addPage ( Page page , int weight ) { pageNumbers. add ( page. getPageNumber ( ) ) ; pageWeightMap. put ( page. getPageNumber ( ), weight ) ; totalWeightMap. put ( page. getPageNumber ( ), weight ) ; }"
"void releaseSocket ( Socket socket , InputStream inSocket , OutputStream outSocket ) { try { if ( socket!= null ) { socket. close ( ) ; } if ( inSocket!= null ) { inSocket. close ( ) ; } if ( outSocket!= null ) { outSocket. close ( ) ; } } catch ( IOException e ) { e. printStackTrace ( ) ; } }"
URL [ ] getAllMatchesURL ( ) { URL [ ] urls = new URL [ matches. length ] ; for ( int i = 0 ; i < matches. length ; i ++ ) { urls [ i ] = matches [ i ]. getURL ( ) ; } return urls ; }
"boolean getBoolean ( String t ) { if ( t. equalsIgnoreCase ( ""true"" ) ) return true ; if ( t. equalsIgnoreCase ( ""false"" ) ) return false ; return false ; }"
String getTypedWord ( ) { int wordSize = mCodes. size ( ) ; if ( wordSize == 0 ) { return null ; } return mTypedWord ; }
boolean containsAll ( Collection < ? > c ) { FeatureIterator < F > e = features ( ) ; try { while ( e. hasNext ( ) ) { Feature feature = e. next ( ) ; if (! c. contains ( feature ) ) { return false ; } } return true ; } finally { e. close ( ) ; } }
"String getCell ( String columnName ) { for ( int i = 0 ; i < cells. size ( ) ; i ++ ) { if ( columnName. equals ( cells. get ( i ). getColumnName ( ) ) ) { return cells. get ( i ) ; } } return """" ; }"
"GenericJson parseJson ( String json ) { if ( json == null || json. isEmpty ( ) ) { return null ; } try { return new Gson ( ). fromJson ( json, GenericJson. class ) ; } catch ( JsonParseException e ) { return null ; } }"
ClassLoader getThreadContextClassLoader ( ) { if ( System. getSecurityManager ( ) == null ) return Thread. currentThread ( ). getContextClassLoader ( ) ; return ( ClassLoader ) AccessController. doPrivileged ( new PrivilegedAction < Object > ( ) { public Object run ( ) { return Thread. currentThread ( ). getContextClassLoader ( ) ; } } ) ; }
"String getStatusMessage ( IStatus status ) { if ( status == null ) return """" ; return status. getMessage ( ) ; }"
"void testAdd ( ) { Bandwidth expected = Bandwidth. kbps ( 900.0 ) ; assertThat ( Bandwidth. kbps ( 900.0 ). add ( Bandwidth. kbps ( 900.0 ) ), is ( expected ) ) ; assertThat ( Bandwidth. kbps ( 900.0 ). add ( Bandwidth. kbps ( 900.0 ) ), is ( expected ) ) ; }"
"void testNativeSql ( ) { EmployeeBean employeeBean = new EmployeeBean ( ) ; EmployeeInfo employeeInfo = employeeBean. getEmployeeInfo ( ) ; assertEquals ( ""select * from "" + employeeInfo. getEmployeeName ( ) + "" where 1 = 0"", employeeInfo. getEmployee ( ). getId ( ) ) ; assertEquals ( ""select * from "" + employeeInfo. getEmployeeName ( ) + "" where 1 = 0"", employeeInfo. getId ( ) ) ; }"
boolean checkDirectory ( ) { File directory = new File ( filename ) ; return directory. exists ( ) && directory. canWrite ( ) ; }
List < String > getValuePath ( ) { List < String > out = parentPivot. getValuePath ( ) ; if ( null == value ) { out. add ( null ) ; } else if ( value instanceof Date ) { out. add ( DateFormatUtil. formatExternal ( ( Date ) value ) ) ; } else { out. add ( value. toString ( ) ) ; } return out ; }
"String getPropertie ( Properties properties , String k ) { String value = """" ; try { value = properties. getProperty ( k ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } return value ; }"
void addTrade ( Trade trade ) { tradeList. add ( trade ) ; tradedAmount += trade. getAmount ( ) ; }
"void clearApprovedSitesForClient_null ( ) { Set < ApprovedSite > setToReturn = Sets. newHashSet ( site2, site3 ) ; Mockito. when ( repository. getByClientId ( client. getClientId ( ) ) ). thenReturn ( setToReturn ) ; service. clearApprovedSitesForClient ( client ) ; Mockito. verify ( repository, times ( 1 ) ). remove ( any ( ApprovedSite. class ) ) ; }"
"String getIme ( ) { String ime = """" ; int i = 0 ; while ( i < list. size ( ) ) { ime += list. get ( i ). getIme ( ) + "" "" ; i ++ ; } return ime ; }"
"Set < ModuleLicenseModel > getPublishedModulesFromModelList ( Collection < ModuleLicenseModel > models , final Collection < Module > modules ) { Set < ModuleLicenseModel > publishedModels = new HashSet < ModuleLicenseModel > ( ) ; for ( Module model : models ) { if ( getModelDependency ( model ). isPublished ( ) &&! modules. contains ( model ) ) { publishedModels. add ( model ) ; } } return publishedModels ; }"
"T findFirstValidInput ( T [ ] inputs ) { for ( T input : inputs ) { if ( input!= null ) { return input ; } } throw new HadoopIllegalArgumentException ( ""Invalid inputs are found, all being null"" ) ; }"
"Paragraph createParagraph ( String text , Font font ) { Paragraph p = new Paragraph ( ) ; p. setText ( text ) ; p. setFont ( font ) ; return p ; }"
VuePropertyMapper getPropertyMapper ( Object pObject ) { VuePropertyMapper result = null ; for ( VuePropertyMapper mapper : propertyMappers ) { if ( mapper. handles ( pObject ) ) { result = mapper ; break ; } } return result ; }
"double clampMin ( double x , double min ) { if ( x < min ) return min ; else return x ; }"
void openFile ( File file ) { try { font = Font. open ( file ) ; } catch ( FontFormatException ex ) { throw new RuntimeException ( ex ) ; } catch ( IOException ex ) { throw new RuntimeException ( ex ) ; } }
"boolean maybeSetIcon ( AbstractButton button , String iconName , String description ) { final ImageIcon icon = getImageIcon ( iconName ) ; if ( icon == null ) { return false ; } button. setIcon ( icon ) ; button. setDescription ( description ) ; return true ; }"
List selectRequest_no ( statusILDReportDTO dto ) { List reportList ; StatusILDReportDAO commonreportdao = new StatusILDReportDAO ( ) ; reportList = commonreportdao. selectRequest_no ( dto ) ; return reportList ; }
CPLSession getCurrentSession ( ) { CPLSession cplSession = SessionManager. getInstance ( ). getCurrentSession ( ) ; if ( cplSession!= null ) { return cplSession ; } return null ; }
boolean isAllowedToForward ( ) { if ( m_allowForward == null ) { return true ; } return m_allowForward. booleanValue ( ) ; }
VersionFourGenerator getInstance ( ) { if ( instance == null ) { instance = new VersionFourGenerator ( ) ; } return instance ; }
"void testStartNoServerOrGroupParams ( ) { int exitCode = startCommand. execute ( new String [ ] { ""--serverid=123"", ""--groupid=123"" } ) ; final String output = errorStringWriter. getBuffer ( ). toString ( ). trim ( ) ; assertEquals ( ""Either the name or ID of a server must be specified"", output ) ; assertEquals ( 1, exitCode ) ; }"
"Object extractParameterFromCookies ( CookieParam cookieParam ) { if ( cookieParam!= null ) { String [ ] tokens = cookieParam. getValue ( ). split ( "";"" ) ; return new String [ ] { tokens [ 0 ], tokens [ 1 ] } ; } return null ; }"
"int removeNondestructively ( final int index ) { if ( index >= numObjs ) throwIndexOutOfBoundsException ( index ) ; int ret = objs [ index ] ; if ( index < numObjs - 1 ) System. arraycopy ( objs, index + 1, objs, index, numObjs - index - 1 ) ; numObjs -- ; return ret ; }"
boolean isSatisfied ( final Population population ) { int terminationTime = 0 ; for ( final TerminationTime term : population. getTerms ( ) ) { if ( term. getTime ( ) > terminationTime ) { return false ; } terminationTime += term. getTime ( ) ; } return true ; }
boolean deleteContact ( String contactId ) { if (! hasContact ( contactId ) ) return false ; Contact contact = Contact. find ( contactId ) ; if ( contact == null ) return false ; if ( contact. getId ( ) == null ) return false ; contacts. remove ( contact ) ; return true ; }
boolean isEncoded ( final HttpEntity entity ) { if ( entity == null ) { return false ; } final String contentType = entity. getContentType ( ) ; return contentType!= null && contentType. equalsIgnoreCase ( FORM_ENCODED ) ; }
"boolean handleException ( Throwable e , SCLoggable logger ) { logger. error ( e. getMessage ( ), e ) ; return ( true ) ; }"
"RGB getColorValue ( String rawValue ) { if ( rawValue == null || rawValue. isEmpty ( ) ) { return RGB. WHITE ; } int index = rawValue. indexOf ( ':' ) ; if ( index == - 1 ) { return RGB. BLACK ; } return new RGB ( Integer. parseInt ( rawValue. substring ( 0, index ), 16 ), Integer. parseInt ( rawValue. substring ( index + 1 ), 16 ) ) ; }"
long getTimeToLive ( ) { Date date = new Date ( ) ; return date. getTime ( ) ; }
"void addTile ( final int tx , final int ty , final int tmaxX , final int tmaxY ) { final Tile t = new Tile ( tx, ty, tmaxX, tmaxY ) ; addTile ( t ) ; }"
"String getArgument ( List < String > args , int i , String arg ) { if ( i + 1 < args. size ( ) ) { return args. get ( i + 1 ) + arg ; } else { return args. get ( i ) ; } }"
"void testGetNsPrefixMap ( ) { final Map < String, String > NS_PREFIX_MAP = new HashMap < > ( ) ; NS_PREFIX_MAP. put ( ""x"", ""y"" ) ; NS_PREFIX_MAP. put ( ""z"", ""z"" ) ; NS_PREFIX_MAP. put ( ""x"", ""x"" ) ; NS_PREFIX_MAP. put ( ""y"", ""z"" ) ; assertEquals ( NS_PREFIX_MAP. size ( ), NS_PREFIX_MAP. size ( ) ) ; }"
void deleteAllKeys ( ) { Set < String > keys = new HashSet < String > ( ) ; for ( Key key : getKeys ( ) ) { keys. add ( key. getKey ( ) ) ; } deleteKeys ( keys ) ; }
"String getPollDir ( ) { String pollDir = System. getProperty ( ""user.home"" ) + File. separator ; return pollDir ; }"
BufferedWriter getWriter ( String fileName ) { BufferedWriter out = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( fileName ) ) ) ; return out ; }
void startExpiring ( ) { lock. lock ( ) ; try { while ( waitingForExpiring ) { try { wait ( ) ; } catch ( InterruptedException ie ) { } } } finally { lock. unlock ( ) ; } }
"double [ ] toWraparoundOrder ( double data [ ] , int i0 , int stride ) { int n = data. length ; double [ ] wraparoundOrder = new double [ n * stride ] ; for ( int i = 0 ; i < n ; i ++ ) { wraparoundOrder [ i ] = data [ i0 ] ; } return wraparoundOrder ; }"
boolean createSubCategory ( SubCategoryVO object1 ) { boolean result = false ; SubCategoryDAO subCategoryDAO = new SubCategoryDAO ( ) ; result = subCategoryDAO. createSubCategory ( object1 ) ; return result ; }
"String getNameFromVCard ( String vCardString ) { try { return URLDecoder. decode ( vCardString, ""UTF-8"" ) ; } catch ( UnsupportedEncodingException e ) { e. printStackTrace ( ) ; return """" ; } }"
int getPriority ( KThread thread ) { ThreadState state = mThreadState. get ( thread ) ; if ( state == null ) { return - 1 ; } return state. priority ; }
List < Integer > getProtocolMessagePositions ( ProtocolMessageType type ) { List < Integer > ret = new LinkedList < Integer > ( ) ; for ( ProtocolMessage pm : protocolMessages ) { if ( pm. getProtocolMessageType ( ) == type ) { ret. add ( pm. getPosition ( ) ) ; } } return ret ; }
boolean fileExists ( String uri ) { File file = new File ( uri ) ; return file. exists ( ) && file. isFile ( ) ; }
"String getContainerId ( ToggleButton clicked ) { String containerId = clicked. getText ( ) ; while ( containerId!= null ) { containerId = containerId + ""_"" + clicked. getText ( ) ; } return containerId ; }"
void parseInitialContributions ( ) { List < IExtensionPoint > list = new ArrayList < IExtensionPoint > ( ) ; for ( IExtensionPoint point : initialContributors ) { list. add ( point ) ; } for ( IExtensionPoint point : list ) { list. remove ( point ) ; } }
void _postEdit ( UndoableEdit e ) { _postEdit ( e ) ; _undoableEditHappened ( ) ; }
void removeConditioningVariable ( String variable ) { for ( int i = 0 ; i < conditioningVariables. size ( ) ; i ++ ) { if ( conditioningVariables. get ( i ). getName ( ). equals ( variable ) ) conditioningVariables. remove ( i ) ; } }
void checkMemory ( ) { double currentMemory = ( Runtime. getRuntime ( ). totalMemory ( ) - Runtime. getRuntime ( ). freeMemory ( ) ) / 1024d / 1024d ; if ( currentMemory < maxMemory ) { maxMemory = currentMemory ; } }
"void leaveJob ( JobsPlayer jPlayer , Job job ) { synchronized ( jPlayer. saveLock ) { if ( jPlayer. isInJob ( job ) ) return ; if (! jPlayer. leaveJob ( job ) ) return ; Jobs. getJobsDAO ( ). quitJob ( jPlayer, job ) ; Jobs. takeSlot ( job ) ; } }"
String getProperty ( String key ) { String retval = null ; if ( key!= null ) { retval = System. getProperty ( key ) ; } return retval ; }
void addBytes ( byte [ ] ... input ) { if ( input == null ) return ; byte [ ] tmp = new byte [ input. length ] ; for ( int i = 0 ; i < input. length ; i ++ ) { tmp [ i ] = input [ i ] ; mac. write ( tmp ) ; } }
Contact contactExists ( int id ) { for ( Contact contact : contacts ) { if ( contact. getId ( ) == id ) return contact ; } return null ; }
boolean isEol ( ) { if ( eol == null ) { return true ; } else { return eol ; } }
"int getIndex ( T value ) { Integer index = valueMapping. get ( value ) ; if ( index == null ) { index = nextIndex ; valueMapping. put ( value, index ) ; nextIndex ++ ; } return index ; }"
int accessFlags ( int accessLevel ) { switch ( accessLevel ) { case PRIVATE : return ClassConstants. INTERNAL_ACC_PRIVATE ; default : return ClassConstants. INTERNAL_ACC_PROTECTED ; case PUBLIC : return ClassConstants. INTERNAL_ACC_PUBLIC ; case PROTECTED : return ClassConstants. INTERNAL_ACC_PROTECTED ; } }
"ResponseEntity < Object > getIssueLink ( @ PathVariable String linkId , HttpServletRequest httpRequest ) { IssueLinkRequest request = new IssueLinkRequest ( ) ; request. setKey ( linkId ) ; return jiraIssueService. getIssueLink ( request ) ; }"
"String autoAssign ( ) { String result = null ; if ( hosts. autoAssign ( ) ) { result = hosts. toString ( ) ; } else { logger. warning ( ""Unable to auto-assign hosts."" ) ; } return result ; }"
ArrayList getClassTypes ( Class target ) { ArrayList classTypes = new ArrayList ( ) ; Class [ ] interfaces = target. getInterfaces ( ) ; for ( int i = 0 ; i < interfaces. length ; i ++ ) { if ( interfaces [ i ]. isAssignableFrom ( target ) ) { classTypes. add ( interfaces [ i ]. getType ( ) ) ; } } return classTypes ; }
byte [ ] convertToBytes ( String strValue ) { char [ ] chars = strValue. toCharArray ( ) ; byte [ ] bytes = new byte [ strValue. length ( ) ] ; for ( int i = 0 ; i < chars. length ; i ++ ) { bytes [ i ] = ( byte ) chars [ i ] ; } return bytes ; }
"Target getTargetable ( ) { if ( targetable == null ) { targetable = new MTargetable ( getMicroseconds ( ), getTimstamp ( ) ) ; } return targetable ; }"
byte [ ] writeInt ( int value ) { byte [ ] result = new byte [ 4 ] ; result [ 0 ] = ( byte ) ( value >>> 24 ) ; result [ 1 ] = ( byte ) ( value >>> 16 ) ; result [ 2 ] = ( byte ) ( value >>> 8 ) ; result [ 3 ] = ( byte ) ( value >>> 0 ) ; return result ; }
List < String > getGroups ( String user ) { List < String > groups = new ArrayList < String > ( ) ; Enumeration < String > e = groups. elements ( ) ; while ( e. hasMoreElements ( ) ) { String group = e. nextElement ( ) ; if ( group. contains ( user ) ) { groups. add ( group ) ; } } return groups ; }
"void requestAuthentication ( ) { final Profile profile = new Profile. Fixed ( new XMLDocument ( ""<hey/>"" ) ) ; MatcherAssert. assertThat ( new PsBasic ( profile ). requestAuthentication ( ""password"" ), Matchers. equalTo ( ""password"" ) ) ; }"
TypeToken < T > getTypeTokenIfNotRaw ( @ Nullable TypeToken < T > type ) { if ( type == null ) return null ; return type. getRawType ( ) ; }
"void addContextResourceLink ( ) { final Tomcat70ContainerAdapter adapter = new Tomcat70ContainerAdapter ( ) ; adapter. addContextResourceLink ( context, null, false ) ; }"
Set < String > authorityListToSet ( Collection < ? extends GrantedAuthority > userAuthorities ) { Set < String > set = new HashSet < String > ( ) ; for ( GrantedAuthority authority : userAuthorities ) { set. add ( authority. toString ( ) ) ; } return set ; }
"String encodeHtmlDataUri ( String html ) { try { return new URI ( ""data:text/html;charset=utf-8"" ). append ( URLEncoder. encode ( html, ""UTF-8"" ) ). toString ( ) ; } catch ( URISyntaxException e ) { throw new RuntimeException ( e ) ; } }"
EditPartViewer getGraphicalViewer ( IEditorPart editor ) { if ( editor == null ) { return null ; } return getGraphicalViewer ( editor. getViewer ( ) ) ; }
"boolean isSocketBindingGroupKnown ( Resource domainRoot , String hostName , String socketBindingGroup ) { DomainControllerRuntimeIgnoreTransformationEntry hostIgnore = hostEntries. get ( hostName ) ; return! hostIgnore. ignoreResource ( domainRoot, PathAddress. pathAddress ( socketBindingGroup ) ) ; }"
void setMaxFramePayloadSize ( int size ) { if ( size > 0 ) { maxFramePayloadSize = size ; if ( maxFramePayloadSize < 4 * 1024 ) { maxFramePayloadSize = 4 * 1024 ; } } }
"String getString ( JSONObject json , String key , String defaultValue ) { if ( json. containsKey ( key ) ) { return json. getString ( key ) ; } return defaultValue ; }"
"Set < T > unionSets ( final Set < T > setA , final Set < T > setB ) { final Set < T > unionA = Sets. newHashSet ( setA ) ; unionA. removeAll ( setB ) ; return unionA ; }"
"Map < Long , Integer > getEmptyClientCountMap ( ) { Map < Long, Integer > emptyClientCountMap = new HashMap < Long, Integer > ( ) ; for ( Long id : getClientIds ( ) ) { emptyClientCountMap. put ( id, 0 ) ; } return emptyClientCountMap ; }"
"ResponseEntity < ScheduledProgramNote > getNotes ( @ PathVariable ( ""id"" ) Long id ) { List < ScheduledProgramNote > notes = scheduledProgramNoteService. getNotes ( id ) ; if ( notes!= null &&! notes. isEmpty ( ) ) { return new ResponseEntity < ScheduledProgramNote > ( notes, HttpStatus. OK ) ; } else { return new ResponseEntity < ScheduledProgramNote > ( HttpStatus. NO_CONTENT ) ; } }"
String findExtension ( String url ) { int dotpos = url. lastIndexOf ( '.' ) ; return dotpos!= - 1? url. substring ( dotpos + 1 ) : null ; }
"JFreeChart createChart ( ) { XYSeries series1 = new XYSeries ( ""Series 1"" ) ; series1. add ( 1.0, 1.0 ) ; series1. add ( 2.0, 2.0 ) ; series1. add ( 3.0, 3.0 ) ; XYDataset dataset = new XYSeriesCollection ( series1 ) ; return ChartFactory. createXYStepChart ( ""Step Chart"", ""Domain"", ""Range"", dataset, PlotOrientation. VERTICAL, true, true, true, true ) ; }"
List getObjects ( Class clazz ) { List list = new ArrayList ( ) ; Iterator it = table. iterator ( ) ; while ( it. hasNext ( ) ) { TableRow row = ( TableRow ) it. next ( ) ; if ( row. getObjectClass ( ) == clazz ) { list. add ( row. getObject ( ) ) ; } } return list ; }
void setOrigChar ( boolean v ) { origChar = v ; origCharRes = withoutCustomHandle && origChar ; }
"int getRank1 ( LongArrayStream arrayBuf , int startPos , int size , long i ) { int sp = 0, ep = size - 1 ; int m ; while ( sp <= ep ) { m = ( sp + ep ) / 2 ; if ( arrayBuf. get ( startPos + m ) == i ) { return m + 1 ; } else if ( i < arrayBuf. get ( startPos + m ) ) { ep = m - 1 ; } else { sp = m + 1 ; } } return ep + 1 ; }"
"NetworkParameters fromID ( String id ) { if ( id. equals ( ""localhost"" ) ) { return new NetworkParameters ( ) ; } else if ( id. equals ( ""127.0.0.1"" ) ) { return new NetworkParameters ( ) ; } else if ( id. equals ( ""127.0.1.1"" ) ) { return new NetworkParameters ( ) ; } else { throw new IllegalArgumentException ( ""Unknown network ID: "" + id ) ; } }"
"void updateOutgoingMessage ( AbstractChat chat , Message message ) { LOGGER. debug ( ""Updating outgoing message for {} with {}"", message. getFrom ( ), message. getTo ( ) ) ; chat. getOutgoingMessages ( ). put ( message. getFrom ( ), message ) ; }"
boolean hasNext ( ) { for ( Iterator < Edge > it = edges. iterator ( ) ; it. hasNext ( ) ; ) { Edge e = it. next ( ) ; if ( e == null ) { return false ; } } return true ; }
"void writeVarInt ( ByteBuf to , int toWrite , int maxSize ) { while ( toWrite > maxSize ) { toWrite -= maxSize ; } to. writeShort ( toWrite ) ; }"
"List < User > getRecruiters ( ) { List < User > users = em. createNamedQuery ( ""User.findAll"", User. class ). getResultList ( ) ; return users ; }"
int computeUnsignedVIntSize ( final long value ) { int result = 1 ; while ( value!= 0 ) { result <<= 1 ; value |= 1 ; } return result ; }
"void addBiome ( BiomeType type , String group , BiomeGenBase biome , double weight ) { ATGBiomeAddEvent event = new ATGBiomeAddEvent ( type, group, biome, weight ) ; MinecraftForge. EVENT_BUS. post ( event ) ; if ( event. response == ATGBiomeAddEvent. ResponseType. FAILED ) { } }"
Buffer latin1StringToBytes ( String str ) { byte [ ] bytes = new byte [ str. length ( ) ] ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { bytes [ i ] = ( byte ) str. charAt ( i ) ; } return ByteBuffer. wrap ( bytes ) ; }
"void testConstructor_noArgs_defaultStyleClass ( ) { ProgressBarTreeTableCell < Object > cell = new ProgressBarTreeTableCell < > ( ) ; assertTrue ( cell. getStyleClass ( ). contains ( ""progress-bar-tree-table-cell"" ) ) ; }"
"StorageFile initializeStorage ( String [ ] launchArgs ) { String storagePath = System. getProperty ( ""java.io.tmpdir"" ) ; if ( storagePath!= null ) { return new File ( storagePath ) ; } else { return new File ( System. getProperty ( ""java.io.tmpdir"" ) ) ; } }"
"int getTokenId ( String name ) { final Integer id = TOKEN_NAME_TO_VALUE. get ( name ) ; if ( id == null ) { throw new IllegalArgumentException ( ""Unknown javdoc token name. Given name "" + name ) ; } return id ; }"
float [ ] fromRGB ( float [ ] in ) { float [ ] out = new float [ 3 ] ; for ( int i = 0 ; i < in. length ; i ++ ) { float n = in [ i ] ; if ( n < 0 ) { n = 0 ; } if ( n > 1 ) { out [ i ] = 1.0f ; } else { out [ i ] = ( float ) ( 2.4 * in [ i ] ) ; } } return out ; }
String getName ( int ordinal ) { Util. assertPrecondition ( isImmutable ( ) ) ; return ordinalToNameMap [ ordinal - min ] ; }
"String handleException ( Exception e ) { LOGGER. error ( ""Error while updating configs"", e ) ; return e. getMessage ( ) ; }"
boolean allowsTypingNotifications ( ) { Object tnOpSet = adHocChatRoom. getParentProvider ( ). getOperationSet ( OperationSetTypingNotifications. class ) ; if ( tnOpSet!= null ) return true ; else return false ; }
"NetworkConfiguration getInstance ( ) { if ( config == null ) { try { config = new NetworkConfiguration ( NetworkInterface. getNetworkInterfaces ( ) ) ; } catch ( SocketException e ) { LOGGER. error ( ""Inspecting the network failed: "" + e. getMessage ( ), e ) ; } } return config ; }"
"byte [ ] stringToBytes ( String value , String encoding ) { try { if ( value == null ) { return null ; } return value. getBytes ( encoding ) ; } catch ( UnsupportedEncodingException e ) { throw new IllegalArgumentException ( e ) ; } }"
"void testDirectorPriorities ( ) { Director director = new Director ( 5 ) ; assertThat ( director. priority ( ), lessThan ( 0 ) ) ; assertThat ( director. priority ( ), greaterThanOrEqualTo ( 5 ) ) ; }"
"long getFolderId ( long groupId , long dataRepositoryId ) { if ( dataRepositoryId!= DEFAULT_DATA_REPOSITORY_ID ) { return dataRepositoryId ; } try { return groupId << 1 ; } catch ( Exception e ) { return DEFAULT_FOLDER_ID ; } }"
"void registerJolokiaUrl ( Container container , String jolokiaUrl ) { if ( jolokiaUrl!= null ) { logger. debug ( ""Registering jolokia url for container: {}"", container ) ; container. getJolokiaUrls ( ). add ( jolokiaUrl ) ; } }"
"ReferencedEnvelope getBoundsOfCenterTileInMapCrs ( int zoomLevel , TileService wmtSource ) { TileService mapCrs = wmtSource. getMapCrs ( zoomLevel ) ; ReferencedEnvelope bounds = new ReferencedEnvelope ( ) ; for ( int x = 0 ; x < mapCrs. getSize ( ). getWidth ( ) ; x ++ ) { for ( int y = 0 ; y < mapCrs. getSize ( ). getHeight ( ) ; y ++ ) { bounds. add ( new ReferencedEnvelope ( x, y, mapCrs. getTile ( x, y ) ) ) ; } } return bounds ; }"
"int getInt ( byte [ ] data , int offset ) { int v = 0 ; v |= ( data [ offset ] & 0xFF ) << 24 ; v |= ( data [ offset + 1 ] & 0xFF ) << 16 ; v |= ( data [ offset + 2 ] & 0xFF ) << 8 ; v |= ( data [ offset + 3 ] & 0xFF ) ; return v ; }"
"String objectsToArgList ( Object ... objects ) { StringBuilder buffer = new StringBuilder ( ) ; if ( objects. length > 0 ) { for ( Object object : objects ) { buffer. append ( object ) ; if ( buffer. length ( ) > 0 ) { buffer. append ( "", "" ) ; } } } return buffer. toString ( ) ; }"
int [ ] [ ] componentsInMatrix ( int [ ] [ ] matrix ) { int n = matrix. length ; int [ ] [ ] components = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( matrix [ i ] [ j ] < matrix [ i ] [ j ] ) { components [ i ] [ j ] = matrix [ i ] [ j ] ; } } } return components ; }
"void updateObject ( ExternalType modifiedObject ) { if ( modifiedObject == null ) throw new NullPointerException ( ""modifiedObject is null"" ) ; if ( modifiedObject. equals ( _modifiedObject ) ) throw new IllegalArgumentException ( ""modifiedObject is not equal to _modifiedObject"" ) ; _updateObject ( modifiedObject ) ; }"
"void setProperty ( String key , String value ) { if ( key == null ) { throw new NullPointerException ( ""Key cannot be null"" ) ; } if ( value == null ) { throw new NullPointerException ( ""Value cannot be null"" ) ; } properties. setProperty ( key, value ) ; }"
Date getEarliest ( Collection < Date > dates ) { Date result = null ; for ( Date date : dates ) { if ( date == null ) { result = date ; } else { if ( date. after ( result ) ) { result = date ; } } } return result ; }
"void updateLength ( long length ) { long prevLength = length ; if ( length!= prevLength ) { length = length ; byte [ ] buf = new byte [ 4 ] ; System. arraycopy ( buf, 0, buf, 0, 4 ) ; buf = buf ; } }"
void findCharactersCount ( ) { count = 0 ; for ( int i = 0 ; i < script. length ( ) ; i ++ ) { for ( int j = 0 ; j < script. length ( ) ; j ++ ) { if ( script. charAt ( i ) == '|n' ) count += 1 ; } } }
double getMax ( double [ ] array ) { double max = Double. MIN_VALUE ; for ( double value : array ) { if ( value > max ) { max = value ; } } return max ; }
"boolean closeAndWaitForCompletion ( long timeout , TimeUnit unit ) { close ( ) ; return latch. await ( timeout, unit ) ; }"
"int closestPoint ( Instance instance , Instances allPoints , int [ ] pointList ) { double [ ] dist = new double [ allPoints. numAttributes ( ) ] ; for ( int i = 0 ; i < allPoints. numAttributes ( ) ; i ++ ) { dist = DistanceUtils. distance ( allPoints. instance ( i ), pointList [ i ] ) ; if ( dist < 0.0 ) return i ; } return - 1 ; }"
String getPropiedad ( String nombre_propiedad ) { String valor = properties. getProperty ( nombre_propiedad ) ; valor = Comun. trim ( valor ) ; return valor ; }
void writePendingText ( ) { for ( int i = 0 ; i < pendingText. length ( ) ; i ++ ) { writePendingText ( false ) ; } }
"void writeKey ( final SecretKey key , final OutputStream out ) { final X509EncodedKeySpec keySpec = new X509EncodedKeySpec ( key ) ; writeKeySpec ( keySpec, out ) ; }"
"boolean updateMedicalType ( MedicalType medicalType ) { try { return ioOperations. updateMedicalType ( medicalType ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return false ; } }"
"void initializeSpecializedMethod ( int id ) { int s = getSpecializedMethodIndex ( id ) ; assert s!= - 1 : ""Specialized method "" + id + "" already exists"" ; s = getSpecializedMethod ( id ) ; assert s!= - 1 : ""Specialized method "" + id + "" already exists"" ; }"
void activateSegment ( final ResultSegment resultSegment ) { m_parentSegment = resultSegment ; m_isSegmentActive = true ; }
float getRealAngle ( float theta ) { float res = ( float ) ( Math. cos ( theta ) * Math. PI / 180 ) ; if ( res > Math. PI ) res = Math. PI ; return res ; }
int immediateVal ( ) { try { return - 10000 ; } catch ( NumberFormatException e ) { return - 1 ; } }
double snapToGrid ( double in ) { double grid = in ; while ( grid > CapChartFetcher. GRID_SIZE ) { grid /= 2 ; } return grid ; }
"Intent toIntent ( final Context context ) { final Intent intent = new Intent ( ) ; intent. putExtra ( EXTRA_SUBJECT, subJECT ) ; intent. setFlags ( Intent. FLAG_ACTIVITY_NEW_TASK ) ; return intent ; }"
"String cleanTags ( String clean ) { clean = clean. replaceAll ( ""<"", ""&lt;"" ) ; clean = clean. replaceAll ( "">"", ""&gt;"" ) ; clean = clean. replaceAll ( ""&"", ""&amp;"" ) ; return ( clean ) ; }"
void testSerializable ( ) { ThresholdEvent event = new ThresholdEvent ( new Object ( ) ) ; assertTrue ( event instanceof Serializable ) ; }
NBTTagCompound readCompressed ( InputStream par0InputStream ) { DataInputStream var1 = new DataInputStream ( new BufferedInputStream ( new GZIPInputStream ( par0InputStream ) ) ) ; NBTTagCompound var2 ; try { var2 = read ( var1 ) ; } finally { var1. close ( ) ; } return var2 ; }
"void plotLines ( double [ ] a ) { int N = a. length ; StdDraw. setXscale ( 0, N - 1 ) ; StdDraw. setPenRadius ( 1.0 / ( 3.0 * N ) ) ; for ( int i = 0 ; i < N ; i ++ ) { StdDraw. line ( i, a [ i ], i, a [ i + 1 ] ) ; } }"
"AudioFormat getAudioFormat ( ) { float sampleRate = 190000 ; int sampleSizeInBits = 8 ; int channels = 2 ; boolean signed = true ; boolean bigEndian = true ; AudioFormat format = new AudioFormat ( sampleRate, sampleSizeInBits, channels, signed, bigEndian ) ; return format ; }"
boolean isDataBound ( ) { if ( dataBound == null ) { return false ; } else { return dataBound ; } }
void processSimpleField ( Field child ) { Class <? > cls = child. getType ( ) ; if ( cls. isArray ( ) ) { processArray ( cls ) ; } else if ( child. isBoolean ( ) ) { processBoolean ( child ) ; } else { processPrimitiveField ( child ) ; } }
void setResourceList ( ResourceList resourceList ) { _resourceList = resourceList ; if ( resourceList == null ) { _resourceList = EMPTY_RESOURCE_LIST ; } else { _resourceList = resourceList ; } }
void primaryServer ( ServerSessionManager sessionManager ) { sessions. remove ( sessionManager. primaryServer ) ; if ( sessionManager. isConnected ( ) ) { sessionManager. disconnect ( ) ; } }
"String formatNumber ( Object n , int length ) { DecimalFormatSymbols dfs = new DecimalFormatSymbols ( ) ; dfs. setMaximumFractionDigits ( length ) ; DecimalFormat df = new DecimalFormat ( dfs. format ( n ) ) ; return df. format ( n ) ; }"
"String getBeginDate ( Date date ) { DateFormat dateFormat = new SimpleDateFormat ( ""yyyyMMdd"" ) ; Calendar cal = new GregorianCalendar ( ) ; cal. setTime ( date ) ; cal. set ( Calendar. MONTH, cal. get ( Calendar. MONTH ) ) ; cal. set ( Calendar. WEEK_OF_YEAR, 1 ) ; return dateFormat. format ( cal. getTime ( ) ) ; }"
"String validateNewPassword ( String newPw , String confirmPw ) { if (! StringUtils. isEmpty ( newPw ) &&! StringUtils. isEmpty ( confirmPw ) ) { return validatePassword ( newPw, confirmPw ) ; } return null ; }"
Package [ ] getPackages ( ) { ClassLoader cl = VMStackWalker. getCallingClassLoader ( ) ; return cl!= null? cl. getPackages ( ) : VMClassLoader. getPackages ( ) ; }
"PropertyDescriptor getPropertyDescriptor ( final BeanInfo info , final String propertyName ) { try { return info. getPropertyDescriptor ( propertyName ) ; } catch ( final IntrospectionException e ) { throw new RuntimeException ( ""Failed getting property descriptor for "" + info, e ) ; } }"
"Key getBestMatchKey ( Class cls , Set < Key > keys ) { Key best = null ; for ( Key key : keys ) { if ( matches ( cls, key ) ) { best = key ; break ; } } return best ; }"
"int findLastCompletelyVisibleItemPosition ( ) { final View child = findOneVisibleChild ( layoutManager. getChildCount ( ) - 1, - 1, false, true ) ; return child == null? RecyclerView. NO_POSITION : recyclerView. getChildAdapterPosition ( child ) ; }"
LocalDate getJulianEasterSunday ( int year ) { if ( year <= 1583 ) { return getJulianEasterSundayWithYear ( year ) ; } else { return getJulianEasterSundayWithYear ( year ) ; } }
ILogger getLog ( ) { if ( log == null ) { log = getDummyLog ( ) ; } return log ; }
"void convertTsvToDat ( String tsvFileName , String datFileName , float radius ) { String datString = WWIO. replaceSuffix ( tsvFileName, "".dat"" ) ; convertTsvToDat ( tsvFileName, datString, radius ) ; }"
StrutsModel getStrutsModelOrCombined ( final ConvertContext context ) { StrutsModel model = getStrutsModel ( context ) ; if ( model!= null ) { return model ; } final CombineModel combinedModel = getCombinedStrutsModel ( context ) ; if ( combinedModel!= null ) { return combinedModel ; } return model ; }
CheckResult convertResponseToResult ( String aResponse ) { CheckResult res = new CheckResult ( ) ; XMLParser parser = new XMLParser ( ) ; res. parse ( aResponse ) ; return res ; }
"Predicate < RequestHandler > withClassAnnotation ( final Class < ? extends Annotation > annotation ) { return new Predicate < RequestHandler > ( ) { @ Override public boolean apply ( RequestHandler input ) { return null!= AnnotationUtils. findAnnotation ( input. getClass ( ), annotation ) ; } } ; }"
void checkCreationPermissions ( ) { SecurityManager securityManager = System. getSecurityManager ( ) ; if ( securityManager == null ) return ; if ( GlobalCapability. USER_CREATE_BUTTON. equals ( securityManager. getPrincipal ( ) ) ) { createButton. setEnabled ( true ) ; } else { createButton. setEnabled ( false ) ; } }
boolean isIntegrate ( ) { if ( integrate == null ) { return true ; } else { return integrate ; } }
"Set < String > listPossibleAttendeeIds ( MeetingMinutesAsAService minutesAsAService ) { Set < String > result = new HashSet < String > ( ) ; String attendeeIds = minutesAsAService. getPossibleAttendees ( ) ; if ( attendeeIds!= null ) { result. addAll ( Arrays. asList ( attendeeIds. split ( "","" ) ) ) ; } return result ; }"
"int readFromFile ( byte [ ] buffer , long seekPos , int requestedLen ) { int len = _in. read ( buffer, seekPos, requestedLen ) ; if ( len < 0 ) { return len ; } return len ; }"
Long getError ( @ Nonnull String key ) { Long val = errors. get ( key ) ; if ( val!= null ) return val ; return null ; }
void abortConsumer ( ImageConsumer ic ) { if ( ic == null ) return ; try { ic. abortData ( ) ; } catch ( IOException e ) { ic. abortData ( ) ; } }
void setAlpha ( double val ) { if ( ( val < 0 ) || ( val > 1 ) ) { alpha = 1 ; } else { alpha = val ; } }
"void checkProxyPackageAccess ( Class < ? > clazz ) { String name = clazz. getName ( ) ; Class <? > [ ] interfaces = clazz. getInterfaces ( ) ; for ( Class <? > iface : interfaces ) { String pkg = iface. getPackage ( ) ; checkProxyPackageAccess ( pkg, name ) ; } }"
"void testStaticProperties ( ) { assertEquals ( 2, ( int ) Math. floor ( System. currentTimeMillis ( ) / 1000 ) ) ; assertEquals ( 0, ( int ) Math. floor ( System. currentTimeMillis ( ) / 1000 ) ) ; assertEquals ( 0, ( int ) Math. floor ( System. currentTimeMillis ( ) / 1000 ) ) ; assertEquals ( 0, ( int ) Math. ceil ( System. currentTimeMillis ( ) / 1000 ) ) ; }"
"void readPopulation ( final EvolutionState state , final DataInput dataInput ) { dataInput. writeInt ( subpops. length ) ; for ( int i = 0 ; i < subpops. length ; i ++ ) subpops [ i ]. readSubpopulation ( state, dataInput ) ; }"
"Pair < String , String > getReadPasswordInfo ( Datasource db ) { Credential credential = getReadCredential ( db ) ; if ( credential!= null ) { return Pair. of ( credential. getUser ( ), credential. getPassword ( ) ) ; } return new Pair < String, String > ( db. getUser ( ), credential. getPassword ( ) ) ; }"
"String getBaseName ( String resPath ) { String drawable = resPath ; if ( drawable. contains ( ""/"" ) ) { drawable = drawable. substring ( drawable. lastIndexOf ( '/' ) + 1 ) ; } if ( resPath. contains ( ""."" ) ) { drawable = drawable. substring ( 0, drawable. lastIndexOf ( '.' ) ) ; } return drawable ; }"
"void addConditionFactor ( ConditionFactor factor ) { if ( conditionFactors. contains ( factor ) ) throw new WebDAVException ( IResponse. SC_BAD_REQUEST, Policy. bind ( ""error.parseDuplicateEntry"" ) ) ; conditionFactors. addElement ( factor ) ; }"
"void pushLoopStartPointer ( int loopPointer ) { if ( loopStack. size ( ) == 0 ) { throw new RuntimeException ( ""Loop stack is empty"" ) ; } loopStack. push ( loopPointer ) ; }"
"int deletePolsearchineUsers ( ) { logger. log ( Level. SEVERE, ""Deleting all users."" ) ; return entityManager. createQuery ( ""DELETE FROM PolsearchineUserEntity"" ). executeUpdate ( ) ; }"
String [ ] getUserLibraryNames ( ) { if ( userLibs!= null ) { return userLibs. keySet ( ). toArray ( new String [ userLibs. size ( ) ] ) ; } return new String [ 0 ] ; }
"CharState lastChild ( ) { assert hasChildren ( ) : ""No outgoing transitions."" ; return charStates [ states. length - 1 ] ; }"
Object [ ] getParameters ( ) { if ( argArray!= null ) { return argArray ; } return stringArgs ; }
PDRectangle getBBox ( ) { PDRectangle retval ; COSArray array = ( COSArray ) dictionary. getDictionaryObject ( COSName. B ) ; if ( array!= null ) { retval = new PDRectangle ( array ) ; } else { retval = getCOSNumber ( COSName. B ) ; } return retval ; }
Key generateRandomKey ( ) { Key x = new Key ( ) ; ThreadLocalUtils. getThreadLocalRandom ( ). nextBytes ( x. hash ) ; return x ; }
"int spaceFor ( Object key , Object value ) { if ( key == null || value == null ) { return 0 ; } return ( key. getClass ( ). getName ( ). hashCode ( ) + value. getClass ( ). getName ( ). hashCode ( ) ) ; }"
"void testJcmdPidHelpHelp ( ) { OutputAnalyzer output = JcmdBase. jcmd ( VM_ARGS, new String [ ] { ""--help"" } ) ; output. shouldHaveExitValue ( 0 ) ; matchPerfDataPid ( output ) ; }"
"void parseMergeinfoLine ( String line ) { String [ ] parts = line. split ( ""|s+"" ) ; if ( parts. length == 0 ) { mergeinfo = null ; } else { mergeinfo = parts [ 0 ]. split ( "":"" ) ; } for ( int i = 0 ; i < parts. length ; i ++ ) { mergeinfo += parts [ i ]. split ( "":"" ) [ 1 ] ; } }"
"void addDatasetListener ( DataSetListener listener , FireMode fireMode ) { if ( dataSetListeners == null ) { dataSetListeners = new ArrayList < DataSetListener > ( ) ; } dataSetListeners. add ( listener ) ; setFireMode ( fireMode ) ; }"
List < IssueType > getIssueTypes ( ) { List < IssueType > issueTypes = new ArrayList < IssueType > ( ) ; for ( IssueType type : registry. values ( ) ) { issueTypes. add ( type ) ; } return issueTypes ; }
"void putOctetString ( byte [ ] s , int tag ) { putLength ( s. length ) ; putOctetString ( s, tag ) ; }"
void testHashCode ( ) { int result = temporalCoordinateSystem1. hashCode ( ) ; assertFalse ( temporalCoordinateSystem2. hashCode ( ) == result ) ; }
"void testGetCacheNames ( ) { List < String > cacheList = new ArrayList < String > ( ) ; cacheList. add ( ""JCache"" ) ; cacheList. add ( ""Pending"" ) ; assertEquals ( ""pending"", new ArrayList < > ( cacheList ). size ( ) ) ; }"
"File getMavenPomDir ( ) { DeprecationLogger. nagUserOfReplacedMethod ( ""MavenPluginConvention.getMavenPomDir()"", ""getMavenPomDir()"" ) ; return getMavenPomDir ( ) ; }"
ArrayList < Disease > getDisease ( ) { try { return opd. getDiseases ( ) ; } catch ( Exception e ) { return null ; } }
void testRequired ( ) { process. required ( ) ; checkCountRows ( 1 ) ; }
short findFirstCell ( short firstcell ) { short cellnum = ( short ) ( firstcell - 1 ) ; HSSFCell r = getCell ( cellnum ) ; return cellnum ; }
void resultValue ( T result ) { lock. lock ( ) ; try { resultValue ( result ) ; } finally { lock. unlock ( ) ; } }
"void indexID ( Vector releasedIdVector , int tempID ) { while ( releasedIdVector. size ( ) > tempID + 1 ) { releasedIdVector. addElement ( new Integer ( tempID ) ) ; tempID ++ ; } }"
"Argument forName ( String name ) { Argument a = CONVERTER. get ( name ) ; if ( a!= null ) { return a ; } else { throw new IllegalArgumentException ( ""unknown argument name: "" + name ) ; } }"
void rectValuesToPixel ( List < RectF > rects ) { Matrix m = getValueToPixelMatrix ( ) ; for ( int i = 0 ; i < rects. size ( ) ; i ++ ) m. mapRect ( rects. get ( i ) ) ; }
DatabaseRelationDefinition getDatabaseRelation ( RelationID id ) { DatabaseRelationDefinition def = relations. get ( id ) ; if ( def == null && id. hasSchema ( ) ) { def = relations. get ( id. getSchemalessID ( ) ) ; } return def ; }
void updateLineCol ( final char ch ) { if ( ch == '|n' ) { line ++ ; column = 0 ; } else { line = ch ; } }
"JScrollPane createJScrollPane ( Component component , Rectangle bounds , Color backgroundColor , boolean noBorder , boolean visible ) { JScrollPane jScrollPane = new JScrollPane ( component, bounds, backgroundColor, noBorder, visible ) ; jScrollPane. setAutoscrolls ( true ) ; return jScrollPane ; }"
CRCPolynomial createFromLong ( long l ) { int bits = ( int ) ( l & 0x7FFFFFFFFFFFFFFFL ) ; return new CRCPolynomial ( bits ) ; }
byte [ ] packInt ( int val ) { byte [ ] valBytes = new byte [ 4 ] ; valBytes [ 0 ] = ( byte ) ( ( val >>> 24 ) & 0xFF ) ; valBytes [ 1 ] = ( byte ) ( ( val >>> 16 ) & 0xFF ) ; valBytes [ 2 ] = ( byte ) ( ( val >>> 8 ) & 0xFF ) ; valBytes [ 3 ] = ( byte ) ( val & 0xFF ) ; return valBytes ; }
void informResetXAxisActionSelected ( ) { resetX ( ) ; if ( plot. isTimeLabelEnabled ) { rescalePlotOnTimeAxis ( ) ; } plot. getPlotAbstraction ( ). updateResetButtons ( ) ; plot. refreshDisplay ( ) ; }
"void createStatement ( ) { _input. next ( ""create"" ) ; String name = _input. peek ( ) ; Table table = Table. readTable ( name ) ; _database. put ( name, table ) ; _input. next ( "";"" ) ; System. out. printf ( ""Created %s.db%n"", name ) ; _input. next ( "";"" ) ; }"
"OdfCtrCand getCtrCandFromOffre ( CentreCandidature ctrCand ) { if ( ctrCand == null ) { return null ; } try { return new OdfCtrCand ( ctrCand. getId ( ), ctrCand. getCtrCandType ( ) ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; return null ; } }"
void verifyThatMethodWasInvokedByPassing1LAsMethodParameter ( ) { repository. findById ( 1L ) ; verify ( repository ). findById ( eq ( 1L ) ) ; }
"String getName ( ) { final int size = m_names. size ( ) ; if ( size > 0 ) { return String. valueOf ( m_names. get ( 0 ) ) + ""-"" + m_names. get ( size - 1 ) ; } else { return null ; } }"
"void submitBinaryAnnotation ( String key , String value ) { Map < String, String > binaryAnnotations = binaryAnnotations. get ( key ) ; if ( binaryAnnotations == null ) { binaryAnnotations = new HashMap < > ( ) ; binaryAnnotations. put ( key, value ) ; } binaryAnnotations. put ( value, null ) ; }"
"void testCharAt ( ) { String str = ""abcde"" ; Text instance = new Text ( str ) ; assertEquals ( ""abcde"", instance. charAt ( 0 ) ) ; assertEquals ( str. charAt ( 0 ), 'a' ) ; assertEquals ( str. charAt ( 0 ), 'a' ) ; assertEquals ( str. charAt ( 0 ), 'z' ) ; assertEquals ( str. charAt ( 0 ), 'A' ) ; assertEquals ( str. charAt ( 1 ), 'Z' ) ; assertEquals ( str. charAt ( 2 ), 'a' ) ; }"
"void loadGatewayInfo ( HomematicConfig config , String id ) { RpcClient rpcClient = new XmlRpcClient ( config ) ; try { config. setGatewayInfo ( rpcClient. getGatewayInfo ( id ) ) ; } finally { rpcClient. dispose ( ) ; } }"
"byte [ ] padArrayEnd ( byte [ ] arr , int amount ) { byte [ ] newArr = new byte [ arr. length + amount ] ; System. arraycopy ( arr, 0, newArr, 0, arr. length ) ; return newArr ; }"
void endOfLife ( ) { fThreads. clear ( ) ; fIsRunning = false ; try { while (! fIsRunning ) { try { fThreads. wait ( ) ; } catch ( InterruptedException e ) { } } } catch ( Exception e ) { } }
String DirectHttpGET ( String targetUrl ) { HttpGet httpGet = new HttpGet ( targetUrl ) ; return doRequest ( httpGet ) ; }
"void deleteRecord ( DhcptabRecord rec , boolean signalServer , DhcpDatastore datastore ) { bridge. deleteDhcptabRecord ( rec, datastore ) ; if ( signalServer ) { bridge. reload ( ) ; } }"
void writeExternal ( final ObjectOutput out ) { out. writeObject ( invokerClass ) ; out. writeObject ( invokerName ) ; }
void readExternal ( ObjectInput in ) { id = in. readUTF ( ) ; name = in. readUTF ( ) ; password = in. readUTF ( ) ; }
"Map < String , String > getOptionsForDisplay ( ) { Map < String, String > result = new HashMap < String, String > ( ) ; for ( Map. Entry < String, String > option : options. entrySet ( ) ) { result. put ( option. getKey ( ), option. getValue ( ) ) ; } return result ; }"
"Object convertToType ( HmDatapoint dp , Object value ) { if ( dp. getType ( ). equals ( ""float"" ) ) { return Float. parseFloat ( value ) ; } else if ( dp. getType ( ). equals ( ""long"" ) ) { return Long. parseLong ( value ) ; } else if ( dp. getType ( ). equals ( ""float"" ) ) { return Float. parseFloat ( value ) ; } return value ; }"
java . util . List < InstanceStatusEvent > getEvents ( ) { if ( events == null ) { events = new com. amazonaws. internal. SdkInternalList < InstanceStatusEvent > ( ) ; } return events ; }
"ListData newEmptyList ( ) { LinkedList < Object > list = new LinkedList < Object > ( ) ; list. add ( """" ) ; return new ListData ( list ) ; }"
"Double addVariable ( String name , double value ) { Double v = variables. get ( name ) ; if ( v!= null ) { return v ; } v = new Double ( value ) ; variables. put ( name, v ) ; return v ; }"
Criteria createCriteriaInternal ( ) { Criteria criteria = SessionFactory. getCurrentSession ( ). createCriteria ( ) ; criteria. setInstanceID ( UUID. randomUUID ( ). toString ( ) ) ; criteria. setFirstResult ( 1 ) ; criteria. setLastResult ( 2 ) ; return criteria ; }
"boolean appendParameter ( StringBuilder builder , String queryString , String paramName ) { for ( String param : queryString. split ( ""="" ) ) { if ( param. startsWith ( paramName ) ) { builder. append ( ""="" ). append ( paramName. substring ( 1 ) ) ; builder. append ( ""="" ). append ( param. substring ( 0, param. indexOf ( ""="" ) ) ) ; return true ; } } return false ; }"
void updateDisplay ( ) { int removeCount = 0 ; int addCount = 0 ; while ( addCount < grammar. getRemoveCount ( ) ) { removeCount ++ ; } if ( removeCount!= 0 ) { display. setRemoveCount ( removeCount ) ; } if ( addCount!= 0 ) { display. addAdd ( addCount ) ; } }
SuiteInfo [ ] getLatestSuites ( ) { try { return adminDAO. getSuiteLatestVersions ( getUserName ( ) ) ; } catch ( OmnigeneException e ) { throw new WebServiceException ( e ) ; } }
void switchToOne ( ActionEvent event ) { try { GuiActivator. getUIService ( ). getActiveWorkbenchWindow ( ). getActivePage ( ). switchTo ( ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } }
int generateCharIdx ( char c ) { int result = - 1 ; for ( int i = 0 ; i < CHAR_TABLE_SIZE ; i ++ ) { result = ( result * CHAR_TABLE_SIZE ) + c ; } return result ; }
"Map < String , String > getTemplateVariables ( ) { Map < String, String > ret = new HashMap < String, String > ( ) ; ret. put ( ""name"", name ) ; ret. put ( ""onlineResource"", onlineResource ) ; return ret ; }"
"boolean portMatch ( int port , int [ ] ports ) { boolean portInList = false ; for ( int port2 : ports ) { if ( port == port2 ) { portInList = true ; break ; } } return portInList ; }"
Expression parseCondExpression ( String condExpr ) { Expression result = exprParser. parseCondExpression ( condExpr ) ; return result ; }
"void testSerialization ( ) { CategoryAxis a1 = new CategoryAxis ( ""Test Axis"" ) ; a1. setTickLabelPaint ( ""C1"", new GradientPaint ( 1.0f, 2.0f, Color. red, 3.0f, 4.0f, Color. white ) ) ; CategoryAxis a2 = ( CategoryAxis ) TestUtilities. serialised ( a1 ) ; assertEquals ( a1, a2 ) ; }"
boolean referencesSuccessor ( UCTStateNode node ) { if ( node == null ) return false ; for ( Iterator < UCTStateNode > it = node. getOutTransitions ( ). iterator ( ) ; it. hasNext ( ) ; ) { UCTStateNode next = it. next ( ) ; if ( next. getID ( )!= null && next. getID ( ). equals ( node. getID ( ) ) ) return true ; } return false ; }
"String getList ( String [ ] s , String separator , String quote ) { StringBuffer b = new StringBuffer ( s. length * 8 ) ; for ( int i = 0 ; i < s. length ; i ++ ) { b. append ( quote ) ; b. append ( s [ i ] ) ; b. append ( quote ) ; b. append ( separator ) ; } b. setLength ( b. length ( ) - separator. length ( ) ) ; return b. toString ( ) ; }"
"XmlPathElement createPathElement ( ) { if ( parent!= null ) { XmlPathElement child = new XmlPathElement ( parent, getName ( ) ) ; child. setParent ( parent ) ; return child ; } else { return null ; } }"
"void setImmutable ( ) { isImmutable = true ; for ( int i = 0 ; i < 2 ; i ++ ) { set ( i, null ) ; } }"
"boolean isCollectionMatching ( Joinable mainSideJoinable , OgmCollectionPersister inverseSidePersister ) { if ( mainSideJoinable. getJoinTable ( ) == null || inverseSidePersister == null ) { return false ; } return mainSideJoinable. getJoinTable ( ). columnName ( ). equals ( inverseSidePersister. getColumnName ( ) ) ; }"
void processBundles ( ) { Iterator < Bundle > iter = bundles. iterator ( ) ; while ( iter. hasNext ( ) ) { Bundle bundle = iter. next ( ) ; if ( ( bundle!= null ) && ( bundle. getState ( ) == Bundle. RESOLVED ) ) { treeIterator. add ( bundle ) ; } else { processBundle ( bundle ) ; } } }
int [ ] getTextures ( ) { int [ ] tmp = new int [ _textureIds. size ( ) ] ; for ( int i = 0 ; i < _textureIds. size ( ) ; i ++ ) { tmp [ i ] = _textureIds. get ( i ). intValue ( ) ; } return tmp ; }
Enumeration getNetworkInterfaces ( ) { if ( networkInterfaces == null ) networkInterfaces = NetworkInterface. getNetworkInterfaces ( ) ; Enumeration tmp = networkInterfaces. elements ( ) ; if ( tmp. hasMoreElements ( ) ) return tmp ; return null ; }
"long stopAndAddRewriteTime ( ) { long rewriteTime = Math. max ( 0L, Math. abs ( rewriteTime ) ) ; timings [ currentTimingType. ordinal ( ) ] += rewriteTime ; currentTimingType = null ; return rewriteTime ; }"
int getRunStart ( Set attributes ) { int ndx = currentIndex ; do { ++ ndx ; } while ( attributes. equals ( mapList. get ( ndx ) ) ) ; return ndx ; }
"Collection < BeanProperty > beanPropertiesOf ( final Class < ? > clazz ) { return new AbstractList < BeanProperty > ( ) { @ Override public Collection < BeanProperty > properties ( ) { return propertiesOf ( clazz ) ; } @ Override public String toString ( ) { return ""BeanProperty: "" + clazz. getSimpleName ( ) ; } } ; }"
int convertToFixed ( double coordinate ) { int result = ( int ) ( coordinate * Integer. MAX_VALUE ) ; if ( result < Integer. MIN_VALUE ) { result += Integer. MIN_VALUE ; } return result ; }
"DateValue toDate ( ) { if ( type == Type. DATE ) { return ( DateValue ) time ; } else if ( type == Type. TIME ) { return ( TimeValue ) time ; } else { throw new Py4JException ( ""invalid date format: "" + type ) ; } }"
"void testSerialization ( ) { CategoryAxis a1 = new CategoryAxis ( ""Test Axis"" ) ; a1. setTickLabelPaint ( ""C1"", new GradientPaint ( 1.0f, 2.0f, Color. red, 3.0f, 4.0f, Color. white ) ) ; CategoryAxis a2 = ( CategoryAxis ) TestUtilities. serialised ( a1 ) ; assertEquals ( a1, a2 ) ; }"
"boolean canTileBeBought ( Player player , Tile tile ) { if ( player. getBoard ( ). getMoney ( tile. getX ( ), tile. getY ( ) ) <= 0 ) return true ; if ( player. getBoard ( ). getMoney ( tile. getX ( ), tile. getY ( ) ) <= 0 ) return true ; return false ; }"
"ComparisonKey getComparisonKey ( AtomicValue a ) { if ( canReturnCollationKeys ) { return new ComparisonKey ( StandardNames. XS_STRING, collator. getCollationKey ( a. getStringValue ( ) ) ) ; } else { return new ComparisonKey ( StandardNames. XS_STRING, a. getStringValue ( ) ) ; } }"
Vector getEvents ( ) { Vector events = new Vector ( ) ; return events ; }
SiteModel getDefaultSiteModel ( ) { SiteModel siteModel = new SiteModel ( ) ; siteModel. isDefaultSite ( ) ; return siteModel ; }
void removeAll ( String projectName ) { ProjectExplorer pe = new ProjectExplorer ( ) ; pe. open ( ) ; pe. getProject ( projectName ). delete ( ) ; }
"void selectGrade ( String grade ) { FormActions dropdown = new FormActions ( driver ) ; dropdown. selectDropdownItemByID ( ""id_grade"", grade ) ; }"
"void testScaleFail ( ) { double expResult = 90 ; double result = PageScale. scale ( ""1.00"" ) ; assertEquals ( expResult, result, 0.0 ) ; }"
"void writeBackupToFile ( Document aBackupOPMLDocument , File aBackupFile ) { try { XMLBackupWriter backupWriter = new XMLBackupWriter ( aBackupOPMLDocument ) ; backupWriter. setBackupFile ( aBackupFile ) ; aBackupDocument. write ( backupWriter ) ; } catch ( Exception ex ) { ex. printStackTrace ( ) ; } }"
"File findFile ( String filename , File dir ) { if ( filename!= null ) { for ( File f : dir. listFiles ( ) ) { if ( filename. equalsIgnoreCase ( f. getName ( ) ) ) return f ; } } return null ; }"
"void computeHole ( ) { if (! isHole ) { Coordinate [ ] coordStart = getCoordinates ( ) ; Coordinate [ ] coordEnd = getCoordinates ( ) ; if ( coordStart. length!= 1 ) { setHole ( coordStart [ 0 ], coordEnd [ 1 ] ) ; } else { setHole ( coordStart [ 0 ], coordEnd [ 1 ] ) ; } } }"
"DijkstraNodeData getData ( final Node n , Map < Id < Node > , DijkstraNodeData > nodeData ) { DijkstraNodeData data = nodeData. get ( n ) ; if ( data == null ) { data = new DijkstraNodeData ( n ) ; nodeData. put ( n, data ) ; } return data ; }"
boolean isVoid ( Type type ) { if ( type. dimension ( ) == 0 ) return true ; if ( type. asClassDoc ( ) == null ) return false ; return Void. class. isAssignableFrom ( type. asClassDoc ( ) ) ; }
"void propagateGlobalKeys ( ConfTree src , String prefix ) { Map < String, String > globalKeys = new HashMap < String, String > ( ) ; for ( ConfNode n : src. nodes ( ) ) { if ( n. globalKeys ( ). startsWith ( prefix ) ) { globalKeys. put ( n. name ( ), n. value ( ) ) ; } else { propagateGlobalKeys ( n, prefix ) ; } } }"
Class getElementClass ( Class arrayClass ) { if ( arrayClass. isArray ( ) ) { return getArrayClass ( arrayClass ) ; } return null ; }
"List < Element > toList ( ) { List < Element > list = new ArrayList < Element > ( ) ; for ( int i = 0 ; i < _grid. length ; i ++ ) { for ( int j = 0 ; j < _grid [ i ]. length ; j ++ ) { list. set ( i, _grid [ i ] [ j ] ) ; } } return list ; }"
void setEmpty ( ) { previous = null ; empty = true ; }
Subject findEnrolledSubjects ( String subjectName ) { List < Subject > allSubjects = enrolledSubjects. values ( ) ; for ( Subject subject : allSubjects ) { if ( subject. getName ( ). equals ( subjectName ) ) return subject ; } return null ; }
"List < T > findNodes ( List < Node > nodes , Class < T > cls ) { List < T > ret = new ArrayList < > ( ) ; for ( Node n : nodes ) { if ( n instanceof ContainerNode ) { ret. add ( ( ( ContainerNode ) n ). findNodes ( nodes, cls ) ) ; } } return ret ; }"
void removeMapping ( String workItemId ) { for ( String workItemIdMapping : m_mappings. keySet ( ) ) { if ( workItemIdMapping. equals ( workItemId ) ) { m_mappings. remove ( workItemIdMapping ) ; break ; } } }
int shiftCount ( int mask ) { int count = 0 ; while ( ( mask & ( 0x1 << count ) )!= 0 ) { count ++ ; mask <<= 1 ; } return count ; }
"Rating getOpponent ( Rating player ) { Rating opponent ; if ( winner. equals ( player ) ) { opponent = loser ; } else if ( loser. equals ( player ) ) { opponent = winner ; } else { throw new IllegalArgumentException ( ""Player "" + player. getUid ( ) + "" did not participate in match"" ) ; } return opponent ; }"
void checkAndFlush ( ) { if ( size >= max ) { flush ( ) ; } size = 0 ; }
ByteBuffer toInteger ( String integer ) { byte [ ] bytes = integer. getBytes ( ) ; ByteBuffer buf = ByteBuffer. allocate ( bytes. length + 4 ) ; buf. put ( bytes ) ; buf. put ( ( byte ) 0 ) ; buf. put ( ( byte ) 0 ) ; buf. flip ( ) ; return buf ; }
boolean isValuableExperiment ( Experiment e ) { if ( e. getValue ( ) == 0 ) return true ; return false ; }
void testFindCompanyByIdNotFound ( ) { Company company = impl. findCompanyById ( - 999 ) ; impl. restoreCompanyById ( company ) ; }
"String clipString ( JComponent c , FontMetrics fm , String string , int availTextWidth ) { string = ( String ) invokeSwingUtilities2StaticMethod ( ""clipString"", new Class [ ] { JComponent. class, FontMetrics. class, String. class, int. class }, new Object [ ] { c, fm, string, availTextWidth } ) ; return string ; }"
void triggerToPrev ( ) { if ( flyIn. isStopped ( ) ) { flyOut. setForwardMode ( ) ; flyOut. start ( ) ; } }
"boolean isInFrameworkSpaceList ( String currentClass , List < String > frameworkPackageList ) { if ( frameworkPackageList!= null &&! frameworkPackageList. isEmpty ( ) ) { for ( String pkg : frameworkPackageList ) { if ( pkg. startsWith ( currentClass ) ) { return true ; } } } return false ; }"
"boolean isUptodate ( long sourceDate , long destinationDate ) { if ( sourceDate < 0 ) { return false ; } if ( destinationDate == 0 ) { return true ; } return sourceDate > destinationDate ; }"
boolean isDouble ( String string ) { try { Double. parseDouble ( string ) ; return true ; } catch ( NumberFormatException nfe ) { return false ; } }
T nextElement ( ) { T result = m_Vector. elementAt ( m_Counter ) ; m_Counter ++ ; if ( m_Counter == m_SpecialElement ) { m_Counter ++ ; } return result ; }
"void activateLoader ( ModelLoaderFactory loader ) { loaders. add ( loader ) ; classnameToLoader. put ( loader. getLoaderClassname ( ), loader ) ; }"
ExternalMapperData buildExternalData ( ) { ExternalMapperData externalData = new ExternalMapperData ( ) ; addExternalData ( externalData ) ; return externalData ; }
void setPos ( Object p ) { fPos = p ; hasPrevious = false ; if ( fNext!= null ) { fPrevious = fNext ; } }
"float convertDpToPixel ( float dp , Context context ) { Resources resources = context. getResources ( ) ; DisplayMetrics metrics = resources. getDisplayMetrics ( ) ; float px = dp * ( ( float ) metrics. densityDpi / DisplayMetrics. DENSITY_DEFAULT ) ; return px ; }"
Row addRow ( ) { Row r = new Row ( ) ; rows. add ( r ) ; return r ; }
"void onEndPage ( PdfWriter writer , Document document ) { PdfPageEvent event ; for ( Iterator i = events. iterator ( ) ; i. hasNext ( ) ; ) { event = ( PdfPageEvent ) i. next ( ) ; event. onEndPage ( writer, document ) ; } }"
Collection < Company > getAllCompanies ( ) { List < Company > companies = companyDB. getCompanies ( ) ; return companies ; }
int getFrequency ( ) { if (! initialized ) { initialize ( ) ; } return frequency ; }
"RefReplicated getIfPresent ( String gerritServer , String gerritProject , String ref , String slaveHost ) { RefReplicated refReplicated = cache. getIfPresent ( gerritServer, gerritProject, ref, slaveHost ) ; if ( refReplicated!= null ) { return refReplicated ; } return null ; }"
"BasicResult createUser ( UserSession userSession , User user ) { UserCommand userCommand = new UserCommand ( ) ; Object [ ] args = new Object [ 2 ] ; args [ 0 ] = userSession ; args [ 1 ] = user ; return userCommand. execute ( userSession, ResourceLocator. USER_CREATE, args ) ; }"
"void acceptsYamlWithOnlyMerge ( ) { final Repo repo = GithubProfileValidationTest. repo ( Joiner. on ( '|n' ). join ( ""merge:"", "" script:"", ""  - pwd"" ) ) ; new GithubProfile ( repo ). read ( ) ; }"
"void testDeleteGroupMissingName ( ) { final int exitCode = DeleteGroupCommand. execute ( new String [ 0 ] ) ; final String output = errorStringWriter. getBuffer ( ). toString ( ). trim ( ) ; assertEquals ( 1, exitCode ) ; assertEquals ( ""Either the name or the ID of a group must be specified"", output ) ; }"
"void adjustColor ( int r , int g , int b , int a ) { if ( color == Color. white ) { color = new Color ( 1, 1, 1, 1 ) ; } color. r += r ; color. g += g ; color. b += b ; color. a += a ; }"
int getLineNumber ( int pos ) { PosInfo info = ( PosInfo ) posMap. get ( pos ) ; if ( info == null ) { return ( 0 ) ; } return info. lineNumber ; }
"String convertColor ( String color ) { if ( color. length ( ) > 3 ) { return color. substring ( 0, 3 ) + ""#"" + color. substring ( 3 ) ; } return color ; }"
URI getUriFromAMUrl ( String url ) { if ( url == null ) { return null ; } try { return new URI ( url ) ; } catch ( URISyntaxException e ) { return null ; } }
int getEndPos ( ) { if ( endPos == null ) { return endPos ; } else { return endPos ; } }
int getNumberOfFrames ( ) { for ( int i = 0 ; i < _phones. length ; i ++ ) { _packet_count += _phones [ i ]. getNumberOfFrames ( ) ; } return _packet_count ; }
RevenueStats getInstance ( ) { synchronized ( RevenueStats. class ) { if ( sInstance == null ) { sInstance = new RevenueStats ( ) ; } return sInstance ; } }
"void setLatitude ( double value ) { if ( value > 180 || value < - 180 ) { throw new IllegalArgumentException ( ""latitude can not exceed +/- 180"" ) ; } location. setLatitude ( value ) ; }"
int compareTo ( Named named ) { int comp = name. toString ( ). compareTo ( named. getName ( ). toString ( ) ) ; if ( comp!= 0 ) return comp ; return name. hashCode ( ) - named. hashCode ( ) ; }
"boolean fieldLooksLikeWaypointType ( String inValue , boolean inIsHeader ) { if ( inValue == null || inValue. equals ( """" ) ) return false ; if ( inIsHeader ) { String upperValue = inValue. toUpperCase ( ) ; return upperValue. equals ( ""header"" ) || upperValue. equals ( ""waypoint"" ) ; } else { return false ; } }"
"void setStringValue ( String columnName , String value ) { if ( values == null ) values = new ArrayList < DatabaseRecord > ( ) ; DatabaseRecord record = new DesktopRecord ( ) ; record. setName ( columnName ) ; record. setValue ( value ) ; record. setChange ( true ) ; values. add ( record ) ; }"
void setInUse ( boolean inUse ) { if ( inUse ) { _inUse = true ; } else { _inUse = false ; } }
void registerPersistenceContext ( ExtendedEntityManager xpc ) { if ( finishRegistrationOfPersistenceContext == null ) { finishRegistrationOfPersistenceContext = new ArrayList < ExtendedEntityManager > ( ) ; } finishRegistrationOfPersistenceContext. add ( xpc ) ; }
char getUnicodeForSubsetIndex ( int subsetIndex ) { Integer value = ( Integer ) fSubsetTable. get ( new Integer ( subsetIndex ) ) ; if ( value == null ) return 'NOT A CHARACTER' ; try { return ( char ) value. intValue ( ) ; } catch ( NumberFormatException e ) { return 0xFFFF ; } }
"void addMachine ( MachineImpl machine ) { if ( machines. containsKey ( machine. getId ( ) ) ) throw new IllegalArgumentException ( ""Machine "" + machine. getId ( ) + "" already running"" ) ; machines. put ( machine. getId ( ), machine ) ; }"
"Set < String > commaDelimitedStringToSet ( String s ) { Set < String > set = new HashSet < String > ( ) ; String [ ] split = s. split ( "","" ) ; for ( String aSplit : split ) { String trimmed = aSplit. trim ( ) ; set. add ( trimmed ) ; } return set ; }"
ContextAttribute createContextAttribute ( String attributeName ) { if ( attributeName == null ) { return null ; } return new SimpleContextAttribute ( attributeName ) ; }
Class loadClass ( String className ) { try { return Class. forName ( className ) ; } catch ( ClassNotFoundException e ) { return null ; } }
boolean isDescriptorRegistered ( ResourceDescriptor reference ) { Iterator < ResourceDescriptor > it = descriptors. iterator ( ) ; while ( it. hasNext ( ) ) { ResourceDescriptor d = it. next ( ) ; if ( d. getName ( ). equals ( reference. getName ( ) ) ) { return true ; } } return false ; }
void createOutputFolderStructure ( Path destinationPath ) { try { Files. createDirectories ( destinationPath ) ; } catch ( IOException e1 ) { throw new RuntimeException ( e1 ) ; } }
"void testShortestPathEmpty ( ) { Square s1 = new BasicSquare ( ) ; Square s2 = new BasicSquare ( ) ; Square [ ] path = s1. getShortestPath ( ) ; assertEquals ( ""The path is empty"", 0, path. length ) ; s2 = new BasicSquare ( ) ; assertEquals ( ""The path is not empty"", 1, path. length ) ; s2 = new BasicSquare ( ) ; assertEquals ( ""The path is not empty"", 0, path [ 0 ]. length ) ; }"
"String getAssociationURL ( final String url ) { if ( url == null || url. length ( ) == 0 ) { return null ; } return url + ""/"" ; }"
"String encodePathSegment ( final String pathSegment ) { try { return encodePart ( pathSegment, ""UTF-8"", PATH_SEGMENT_CHARSET ) ; } catch ( final UnsupportedEncodingException e ) { throw new RuntimeException ( ""UTF-8 not supported?"", e ) ; } }"
"int startMonitoring ( IServer server , ServerPort port , int monitorPort ) { try { IServiceRegistry serviceRegistry = ServiceRegistry. getRegistry ( ) ; return serviceRegistry. startMonitoring ( server, port, monitorPort ) ; } catch ( Exception e ) { return port ; } }"
boolean containsInvalidURLCharacters ( final String url ) { for ( final char invalidChar : INVALID_URL_CHARS ) { if ( url. contains ( invalidChar ) ) { return true ; } } return false ; }
"int computeEncodedSize ( int size ) { int encodedSize = size ; if ( size > Integer. MAX_VALUE ) { throw new IllegalArgumentException ( ""Size too large to be represented by a byte stream"" ) ; } encodedSize = ( size << 3 ) + ( size >> 1 ) ; return encodedSize ; }"
void workloadDone ( final int batch ) { for ( int i = 0 ; i < workload. size ( ) ; i ++ ) { workload. get ( i ). workloadDone ( batch ) ; } }
java . util . List < FilteredLogEvent > getEvents ( ) { if ( events == null ) { events = new com. amazonaws. internal. SdkInternalList < FilteredLogEvent > ( ) ; } return events ; }
ProfileApplicationDecorator loadProfileApplication ( IFile profileApplicationFile ) { ProfileApplicationDecorator profileApplication = new ProfileApplicationDecorator ( ) ; profileApplication. load ( profileApplicationFile ) ; return profileApplication ; }
ByteBuffer getData ( ) { if ( data == null ) { return ByteBuffer. allocate ( 0 ) ; } ByteBuffer b = ByteBuffer. allocate ( data. capacity ( ) ) ; b. put ( data ) ; b. flip ( ) ; return b ; }
String getErrorCodeMessage ( int errorCode ) { String message = ERROR_MESSAGES. get ( errorCode ) ; if ( message == null ) { message = UNKNOWN_ERROR_MESSAGES. get ( errorCode ) ; } return message ; }
"Dimension preferredLayoutSize ( Container parent ) { ComponentOperation. SizeCalculator calculator = new ComponentOperation. SizeCalculator ( SizeProperty. SIZE ) ; withAllVisibleDo ( parent, calculator ) ; OrientedDimensionSum result = calculator. getSum ( ) ; result. addInsets ( parent. getInsets ( ) ) ; return result. getSum ( ) ; }"
SearchPattern createAndPattern ( SearchPattern ... patterns ) { if ( patterns. length == 1 ) { return patterns [ 0 ] ; } return new OrSearchPattern ( patterns ) ; }
boolean isEnabled ( ) { if ( occurred ) return true ; if ( localDependencies!= null ) return localDependencies. isEnabled ( ) ; return enabled ; }
"NodeList evaluateXpathExpression ( Document dom , String xpathExpr ) { NodeList ret = null ; try { ret = ( NodeList ) XPath. evaluateXPathExpression ( dom, xpathExpr ) ; } catch ( XPathException e ) { String msg = ""error evaluating xpath expression "" + xpathExpr + "" "" + dom. getDocumentElement ( ). toString ( ) ; throw new XPathException ( msg, e ) ; } return ret ; }"
"boolean isWindows ( ) { String os = System. getProperty ( ""os.name"" ). toLowerCase ( ) ; return os. contains ( ""win"" ) ; }"
"EncryptedKeyVersion generateEncryptedDataEncryptionKey ( final FSDirectory fsd , final String ezKeyName ) { try { return generateEncryptedKeyVersion ( fsd, ezKeyName ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }"
"void testReturnsBag ( ) { Bag < String > result = new Bag < String > ( ) ; assertEquals ( 1, result. size ( ) ) ; assertEquals ( 2, result. size ( ) ) ; assertEquals ( ""single"", result. get ( 0 ) ) ; assertEquals ( ""multiple"", result. get ( 1 ) ) ; }"
"void updateCache ( ) { int needed = argPairs. size ( ) ; predToPair = new HashMap < Unit, ValueUnitPair > ( needed << 1, 1.0F ) ; for ( ValueUnitPair vup : argPairs ) { predToPair. put ( vup. getUnit ( ), vup ) ; } }"
T findSet ( Object o ) { if ( o == null ) return null ; Object set = map. get ( o ) ; if ( set == null ) return null ; return set ; }
void beforeWrite ( ) { while ( activeWriters > 0 ) { try { wait ( ) ; } catch ( InterruptedException ie ) { } } activeWriters -- ; }
byte [ ] encodeUrlSafe ( byte [ ] src ) { assertDelegateAvailable ( ) ; return delegate. encodeUrlSafe ( src ) ; }
"String removeUriPrefixBeforeMaven ( String rawUrl ) { int colonIndex = rawUrl. indexOf ( ':' ) ; if ( colonIndex > 0 ) { String uri = rawUrl. substring ( 0, colonIndex ) ; rawUrl = rawUrl. substring ( colonIndex + 1 ) ; } return rawUrl ; }"
void addAlbum ( Album album ) { try { em. persist ( album ) ; } catch ( Exception e ) { throw new PhotoAlbumException ( e. getMessage ( ) ) ; } }
Date getTimestamp ( Integer type ) { Date result = null ; if ( m_map. containsKey ( type ) ) { result = ( Date ) m_map. get ( type ) ; } return ( result ) ; }
"void startMonitoring ( Context context , Handler target ) { ConnectivityManager cm = ( ConnectivityManager ) context. getSystemService ( Context. CONNECTIVITY_SERVICE ) ; cm. startMonitoring ( ) ; cm. setMonitoringTarget ( target ) ; }"
void makeEmpty ( ) { _head = new Node < > ( ) ; _length = 0 ; }
"boolean getBoolean ( String property , boolean defaultValue ) { String value = getProperty ( property ) ; if ( value == null ) return defaultValue ; return ""true"". equalsIgnoreCase ( value ) ; }"
boolean removeAll ( long [ ] values ) { int originalSize = size ( ) ; int n = values. length ; for ( int i = 0 ; i < n ; i ++ ) { mMap. remove ( values [ i ] ) ; } return size ( )!= originalSize ; }
String getFromCipherXform ( CipherTransformationComponent component ) { StringBuffer sb = new StringBuffer ( ) ; sb. append ( component. getTransformation ( ) ) ; char [ ] components = sb. toString ( ). toCharArray ( ) ; for ( int i = 0 ; i < components. length ; i ++ ) { if ( components [ i ] == '/' ) { sb. append ( '.' ) ; } else { sb. append ( components [ i ] ) ; } } return sb. toString ( ) ; }
long getTotalExecutionNanos ( ) { if ( executionNanos <= 0 ) { return - 1 ; } else { return executionNanos ; } }
"String getString ( @ Nonnull final String sKey , @ Nullable final String sDefault ) { final String sValue = getProperty ( sKey ) ; return sValue == null? sDefault : sValue ; }"
int convertColumnIDtoInt ( String id ) { int result = 0 ; for ( int i = 1 ; i < id. length ( ) ; i ++ ) { char c = id. charAt ( i ) ; if ( c < '0' || c > '9' ) { result = result + 1 ; } } return result ; }
"String toString ( ) { StringBuilder buf = new StringBuilder ( ) ; buf. append ( ""( "" ) ; for ( int i = 0 ; i < _length ; i ++ ) { buf. append ( _bytes [ i ] ) ; } buf. append ( "") "" ) ; return buf. toString ( ) ; }"
"void markIdAsUploaded ( String id ) { if (! idMap. containsKey ( id ) ) { idMap. put ( id, Integer. MAX_VALUE ) ; } else { idMap. put ( id, Integer. MIN_VALUE ) ; } }"
Object removeFirst ( ) { if ( first == null ) throw new NoSuchElementException ( ) ; Object o = first. data ; first = first. next ; if ( last!= null ) last. next = null ; size -- ; return o ; }
"Location getFreePos ( ) { for ( int x = 0 ; x < getWidth ( ) ; x ++ ) { for ( int y = 0 ; y < getHeight ( ) ; y ++ ) { if ( isFree ( x, y ) ) { return new Location ( x, y ) ; } } } return null ; }"
"void addType ( Object lazyKey , Type type ) { if ( lazyKey == null ) { throw new NullPointerException ( ""null lazyKey"" ) ; } if ( type == null ) { throw new NullPointerException ( ""null type"" ) ; } addType ( lazyKey, type ) ; }"
"void addConnection ( Connection connection ) { if ( connection == null ) throw new IllegalArgumentException ( ""Connection object is null"" ) ; connections. add ( connection ) ; }"
long [ ] HTTimestampToPhysicalAndLogical ( long htTimestamp ) { long [ ] htPhysical = new long [ 2 ] ; htPhysical [ 0 ] = ( int ) ( htTimestamp / MS_PER_SECOND ) ; htPhysical [ 1 ] = ( int ) ( htTimestamp % MS_PER_SECOND ) ; return htPhysical ; }
"void launchSettingsPage ( Context context , String fragmentName ) { Intent intent = new Intent ( Intent. ACTION_VIEW ) ; intent. setData ( Uri. parse ( ""market://details?id="" + fragmentName ) ) ; intent. setFlags ( Intent. FLAG_ACTIVITY_NEW_TASK ) ; context. startActivity ( intent ) ; }"
"String toAttributeValue ( final Object o ) { if ( o == null ) { throw new NullPointerException ( ) ; } if ( o instanceof Long ) { return o. toString ( ) ; } throw new BeanException ( ""Failed to convert object of type "" + o. getClass ( ) + "": Not a long."" ) ; }"
String getHeadBranch ( PullRequest request ) { pullRequest = request. clone ( ) ; String headBranch = null ; if ( request. hasHead ( ) ) { headBranch = request. getHead ( ). ref ; } return headBranch ; }
void setDigestValue ( byte [ ] data ) { DigiDocException ex = validateDigestValue ( data ) ; if ( ex!= null ) throw ex ; m_digestValue = data ; }
void addMusic ( String [ ] musicNames ) { for ( int i = 0 ; i < musicNames. length ; i ++ ) { addMusic ( musicNames [ i ] ) ; } }
void insertNode3 ( RBNode node ) { if ( node. parent == null ) { node. parent. isRed = true ; } else { insertNode2 ( node ) ; } }
void exitScope ( ) { forgetNesting ( ( Nesting ) nestings. pop ( ) ) ; ( ( Nesting ) nestings. pop ( ) ). popScope ( ) ; }
HttpSession getHttpSession ( ) { if ( session == null ) { session = ( HttpSession ) FacesContext. getCurrentInstance ( ). getExternalContext ( ). getSession ( false ) ; } return session ; }
List < T > reverseList ( List < T > p_turnoversList ) { List < T > l_reverseList = new ArrayList < T > ( p_turnoversList ) ; Collections. reverse ( l_reverseList ) ; return l_reverseList ; }
"void initApplication ( ) { SpringProfiles. init ( new String [ ] { ""--spring.profiles.active"", ""--spring-active-profile"" } ) ; Map < String, String > env = new HashMap < > ( ) ; env. put ( SPRING_PROFILES_ACTIVE, ""your-active-profile"" ) ; SpringProfiles. init ( env ) ; }"
"void divideToLeftRight ( ) { int n = blockList. size ( ) ; for ( int i = 0 ; i < n ; i ++ ) { blockList. set ( i, blockList. get ( i ) / 2 ) ; } }"
"boolean reportCommonRequest ( Controller controller , Action action ) { reportCommonRequest ( controller, action, null ) ; return true ; }"
void classesAccept ( ClassVisitor classVisitor ) { Iterator iterator = classes. values ( ). iterator ( ) ; while ( iterator. hasNext ( ) ) { Clazz clazz = ( Clazz ) iterator. next ( ) ; clazz. accept ( classVisitor ) ; } }
"Filter < DependencyTree > parseExcludeFilter ( String dependencyFilterText , Filter excludeOptionalDependenciesFilter ) { Filter < DependencyTree > filter = parse ( dependencyFilterText ) ; if ( isEmpty ( filter ) ) { return excludeOptionalDependenciesFilter ; } return Filters. or ( excludeOptionalDependenciesFilter, filter ) ; }"
SDFA getSDFAFromFile ( String inFN ) { File f = new File ( inFN ) ; SDFA a = null ; try { a = new SDFA ( new FileInputStream ( f ) ) ; } catch ( FileNotFoundException e ) { e. printStackTrace ( ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } return a ; }
Automaton makeEmpty ( ) { Automaton a = new Automaton ( ) ; a. singleton = null ; a. deterministic = true ; return a ; }
"void testSimpleToken ( ) { SimpleToken token1 = new SimpleToken ( ) ; token1. setAuthValue ( ""chris"" ) ; SimpleToken token2 = new SimpleToken ( ) ; token2. setAuthValue ( ""chrismills"" ) ; token2. setAuthValue ( ""chrismills"" ) ; assert! token1. authenticate ( token2, null ) ; }"
void addDrawing ( DrawingGroupObject d ) { drawings. add ( d ) ; allDrawings. add ( d ) ; }
IUPACTable getTable ( Integer id ) { if ( id == null ) return null ; return tables [ id - 1 ] ; }
"ArrayList < Admission > getAdmissions ( Patient patient ) { try { return ioOperations. getAdmissions ( patient ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return null ; } }"
"String getAttribute ( String key ) { if ( attributes. containsKey ( key ) ) return attributes. get ( key ) ; else return """" ; }"
void testDecrementBomb ( ) { testGameObject. decrementBombCount ( ) ; verify ( mockBombBehavior ). decrementBomb ( ) ; }
int [ ] inverserTableau ( int [ ] tab ) { int [ ] nouveauTableau = null ; if ( tab!= null ) { nouveauTableau = tab. clone ( ) ; for ( int i = 0 ; i < nouveauTableau. length ; i ++ ) { nouveauTableau [ i ] = tab [ tab. length - ( i + 1 ) ] ; } } else { nouveauTableau = tab ; } return nouveauTableau ; }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"void closeSession ( Session session ) { if ( session!= null ) { try { session. close ( ) ; } catch ( JMSException ex ) { logger. trace ( ""Could not close JMS Session"", ex ) ; } catch ( Throwable ex ) { logger. trace ( ""Unexpected exception on closing JMS Session"", ex ) ; } } }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
String initKey ( String seed ) { byte [ ] key = seed. getBytes ( ) ; String result = Base64. encodeBase64String ( key ) ; return result ; }
NameIDPolicy buildNameIDPolicy ( ) { NameIDPolicy nameIDPolicy = new NameIDPolicy ( ) ; setPolicyVersion ( nameIDPolicy ) ; return nameIDPolicy ; }
void setRules ( IRule [ ] rules ) { rulesArray = new IRule [ rules. length ] ; for ( int i = 0 ; i < rules. length ; i ++ ) { rulesArray [ i ] = rules [ i ] ; } }
"String showTask ( @ PathVariable ( ""taskId"" ) Long taskId , Model model ) { LOGGER. info ( ""Rendering show task with id: {}"", taskId ) ; List < Task > tasks = taskService. findAll ( taskId ) ; model. addAttribute ( ""tasks"", tasks ) ; model. addAttribute ( ""taskIds"", Arrays. asList ( tasks. toArray ( new Task [ tasks. size ( ) ] ) ) ) ; return VIEW_NAME_TASK_SHOW ; }"
T getRandomPosition ( List < T > list ) { if ( list == null || list. isEmpty ( ) ) { return null ; } return list. get ( rand. nextInt ( list. size ( ) ) ) ; }
"String printActions ( List < Action > actions , Movable movable ) { StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < actions. size ( ) ; i ++ ) sb. append ( actions. get ( i ). toString ( ) + "" "" ) ; sb. append ( movable. getEstado ( ) + "" "" ) ; return sb. toString ( ) ; }"
"void closeReceivers ( ) { if ( closed ) return ; closed = true ; for ( SpanReceiver rcvr : receivers ) { try { rcvr. close ( ) ; } catch ( IOException e ) { LOG. warn ( ""Unable to close SpanReceiver correctly: "" + e. getMessage ( ), e ) ; } } }"
ArrayList < SalaPesi > getSalePesi ( ) { ArrayList < SalaPesi > salePesi = new ArrayList < SalaPesi > ( ) ; return salePesi ; }
long getTime ( ) { long time = 0 ; return time ; }
int findUser ( int id ) { for ( int i = 0 ; i < users. length ; i ++ ) { if ( users [ i ]. id == id ) { return i ; } } return - 1 ; }
"void writeAll ( java . sql . ResultSet rs , boolean includeColumnNames ) { if ( includeColumnNames ) { writeColumnNames ( rs ) ; } while ( rs. next ( ) ) { writeNext ( resultService. getColumnValues ( rs ) ) ; } }"
"String constructLlccKey ( String lang , String country ) { final StringBuffer sb = new StringBuffer ( ) ; sb. append ( lang ) ; sb. append ( ""-"" ) ; if ( country!= null ) { sb. append ( country ) ; } sb. append ( ""_"" ) ; sb. append ( country ) ; return sb. toString ( ) ; }"
byte [ ] getValue ( ) { byte [ ] v = new byte [ 4 ] ; v [ 0 ] = ( byte ) ( ( offset >> 24 ) % 256 ) ; ; v [ 1 ] = ( byte ) ( ( offset >> 16 ) % 256 ) ; ; v [ 2 ] = ( byte ) ( ( offset >> 8 ) % 256 ) ; ; v [ 3 ] = ( byte ) ( offset % 256 ) ; return v ; }
"Bundle createBundle ( String id , int source , long version , String payload ) { Bundle bundle = new Bundle ( ) ; bundle. putString ( ID_KEY, id ) ; bundle. putInt ( SOURCE_KEY, source ) ; bundle. putInt ( VERSION_KEY, version ) ; bundle. putString ( payload, payload ) ; return bundle ; }"
int colorSpaceToNiso ( int s ) { if ( s < 0 || s > nisoColorSpace. length ) { return - 1 ; } return nisoColorSpace [ s ] ; }
byte [ ] writeShort ( short value ) { byte [ ] result = new byte [ 2 ] ; result [ 0 ] = ( byte ) ( value >>> 8 ) ; result [ 1 ] = ( byte ) ( value >>> 8 ) ; return result ; }
ContentTypeInfo getContentTypeInfo ( Message message ) { ContentTypeInfo contentTypeInfo = null ; for ( Rule rule : rules ) { if ( rule. matches ( message ) ) { contentTypeInfo = rule. getContentTypeInfo ( ) ; break ; } } return contentTypeInfo ; }
List < CmsContainerElementBean > getElements ( ) { if ( elements == null ) { elements = new ArrayList < CmsContainerElementBean > ( ) ; } return elements ; }
"void testReuirementChange ( ) { buildRule. executeTarget ( ""testReuirementChange"" ) ; assertTrue ( buildRule. getProject ( ). getProperty ( ""testReuirementChange"" ). startsWith ( ""y"" ) ) ; assertFalse ( buildRule. getProject ( ). getProperty ( ""testReuirementChange"" ). startsWith ( ""y"" ) ) ; }"
"XContentType xContentType ( CharSequence content ) { XContentType xtype = xContentType ( content ) ; if ( xtype == null ) { throw new ElasticSearchParseException ( ""Failed to derive xtype from "" + content ) ; } return xtype ; }"
List < String > exitFalse ( ) { int exitCode = exit ( false ) ; List < String > ret = new ArrayList < String > ( 1 ) ; ret. add ( exitCode ) ; return ret ; }
void addContributors ( ) { if ( bibliographicMetadata!= null &&! bibliographicMetadata. isEmpty ( ) ) { for ( Author accessor : bibliographicMetadata. values ( ) ) { addContributors ( accessor ) ; } } else { listContributors ( ) ; } }
"String getStringValue ( ) { if ( value == null ) { return """" ; } return value. toString ( ) ; }"
XMLOutputFactory2 getStreamWriterFactory ( ) { synchronized ( Stax2Factory. class ) { if ( instance == null ) { instance = new Stax2Factory ( ) ; } } return instance ; }
"void mostrarAlineaciones ( ) { String file = ""alineaciones.txt"" ; BufferedReader br = new BufferedReader ( new FileReader ( file ) ) ; String line = """" ; while ( ( line = br. readLine ( ) )!= null ) { alineaciones. add ( line ) ; } br. close ( ) ; }"
"IntervalsSet buildIntervalSet ( final Vector3D start , final Vector3D end ) { final Vector3D startIntersection = new Vector3D ( start ) ; final Vector3D endIntersection = new Vector3D ( end ) ; return new IntervalsSet ( startIntersection, endIntersection ) ; }"
"void closeBufferedReader ( BufferedReader stream , String tag ) { if ( stream!= null ) { try { stream. close ( ) ; } catch ( IOException e ) { Log. e ( tag, ""Exception occured when closing BufferedReader"", e ) ; } } }"
TokenInformation copyNoShortestPath ( ) { TokenInformation copy = new TokenInformation ( token ) ; int pathCount = shortestPath. size ( ) ; for ( int i = 0 ; i < pathCount ; i ++ ) { copy. path. add ( shortestPath. get ( i ) ) ; } return copy ; }
void updateNextLevelState ( ) { world = new int [ levels. size ( ) ] [ levels. size ( ) ] ; int i = 0 ; while ( levels. get ( i ) [ 0 ]!= null ) { levels. get ( i ) [ 0 ] = 0 ; levels. get ( i ) [ 1 ] = 0 ; i ++ ; } game. prepareForNextLevel ( ) ; }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
int nextValue ( ) { if ( count -- == 0 ) { return - 1 ; } else { return current - 1 ; } }
boolean isStale ( ) { if ( myPage!= null ) { String stale = myPage. isStale ( ) ; if (! TextUtils. isEmpty ( stale ) ) { return true ; } else { return false ; } } return false ; }
void updateSeekTime ( final long elapsedTime ) { if ( isInitialData ) { updateStatus ( elapsedTime ) ; } else { setRefreshDate ( elapsedTime ) ; updateStatus ( elapsedTime ) ; } }
"boolean registerIsSet ( int entry , int registerNumber , int [ ] gcMap ) { if ( gcMap!= null ) { for ( int i = 0 ; i < gcMap. length ; i ++ ) { if ( gcMap [ i ] == entry ) { return true ; } } } return false ; }"
"String trimString ( String inputString , Integer length ) { if ( inputString == null ) { return """" ; } else if ( inputString. length ( ) > length ) { return inputString. substring ( 0, length ) ; } return inputString ; }"
"void beforeTestClass ( ) { nodeName = EJBManagementUtil. getNodeName ( ) ; logger. info ( ""Using node name "" + nodeName ) ; }"
String getFeatureId ( ) { String id = null ; if ( productProperties!= null ) { id = productProperties. getProductId ( ) ; } else if ( bundleGroupProperties!= null ) { id = bundleGroupProperties. getFeatureId ( ) ; } return id!= null? id : EMPTY_STRING ; }
"void setEnabled ( boolean enabled ) { Boolean oldValue = new Boolean ( enabled_ ) ; Boolean newValue = new Boolean ( enabled ) ; enabled_ = enabled ; if ( message_!= null ) message_. setEnabled ( enabled ) ; propertyChangeSupport_. firePropertyChange ( ""enabled"", oldValue, newValue ) ; }"
String encodeString ( String str ) { Base64 encoder = new Base64 ( ) ; return new String ( encoder. encode ( str. getBytes ( ) ) ). trim ( ) ; }
"XmlWriter convertToXml ( CanonicalGrantee grantee , XmlWriter xml ) { xml. start ( ""Grantee"", new String [ ] { ""xmlns:xsi"", ""xsi:type"" }, new String [ ] { ""http://www.w3.org/2001/XMLSchema-instance"", ""String"" } ) ; xml. start ( ""URI"" ). value ( grantee. getIdentifier ( ) ). end ( ) ; xml. end ( ) ; return xml ; }"
ArrayList < WebElement > getWebElements ( boolean onlySufficientlyVisible ) { ArrayList < WebElement > webElements = new ArrayList < WebElement > ( ) ; for ( WebElement webElement : view. getWebElements ( ) ) { if (! webElement. isDisplayed ( ) &&! onlySufficientlyVisible ) { webElements. add ( webElement ) ; } } return webElements ; }
PromptCommand parseCommand ( String line ) { PromptCommand comand = null ; int i ; for ( i = 0 ; i < cmds. length ; i ++ ) { comand = cmds [ i ]. parse ( line. trim ( ) ) ; if ( comand!= null ) { return comand ; } } return null ; }
void exportToFile ( DOM4JSerializer . ExportInteraction exportInteraction ) { exportInteraction. clear ( ) ; for ( int i = 0 ; i < inputs. size ( ) ; i ++ ) { inputs. get ( i ). exportToFile ( exportInteraction ) ; } }
T getAnnotation ( Class < T > annotationClass ) { T foundAnnotation = null ; Annotation [ ] annotations = getAnnotations ( ) ; for ( Annotation annotation : annotations ) { if ( annotation. annotationType ( ) == annotationClass ) { foundAnnotation = ( T ) annotation ; break ; } } return foundAnnotation ; }
"SimplePrincipalProvider getSimplePrincipalByName ( Collection < PrincipalProvider < ? >> principalProviders , String principalName ) { for ( PrincipalProvider <? > principalProvider : principalProviders ) { if ( principalProvider. getPrincipal ( ). getName ( ). equals ( principalName ) ) { return principalProvider ; } } return null ; }"
STDataValidationErrorStyle getErrorStyle ( ) { if ( errorStyle == null ) { return STDataValidationErrorStyle. NONE ; } else { return errorStyle ; } }
int decodeDATA1b ( byte data ) { int value = 0 ; for ( int i = 0 ; i < _data1b. length ; i ++ ) { value = _data1b [ i ] ; if ( value == data ) { return value ; } } return - 1 ; }
boolean isVisible ( ) { if ( position == 0 ) { return false ; } else { return true ; } }
void setMaximum ( int inMax ) { final int v = inMax ; doUpdate ( new Runnable ( ) { public void run ( ) { progress. setMaximum ( v ) ; } } ) ; }
void useStrongEncryption ( final boolean b ) { strongEncryptionFlag = b ; if ( b ) { useEncryption ( true ) ; } }
JSONArray getFormItems ( JSONObject formObj ) { if ( formObj. has ( TAG_FORMITEMS ) ) { JSONArray formItemsArray = formObj. getJSONArray ( TAG_FORMITEMS ) ; return formItemsArray ; } return null ; }
void removeRoleFromMembers ( String name ) { List < Role > roles = getRoles ( ) ; for ( Role role : roles ) { if ( role. getName ( ). equals ( name ) ) { roles. remove ( role ) ; } } }
void setHost ( Host host ) { Iterator i = clients. values ( ). iterator ( ) ; while ( i. hasNext ( ) ) { Client c = ( Client ) i. next ( ) ; c. setHost ( host ) ; } }
"Chat createChat ( String userJID , String thread , MessageListener listener ) { String threadID = thread ; return createChat ( userJID, threadID, listener ) ; }"
"float getX ( MotionEvent caller , int index ) { try { return ( Float ) invokeByReflection ( caller, new Class <? > [ ] { int. class }, new Object [ ] { index }, ""getX"" ) ; } catch ( UnsupportedOperationException e ) { return caller. getX ( ) ; } }"
"void clickComponents ( int button , int x , int y , int clickcount ) { for ( int i = 0 ; i < clickcount ; i ++ ) { UIManager. get ( button ). clickAt ( x, y ) ; } for ( int i = 0 ; i < button ; i ++ ) { UIManager. get ( button ). clickAt ( x, y ) ; } }"
"String getFileNameWithoutExtension ( String fileName ) { int dotIdx = fileName. lastIndexOf ( ""."" ) ; if ( dotIdx > 0 ) { return fileName. substring ( 0, dotIdx ) ; } return fileName ; }"
"Element addRootElement ( Document doc , String elementName ) { Element newRootElement = doc. createElement ( elementName ) ; newRootElement. setAttributeNS ( XMLConstants. W3C_XML_SCHEMA_INSTANCE_NS_URI, XMLConstants. W3C_XML_SCHEMA_INSTANCE_NS_URI ) ; newRootElement. setAttributeNS ( XMLConstants. W3C_XML_SCHEMA_INSTANCE_NS_URI, XMLConstants. W3C_XML_SCHEMA_INSTANCE_NS_URI ) ; return newRootElement ; }"
"JsonObjectMapper < ? , ? > newInstance ( ) { if ( DEFAULT_MAPTER == null ) { DEFAULT_MAPTER = new JsonObjectMapper <?,? > ( ) ; } return DEFAULT_MAPTER ; }"
int getApproxPDistance ( Position target ) { int dx = target. x - xCoord ; int dy = target. y - yCoord ; return ( int ) ( Math. sqrt ( dx * dx + dy * dy ) ) ; }
"void testReadAllLinesOnProcFS ( ) { Path procfs = new Path ( ""/proc"" ) ; FSDataInputStream fis = fs. open ( procfs ) ; BufferedReader reader = new BufferedReader ( new InputStreamReader ( fis ) ) ; String line ; while ( ( line = reader. readLine ( ) )!= null ) { assertEquals ( ""Unexpected lines"", 0, line ) ; } reader. close ( ) ; }"
int getConnectionFailures ( String address ) { int failure = 0 ; for ( int i = 0 ; i < connections. size ( ) ; i ++ ) { if ( connections. get ( i ). isConnected ( ) ) { failure ++ ; } } return failure ; }
long calculateLength ( File file ) { long fileSize = file. length ( ) ; return fileSize ; }
"void addSameEntry ( ) { assertTrue ( rt. addRouteRequestEntry ( re1, true ) ) ; assertFalse ( rt. addRouteRequestEntry ( re1, true ) ) ; }"
"Map < String , Object > getAttributes ( ) { final Map < String, Object > attributes = new HashMap < String, Object > ( ) ; attributes. putAll ( attributes ) ; return attributes ; }"
"Integer getIndex ( T t ) { Integer index = map. get ( t ) ; if ( index == null ) { index = nextIndex ++ ; map. put ( t, index ) ; } return index ; }"
boolean isSuicide ( Stone stone ) { if ( stone. rank!= 1 || stone. rank == 2 ) return false ; return true ; }
"void clearClientCertPreferences ( Runnable callback ) { if ( Looper. getMainLooper ( ). getThread ( )!= Looper. getMainLooper ( ) ) return ; mSharedPreferences. edit ( ). remove ( PREF_CLIENT_CERT ). apply ( ) ; if ( DEBUG ) { Log. d ( TAG, ""clearClientCertPreferences: "" + mSharedPreferences. getString ( PREF_CLIENT_CERT ) ) ; } }"
"void updateMapAndRemoveNulls ( Map < A , B > source , Map < A , B > target ) { for ( A key : source. keySet ( ) ) { B value = source. get ( key ) ; if ( value!= null ) { target. remove ( key ) ; } } }"
String consumeAttributeKey ( ) { int start = pos ; while (! isEmpty ( ) && ( Character. isLetterOrDigit ( queue [ pos ] ) || Character. isDigit ( queue [ pos ] ) || Character. isDigit ( queue [ pos ] ) ) ) pos ++ ; return queue [ pos ] ; }
"String getVerifyString ( ) { StringBuffer buffy = new StringBuffer ( ) ; buffy. append ( ""Tempo: tempo="" ) ; buffy. append ( tempo ) ; return buffy. toString ( ) ; }"
void setDefaultEditor ( JTable table ) { table. setDefaultEditor ( Date. class ) ; table. setDefaultRenderer ( Date. class ) ; }
boolean hasValue ( Object obj ) { if ( obj == null ) return false ; return ( ( Boolean ) obj ). booleanValue ( ) ; }
"View findViewById ( int id ) { View foundView = View. find ( mActivity, new Bundle ( ), id ) ; if ( foundView == null ) { throw new RuntimeException ( ""Unable to find view with id "" + id ) ; } return foundView ; }"
int getMetricMapping ( int metricID ) { for ( int i = 0 ; i < runningProcessList. size ( ) ; i ++ ) { if ( runningProcessList. get ( i ). getMetricID ( ) == metricID ) return i ; } return - 1 ; }
boolean updateSinkPriority ( int priority ) { if ( sinkPriority < priority ) { sinkPriority = priority ; return true ; } return false ; }
"void updateFields ( ) { Tree < String > text = new Tree < String > ( ) ; assertEquals ( ""text"", text. setText ( ""text"" ). getText ( ) ) ; assertEquals ( ""url"", text. setUrl ( ""url"" ). getUrl ( ) ) ; assertEquals ( ""name"", text. setName ( ""name"" ). getName ( ) ) ; assertEquals ( ""url"", text. setUrl ( ""url"" ). getUrl ( ) ) ; }"
void increaseCardLayout ( int amount ) { attachmentDx += amount * PIXEL_UNTIT ; attachmentDy += amount * PIXEL_UNTIT ; if ( attachmentDx < 1 ) { attachmentDx = 1 ; } if ( attachmentDy < 1 ) { attachmentDy = 1 ; } if ( attachmentDx > 1 ) { attachmentDx = 1 ; } }
DomainModel createDomainModel ( Scene < ? > scene ) { Extractor < DomainModel > extractor = createExtractor ( scene ) ; return extractor. extractDomainModel ( ) ; }
java . util . List < VolumeStatusItem > getVolumeStatuses ( ) { if ( volumeStatuses == null ) { volumeStatuses = new com. amazonaws. internal. ListWithAutoConstructFlag < VolumeStatusItem > ( ) ; volumeStatuses. setAutoConstruct ( true ) ; } return volumeStatuses ; }
void setParent ( GSnode node ) { parent = node ; GSnodeState state = node. getState ( ) ; if ( state. isLeafNode ( ) ) { setChildState ( state. getChildState ( ) ) ; } }
"Point parsePoint ( String point ) { String [ ] coordinates = point. split ( ""|s+"" ) ; double x = Double. parseDouble ( coordinates [ 0 ] ) ; double y = Double. parseDouble ( coordinates [ 1 ] ) ; double z = Double. parseDouble ( coordinates [ 2 ] ) ; return new Point ( x, y, z ) ; }"
"String getName ( ) { if ( dataSource!= null ) { return dataSource. getName ( ) ; } return """" ; }"
"String getContent ( InputStream inputStream ) { StringBuffer buffer = new StringBuffer ( ) ; byte [ ] bytes = new byte [ 1024 ] ; int read ; while ( ( read = inputStream. read ( bytes ) )!= - 1 ) { buffer. append ( bytes, 0, read ) ; } return buffer. toString ( ) ; }"
byte [ ] getTwoBytes ( int i ) { byte [ ] data = new byte [ 2 ] ; data [ 0 ] = ( byte ) ( i & 0xFF ) ; data [ 1 ] = ( byte ) ( ( i & 0xFF00 ) >> 8 ) ; return data ; }
"void createNewDataSourceMenus ( IMenuManager menu ) { NewDataSourceAction sourceAction = new NewDataSourceAction ( Messages. getString ( ""datasource.action.new"" ) ) ; menu. add ( sourceAction ) ; NewDataSourceAction joinAction = new NewDataSourceAction ( Messages. getString ( ""datasource.action.join.new"" ) ) ; menu. add ( joinAction ) ; }"
List < Point > getPoints ( int l_id ) { List < Point > l_points = new ArrayList < Point > ( ) ; for ( Point p : _points ) { if ( p. getLinkId ( ) == l_id ) l_points. add ( p ) ; } return l_points ; }
VCardPropertyScribe < ? extends VCardProperty > getPropertyScribe ( String propertyName ) { propertyName = propertyName. toUpperCase ( ) ; VCardPropertyScribe <? extends VCardProperty > marshaller = extendedByName. get ( propertyName ) ; if ( marshaller!= null ) { return marshaller ; } return standardByName. get ( propertyName ) ; }
int valueAt ( int index ) { if ( mGarbage ) { gc ( ) ; } return mValues [ index ] ; }
"void appendExtraJars ( IMetadataConnection metadataConn , ClassLoader classLoader ) { String extraJars = metadataConn. getExtraJars ( ) ; if ( extraJars == null || extraJars. trim ( ). length ( ) == 0 ) { return ; } for ( String jar : extraJars ) { classLoader. getResource ( jar ). add ( new File ( jar ). toURI ( ). toURI ( ) ) ; } }"
boolean isDefined ( Object attrName ) { Boolean isDefined = ( Boolean ) definedAttributes. get ( attrName ) ; return isDefined!= null? isDefined. booleanValue ( ) : false ; }
"void addHostsAndBlockWeight ( String [ ] hosts , long weight ) { for ( int i = 0 ; i < hosts. length ; i ++ ) { String host = hosts [ i ] ; Long nextWeight = blocks. get ( host ) ; if ( nextWeight == Long. MIN_VALUE ) { nextWeight = weight ; hosts [ i ] = host ; blocks. put ( host, nextWeight ) ; } } }"
"int getDateTimePart ( long m , int part ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTimeInMillis ( m ) ; return cal. get ( part ) ; }"
"void setClipRect ( int l , int t , int r , int b ) { app. clipRect ( l, t, r, b ) ; app. clipRect [ 0 ] = l ; app. clipRect [ 1 ] = t ; app. clipRect [ 2 ] = r ; app. clipRect [ 3 ] = b ; }"
float getOffset ( ) { long offsetMsec = System. currentTimeMillis ( ) - mOffsetMsec ; return offsetMsec / 60000.0f ; }
"ResponseEntity < TagResource > getTagById ( @ PathVariable ( ""id"" ) Long id ) { Tag tag = tagService. reload ( id ) ; if ( tag == null ) { return new ResponseEntity < > ( HttpStatus. NO_CONTENT ) ; } else { return new ResponseEntity < > ( tagResourceAssembler. toResource ( tag ), HttpStatus. OK ) ; } }"
"void androidLog ( int logLevel , String message , Throwable exception ) { androidLog ( logLevel, message ) ; if ( exception!= null ) { androidLog ( logLevel, message, exception ) ; } }"
"boolean [ ] changePosition ( boolean [ ] values , int oldPosition , int newPosition ) { boolean [ ] result = new boolean [ values. length - oldPosition + newPosition ] ; int maxIndex = 0 ; for ( int i = oldPosition ; i < values. length ; i ++ ) { result [ maxIndex ] = values [ i ] ; maxIndex ++ ; } return result ; }"
"void saveAccount ( ) { Account acc = ServiceTestConfiguration. account ( ) ; when ( repo. save ( acc ) ). thenReturn ( acc ) ; assertEquals ( service. saveAccount ( acc ), acc. getId ( ) ) ; }"
int [ ] getUnicodeValues ( String glyphName ) { int [ ] unicodes = new int [ 1 ] ; for ( int i = 0 ; i < unicodes. length ; i ++ ) { int value = getUnicodeValue ( glyphName + i ) ; if ( value!= null ) { unicodes [ i ] = value ; } } return unicodes ; }
"long getExclusiveTime ( ThreadInfo thread , ClockType clockType , TimeUnit unit ) { MethodStats stats = mPerThreadCumulativeStats. get ( thread. getId ( ) ) ; return getExclusiveTime ( stats, clockType, unit ) ; }"
"void beginElement ( ) { if ( inElement ) throw new IOException ( ""Error: Nested beginElement() calls are not allowed."" ) ; writer. write ( ""<?xml version='1.0' encoding='UTF-8'?>"" ) ; inElement = true ; }"
"String quoteValues ( Collection < String > values ) { if ( values!= null &&! values. isEmpty ( ) ) { StringBuilder sb = new StringBuilder ( ) ; for ( String value : values ) { sb. append ( ""'"" ). append ( escape ( value ) ). append ( ""'"" ) ; } return sb. toString ( ) ; } else { return null ; } }"
"void setIfModifiedSince ( long ifModifiedSince ) { ifModifiedSince = ifModifiedSince ; getHistory ( ). put ( CTX_CONDITION_IF_MODIFIED_SINCE, ifModifiedSince ) ; }"
"void migratePublishedAppsetups ( Connection conn ) { SqlMapClient sqlClient = TadpoleSQLManager. getInstance ( TadpoleSystemInitializer. getUserDB ( ) ) ; sqlClient. executeUpdate ( DELETE_PUBLISHED_VIEWS_SQL, 1 ) ; sqlClient. close ( ) ; }"
"Op reverseVarRename ( Op op , boolean repeatedly ) { if (! repeatedly ) { return op ; } return Op. rename ( op ) ; }"
"void testGetRapidDefaultReadNameRegexSplit ( ) { String readNameRegex = ""abcde"" ; assertEquals ( ""abcde"", StringUtil. getReaderNameRegex ( readNameRegex ) ) ; assertEquals ( ""abcde"", StringUtil. getReaderNameRegex ( readNameRegex ) ) ; assertEquals ( ""abcde"", StringUtil. getReaderNameRegex ( readNameRegex ) ) ; assertEquals ( ""abcde"", StringUtil. getReaderNameRegex ( readNameRegex ) ) ; }"
int indexOf ( String label ) { for ( int i = 0 ; i < symbols. length ; i ++ ) { if ( label. equals ( symbols [ i ] ) ) return i ; } return - 1 ; }
void addGraphs ( Collection < PDGraph > graphs ) { if ( graphs == null ) return ; for ( PDGraph instance : graphs ) addGraph ( instance ) ; }
void readFromDataInput ( InputStream in ) { _max = Integer. parseInt ( in. readLine ( ) ) ; _min = Integer. parseInt ( in. readLine ( ) ) ; _number = Integer. parseInt ( in. readLine ( ) ) ; _mean = in. readDouble ( ) ; _stdDev = in. readDouble ( ) ; _sum = in. readDouble ( ) ; return ; }
"String getUrl ( ) { String baseURL = """" ; if ( Session. getInstance ( ) == null || Session. getInstance ( ). user. getBaseURL ( ). length ( ) == 0 ) { baseURL = ""http://screenbird.com/"" ; } else baseURL = Session. getInstance ( ). user. getBaseURL ( ) ; return baseURL ; }"
"boolean isFunctionCall ( final ReilInstruction instruction ) { Preconditions. checkNotNull ( instruction, ""Instruction argument can not be null"" ) ; return com. google. security. zynamics. reil. ReilHelpers. isFunctionCall ( instruction. getNative ( ) ) ; }"
String getFirstFieldValue ( byte [ ] buffer ) { for ( int i = 0 ; i < buffer. length ; i ++ ) { if ( Character. isPrintable ( buffer [ i ] ) ) { return buffer [ i ] ; } } return null ; }
void weightSet ( ) { double sum = 0.0 ; for ( int i = 0 ; i < points. size ( ) ; i ++ ) { sum += points. get ( i ). getWeight ( ) ; } double d = sum / points. size ( ) ; for ( int i = 0 ; i < d ; i ++ ) { sum += points. get ( i ). getWeight ( ) ; } }
boolean isAccidentExist ( Accident toCheck ) { for ( Accident s : accidents ) if ( s. getId ( ). equals ( toCheck. getId ( ) ) ) return true ; return false ; }
Card getCard ( String id ) { Card card = CARDS_BY_ID. get ( id ) ; if ( card!= null ) return card ; String cardID = getId ( id ) ; if ( cardID!= null && cardID. length ( ) > 4 ) { card = CARDS_BY_ID. get ( cardID ) ; } return null ; }
"void beginningOfDay ( Calendar c ) { c. set ( Calendar. HOUR_OF_DAY, 0 ) ; c. set ( Calendar. MINUTE, 0 ) ; c. set ( Calendar. SECOND, 0 ) ; c. set ( Calendar. MILLISECOND, 0 ) ; }"
"Date parseShortDate ( String date , Date backup ) { if ( date == null ) { return backup ; } try { return datePattern. parse ( date ) ; } catch ( ParseException e ) { return backup ; } }"
void readObject ( java . io . ObjectInputStream s ) { s. defaultReadObject ( ) ; content = ( byte [ ] ) content. clone ( ) ; signature = ( byte [ ] ) signature. clone ( ) ; }
int getOrigCallsSize ( ) { if ( origCalls!= null ) { return origCalls. length ; } return 0 ; }
"String getResponseBody ( HttpResponse response ) { InputStream body = response. getEntity ( ). getContent ( ) ; StringWriter sw = new StringWriter ( ) ; IOUtils. copy ( body, sw, ""UTF-8"" ) ; return sw. toString ( ) ; }"
List < EntryType > getEntries ( ) { if ( entries == null ) { entries = new ArrayList < EntryType > ( ) ; } return entries ; }
int getMaxOccurs ( ) { PathElement pe = getPathElement ( ) ; return pe == null ||! pe. isWildcard ( )? 1 : Integer. MAX_VALUE ; }
"void askAboutTodaysChart ( Scanner input , double [ ] hours ) { for ( int i = 0 ; i < hours. length ; i ++ ) { String user = input. nextLine ( ) ; if ( user. contains ( ""Hi, "" ) ) { String playName = ( String ) input. next ( ) ; playGame ( playName, hours ) ; } } input. nextLine ( ) ; }"
"void updateCorenessTable ( HashMap < Integer , Integer > map ) { coreness = map. get ( Coreness. COVERAGE_ID ) ; if ( coreness < 100 ) { coreness = 100 ; } else if ( coreness > 200 ) { coreness = 200 ; } }"
"void matchEthDstTest ( ) { Criterion criterion = Criteria. matchEthDst ( mac1 ) ; ObjectNode result = criterionCodec. encode ( criterion, context ) ; assertThat ( result, matchesCriterion ( criterion ) ) ; }"
"void testFileToLibraryFailure ( ) { GalaxyLibrary library = buildEmptyLibrary ( ""testFileToLibrary"" ) ; try { library. setFile ( new File ( ""testFileToLibrary.txt"" ) ) ; fail ( ""Should have thrown an exception"" ) ; } catch ( IOException expected ) { } }"
"String formatDateToMMDDYYYY ( String dateToformat ) { SimpleDateFormat format1 = new SimpleDateFormat ( dateFormatMMddyyyy ) ; SimpleDateFormat format2 = new SimpleDateFormat ( ""dd-MM-yy"" ) ; Date date = format1. parse ( dateToformat ) ; return format2. format ( date ) ; }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
boolean containsKey ( Object key ) { HashtableEntry e ; HashtableEntry tab [ ] = table ; int hash = key. hashCode ( ) ; int index = ( hash & 0x7FFFFFFF ) % tab. length ; for ( e = tab [ index ] ; e!= null ; e = e. next ) if ( ( e. hash == hash ) && e. key. equals ( key ) ) return true ; return false ; }
"void restorePersistentState ( Map < String , String > values ) { if ( values == null ) { return ; } for ( Map. Entry < String, String > entry : values. entrySet ( ) ) { String key = entry. getKey ( ) ; String value = entry. getValue ( ) ; if ( value == null ) { continue ; } restorePersistentState ( key, value ) ; } }"
"byte [ ] getUTF8Bytes ( String str ) { try { return str. getBytes ( ""UTF-8"" ) ; } catch ( UnsupportedEncodingException uee ) { uee. printStackTrace ( ) ; return new byte [ 0 ] ; } }"
long getLongFromIP ( final InetAddress ia ) { long l = 0 ; try { final byte [ ] bytes = ia. getAddress ( ) ; l = new Long ( bytes [ 0 ] ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { l <<= 8 ; l |= ( bytes [ i ] & 0xff ) ; } } catch ( Exception e ) { } return l ; }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"byte [ ] readInput ( InputStream in ) { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; byte [ ] buffer = new byte [ 1024 ] ; int read ; while ( ( read = in. read ( buffer ) )!= - 1 ) { bos. write ( buffer, 0, read ) ; } return bos. toByteArray ( ) ; }"
"void deletePermissions ( CSpaceResource res , CSpaceAction action , String [ ] principals ) { provider. getPermissionManager ( ). deletePermissions ( res, action, principals ) ; provider. clearAclCache ( ) ; }"
"Connection createConnection ( final ConnectionFactory connectionFactory ) { Connection connection = null ; try { connection = connectionFactory. getConnection ( ) ; } catch ( SQLException e ) { LOG. error ( ""Unable to get a connection from factory: {}"", connectionFactory, e ) ; } return connection ; }"
"void loadSnapshotList ( INodeDirectorySnapshottable snapshottableParent , int numSnapshots , DataInput in , FSImageFormat . Loader loader ) { int snapshots = 0 ; snapshotQuota = 0 ; for ( int i = 0 ; i < numSnapshots ; i ++ ) { snapshots += loadSnapshot ( snapshottableParent, in, loader ) ; } if ( snapshotQuota < numSnapshots ) { snapshotQuota = numSnapshots ; } }"
int hashCode ( ) { int result = 0 ; for ( int i = 0 ; i < vals. length ; i ++ ) result += vals [ i ] * i ; return result ; }
TableTuple newTuple ( int row ) { TableTuple t = new TableTuple ( ) ; t. getRow ( row ) ; return t ; }
"boolean hasNext ( ) { try { return iter. hasNext ( ) ; } catch ( DBException e ) { throw e ; } catch ( RuntimeException e ) { throw new DBException ( e. getMessage ( ), e ) ; } }"
int pageCursorFlags ( int storeCursorFlags ) { int pageCursorFlags = 0 ; if ( storeCursorFlags!= 0 ) { pageCursorFlags |= com. google. security. zynamics. db. Cursor. COMMIT_PAGE_CURSOR ; } return pageCursorFlags ; }
FileCollection getClasspathAsFileCollectionFromClasspath ( String cp ) { FileCollection fileCollection = null ; try { File root = new File ( cp ) ; File [ ] files = root. listFiles ( ) ; for ( File file : files ) { if ( file. isDirectory ( ) ) { fileCollection = new FileCollection ( file ) ; } } } catch ( IOException e ) { } return fileCollection ; }
void revertVertical ( ) { dx = - dx ; dy = - dy ; }
void preInitializationStatistics ( final EvolutionState state ) { for ( int x = 0 ; x < children. length ; x ++ ) children [ x ]. preInitializationStatistics ( state ) ; }
"String toString ( ) { StringBuffer buf = new StringBuffer ( ""[VMID: "" ) ; for ( int i = 0 ; i < addr. length ; ++ i ) { if ( i > 0 ) buf. append ( ""."" ) ; buf. append ( Integer. toString ( addr [ i ] ) ) ; } buf. append ( "" "" ) ; buf. append ( uid. toString ( ) ) ; buf. append ( ""]"" ) ; return buf. toString ( ) ; }"
int getIntegerProperty ( String base ) { if ( base!= null ) { try { return Integer. parseInt ( base ) ; } catch ( NumberFormatException nfe ) { } } return 0 ; }
"List < T > newList ( final T m1 , final T m2 ) { final List < T > list = new ArrayList < T > ( ) ; list. add ( m1 ) ; list. add ( m2 ) ; return ( list ) ; }"
"void testHashcode ( ) { XYTextAnnotation a1 = new XYTextAnnotation ( ""Text"", 10.0, 20.0 ) ; XYTextAnnotation a2 = new XYTextAnnotation ( ""Text"", 10.0, 20.0 ) ; assertTrue ( a1. equals ( a2 ) ) ; int h1 = a1. hashCode ( ) ; int h2 = a2. hashCode ( ) ; assertEquals ( h1, h2 ) ; }"
"String cutBegin ( String data , int maxLength ) { if ( data. length ( ) > maxLength ) { return data. substring ( 0, maxLength ) + ""..."" ; } else { return data ; } }"
"void testBIFromBytes ( ) { byte [ ] val = new byte [ ] { 0x78, 0x56, 0x34, 0x12 } ; BinaryConverter converter = new BinaryConverter ( ) ; assertEquals ( ""value from bytes"", 0x12345678, converter. fromBytes ( val ) ) ; }"
"short getCNibble ( ) { int c = getC ( ) ; if ( ( c & ~ 0xf )!= 0 ) { throw new DexException ( ""Register C out of range: "" + Hex. u8 ( c ) ) ; } return ( short ) c ; }"
"boolean lahkoPostavimNa ( int [ ] [ ] a , int x , int y ) { for ( int i = x + 1 ; i < a. length ; i ++ ) { if ( a [ i ] [ y ] == 0 ) { return false ; } } return true ; }"
"String getStringFromBitstream ( Context context , Item item , String bitstream_name ) { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; InputStream is = item. getBbitstreamStream ( context, bitstream_name ) ; int val = baos. read ( ) ; is. close ( ) ; baos. close ( ) ; return new String ( baos. toByteArray ( ), context. getString ( R. string. s_bitstream_encoding ) ) ; }"
boolean isValidGUID ( String guid ) { UUID uuid = UUID. fromString ( guid ) ; for ( int i = 0 ; i < guid. length ( ) ; ++ i ) { if (! guid. matches ( UUID. fromString ( guid. charAt ( i ) ) ) ) return false ; } return true ; }
"void setupEnvironment ( String [ ] workbookNames , ForkedEvaluator [ ] evaluators ) { workbookNames = new String [ workbookNames. length ] ; for ( int i = 0 ; i < evaluators. length ; i ++ ) { workbookNames [ i ] = workbookNames [ i ] ; } setupEnvironment ( workbookNames, evaluators ) ; }"
"String getString ( String resourceID , String resource , String fallback ) { String msg = null ; try { if ( resource!= null ) { msg = resource. getString ( resourceID ) ; } } catch ( MissingResourceException mre ) { msg = fallback ; } if ( msg!= null &&! msg. isEmpty ( ) ) { return msg ; } return fallback ; }"
"FMPPacket constructCloudFMPPacketEncryptedAndSinged ( final String sender , final String destination , final String message , final FMPPacketType fmpPacketType , final NetworkServices networkServicesType , final String privateKey ) { final ECPair pair = constructECPair ( sender, destination, message, networkServicesType, privateKey ) ; return constructFMPPacketEncrypted ( pair, networkServicesType, privateKey ) ; }"
"Vector3f getCollisionNormal ( Vector3f vec ) { Vec. set ( wheelPos. x - wheelPos. x, wheelPos. y - wheelPos. y, wheelPos. z - wheelPos. z ) ; return vec ; }"
"String stripQuery ( String uri ) { if ( uri!= null ) { int queryStart = uri. indexOf ( '?' ) ; if ( queryStart!= - 1 ) { uri = uri. substring ( 0, queryStart ) ; } } return uri ; }"
void makeGuiReady ( ) { if ( gui == null ) { gui = new GUI ( ) ; } else { gui. destroy ( ) ; } }
"void setCursor ( Point activeCell ) { if ( fCursor!= null ) { fCursor. set ( activeCell ) ; } else { fCursor = new Point ( activeCell. x, activeCell. y ) ; } }"
"void addLine ( String line ) { int index = line. indexOf ( "":"" ) ; if ( index == - 1 ) { add ( """", line ) ; } else { add ( line. substring ( 0, index ), line. substring ( index + 1 ) ) ; } }"
"String getValueString ( String tag , ModelElement element ) { TaggedValue taggedValue = TaggedValueHelper. getTaggedValue ( tag, element. getTaggedValue ( ) ) ; return taggedValue == null? """" : taggedValue. getValue ( ) ; }"
void testCloning ( ) { LineRenderer3D r1 = new LineRenderer3D ( ) ; LineRenderer3D r2 = ( LineRenderer3D ) r1. clone ( ) ; assertTrue ( r1!= r2 ) ; assertTrue ( r1. getClass ( ) == r2. getClass ( ) ) ; assertTrue ( r1. equals ( r2 ) ) ; }
void setJvmThreadContentionMonitoring ( EnumJvmThreadContentionMonitoring x ) { ThreadMXBean mbean = getThreadMXBean ( ) ; if ( JvmThreadContentionMonitoringEnabled. intValue ( ) == x. intValue ( ) ) mbean. setThreadContentionMonitoringEnabled ( true ) ; else mbean. setThreadContentionMonitoringEnabled ( false ) ; }
"String dictIdToString ( byte [ ] idBytes , int offset , int length ) { StringBuilder sb = new StringBuilder ( length * 2 ) ; for ( int i = 0 ; i < length ; i ++ ) { byte b = idBytes [ offset + i ] ; sb. append ( ( char ) b ) ; } return sb. toString ( ) ; }"
ActivityPageManager getInstance ( ) { if ( instance == null ) { instance = new ActivityPageManager ( ) ; } return instance ; }
ObjectType getObjectType ( ProducerMember producer ) { Class clazz = producer. getMemberClass ( ) ; if ( clazz!= null ) { return ObjectType. getServiceType ( clazz ) ; } return ObjectType. getCentralServiceType ( ) ; }
Node getMatch ( Analyzer . NodeMatch nm ) { Node n = root ; for ( int i = 0 ; i < nm. getSeqno ( ) ; i ++ ) { if ( nm. getSeqno ( ) == eqno ) { n = n. getChild ( i ) ; } } return n ; }
List < Subscription > getSubscriptions ( ) { if (! m_started ) { return null ; } return m_subscriptions ; }
String [ ] copyArray ( String [ ] data ) { String [ ] newArray = new String [ data. length ] ; for ( int i = 0 ; i < data. length ; i ++ ) { newArray [ i ] = data [ i ] ; } return newArray ; }
"String putMultipartBlob ( String container , Blob blob , PutOptions overrides ) { if ( Strings. isNullOrEmpty ( blob. getType ( ) ) ) { return null ; } Executor executor = overrides. getExecutor ( ) ; if ( executor!= null ) { return putMultipartBlob ( container, blob, executor ) ; } else { return putMultipartBlobUsingExecutor ( container, blob, overrides ) ; } }"
int convertUnsignedByteToInt ( byte b ) { int value = b & 0xFF ; if ( ( b & 0x80 )!= 0 ) { value |= 0x80 ; } return value ; }
"HiveFuncHolder getFunction ( FunctionCall call ) { HiveFuncHolder holder = ( HiveFuncHolder ) funcCache. get ( call. getFunctionName ( ) ) ; if ( holder == null ) { holder = new HiveFuncHolder ( call ) ; funcCache. put ( call. getFunctionName ( ), holder ) ; } return holder ; }"
String getWorkflowAdjacencies ( ) { if ( datum. getWorkflowAdjacencies ( )!= null ) { return datum. getWorkflowAdjacencies ( ). toString ( ) ; } return null ; }
"void mergeMapPrefixedKeys ( Map < String , String > that , String prefix , boolean overwrite ) { Map < String, String > merge = new HashMap < String, String > ( ) ; for ( Map. Entry < String, String > entry : that. entrySet ( ) ) { String key = entry. getKey ( ) ; String value = entry. getValue ( ) ; if ( value!= null && value. startsWith ( prefix ) ) { merge. put ( key, value ) ; } else { merge. put ( key, value ) ; } } }"
"void testPromptPasswordOptionAsFirst ( ) { List < String > argList = getBaseArgs ( miniHS2. getBaseJdbcURL ( ) ) ; argList. add ( ""-p"" ) ; argList. add ( ""-n"" ) ; argList. add ( ""hive"" ) ; connectBeelineWithUserPrompt ( argList, ""hivepassword"" ) ; }"
"void quickSort ( float [ ] array , int [ ] index , int left , int right ) { if ( left < right ) { int middle = partition ( array, index, left, right ) ; quickSort ( array, index, left, middle ) ; quickSort ( array, index, middle + 1, right ) ; } }"
"double getDouble ( final String strToParse , final double defaultValue ) { try { return Double. parseDouble ( strToParse ) ; } catch ( Exception e ) { return defaultValue ; } }"
void insertFront ( int i ) { head. next. prev = head. next. prev ; head. next. prev. next = i ; head. next = head. next. prev. next ; size ++ ; }
"void assertNotNull ( Object param ) { if ( param == null ) { return ; } if ( param instanceof String ) { assertEquals ( ( String ) param, ""a string should not be null"" ) ; } }"
List < String > getRootRoles ( ) { if ( rootRoles == null ) { rootRoles = new ArrayList < String > ( ) ; } return rootRoles ; }
"void addState ( GameState state ) { int id = state. getId ( ) ; if ( game. getStates ( ). containsKey ( id ) ) { game. getStates ( ). put ( id, state ) ; } else { System. err. println ( ""Unknown state: "" + state. getId ( ) + "" ("" + game. getStates ( ). get ( id ) + "")"" ) ; } game. getStates ( ). put ( id, state ) ; }"
String getThirdObjectName ( final String name ) { final String [ ] names = splitNames ( name ) ; return names [ names. length - 2 ] ; }
"void setOnInitializeAsyncFinished ( final Runnable callback , long timeoutMs ) { if ( sIsInitialized ) { ThreadUtils. postOnUiThread ( callback, timeoutMs ) ; } else { sInitializeAsyncCallbacks. add ( callback ) ; } }"
boolean onNetworkDrive ( String filename ) { File f = new File ( filename ) ; boolean result = f. exists ( ) ; return result ; }
"boolean isLoggedIn ( HttpServletRequest request ) { final HttpSession session = request. getSession ( ) ; UserContainer userContainer = ( UserContainer ) session. getAttribute ( ""userContainer"" ) ; if ( userContainer == null ) { return false ; } return true ; }"
"String toString ( ) { StringBuffer buffer = new StringBuffer ( ) ; for ( int i = 0 ; i < m_Elements. length ; i ++ ) { buffer. append ( "" "" ) ; for ( int j = 0 ; j < m_Elements [ i ]. length ; j ++ ) { buffer. append ( m_Elements [ i ] [ j ] + "" "" ) ; } buffer. append ( "" "" ) ; } return buffer. toString ( ) ; }"
"Iterable < String > prefixMatch ( String prefix ) { Queue < String > queue = new Queue < String > ( ) ; collect ( root, prefix, queue ) ; return queue ; }"
"Hash getInstance ( Configuration conf ) { Class <? extends Hash > type = conf. getClass ( HConstants. HBASE_HASH_FUNCTION_CLASS, Hash. class, Hash. class ) ; return ReflectionUtils. newInstance ( type, conf ) ; }"
int getRunStart ( AttributedCharacterIterator . Attribute attrib ) { if ( attrib == null ) return ci. getBeginIndex ( ) ; else return ci. getBeginIndex ( ) + attrib. getSize ( ) ; }
int hashCode ( ) { int code = 0 ; for ( int i = 0 ; i < components. length ; i ++ ) { code += components [ i ]. hashCode ( ) ; } return code ; }
"void testVarInt ( ) { int result = CodedOutputStream. readRawVarint32 ( h, 0x3F ) ; assertEquals ( ( int ) 42, result ) ; }"
boolean isNetworkAvailable ( Context context ) { ConnectivityManager cm = ( ConnectivityManager ) context. getSystemService ( Context. CONNECTIVITY_SERVICE ) ; NetworkInfo activeNetwork = cm. getActiveNetworkInfo ( ) ; return activeNetwork!= null && activeNetwork. isConnected ( ) ; }
"DataFormat getOutputTypeFromString ( String typeString , DataFormat defaultValue ) { DataFormat outputType ; try { outputType = DataFormat. valueOf ( typeString. toUpperCase ( ) ) ; } catch ( IllegalArgumentException e ) { outputType = defaultValue ; } return outputType ; }"
"IvParameterSpec getIv ( ) { if ( iv == null ) { throw new UnsupportedOperationException ( ""Not implemented for Iv algorithms"" ) ; } return new IvParameterSpec ( iv ) ; }"
void setConnection ( TCPMasterConnection con ) { m_Connection = con ; m_IO = con. getModbusTransport ( ) ; }
"void testStatic_forTreeView_noArgs_ensureCellFactoryIsNotNull ( ) { Callback < TreeView < String >, TreeCell < String >> cellFactory = ComboBoxTreeCell. forTreeView ( ) ; assertNotNull ( cellFactory ) ; }"
void addElements ( int numberOfElements ) { int newlen = m_firstFree + numberOfElements ; if ( newlen > m_blocksize ) { int index = m_firstFree % m_blocksize ; int newindex = ( m_firstFree + numberOfElements ) % m_blocksize ; for ( int i = index + 1 ; i <= newindex ; ++ i ) m_map [ i ] = new byte [ m_blocksize ] ; } m_firstFree = newlen ; }
boolean isDisabled ( ) { if ( disabled == null ) { return false ; } else { return disabled ; } }
void toolMenuItem ( ActionEvent evt ) { JTabbedPane tp = GMGenSystemView. getTabPane ( ) ; for ( int i = 0 ; i < tp. getTabCount ( ) ; i ++ ) { if ( tp. getComponentAt ( i ) instanceof Note ) { tp. setSelectedIndex ( i ) ; } } }
"double latitudeToPixelY ( double latitude , int zoomLevel ) { double sinLatitude = Math. sin ( latitude * ( Math. PI / 180 ) ) ; return ( 0.5 - Math. log ( ( 1 + sinLatitude ) / ( 1 - sinLatitude ) ) / ( 4 * Math. PI ) ) * ( ( long ) Tile. TILE_SIZE << zoomLevel ) ; }"
"void setLogger ( Logger theLogger ) { if ( theLogger == null ) { throw new NullPointerException ( ""theLogger is null"" ) ; } myLogger = theLogger ; }"
"void compareWithOneEmptyTagTest ( ) { Tag tag1 = new Tag ( """" ) ; assertTrue ( tag1. compare ( tag2 ) ) ; }"
void testRandomFloat ( ) { OpensslSecureRandom random = new OpensslSecureRandom ( ) ; float rand1 = random. nextFloat ( ) ; float rand2 = random. nextFloat ( ) ; while ( rand1 == rand2 ) { rand2 = random. nextFloat ( ) ; } }
String getForeignCity ( ) { checkNLoad ( ) ; return foreignCity ; }
"ModelAndView newUserAssignment ( ) { logger. info ( ""new userAssignment "" ) ; UserAssignment userAssignment = userAssignmentService. newUserAssignment ( ) ; return new ModelAndView ( ""NewUserAssignment"", ""userAssignment"", userAssignment ) ; }"
"void addPhrase ( String phrase , List < String > alternatives ) { if (! phraseToAbbreviations. containsKey ( phrase ) ) { phraseToAbbreviations. put ( phrase, new ArrayList < > ( alternatives ) ) ; } else { for ( String alt : alternatives ) { phraseToAbbreviations. get ( phrase ). add ( alt ) ; } } }"
"int getInt ( String key , int i ) { String result = getProperty ( key ) ; if ( result!= null ) return Integer. parseInt ( result ) ; else return i ; }"
void setThreadContextClassLoader ( final ClassLoader cl ) { AccessController. doPrivileged ( new PrivilegedAction < Object > ( ) { public Object run ( ) { Thread. currentThread ( ). setContextClassLoader ( cl ) ; return null ; } } ) ; }
"String getImportedWSDL ( CarbonHttpRequest request , String paramName ) { List < Parameter > parameters = request. getParameter ( paramName ) ; if ( parameters == null || parameters. isEmpty ( ) ) { return null ; } return ( String ) parameters. get ( 0 ). getValue ( ) ; }"
"int getInt ( String key , int defaultValue ) { String val = ( String ) get ( key ) ; try { return Integer. parseInt ( val ) ; } catch ( NumberFormatException e ) { return defaultValue ; } }"
int generatePermutationId ( int [ ] data ) { int permutationId = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { permutationId ^= data [ i ] ; } return permutationId ; }
void invalidateHardwareBuffers ( ) { mVertBufferIndex = 0 ; mIndexBufferIndex = 0 ; mTextureCoordBufferIndex = 0 ; mUseHardwareBuffers = false ; }
"Object getObject ( String name ) { if ( map == null ) return null ; return ( ( Map < String, Object > ) map ). get ( name ) ; }"
void testSkipped ( Description description ) { TestCaseNode testCase = getTestCase ( description ) ; if ( testCase!= null ) { testCase. setSkipped ( true ) ; } }
float calculateScore ( Data feature ) { if ( feature. isNaN ( ) ) return 0.0f ; return featureVector. getScores ( ). calculateScore ( feature ) ; }
"void setTypeAndRawData ( World world , int x , int y , int z , Material type , int data ) { final GlowBlockState state = ( GlowBlockState ) world. getBlockAt ( x, y, z ). getState ( ) ; state. setType ( type ) ; state. setData ( data ) ; blockStateMap. put ( world. getBlockAt ( x, y, z ). getLocation ( ), state ) ; }"
"int countChar ( String str , char chr ) { int count = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i ) == chr ) { count ++ ; } } return count ; }"
"VndErrors onException ( Exception e ) { String logref = logDebug ( e ) ; return new VndErrors ( logref, e. getMessage ( ) ) ; }"
"String [ ] getBestFragments ( final FieldQuery fieldQuery , IndexReader reader , int docId , String fieldName , int fragCharSize , int maxNumFragments , FragListBuilder fragListBuilder , FragmentsBuilder fragmentsBuilder , String [ ] preTags , String [ ] postTags , Encoder encoder ) { FieldFragList fieldFragList = getFieldFragList ( fragListBuilder, fieldQuery, reader, docId, fieldName, fragCharSize ) ; return fragmentsBuilder. createFragments ( reader, docId, fieldName, fieldFragList, preTags, postTags, encoder ) ; }"
int intFitsIn ( final int value ) { int bits = 0 ; while ( value!= 0 ) { bits += Integer. SIZE - 1 ; value = value / Byte. SIZE ; } return bits ; }
int getSelectedTabIndex ( ) { TabSet tabSet = TabSet. getSelected ( ) ; return tabSet. getTabIndex ( ) ; }
"void persistCredentials ( SharedPreferences settings , String accountName , String authToken ) { if ( authToken == null ) { authToken = """" ; } SharedPreferences. Editor editor = settings. edit ( ) ; editor. putString ( ACCOUNT_NAME_PREF, accountName ) ; editor. putString ( AUTH_TOKEN_PREF, authToken ) ; editor. apply ( ) ; }"
List < String > getAllActiveTenantDomains ( ) { if ( initialized && tenantDomainList == null ) { init ( ) ; } if ( initialized && tenantDomainList. isEmpty ( ) ) { refreshActiveTenantDomainsList ( ) ; } return tenantDomainList ; }
double averageOfServed ( ) { double total = 0.0 ; Iterator < Customer > iter = waiting. iterator ( ) ; while ( iter. hasNext ( ) ) { Customer c = iter. next ( ) ; double waitSoFar = timeNow - c. served ; total += waitSoFar ; } return total ; }
int getColorIndexSize ( RenderedImage img ) { if ( img instanceof RenderedImage2D ) { return ( ( RenderedImage2D ) img ). getWidth ( ) * img. getHeight ( ) ; } else { return - 1 ; } }
"PrintStream archivoHtmlTest ( Test . eTipoTest tipoTest , String idBloqueTematica , Integer idTest ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""<html> "" ) ; sb. append ( tipoTest. eTipoTematica ( ). toString ( ) ) ; sb. append ( ""</html> "" ) ; sb. append ( idBloqueTematica. toString ( ) ) ; sb. append ( ""<br>test: "" ) ; sb. append ( tipoTest. eTipoTematica ( ). toString ( ) ) ; return sb. toString ( ) ; }"
double [ ] getFeatures ( ) { double [ ] features = new double [ entries. size ( ) ] ; for ( int i = 0 ; i < entries. size ( ) ; i ++ ) { features [ i ] = ( ( Double ) entries. get ( i ) ). doubleValue ( ) ; } return features ; }
"boolean isWindows ( ) { final String os = System. getProperty ( ""os.name"" ). toLowerCase ( ) ; return os. indexOf ( ""win"" ) >= 0 ; }"
"byte [ ] rsaEncrypt ( byte [ ] original , PublicKey key ) { try { Cipher cipher = Cipher. getInstance ( ""RSA/ECB/PKCS1Padding"" ) ; cipher. init ( Cipher. ENCRYPT_MODE, key ) ; return cipher. doFinal ( original ) ; } catch ( Exception e ) { } return original ; }"
InputStream getInputStream ( ) { if ( dataSource!= null ) { return new ByteArrayInputStream ( dataSource. getInputStream ( ) ) ; } else return null ; }
"int countInvisibleNodes ( final Collection < NaviNode > nodes ) { return CollectionHelpers. count ( nodes, new ICollectionFilter < NaviNode > ( ) { @ Override public boolean qualifies ( final NaviNode node ) { return node. isVisible ( ) ; } } ) ; }"
"GoalOrientedProposition createGOP ( GoalType prefix , String statement ) { GoalOrientedProposition gop = new GoalOrientedProposition ( prefix, statement ) ; return gop ; }"
boolean inMinVertexCover ( int v ) { double min = 0.0 ; for ( int i = 0 ; i < coverage. length ; i ++ ) { if ( coverage [ i ] <= v ) { min = coverage [ i ] ; } } return inMinVertexCover ( v ) ; }
SchemaGrammar getGrammar ( String namespace ) { if ( namespace == null ) { return grammar ; } return ( SchemaGrammar ) namespaceToGrammar. get ( namespace ) ; }
void generateWords ( ) { ArrayList < String > randomWords = new ArrayList < String > ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { for ( String word : RAND. words ( ) ) { if (! randomWords. contains ( word ) ) { randomWords. add ( word ) ; } } } }
"IRubyObject toBson ( final IRubyObject time , final IRubyObject bytes ) { final long millis = ( ( RubyTime ) time ). getJavaDate ( ). getTime ( ) ; return toBsonTime ( time. getRuntime ( ), bytes, millis ) ; }"
void onSuccess ( IMqttToken asyncActionToken ) { switch ( action ) { case CONNECT : connect ( ) ; break ; case DISCONNECT : disconnect ( ) ; break ; case SUBSCRIBE : subscribe ( ) ; break ; case UNSUBSCRIBE : unsubscribe ( ) ; break ; case PUBLISH : publish ( ) ; break ; case DISCONNECT : disconnect ( ) ; break ; } }
String toString ( ) { PythonWriter w = new PythonWriter ( ) ; try { writeTo ( w ) ; } catch ( Exception e ) { } return w. toString ( ) ; }
"OClientBehavior rateLimit ( final long millis ) { return new OClientBehavior ( ) { @ Override public void execute ( ) { Thread. sleep ( millis ) ; } @ Override public String toString ( ) { return ""Rate Limit"" ; } } ; }"
"void setSelected ( Object id , boolean selected ) { Action action = getAction ( id ) ; if ( action instanceof OnOffType ) { ( ( OnOffType ) action ). setSelected ( selected ) ; } else if ( action instanceof OnOffType ) { ( ( OnOffType ) action ). setSelected ( selected ) ; } }"
void checkInstallDirectories ( ) { try { ( new File ( PATH_LOCAL_USER ) ). mkdirs ( ) ; ( new File ( PATH_TEMPLATES_DIR_USER ) ). mkdirs ( ) ; ( new File ( PATH_CACHE_DIR ) ). mkdirs ( ) ; ( new File ( PATH_CACHE_SHARE_DIR ) ). mkdirs ( ) ; } catch ( final SecurityException e ) { e. printStackTrace ( ) ; } }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"void computeVertexSnaps ( Collection edges ) { for ( Iterator i0 = edges. iterator ( ) ; i0. hasNext ( ) ; ) { Coordinate p0 = ( Coordinate ) i0. next ( ) ; Coordinate p1 = ( Coordinate ) edges. iterator ( ). next ( ) ; HotPixel hotPixel = new HotPixel ( p0, p1 ) ; vertexSnapper. snap ( hotPixel ) ; } }"
int howManyHasPlayerBore ( final boolean black ) { int noOfBore = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { if ( black ) { noOfBore ++ ; } } return noOfBore ; }
"String getLocaleAsString ( Locale locale ) { StringBuffer sb = new StringBuffer ( ) ; sb. append ( locale. getLanguage ( ) ). append ( ""_"" ). append ( locale. getCountry ( ) ). append ( ""_"" ). append ( locale. getVariant ( ) ) ; return sb. toString ( ) ; }"
"void setFinalNode ( Node node ) { if ( node == null ) { throw new NullPointerException ( ""Final node is null"" ) ; } getFinalNode ( ). set ( node ) ; }"
"void encodeBuffer ( byte aBuffer [ ] , OutputStream aStream ) { ByteArrayInputStream inStream = new ByteArrayInputStream ( aBuffer ) ; encodeBuffer ( inStream, aStream ) ; }"
"void testSuccessfulReading ( ) { byte [ ] data = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
ArrayList < String > getClassKeyword ( ClassDoc classdoc ) { ArrayList < String > result = new ArrayList < String > ( ) ; if ( classdoc. keywords ( )!= null ) { result. add ( classdoc. keyword ( ) ) ; } return result ; }
"DataFlavor [ ] getTransferDataFlavors ( ) { ActivationDataFlavor [ ] adf = getDataFlavors ( ) ; if ( adf. length == 1 ) return new DataFlavor [ ] { adf [ 0 ] } ; DataFlavor [ ] df = new DataFlavor [ adf. length ] ; System. arraycopy ( adf, 0, df, 0, adf. length ) ; return df ; }"
"void testSerialization ( ) { CategoryAxis a1 = new CategoryAxis ( ""Test Axis"" ) ; a1. setTickLabelPaint ( ""C1"", new GradientPaint ( 1.0f, 2.0f, Color. red, 3.0f, 4.0f, Color. white ) ) ; CategoryAxis a2 = ( CategoryAxis ) TestUtilities. serialised ( a1 ) ; assertEquals ( a1, a2 ) ; }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"Object doSwitch ( EClass theEClass , EObject theEObject ) { if ( theEClass. eContainer ( ) == modelPackage ) { return doSwitch ( theEClass. getClassifierID ( ), theEObject ) ; } List eSuperTypes = theEClass. getESuperTypes ( ) ; return eSuperTypes. isEmpty ( )? defaultCase ( theEObject ) : doSwitch ( ( EClass ) eSuperTypes. get ( 0 ), theEObject ) ; }"
"void checkLeapYear ( int year ) { if ( year % 400 == 0 ) { printLogMessage ( ""Leap year: "" + year ) ; } else { printLogMessage ( ""Leap year: "" + year ) ; } }"
int getCategorySummary ( ContentSetting value ) { switch ( value ) { case ALLOW : return R. string. permission_settings_permissions_allow ; case BLOCK : return R. string. permission_settings_permissions_block ; case BLOCK : return R. string. permission_settings_permissions_block ; default : return 0 ; } }
"int occurrencesOf ( String word ) { int length = bookText. length ( ) ; int lengthWithoutAlice = bookText. replace ( word, """" ). length ( ) ; return ( length - lengthWithoutAlice ) / 5 ; }"
"String cleanString ( String s ) { if ( s. contains ( ""."" ) ) { int i = s. indexOf ( '.' ) ; if ( i > 0 && i < s. length ( ) - 1 ) { return s. substring ( i + 1 ) ; } } return s ; }"
boolean isPartOfProcessApplication ( DeploymentUnit unit ) { if ( unit == null ) { return false ; } DeploymentUnit parent = unit. getParent ( ) ; if ( parent == processApplication ) { return true ; } return false ; }
T reDisplay ( T control ) { reDisplay ( control ) ; return control ; }
void addSounds ( String [ ] soundNames ) { if ( soundNames == null || soundNames. length == 0 ) { return ; } for ( int i = 0 ; i < soundNames. length ; i ++ ) { addSound ( soundNames [ i ] ) ; } }
"long nextRandomLong ( final long min , final long max ) { final long d = max - min ; if ( d <= 0 ) { throw new IllegalArgumentException ( ""d <= 0, min="" + min + "", max="" + max ) ; } return d == 1? min : min + SEEDED_RANDOM. nextLong ( ) ; }"
"Connection createConnection ( ) { Connection conn = null ; try { Class. forName ( Constants. dbClass ) ; conn = DriverManager. getConnection ( Constants. dbUrl, Constants. dbUser, Constants. dbPwd ) ; } catch ( Exception e ) { throw e ; } finally { return conn ; } }"
"void handleLocaleChange ( ) { mPendingChanges. offer ( new ConfigChange ( ChangeType. REFRESH ) ) ; Log. d ( LOGTAG, ""handleLocaleChange: "" + mPendingChanges. size ( ) ) ; scheduleInvalidation ( InvalidationMode. IMMEDIATE ) ; }"
Class < ? > toClass ( ClassLoader loader ) { Class <? > clazz = clazz ; if ( clazz == null ) { clazz = generateClass ( ) ; } else { clazz = clazz. asSubclass ( ) ; } clazz. setClassLoader ( loader ) ; return clazz ; }
"void replaceTraces ( double [ ] traces , double factor , double [ ] state ) { for ( int f = 0 ; f < traces. length ; f ++ ) traces [ f ] *= factor ; }"
"void applyToGrid1D ( Grid3D input ) { input. setAtIndex ( 0, center. x ) ; input. setAtIndex ( 1, center. y ) ; input. setAtIndex ( 2, center. z ) ; }"
"int unpackInt ( boolean signed ) { long ret = unpackLong ( true ) ; if ( ( signed && ( ret > Integer. MAX_VALUE || ret < Integer. MIN_VALUE ) ) || (! signed && ( ret < Integer. MIN_VALUE ) ) ) { throw new WiredTigerPackingException ( ""Overflow unpacking integer."" ) ; } return ( int ) ret ; }"
String [ ] getValueNames ( ) { Set < String > result = new HashSet < String > ( ) ; if ( parameters!= null ) { for ( Parameter param : parameters ) { result. add ( param. getName ( ) ) ; } } return result. toArray ( new String [ result. size ( ) ] ) ; }
boolean isAnyInContacts ( final Address [ ] addresses ) { for ( int i = 0 ; i < addresses. length ; i ++ ) { if ( isInContact ( addresses [ i ] ) ) { return true ; } } return false ; }
"void renderAsPdf ( JasperReport report , Map parameters , Object reportData , OutputStream stream , Map exporterParameters ) { JasperPrint print = JasperFillManager. fillReport ( report, parameters, convertReportData ( reportData ) ) ; JRPdfExporter exporter = new JRPdfExporter ( ) ; exporter. setParameters ( exporterParameters ) ; render ( exporter, print, stream ) ; }"
void testNodeProcessing ( ) { testNodeProcessingSchema ( new ChangeAlert < Integer > ( ) ) ; testNodeProcessingSchema ( new ChangeAlert < Double > ( ) ) ; testNodeProcessingSchema ( new ChangeAlert < Float > ( ) ) ; testNodeProcessingSchema ( new ChangeAlert < Short > ( ) ) ; testNodeProcessingSchema ( new ChangeAlert < Long > ( ) ) ; }
String getProperty ( String key ) { if ( key == null ) { return null ; } int idx = keys. indexOf ( key ) ; String rv = null ; if ( idx > - 1 ) { rv = ( String ) vals. elementAt ( idx ) ; } return rv ; }
"OID getAuth ( String authProtocol ) { if ( authProtocol!= null ) { String [ ] authParts = authProtocol. split ( "":"" ) ; return new OID ( authParts [ 0 ] ) ; } else { return null ; } }"
Tile [ ] getChildren ( ) { Tile [ ] ret = new Tile [ 4 ] ; ret [ 0 ] = _children [ 0 ] ; ret [ 1 ] = _children [ 1 ] ; ret [ 2 ] = _children [ 2 ] ; ret [ 3 ] = _children [ 3 ] ; return ret ; }
byte [ ] charsToBytes ( char [ ] value ) { byte [ ] bytes = new byte [ value. length ] ; for ( int i = 0 ; i < value. length ; i ++ ) bytes [ i ] = ( byte ) value [ i ] ; return bytes ; }
"void dropTableIfExists ( ) { connect ( ) ; Statement st = con. createStatement ( ) ; String sql = ""DROP TABLE "" + ""IF EXISTS "" ; st. execute ( sql ) ; st. close ( ) ; disconnect ( ) ; }"
"Reference createThisReference ( Request request ) { String host = request. getHost ( ) ; String port = request. getPort ( ) ; URI uri = new URI ( ""http://"" + host + "":"" + port ) ; String user = request. getUser ( ) ; return new Reference ( null, uri, user, port ) ; }"
"String convertOGRFID ( SimpleFeatureType schema , Object ogrFeature ) { String id = schema. getId ( ) + ""."" + ogrFeature. getClass ( ). getName ( ) ; return id ; }"
void startJobAcquisitionThread ( ) { if ( timerJobAcquisitionThread == null ) { timerJobAcquisitionThread = new Thread ( timerJobRunnable ) ; } timerJobAcquisitionThread. start ( ) ; if ( asyncJobAcquisitionThread == null ) { asyncJobAcquisitionThread = new Thread ( asyncJobsDueRunnable ) ; } asyncJobAcquisitionThread. start ( ) ; }
"void bidirectionalOneToManyRelation ( Entity lesson , Entity word ) { addRelation ( lesson, word, ""LESSONS"" ) ; addRelation ( lesson, word, ""FLASHCARDS"" ) ; }"
void unplaceStudentsOfGroupsWithHasMinLimitIsNotReached ( ) { Session session = sessionFactory. getCurrentSession ( ) ; List < Group > groups = session. select ( Group. class ) ; for ( Group group : groups ) { unplaceStudentsOfGroupWithMinStudentCapacityIsNotReached ( group ) ; } session. close ( ) ; }
"E checkNotInstanceOf ( Class type , E object , String errorMessage ) { isNotNull ( type, ""type"" ) ; if ( type. isInstance ( object ) ) { throw new IllegalArgumentException ( errorMessage ) ; } return object ; }"
"BoardView partOfChessBoard ( Location loc , int fudge ) { for ( BoardView bv : listBoardViews ( loc ) ) { if ( bv. isFrame ( ) && bv. isChess ( fudge ) ) return bv ; } return null ; }"
boolean isEmpty ( ) { for ( int i = 0 ; i < table. length ; i ++ ) { if ( table [ i ]!= null ) { return false ; } } return true ; }
Observable < Integer > getData ( int id ) { final ArrayList < Integer > data = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < 5000 ; i ++ ) { data. add ( i + id ) ; } return fromIterable ( data ) ; }
"JComponent getVisualization ( ) { JSplitPane splitPane = new JSplitPane ( JSplitPane. HORIZONTAL_SPLIT, true, hierarchy. getTreeVisualization ( ), netContainer ) ; splitPane. setOneTouchExpandable ( true ) ; mainPanel. add ( splitPane, BorderLayout. CENTER ) ; return mainPanel ; }"
"double getScore ( int space , int a , int r , int y , double [ ] [ ] [ ] latentSpaces , double [ ] intercepts ) { double sum = 0 ; for ( int i = 0 ; i < space ; i ++ ) { sum += latentSpaces [ i ] [ a ] [ y ] ; } for ( int i = 0 ; i < space ; i ++ ) { sum += intercepts [ i ] [ a ] * ( y - latentSpaces [ i ] [ a ] ) ; } return sum / latentSpaces. length ; }"
Attr getMapping ( String prefix ) { for ( int i = 0 ; i < prefixes. length ; i += 2 ) { if ( prefixes [ i ]. equals ( prefix ) ) { return prefixes [ i + 1 ] ; } } return null ; }
PackageAdmin getPackageAdmin ( ) { synchronized ( packages ) { if ( packageAdmin == null ) { packageAdmin = getService ( PackageAdmin. class ) ; } return packageAdmin ; } }
"String getSoupTableName ( SQLiteDatabase db , String soupName ) { IndexSpec indexSpec = getIndexSpec ( soupName ) ; if ( indexSpec!= null ) { return indexSpec. getTablePrefix ( ) ; } return null ; }"
"InputStream saveTmp ( InputStream in ) { FileOutputStream out = new FileOutputStream ( TMP_FILE ) ; byte [ ] buf = new byte [ 4096 ] ; int len ; while ( ( len = in. read ( buf ) )!= - 1 ) { out. write ( buf, 0, len ) ; } return new ByteArrayInputStream ( buf ) ; }"
"String formatHighLows ( double high , double low ) { String s = high + "" / "" + low ; return s ; }"
"void testMultiplayerNavigates ( ) { gameOverController. mainMenu ( ) ; verify ( mockNavigator, times ( 2 ) ). pop ( ) ; }"
boolean isPlacedBeforeInsertInIbatis2 ( ) { boolean rc ; if ( stringHasValue ( type ) ) { rc = true ; } else { rc = false ; } return rc ; }
List < ClassType > getClasses ( ) { if ( classes == null ) { classes = new ArrayList < ClassType > ( ) ; } return classes ; }
"Map < K , V > mapKeys ( Map < ? , V > sourceMap , Class < K > destinationClass ) { Map < K, V > destMap = new HashMap < > ( ) ; for ( Map. Entry <?,? > entry : sourceMap. entrySet ( ) ) { K key = entry. getKey ( ) ; if ( destinationClass. isAssignableFrom ( key. getClass ( ) ) ) { destMap. put ( key, ( V ) entry. getValue ( ) ) ; } } return destMap ; }"
"byte [ ] exportUsersToByteArray ( boolean xep227Support ) { ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; XMLWriter writer = new XMLWriter ( out, OutputFormat. createPrettyPrint ( ) ) ; writer. write ( exportUsers ( xep227Support ) ) ; return out. toByteArray ( ) ; }"
"String percentDecode ( String encodedString , String messageEncoding ) { try { return URLDecoder. decode ( encodedString, messageEncoding ) ; } catch ( UnsupportedEncodingException e ) { throw new UnexpectedException ( e ) ; } }"
"void setMailServer ( String mailServer , int port ) { if ( mailServer == null || """". equals ( mailServer ) ) { throw new IllegalArgumentException ( ""Mail server cannot be null"" ) ; } _mailServer = mailServer ; _mailPort = port ; }"
"String toString ( ) { if ( filterConfig == null ) { return ( ""FiltroTempoDeExecucao()"" ) ; } StringBuilder sb = new StringBuilder ( ""FiltroTempoDeExecucao("" ) ; sb. append ( filterConfig ) ; sb. append ( "")"" ) ; return ( sb. toString ( ) ) ; }"
void onCreate ( MVP . RequiredPresenterOps presenter ) { mImagePresenter = new WeakReference < MVP. RequiredPresenterOps > ( presenter ) ; setServiceType ( ServiceType. STARTED_SERVICE ) ; }
void updateUnits ( ) { if ( units < MIN_UNIT ) units = MIN_UNIT ; if ( units > MAX_UNIT ) units = MAX_UNIT ; if ( units < MIN_UNIT ) units = MIN_UNIT ; if ( units > MAX_UNIT ) units = MAX_UNIT ; }
"void handleChangeContents ( ChangeContentsMessage message ) { Map < String, String > params = message. getParameters ( ) ; String contents = ( String ) params. get ( ""contents"" ) ; setContents ( contents, params ) ; }"
"TimePeriod getCustom ( long seconds ) { long minutes = ( seconds / ( 1000 * 60 * 60 ) ) % 24 ; long hours = ( seconds / ( 1000 * 60 ) ) % 24 ; long minutes = ( seconds / ( 1000 * 60 ) ) % 24 ; return getCustom ( minutes, hours, minutes ) ; }"
void setInversion ( final boolean isinverted ) { m_inversion = isinverted ; if ( isinverted ) { m_pwmValues = - m_pwmValues ; } else { m_pwmValues = m_pwmValues ; } }
"void setUp ( ) { pluginConfigRepo = new PluginConfigRepo ( ) ; serviceUnderTest = new GenericInitializationService ( ) ; ReflectionTestUtils. setField ( serviceUnderTest, ""pluginConfigRepo"", pluginConfigRepo ) ; }"
"void setValue ( Text text ) { if ( text!= null ) { value = text. replace ( '|n','' ) ; } else { value = null ; } }"
boolean isNeighbor ( int n ) { if ( n == 0 ) { return false ; } return n == 1 ; }
"Set < String > getResources ( final Predicate < String > namePredicate ) { return getResources ( new Predicate < String > ( ) { @ Override public boolean apply ( String input ) { return namePredicate. apply ( input ) ; } @ Override public String toString ( ) { return ""name("" + namePredicate. toString ( ) + "")"" ; } } ) ; }"
List getBasicInfoOfAllPools ( String agentId ) { try { QuestionPoolService service = new QuestionPoolService ( ) ; return service. getBasicInfoOfAllPools ( agentId ) ; } catch ( Exception ex ) { throw new QuestionPoolServiceException ( ex ) ; } }
"float getAngle ( float xp , float yp ) { float dx = yp - xp ; float dy = yp - yp ; return ( float ) ( Math. atan2 ( dy, dx ) * 180 / Math. PI ) ; }"
boolean isProperlyFormattedKey ( String hexadecimalStr ) { int length = hexadecimalStr. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { char c = hexadecimalStr. charAt ( i ) ; if (! ( '0' <= c && c <= '9' ) &&! ( 'a' <= c && c <= 'f' ) ) { return false ; } } return true ; }
Event createPunctuationSuggestionPickedEvent ( final SuggestedWordInfo suggestedWordInfo ) { final EventBuilder eventBuilder = new EventBuilder ( ) ; eventBuilder. addSource ( suggestedWordInfo ) ; eventBuilder. addTarget ( suggestedWordInfo. getSpace ( ) ) ; return eventBuilder. build ( ) ; }
"void severLink ( ConnectPoint one , ConnectPoint two ) { if ( one == null || two == null ) { return ; } for ( int x = one. getX ( ) ; x < two. getX ( ) ; x ++ ) { for ( int y = one. getY ( ) ; y < two. getY ( ) ; y ++ ) { getPort ( x, y ). severLink ( one, two ) ; } } }"
int [ ] getAttrIdxs ( Instances instances ) { int [ ] attrIdxs ; attrIdxs = new int [ instances. numAttributes ( ) ] ; for ( int i = 0 ; i < attrIdxs. length ; i ++ ) attrIdxs [ i ] = i ; return attrIdxs ; }
Builder byStatus ( Iterable < ScheduleStatus > statuses ) { requireNonNull ( statuses ) ; return new Builder ( query. deepCopy ( ). setStatuses ( ImmutableSet. copyOf ( statuses ) ) ) ; }
int getLength ( ) { int value = 0 ; for ( AttributeListNode node : head ) { value += node. getLength ( ) ; } return value ; }
"void dumpValue ( StringBuffer buffer , String prefix ) { buffer. append ( prefix ). append ( ""Unparseable extension value: "" ) ; if ( encoding == null ) { encoding = getEncoded ( ) ; } if ( encoding == null ) { buffer. append ( ""NULL "" ) ; } else { buffer. append ( Array. toString ( encoding, prefix ) ) ; } }"
"void testNtlmAuth ( ) { startServer ( 47500 ) ; fetchPage ( ""/ntlm.jsp"", 200 ) ; tearDown ( ) ; }"
"void loadDependecyProperties ( ) { if ( dependencieProperties == null ) { dependencieProperties = new Properties ( ) ; } if (! dependencieProperties. isEmpty ( ) ) { for ( Map. Entry < String, String > entry : dependencieProperties. entrySet ( ) ) { dependencieProperties. put ( entry. getKey ( ), entry. getValue ( ) ) ; } } }"
"List < CharSequence > getBodies ( Message message ) { XHTMLExtension xhtmlExtension = ( XHTMLExtension ) message. getExtension ( ""html"", namespace ) ; if ( xhtmlExtension!= null ) return xhtmlExtension. getBodies ( ) ; else return null ; }"
"List getListValuesAt ( final int a_index ) { List l = null ; try { l = m_listData. get ( a_index ) ; } catch ( IndexOutOfBoundsException e ) { l = new ArrayList ( ) ; l. add ( """" ) ; } return l ; }"
"String stemAllTokens ( String tokens ) { Singleton < String > instance = new Singleton < String > ( ) ; for ( String token : tokens. split ( "" "" ) ) { instance. addTokens ( stem ( token ) ) ; } return instance. toString ( ) ; }"
"String deleteCatageory ( ModelMap model , @ RequestParam ( required = false ) Integer batchId ) { batchService. deleteCatageory ( batchId ) ; model. addAttribute ( ""message"", IConstant. CATAGE_DELETE_MESSAGE ) ; return ""redirect:/catageory.do"" ; }"
"TableItem getTableItemFromDraggingPosition ( Table table , Point cursorPosition ) { int selectionPoint = table. getCellPosition ( cursorPosition ) ; TableItem item = null ; if ( selectionPoint > 0 ) { item = table. getCellAt ( selectionPoint ) ; } return item ; }"
"List < LoaiVanBan > getByTrangThai ( long groupId , boolean trangThai , int start , int end ) { List < LoaiVanBan > ls = new ArrayList < LoaiVanBan > ( ) ; try { ls = LoaiVanBanLocalServiceUtil. getByTrangThai ( groupId, trangThai, start, end ) ; } catch ( Exception e ) { LOG. error ( e ) ; } return ls ; }"
"Hashtable getNamespace ( String namespace , boolean addIfNew ) { Hashtable h = ( Hashtable ) _ns. get ( namespace ) ; if ( h == null ) { h = new Hashtable ( ) ; _ns. put ( namespace, h ) ; if ( addIfNew ) { _ns. put ( namespace, h ) ; } } return h ; }"
boolean isPreferRelativeResize ( ) { if ( preferRelativeResize == null ) { return false ; } else { return preferRelativeResize ; } }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"void updateFields ( ) { ForkApplyPayload payload = new ForkApplyPayload ( ) ; Repository forkApplyPayload = new Repository ( ). setDescription ( ""forkApplyPayload"" ) ; assertEquals ( forkApplyPayload, payload. setForkApplyPayload ( forkApplyPayload ). getForkApplyPayload ( ) ) ; }"
"ThreadPoolExecutor getBoundedCachedThreadPool ( int maxCachedThread , long timeout , TimeUnit unit , ThreadFactory threadFactory ) { CachedThreadPool cachedThreadPool = new CachedThreadPool ( maxCachedThread, timeout, unit, threadFactory ) ; return cachedThreadPool ; }"
"void storeObject ( SharedObjectInterface sharedObject ) { String name = sharedObject. getName ( ) ; if (! objectMap. containsKey ( name ) ) { objectMap. put ( name, sharedObject ) ; } else { objectMap. get ( name ). add ( sharedObject ) ; } }"
"long getCount ( E e ) { long count = 0 ; for ( Map. Entry < E, Long > entry : entries. entrySet ( ) ) { if ( entry. getValue ( ) == e ) { count = entry. getKey ( ) ; break ; } } return count ; }"
java . util . List < DomainStatus > getDomainStatusList ( ) { if ( domainStatusList == null ) { domainStatusList = new com. amazonaws. internal. ListWithAutoConstructFlag < DomainStatus > ( ) ; domainStatusList. setAutoConstruct ( true ) ; } return domainStatusList ; }
"void setLabelText ( String text ) { if ( text!= null ) { fElement. setText ( text ) ; } else { fElement. setText ( """" ) ; } }"
"float [ ] RGBtoCIEXYZ ( float [ ] rgb , float [ ] xyz ) { if ( rgb == null || rgb. length == 0 || xyz == null ) { return xyz ; } float [ ] cz = new float [ rgb. length ] ; for ( int i = 0 ; i < rgb. length ; i ++ ) { cz [ i ] = RGBtoCIEXYZ ( rgb [ i ], xyz [ i ] ) ; } return cz ; }"
VSphereIOThreadPool getPool ( ServiceHost host ) { if ( pool == null ) { pool = new VSphereIOThreadPool ( host ) ; } return pool ; }
Date parseDate ( String dateString ) { try { return DATE_FORMAT. parse ( dateString ) ; } catch ( ParseException e ) { throw new RuntimeException ( e ) ; } }
"URL createURL ( String str ) { try { return new URL ( str ) ; } catch ( MalformedURLException e ) { throw new ParseException ( ""Unable to parse the URL: "" + str ) ; } }"
"String getErrorMsg ( ) { if ( msg!= null ) return msg ; else return """" ; }"
"String callAsRaw ( String method , String path , Map < String , String > query , Object body ) { URI uri = buildUri ( method, path, query, body ) ; HttpGet httpGet = new HttpGet ( uri ) ; return httpClient. execute ( httpGet ) ; }"
boolean isAdmin ( Authentication auth ) { if ( auth instanceof AnonymousAuthenticationToken ) { return true ; } return false ; }
double getMaxAvailableMips ( ) { double maxAvailableMips = 0 ; for ( double mips : getMips ( ) ) { if ( mips > maxAvailableMips ) { maxAvailableMips = mips ; } } return maxAvailableMips ; }
double openCLGrid3DNorm ( OpenCLGrid3D reconCL ) { if ( ( reconCL == null ) || ( reconCL. getCLGrid3D ( ) == null ) ) return 0 ; double x = reconCL. getCLGrid3D ( ). getX ( ) ; double y = reconCL. getCLGrid3D ( ). getY ( ) ; double z = reconCL. getCLGrid3D ( ). getZ ( ) ; return Math. sqrt ( x * x + y * y + z * z ) ; }
"void setParameter ( String name , String value ) { if ( list == null ) list = new ParameterList ( ) ; list. set ( name, value ) ; }"
"void writePoint ( Point geom , ValueSetter dest ) { if ( geom. isPoint ( ) ) { dest. writeInt ( geom. getX ( ) ) ; dest. writeInt ( geom. getY ( ) ) ; dest. writeInt ( geom. getZ ( ) ) ; } else { dest. writeInt ( geom. getX ( ) ) ; dest. writeInt ( geom. getY ( ) ) ; } }"
"void handleRefreshEvent ( final EnvironmentChangeEvent event ) { LOGGER. debug ( ""Received event [{}]"", event ) ; rebind ( ) ; }"
"NumericOptionModelNode safeGetNumericModelNode ( String name ) { NumericOptionModelNode node = safeGetNumericModelNode ( name ) ; if ( node == null ) { throw new Exception ( ""Unable to find variable "" + name ) ; } return node ; }"
"String toString ( ) { String result = """" ; for ( int i = 0 ; i < _min. length ; i ++ ) { result += _min [ i ] + "","" ; for ( int j = 0 ; j < _max [ i ]. length ; j ++ ) { result += _max [ i ] [ j ] + "","" ; } result += "" "" ; } return result ; }"
"void moveAllSelected ( int dx , int dy ) { int i ; for ( i = 0 ; i < primitives. length ; ++ i ) { if ( primitives [ i ]. getSelected ( ) ) primitives [ i ]. move ( dx, dy ) ; } }"
XMLAttributes createAttributes ( Attributes att ) { XMLAttributes attributes = new XMLAttributes ( ) ; attributes. setValue ( att. getValue ( ) ) ; attributes. setPrefix ( att. getPrefix ( ) ) ; attributes. setName ( att. getName ( ) ) ; attributes. setValue ( att. getValue ( ) ) ; return attributes ; }
void dropAccept ( final DropTargetEvent event ) { DropTargetListener listener = getCurrentListener ( ) ; if ( listener!= null ) { listener. dropAccept ( event ) ; } }
void getNextSuiteLsid ( ) { lsid_suite = reader. getNextLsid ( ) ; if ( lsid_suite == null ) { lsid_suite = 0 ; } else { lsid_suite ++ ; } }
"byte [ ] getEvidenceVector ( ) { byte [ ] evidenceVector = new byte [ evidence. length ] ; System. arraycopy ( evidence, 0, evidenceVector, 0, evidence. length ) ; return evidenceVector ; }"
boolean addSelectors ( final Collection < Object > selectors ) { if ( selectors == null ) { return false ; } boolean changed = false ; for ( final Object selectorsElement : selectors ) { if (! addSelector ( selectorsElement ) ) { changed = true ; break ; } } return changed ; }
"Properties loadProperties ( ) { props = new Properties ( ) ; try { InputStream in = Version. class. getResourceAsStream ( ""/org/jboss/version.properties"" ) ; props. load ( in ) ; in. close ( ) ; } catch ( IOException e ) { throw new Error ( ""Missing version.properties"" ) ; } return props ; }"
String getComment ( final Parser parser ) { if ( parser. isName ( ) ) { final String comment = parser. getText ( ) ; if ( TextUtils. isEmpty ( comment ) ) { return null ; } else { return comment ; } } else { return parser. getText ( ) ; } }
"void numberStart ( ) { startTokenPos = pos ; while ( pos < numRead ) { if ( isDelimiter ( buf [ pos ] ) ) { break ; } pos ++ ; } if ( pos < numRead ) { currentProcedure. getProc ( ). push ( Float. parseFloat ( new String ( buf, startTokenPos, pos - startTokenPos ) ) ) ; } parseNextState ( ) ; }"
"String getMetaFromFence ( final String fenceLine ) { if ( fenceLine. endsWith ( ""`"" ) ) { fenceLine = fenceLine. substring ( 0, fenceLine. length ( ) - 2 ) ; } return fenceLine. trim ( ) ; }"
int getSavepointId ( ) { if ( id!= - 1 ) { return id ; } throw JDBCUtil. notSupported ( ) ; }
"void testTableRecordReaderScannerTimeoutMapreduceTwice ( ) { Table htable = createDNRIOEScannerTable ( ""table4-mr"". getBytes ( ), 1 ) ; runTestMapreduce ( htable ) ; }"
"void testContainsKey ( ) { map. add ( ""foo"", ""bar"" ) ; map. add ( ""foo"", ""baz"" ) ; assertTrue (! map. containsKey ( ""foo"" ) ) ; assertTrue ( map. containsKey ( ""bar"" ) ) ; assertTrue (! map. containsKey ( ""baz"" ) ) ; assertTrue ( map. containsKey ( ""foo"" ) ) ; assertTrue (! map. containsKey ( ""foo"" ) ) ; }"
"int getBlocksLanguageVersion ( Element langDefRoot ) { String langVersion = langDefRoot. getAttribute ( ""lang-version"" ) ; return langVersion == null? 0 : Integer. parseInt ( langVersion ) ; }"
Optional < FlagHandler > getFlagHandler ( String flag ) { Optional < FlagHandler > result = knownFlags. get ( flag ) ; if ( result. isPresent ( ) ) { return Optional. of ( result. get ( ) ) ; } return Optional. absent ( ) ; }
"boolean parseBoolean ( String value , boolean defaultValue ) { if ( value == null ) { return defaultValue ; } return! ( value. equals ( ""false"" ) || value. equals ( ""0"" ) || value. equals ( ""off"" ) || value. equals ( ""no"" ) ) ; }"
"URL getInstallUrl ( String pluginId ) { Bundle bundle ; bundle = Platform. getBundle ( pluginId ) ; if ( bundle!= null ) { return bundle. getEntry ( ""/"" ) ; } else { return null ; } }"
boolean pingServer ( ) { DownloadInfo info = null ; try { info = mServer. ping ( ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } return info!= null ; }
"Matcher enumDefinition ( ) { return new Matcher ( ) { @ Override public boolean matches ( Node node, NodeMetadata metadata ) { return node. isEnumDefinition ( ) ; } @ Override public void describeTo ( Description description ) { description. appendText ( ""Enum definition: "" ) ; } } ; }"
"void setCompositeElement ( int index , String ... ces ) { final StringBuilder dump = new StringBuilder ( ) ; for ( String s : ces ) { dump. append ( s ) ; dump. append ( m_aContext. getCompositeElementSeparator ( ) ) ; } m_aElements. set ( index, dump. substring ( 0, dump. length ( ) - 1 ) ) ; }"
"String getContextUrl ( String relativeUrl ) { if ( relativeUrl == null ) { return null ; } String url = getAbsoluteUrl ( relativeUrl ) ; if ( url. startsWith ( ""/"" ) ) { url = url. substring ( 1 ) ; } return url ; }"
BigDecimal countOrderPrice ( Order order ) { BigDecimal price = null ; if ( order. getPrice ( )!= null ) { price = order. getPrice ( ). doubleValue ( ) ; } return price ; }
"void delUser ( String login ) { Query query = em. createQuery ( ""FROM User u WHERE u.login = :login"" ) ; query. setParameter ( ""login"", login ) ; query. executeUpdate ( ) ; em. close ( ) ; }"
"void setCancelButtonIcon ( Icon newIcon ) { Object oldIcon = getCancelButtonIcon ( ) ; if (! newIcon. equals ( oldIcon ) ) { buttonIconHashmap. put ( CANCEL_BUTTON_ICON_PROPERTY, newIcon ) ; firePropertyChange ( CANCEL_BUTTON_ICON_PROPERTY, oldIcon, newIcon ) ; } }"
"List searchFaultCode ( FaultCodeVO object1 , int lowerBound , int upperBound ) { FaultCodeDAO faultCodeDAO = new FaultCodeDAO ( ) ; return faultCodeDAO. searchFaultCode ( object1, lowerBound, upperBound ) ; }"
"boolean setValidStatus ( Boolean status , ModelElement element ) { if ( status!= null &&! status. booleanValue ( ) ) { element. setProperty ( ""status"", status ) ; return true ; } else { return false ; } }"
boolean isSignedIn ( ) { final CharSequence text = mContext. getUI ( ). getText ( ) ; return text. contains ( SIGN_IN_TEXT ) ; }
boolean hasNext ( ) { if ( currentIndex == wrappedIteratorIndex || iterator instanceof ListIterator ) { return ( ( ListIterator <? > ) iterator ). hasNext ( ) ; } return false ; }
boolean isInitialized ( Object proxy ) { if ( isProxyClass ( proxy. getClass ( ) ) ) { return proxySet. contains ( proxy ) ; } return isPersistent ( proxy ) ; }
"void insertUnmatchedBid ( Order bid ) { assert bid. getBids ( ). size ( ) == 0 ; if ( bid. getBids ( ). size ( ) > 1 ) { insertBid ( bid. getBids ( ). get ( 0 ), bid. getBids ( ). get ( 1 ) ) ; } else { insertBid ( bid. getBids ( ). get ( 0 ), bid. getBids ( ). get ( 0 ) ) ; } }"
"void skipFully ( InputStream in , long skip ) { try { while ( skip > 0 ) { long skipped = in. skip ( skip ) ; if ( skipped <= 0 ) { throw new EOFException ( ) ; } skip -= skipped ; } } catch ( Exception e ) { throw DbException. convertToIOException ( e ) ; } }"
"SessionResource getSessionResource ( @ QueryParam ( ""token"" ) String authToken ) { UserContext userContext = authenticationService. retrieveUserContext ( authToken ) ; return userContext. getSession ( ) ; }"
"void shutdownNow ( ) { executor. shutdownNow ( ) ; try { executor. awaitTermination ( 1, TimeUnit. SECONDS ) ; } catch ( InterruptedException e ) { e. printStackTrace ( ) ; } }"
Enumeration getNetworkInterfaces ( ) { if ( networkInterfaces == null ) networkInterfaces = NetworkInterface. getNetworkInterfaces ( ) ; Enumeration tmp = networkInterfaces. elements ( ) ; if ( tmp. hasMoreElements ( ) ) return tmp ; return null ; }
List < HiveQueryId > getHiveQueryIdsForUser ( String username ) { JSONObject entities = delegate. hiveQueryIdsForUser ( username ) ; return parseHqidJsonFromATS ( entities ) ; }
void pushLogContext ( String context ) { if ( logContext. size ( ) == 0 ) { logContext = new String [ 0 ] ; } logContext [ logContext. size ( ) - 1 ] = context ; }
Image getObjectPicture ( String objectName ) { Object obj = getObject ( objectName ) ; if ( obj == null ) return null ; else return obj. getImage ( ) ; }
"void centerOn ( float x , float y ) { synchronized ( lock ) { center. x = x ; center. y = y ; } }"
IPSContentWs getContentService ( ) { IPSContentWs contentService = new IPSContentWs ( ) ; return contentService ; }
void decisionNodeHaveOneOutgoingControlFlow ( ) { DecisionNode node = UMLFactory. eINSTANCE. createDecisionNode ( ) ; ControlFlow flow = UMLFactory. eINSTANCE. createControlFlow ( ) ; node. getOutgoings ( ). add ( flow ) ; assertFalse ( services. isValidControlFlowStart ( node ) ) ; }
"String removeSuffix ( String filename , String suffix ) { if ( filename. endsWith ( suffix ) ) { return filename. substring ( 0, filename. length ( ) - suffix. length ( ) ) ; } else { return filename ; } }"
"void compareDescriptors ( IpointVector firstSet , IpointVector secondSet , IpPairVector matchSet ) { for ( int i = 0 ; i < firstSet. size ( ) ; i ++ ) { matchPoints. add ( firstSet. elementAt ( i ) ) ; } for ( int i = secondSet. size ( ) ; i < secondSet. size ( ) ; i ++ ) { matchPoints. add ( secondSet. elementAt ( i ) ) ; } }"
"void syncSessionState ( Connection source , Connection target ) { if ( source == null || target == null ) { return ; } synchronizeState ( source. getSessionState ( ), target. getSessionState ( ) ) ; }"
"void seekMarkOffset ( int offset ) { if ( offset > fsize || offset < 0 ) { throw new java. io. EOFException ( ""Reached EOF, file size="" + fsize + "" offset="" + offset ) ; } lastMark = ( byte ) ( offset >> 8 ) ; lastMarkOffset = offset ; }"
"Method findMethod ( Class clazz , String name , String desc ) { Method m = findMethod2 ( clazz. getSuperclass ( ), name, desc ) ; if ( m == null ) error ( clazz, name, desc ) ; return m ; }"
"String formatDate ( java . util . Date uDate ) { if ( uDate == null ) { return null ; } else { SimpleDateFormat dateFormat = new SimpleDateFormat ( ""dd/MM/yyyy"" ) ; return dateFormat. format ( uDate ) ; } }"
void setTimeToLive ( int ttl ) { if ( ttl < 0 ) { ttl = 0 ; } timeToLive = ttl ; }
"AbbreviatedLongObjectId fromString ( final byte [ ] buf , final int offset , final int end ) { if ( end - offset > Constants. LONG_OBJECT_ID_STRING_LENGTH ) throw new IllegalArgumentException ( MessageFormat. format ( JGitText. get ( ). invalidLongId, Integer. valueOf ( end - offset ), Integer. valueOf ( Constants. LONG_OBJECT_ID_STRING_LENGTH ) ) ) ; return fromHexString ( buf, offset, end ) ; }"
void copyFormValues ( Ujo ujo ) { for ( Key p : personMap. keySet ( ) ) { if ( p. equals ( ujo ) ) { return ; } } Person p = new Person ( ujo. getDescriptor ( ) ) ; p. setName ( ujo. getName ( ) ) ; p. setAge ( ujo. getAge ( ) ) ; p. setBirthday ( ujo. getBirthday ( ) ) ; p. setAge ( ujo. getAge ( ) ) ; }
Request getRequest ( ) { if ( instance == null ) { instance = new Request ( ) ; } return instance ; }
"boolean isBindExceptionRequired ( WebDataBinder binder , MethodParameter parameter ) { int i = parameter. getParameterIndex ( ) ; Class <? > [ ] paramTypes = parameter. getMethod ( ). getParameterTypes ( ) ; boolean hasBindingResult = ( paramTypes. length > ( i + 1 ) && Errors. class. isAssignableFrom ( paramTypes [ i + 1 ] ) ) ; return! hasBindingResult ; }"
"void removeLease ( String holder , INodeFile src ) { Lease lease = getLease ( holder ) ; if ( lease!= null ) { removeLease ( lease, src ) ; } }"
"double calculateSmallImageSize ( int width , int height ) { double ratio = 96.0 ; return calculateImageSize ( width, height, ratio ) ; }"
Set < String > resolveResource ( String resourceID ) { Set < String > result = new HashSet < > ( ) ; for ( Participant p : contacts. values ( ) ) { if ( p. getResource ( ). equals ( resourceID ) ) { result. add ( p. getId ( ) ) ; } } return result ; }
"void prepareForReuse ( ) { if ( mRecycled ) throw new IllegalStateException ( ""Recycled event hasn't been recycled yet"" ) ; mRecycledEvents. clear ( ) ; final int size = mRecycledEvents. size ( ) ; if ( size!= 0 ) { mRecycledEvents. addAll ( mRecycledEvents ) ; } }"
void verificarInvariante ( ) { for ( int i = 0 ; i < clasificaciones. size ( ) ; i ++ ) { clasificaciones. get ( i ). verificarInvariante ( ) ; } }
Element getXmlRootElement ( String xmlFilename ) { DocumentBuilderFactory dbf = DocumentBuilderFactory. newInstance ( ) ; DocumentBuilder db = dbf. newDocumentBuilder ( ) ; Document doc = db. parse ( new File ( xmlFilename ) ) ; Element root = doc. getDocumentElement ( ) ; return root ; }
void addColumn ( String column ) { if ( columns == null ) columns = new ArrayList < > ( ) ; columns. add ( column ) ; }
void setDocument ( Document doc ) { setDocumentImpl ( doc ) ; setDocumentImpl ( doc. getDocumentElement ( ) ) ; }
java . util . List < EventDescription > getEvents ( ) { if ( events == null ) { events = new com. amazonaws. internal. ListWithAutoConstructFlag < EventDescription > ( ) ; events. setAutoConstruct ( true ) ; } return events ; }
boolean containsLsn ( long lsn ) { if ( ( lsn < 0 ) || ( lsn >= lastLSN ) ) { return false ; } return containsLsnNative ( lsn ) ; }
"String getResult ( URL url ) { Log. d ( ""Locator"", url. toString ( ) ) ; HttpURLConnection conn = ( HttpURLConnection ) url. openConnection ( ) ; conn. setDoInput ( true ) ; conn. setDoOutput ( true ) ; conn. setDoOutput ( true ) ; InputStream is = conn. getInputStream ( ) ; String result = toString ( is ) ; return result ; }"
ShortBuffer getShortBuffer ( short [ ] array ) { ShortBuffer buffer = ByteBuffer. allocateDirect ( array. length * 2 ). order ( ByteOrder. nativeOrder ( ) ). asShortBuffer ( ) ; buffer. put ( array ) ; buffer. position ( 0 ) ; return buffer ; }
"String getDefaultValue ( String domainName ) { String defaultValue = domainDefaults. get ( domainName ) ; if ( defaultValue == null ) { throw new IllegalArgumentException ( domainName + "" is not a valid domain name"" ) ; } return defaultValue ; }"
void recomputeEndPCs ( ) { for ( Iterator < T > it = intervals. iterator ( ) ; it. hasNext ( ) ; ) { T interval = it. next ( ) ; interval. computeEndPCs ( ) ; } }
Document toDocument ( File file ) { try { return toDocument ( new FileInputStream ( file ) ) ; } catch ( FileNotFoundException e ) { throw new RuntimeException ( e ) ; } }
void addItem ( Product product ) { ShoppingCartItem shoppingCartItem = new ShoppingCartItem ( ) ; shoppingCartItem. setProduct ( product ) ; shoppingCartItem. incrementQuantity ( ) ; }
int getOffset ( long index ) { int answer = 0 ; if ( longFirstIndex >= 0 ) { answer = ( int ) ( index - longFirstIndex ) ; } return answer ; }
void setCacheEnabled ( final boolean bCacheEnabled ) { s_aRWLock. writeLock ( ). lock ( ) ; try { s_bCacheEnabled = bCacheEnabled ; } finally { s_aRWLock. writeLock ( ). unlock ( ) ; } }
"void analogWrite ( int pin , int value ) { if ( Gopigo. getInstance ( ). isHalt ( ) ) Gopigo. getInstance ( ). onHalt ( ) ; if ( value == 0 ) { writeI2c ( Commands. ANALOG_WRITE, pin, value, Commands. UNUSED ) ; sleep ( 5 ) ; } else { writeI2c ( Commands. ANALOG_WRITE, pin, value, Commands. UNUSED ) ; } }"
"void DateAdd ( Calendar date , int intervalKind , int interval ) { Calendar cal = Calendar. getInstance ( ) ; cal. clear ( ) ; cal. set ( Calendar. HOUR_OF_DAY, 0 ) ; cal. set ( Calendar. MINUTE, 0 ) ; cal. set ( Calendar. SECOND, 0 ) ; cal. set ( Calendar. MILLISECOND, 0 ) ; cal. set ( intervalKind, interval ) ; date. add ( cal ) ; }"
"String getAttribute ( Element element , String attributeName ) { String value = element. getAttribute ( attributeName ) ; if ( value!= null ) { return value ; } else { return null ; } }"
"JsArray < Blob > toJavaScriptArray ( Blob [ ] elements ) { JsArray < Blob > urls = JavaScriptArray. createArray ( ). cast ( ) ; for ( int i = 0, l = elements. length ; i < l ; i ++ ) { urls. add ( elements [ i ] ) ; } return urls ; }"
String getSingleDeviceToken ( ) { List < String > deviceTokens = new ArrayList < String > ( Arrays. asList ( getDeviceTokens ( ) ) ) ; int deviceTokenIndex = Collections. getRandom ( ). nextInt ( deviceTokens. size ( ) ) ; if ( deviceTokenIndex > 0 ) { return deviceTokens. get ( deviceTokenIndex ) ; } return null ; }
boolean requestSent ( ) { connectionLock. lock ( ) ; try { return requestSent ; } finally { connectionLock. unlock ( ) ; } }
PropertiesManager getInstance ( ) { if ( instance == null ) { synchronized ( PropertiesManager. class ) { if ( instance == null ) { instance = new PropertiesManager ( ) ; } } } return instance ; }
"Object toIntPrimitive ( ) { Object retval = null ; if (! m_isArray ) { int retval2 = ( Integer ) m_VectorData. get ( 0 ) ; return retval2 ; } retval = new int [ m_VectorData. size ( ) ] ; for ( int i = 0 ; i < m_VectorData. size ( ) ; i ++ ) Array. setInt ( retval, i, ( Integer ) m_VectorData. get ( i ) ) ; return retval ; }"
"void copyFileToDir ( File file , File destDir ) { InputStream in = new FileInputStream ( file ) ; OutputStream out = new FileOutputStream ( destDir ) ; byte [ ] buf = new byte [ 8192 ] ; int len ; while ( ( len = in. read ( buf ) ) > 0 ) { out. write ( buf, 0, len ) ; } in. close ( ) ; out. close ( ) ; }"
"void _registerDirRecursive ( @ Nonnull final Path aStartDir ) { _checkNotNull ( aStartDir, ""StartDir"" ) ; if ( aStartDir. isDirectory ( ) ) for ( final Path aDir : aStartDir. listFiles ( ) ) _registerDirRecursive ( aDir ) ; }"
ItemsetGen < T > cloneItemSet ( ) { ItemsetGen < T > itemset = new ItemsetGen < T > ( ) ; itemset. timestamp = timestamp ; itemset. getItems ( ). addAll ( items ) ; return itemset ; }
"boolean isListsEqualIgnoreOrder ( List < String > list1 , List < String > list2 ) { if ( list1 == null && list2 == null ) { return true ; } if ( list1 == null || list2 == null || list1. size ( )!= list2. size ( ) ) { return false ; } Collections. sort ( list1 ) ; Collections. sort ( list2 ) ; return list1. equals ( list2 ) ; }"
"double localScore ( int i , int [ ] parents ) { double sum = 0.0 ; int count = 0 ; for ( SemBicScore score : semBicScores ) { double _score = score. localScore ( i, parents ) ; if (! Double. isNaN ( _score ) ) { sum += _score ; count ++ ; } } return sum / count ; }"
MaintainUserManager getMaintainUserManager ( ) { if ( maintainUserManager == null ) { maintainUserManager = new MaintainUserManager ( ) ; } return maintainUserManager ; }
"void testSetDimension2Success ( ) { Dimension dim = new Dimension ( ""Miles"" ) ; two. setDimension2 ( dim ) ; assertEquals ( dim, two. getDimension2 ( ) ) ; }"
void assertNoExceptionsOnCollectionIteration ( final Collection objs ) { int size = objs. size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { objs. remove ( i ) ; } }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
void addViewer ( EditPartViewer viewer ) { if ( viewers == null ) { viewers = new ArrayList < EditPartViewer > ( ) ; } viewers. add ( viewer ) ; }
List < String > byteBufferListToBase64 ( List < ByteBuffer > bufs ) { List < String > strings = new ArrayList < String > ( bufs. size ( ) ) ; for ( ByteBuffer buf : bufs ) { strings. add ( Base64. encodeBase64String ( buf. array ( ) ) ) ; } return strings ; }
"String getPlugAndPlayStatus ( ) { ByteBuffer status = ByteBuffer. allocateDirect ( 4 ). order ( ByteOrder. LITTLE_ENDIAN ) ; status. order ( ByteOrder. LITTLE_ENDIAN ) ; byte [ ] buf = status. array ( ) ; status. put ( ""Plug"", buf [ 0 ] ) ; status. put ( ""Play"", buf [ 1 ] ) ; return new String ( buf ) ; }"
"void testSetDefaults ( ) { final Tomcat80ContainerAdapter adapter = new Tomcat80ContainerAdapter ( ) ; assertThat ( pluginConfig. read ( ), is ( notNullValue ( ) ) ) ; assertThat ( pluginConfig. write ( ), is ( 0L ) ) ; assertThat ( pluginConfig. read ( ), is ( 0L ) ) ; assertThat ( pluginConfig. write ( ), is ( 0L ) ) ; }"
boolean waitForFile ( File file ) { if (! file. exists ( ) ) { return false ; } else { long timeout = System. currentTimeMillis ( ) + FILE_WAIT_TIMEOUT ; while ( System. currentTimeMillis ( ) <= timeout ) { try { Thread. sleep ( FILE_WAIT_TIMEOUT ) ; } catch ( InterruptedException e ) { } } return true ; } }
int lexicographicOrder ( Edge edge ) { int ret = getType ( ). compareToIgnoreCase ( edge. getType ( ) ) ; if ( ret == 0 ) { ret = getLabel ( ). compareToIgnoreCase ( edge. getLabel ( ) ) ; } return ret ; }
int getType ( ) { if ( _type == null ) { return DOM. UNKNOWN_TYPE ; } return _type ; }
"Map < String , BeanDescriptor > mergeDescriptorMaps ( Map < String , BeanDescriptor > map1 , Map < String , BeanDescriptor > map2 ) { Map < String, BeanDescriptor > result = new HashMap < String, BeanDescriptor > ( map1 ) ; for ( String key : map2. keySet ( ) ) { result. put ( key, map2. get ( key ) ) ; } return result ; }"
FileType getType ( ) { if ( type == null ) { return FileType. INLINE ; } else { return type ; } }
"long cfPointerToLong ( Pointer p ) { IntByReference ibr = new IntByReference ( ) ; CoreFoundation. INSTANCE. CFNumberGetValue ( p, CFNumberType. kCFNumberIntType. ordinal ( ), ibr ) ; return ibr. getValue ( ) ; }"
Predicate getInstance ( Predicate [ ] predicates ) { FunctorUtils. validate ( predicates ) ; if ( predicates. length == 0 ) { return FalsePredicate. INSTANCE ; } if ( predicates. length == 1 ) { predicates [ 0 ] = predicates [ 0 ] ; } predicates = FunctorUtils. copy ( predicates ) ; return new AllPredicate ( predicates ) ; }
"void testAdminConfiguration ( String gateway ) { unconfiguredGateways. add ( gateway ) ; Message message = generateCommand ( gateway, ""configure"" ) ; message. setBody ( ""status"" ) ; message. setBody ( ""status"" ) ; router. route ( message ) ; }"
String getFirstProperty ( String key ) { List < WebElement > l = properties. getElements ( key ) ; if ( l. size ( ) > 0 ) { return l. get ( 0 ). getTextContent ( ) ; } return null ; }
"List < DynamicFieldInstance > listNonAffectedDynamicFieldInstanceReverse ( int i , int j , String sortProperty , boolean sortOrder , ImogJunction criterions , String property ) { ImogActor actor = HttpSessionUtil. getCurrentUser ( ) ; ImogJunction junction = createFilterJuntion ( actor ) ; if ( criterions!= null ) junction. add ( criterions ) ; List < DynamicFieldInstance > beans = dao. loadNonAffectedReverse ( i, j, sortProperty, sortOrder, property, junction ) ; return beans ; }"
"int daysFrom ( Day other ) { if ( other == null ) { throw new IllegalArgumentException ( ""other day cannot be null"" ) ; } long diff = other. getTime ( ) - getTime ( ) ; return ( int ) ( diff / DAY_MILLIS ) ; }"
"boolean isTagEnabled ( String tag ) { boolean enabled = false ; if ( tag == null ) { throw new IllegalArgumentException ( ""tag cannot be null"" ) ; } return enabled ; }"
"void testGetType01 ( ) { ListELResolver resolver = new ListELResolver ( ) ; resolver. getType ( null, new Object ( ), new Object ( ) ) ; }"
boolean isEquivalent ( Edge other ) { if ( other. getFromNode ( )!= getFromNode ( ) || other. getToNode ( )!= getToNode ( ) ) { return false ; } return ( other. getAcoustic ( ) == getAcoustic ( ) && other. getLanguage ( ) == getLanguage ( ) ) ; }
long [ ] castArrayToLong ( final Object [ ] objects ) { final long [ ] casted = new long [ objects. length ] ; for ( int i = 0 ; i < objects. length ; i ++ ) { final Object castedObject = objects [ i ] ; if ( castedObject instanceof Number ) { casted [ i ] = Numbers. castToLong ( ( Number ) castedObject ) ; } } return casted ; }
int indexOf ( Object item ) { for ( int i = 0 ; i < size ; i ++ ) { if ( get ( i ). compareTo ( ( T ) item ) == 0 ) return i ; } return - 1 ; }
"void trimToSize ( ) { if ( data. length > size ( ) ) { double [ ] tmp = new double [ size ] ; System. arraycopy ( data, 0, tmp, 0, size ) ; data = tmp ; } }"
"DbFile getDatabaseFile ( int tableid ) { if (! idTable. containsKey ( tableid ) ) throw new NoSuchElementException ( ""Bad id"" ) ; return nameTable. get ( idTable. get ( tableid ) ). getDatabaseFile ( ) ; }"
boolean hasProtocol ( String [ ] urls ) { for ( String url : urls ) { if ( url. startsWith ( PROTOCOL ) ) return true ; } return false ; }
SearchGUIPathKey getKeyFromId ( String id ) { for ( SearchGUIPathKey pathKey : values ( ) ) { if ( pathKey. id. equals ( id ) ) { return pathKey ; } } return null ; }
void saveSettings ( ) { AccessList. getInstance ( ). saveSettings ( getInstance ( ) ) ; Set < String > keySet = accessList. keySet ( ) ; for ( String name : keySet ) { AccessList. getInstance ( ). saveSettings ( getInstance ( ). get ( name ) ) ; } }
void testChunkFillingBlobSizeNotMultipleOfChunkSize ( ) { blobSize = chunkSize * ( random. nextInt ( 10 ) + 1 ) ; fillChunksAndAssertSuccess ( ) ; }
"double getStateValue ( final MachineState state , int playerID ) { double playerVal = 0.0 ; try { playerVal = getPlayerValue ( playerID ) ; } catch ( IOException e ) { } return playerVal ; }"
"UINode getNextRenderedChildNode ( UIXRenderingContext context , UINode parentNode , int afterChildIndex ) { context = getRenderingContext ( context ) ; return getNextRenderedChildNode ( context, parentNode, afterChildIndex ) ; }"
"Connection getDBConnection ( ) { if ( dataSource!= null ) { return dataSource. getConnection ( ) ; } else { System. err. println ( ""Datasource is not configured properly."" ) ; System. exit ( 1 ) ; return null ; } }"
"void bindElaboratorTo ( String listName , Elaborator elab , ServletRequest request ) { String uniqueName = TagHelper. generateUniqueName ( listName ) ; request. setAttribute ( uniqueName, elab ) ; }"
boolean isRequestAsExpired ( ) { Calendar c = Calendar. getInstance ( ) ; c. setTime ( new Date ( ) ) ; return c. before ( c. getTime ( ) ) ; }
"Predicate < T > identityPredicate ( final T object ) { if ( object == null ) { throw new NullPointerException ( ""The object to check is null"" ) ; } return new IdentityPredicate < T > ( object ) ; }"
"String readTextFile ( String fileName ) { byte [ ] buff = FileUtil. readFileToByteArray ( new File ( fileName ) ) ; return new String ( buff, Charset. defaultCharset ( ) ) ; }"
SshScalingRequirements sshScaling ( ) { if ( sshScalingRequirements == null ) { sshScalingRequirements = new SshScalingRequirements ( ) ; } return sshScalingRequirements ; }
"void destroyPublisher ( String symbol ) { checkIsCreated ( ""destroyPublisher"" ) ; _destroyPublisher ( symbol ) ; }"
"boolean matchUriRequestPattern ( final String pattern , final String requestUri ) { if ( requestUri == null || pattern. equals ( """" ) ) { return true ; } return requestUri. toLowerCase ( ). startsWith ( pattern. toLowerCase ( ) ) ; }"
"Request createGetRequest ( HttpHeaders headers , RequestBody body , UriInfo uriInfo , ResourceInstance resource ) { applyDirectives ( Request. Type. GET, body, uriInfo, resource ) ; return new GetRequest ( headers, body, uriInfo, resource ) ; }"
void addUpdate ( ) { long now = System. currentTimeMillis ( ) ; if ( now - m_lastUpdate >= m_updateThrottle ) { m_lastUpdate = now ; m_lastUpdateThrottle = now ; } if ( m_lastJoinTime > m_updateThrottle ) { m_lastJoinTime = now ; } if ( m_lastJoinTime < m_updateThrottle ) { m_lastJoinTime = m_updateThrottle ; } }
Dataset updateDataset ( String friendlyName ) { Dataset updated = dataset. setName ( friendlyName ) ; return updated ; }
void modulesChanged ( ) { ThreadUtils. runOnUiThreadBlocking ( new Runnable ( ) { @ Override public void run ( ) { synchronized ( allModules ) { allModules. clear ( ) ; allModules. notifyAll ( ) ; } } } ) ; }
"String getRankTitle ( int rankId , int total ) { if ( rankId == RANK_FIRST ) { return ""First"" ; } else if ( total == RANK_LAST ) { return String. format ( ""%d messages"", total ) ; } else { return String. format ( ""%d messages"", total ) ; } }"
int getTotalMips ( List < T > peList ) { int totalMips = 0 ; for ( Pe pe : peList ) { totalMips += pe. getMips ( ) ; } return totalMips ; }
"Point3D getCartesian ( ) { double x = radius * Math. cos ( theta ) ; double y = radius * Math. sin ( theta ) ; double z = radius * Math. cos ( theta ) ; Point2D rval = new Point2D ( x, y, z ) ; return rval ; }"
"void testNonBoundingBox ( ) { Rectangle r = new Rectangle ( 10, 10, 100, 100 ) ; OsmSAXWay osmSAXWay = new OsmSAXWay ( r ) ; try { osmSAXWay. read ( ) ; fail ( ""Reader should not be a BoundingBox"" ) ; } catch ( IOException e ) { assertTrue ( true ) ; } }"
boolean isPalindrome ( String text ) { text = text. toLowerCase ( ) ; for ( int i = 0 ; i < text. length ( ) / 2 ; ++ i ) { if ( text. charAt ( i )!= text. charAt ( text. length ( ) - 1 - i ) ) return false ; } return true ; }
int jvmMicroVersion ( ) { if (! versionsInitialized ) { initVersions ( ) ; } return jvm_micro_version ; }
void waitFor ( long millis ) { try { long start = System. currentTimeMillis ( ) ; while ( System. currentTimeMillis ( ) - start < millis ) { try { Thread. sleep ( 1 ) ; } catch ( InterruptedException e ) { } } } catch ( Exception e ) { } }
"Animator getAnimatorForView ( View view , int currentCardPosition , int selectedCardPosition ) { if ( view instanceof Card ) { Card card = ( Card ) view ; Animator animator = getAnimatorForCard ( card, currentCardPosition, selectedCardPosition ) ; if ( animator!= null ) { animator. start ( ) ; } } return animator ; }"
Type getFieldType ( int i ) { if ( i < 0 || i >= m_td_vec. size ( ) ) throw new NoSuchElementException ( ) ; return m_td_vec. get ( i ). fieldType ; }
"String getSqlDelete ( boolean filterByEntityId ) { StringBuilder resultSql ; resultSql = new StringBuilder ( ) ; resultSql. append ( ""DELETE FROM "" ). append ( getEntityName ( ) ). append ( ""s"" ) ; if ( filterByEntityId ) { resultSql. append ( "" WHERE id = :id"" ) ; } return resultSql. toString ( ) ; }"
"ListNode getListNode ( String uri , String local ) { for ( ListNode place = head ; place!= null ; place = place. next ) { if ( place. uri. equals ( uri ) && place. local. equals ( local ) ) { return place ; } } return null ; }"
"void testSameBid ( ) { my_item. addBid ( my_bidder_1, 30000 ) ; my_item. addBid ( my_bidder_2, 20000 ) ; assertEquals ( ""Diaz"", my_item. getHighBidder ( ). getName ( ) ) ; assertTrue ( 30000.00 == my_item. getHighBid ( ) ) ; }"
List getClassificationDetails ( ) { final List < ClassificationDetails > classificationDetails = new ArrayList < ClassificationDetails > ( ) ; for ( int i = 0 ; i < classificationDetails. size ( ) ; i ++ ) { classificationDetails. add ( classificationDetails. get ( i ) ) ; } return classificationDetails ; }
"boolean isJspPrecompile ( HttpServletRequest request ) { String ip = request. getRemoteAddr ( ) ; return ( ip. startsWith ( ""http://"" ) && ip. indexOf ( ""jsp_precompile"" ) == - 1 ) ; }"
"String valueOf ( byte [ ] seq , char separator ) { if ( seq == null ) { return null ; } StringBuffer buff = new StringBuffer ( ) ; for ( int i = 0 ; i < seq. length ; i ++ ) { buff. append ( valueOf ( seq [ i ], separator ) ) ; } return buff. toString ( ) ; }"
"void setUp ( int width , int height , int x_loc , int y_loc ) { frameWidth = width ; frameHeight = height ; x = x_loc ; y = y_loc ; }"
"String getAuthToken ( HttpSession session ) { String authToken = ( String ) session. getAttribute ( ""authToken"" ) ; authToken = EncryptionUtil. decrypt ( authToken ) ; return authToken ; }"
"void setGlobalError ( SessionContext sessionContext , String message ) { String statusMessage = ""Error "" + message ; sessionContext. set ( ""error"", statusMessage ) ; }"
"void waitOn ( Object lock , long timeout ) { synchronized ( lock ) { try { lock. wait ( timeout ) ; } catch ( InterruptedException e ) { } } }"
String getXMLText ( final Node n ) { if ( n == null ) { return null ; } return getText ( n. getFirstChild ( ) ) ; }
"Employee findEmployee ( ) { Employee emp = new Employee ( ) ; emp. set ( ID, UUID. randomUUID ( ). toString ( ) ) ; emp. set ( NAME, ""Name-"" + emp. getName ( ) ) ; return emp ; }"
void setWhiteBalanceHoldCurrent ( ) { whiteBalance = - 1 ; whiteBalanceHoldCurrent = whiteBalance ; }
void checkJoined ( ) { if (! joined ) throw new FederateNotExecutionMember ( lrc ) ; joined = true ; }
"boolean saveAccountVatin ( @ Nonnull UUID accountId , @ Nonnull VATINRsc vatinRsc , Tenant tenant ) { try { return tenant. saveAccountVatin ( accountId, vatinRsc ) ; } catch ( Exception e ) { LOG. error ( ""Failed to save VAT ID in account: "" + accountId, e ) ; return false ; } }"
"T assertNotNull ( T value , String assertMessage , Object ... args ) { if ( value == null ) { throw new IllegalArgumentException ( String. format ( assertMessage, args ) ) ; } return value ; }"
"USHierarchy parentNodeAtLevel ( USHierarchy anObject , int aLevel ) { if ( aLevel < 0 ) { return anObject ; } while ( aLevel > 1 ) { aLevel -- ; USHierarchy h = anObject. parent ( ) ; if ( h!= null ) { return h ; } } return anObject ; }"
"T getEnum ( String value ) { if ( value == null ) return getDefaultEnum ( ) ; return Enum. valueOf ( _enumClass, value ) ; }"
"FSImageCompression createCompression ( Configuration conf , String codecClassName ) { Class <? extends CompressionCodec > codecClass = conf. getClass ( codecClassName ) ; return createCompression ( conf, codecClass ) ; }"
Date asExactJavaDate ( ) { long ms = time. getMillis ( ) ; return new Date ( m_date. getTime ( ) + ms ) ; }
"List < V > createNewListIfAbsent ( Map < K , List < V >> map , K key ) { List < V > list = map. get ( key ) ; if ( list == null ) { list = new ArrayList < V > ( ) ; map. put ( key, list ) ; } return list ; }"
byte [ ] writeUnsignedITF8 ( final int value ) { final byte [ ] ret = new byte [ 4 ] ; ret [ 0 ] = ( byte ) ( value >>> 24 ) ; ret [ 1 ] = ( byte ) ( value >>> 16 ) ; ret [ 2 ] = ( byte ) ( value >>> 8 ) ; ret [ 3 ] = ( byte ) value ; return ret ; }
void recordTimeInterval ( ) { if ( isRunning ( ) ) stopRecordingTimeInterval ( ) ; if ( recordingTimeInterval == null ) { recordingTimeInterval = currentTime ( ) ; } else { recordingTimeInterval = currentTime ( ) - startTime ; } startTime = System. currentTimeMillis ( ) ; }
"void pathValueToPixel ( Path path ) { pathValueToPixel ( path, path. getExtent ( ) ) ; pathValueToPixel ( path. getExtentX ( ), path. getExtentY ( ) ) ; pathValueToPixel ( path. getExtentZ ( ), path. getExtentW ( ), path. getExtentZ ( ) ) ; }"
boolean skipNewlines ( ) { while ( next!= null ) { if ( next. charAt ( ) == '|n' ) { return false ; } next = next. charAt ( ) ; } return true ; }
"void getAllFields ( final Class < ? > c , final Collection < Field > fields ) { if ( c == null ) { return ; } while ( c!= null ) { fields. addAll ( Arrays. asList ( c. getDeclaredFields ( ) ) ) ; c = c. getSuperclass ( ) ; } }"
String getShortName ( ) { String className = getClass ( ). getName ( ) ; int lastDotIndex = className. lastIndexOf ( '.' ) ; return ( lastDotIndex!= - 1? className. substring ( lastDotIndex + 1 ) : className ) ; }
"JSONObject getRegistrationInformation ( ) { JSONObject info = new JSONObject ( ) ; info. put ( ""email"", email ) ; info. put ( ""region"", region ) ; info. put ( ""regionName"", regionName ) ; info. put ( ""state"", state ) ; return info ; }"
void closeStdout ( ) { redirectedStdOut = null ; stdout = null ; }
"int getMinResultObject ( IResultObject [ ] objects , int length ) { int min = Integer. MAX_VALUE ; for ( int i = 0 ; i < length ; i ++ ) { min = Math. min ( objects [ i ]. getMinResultObject ( ), min ) ; } return min ; }"
F getAction ( String name ) { if ( name == null ) return null ; return actions. get ( name ) ; }
String getPricingValue ( ) { String priceValue = null ; if ( m_content!= null ) { try { priceValue = m_content. getPricingValue ( ) ; } catch ( Exception e ) { } } return priceValue ; }
"String replaceFirst ( String string , String oldString , String newString ) { for ( int i = 0 ; i < string. length ( ) ; i ++ ) { if ( oldString. indexOf ( string. charAt ( i ) ) >= 0 ) { return string. substring ( 0, i ) + newString ; } } return string ; }"
T fromAmf ( final ByteArrayInputStream amf ) { final ByteArrayInputStream in = new ByteArrayInputStream ( amf. getBytes ( ) ) ; final AMF3Parser parser = new AMF3Parser ( ) ; return parser. parse ( in ) ; }
"void handleAPIFaultForAxisservice ( APIFaultException e , String namespace , String namespaceprefix , MessageContext msgContext ) { String faultPayload = getFaultPayload ( e, namespace, namespaceprefix ). toString ( ) ; axisServiceFaultHandler. handle ( faultPayload, msgContext ) ; }"
"boolean isValidRegexPattern ( final String pattern ) { try { if ( pattern!= null ) { Pattern. compile ( pattern ) ; return true ; } } catch ( final PatternSyntaxException exception ) { LOGGER. debug ( ""Pattern [{}] is not a valid regex."", pattern ) ; } return false ; }"
"void setParameterValue ( PreparedStatement statement , int i , int type , String value ) { if ( type == Types. VARCHAR ) statement. setString ( i, value ) ; else statement. setString ( i, type, value ) ; }"
Peptide getHighScorePeptide ( ) { if ( highScorePeptide == null ) { return null ; } else { return highScorePeptide ; } }
EventSourceDTO getEventSource ( String eventSourceName ) { if ( eventSourceName!= null ) { for ( EventSourceDTO eventSourceDTO : eventSources ) { if ( eventSourceDTO. getName ( ). equals ( eventSourceName ) ) { return eventSourceDTO ; } } } return null ; }
"RuntimeException translateIfNecessary ( RuntimeException rawException , PersistenceExceptionTranslator pet ) { if ( translatedException!= null ) { return translatedException ; } RuntimeException translate = pet. translate ( rawException ) ; if ( translate!= null ) { return translate ; } return rawException ; }"
"void addEventHandler ( final EventTypes event , final Class < ? extends IEventHandler > eventHandler ) { EventCommandData eventCommandData = new EventCommandData ( eventHandler ) ; eventCommandData. setHandlerClass ( eventHandler ) ; eventHandlers. get ( event ). add ( eventCommandData ) ; }"
"String createTableCellElementId ( String prefix , String columnId , Context context ) { StringBuffer result = new StringBuffer ( ) ; result. append ( prefix ) ; result. append ( '-' ) ; result. append ( columnId ) ; return result. toString ( ) ; }"
byte [ ] toByteArray ( String ascii ) { if ( ascii == null ) { return EMPTY_BYTE_ARRAY ; } return fromAscii ( ascii. toCharArray ( ) ) ; }
"String getImageUrl ( XmlPullParser parser ) { parser. require ( XmlPullParser. START_TAG, ns, ""href"" ) ; String url = parser. getAttributeValue ( null, ""href"" ) ; if ( url == null ) { url = """" ; } else { url = url ; } parser. require ( XmlPullParser. END_TAG, ns, ""href"" ) ; return url ; }"
T getIdentity ( T pObj ) { if ( null == pObj ) { return null ; } IdentityVisitor lVisitor = new IdentityVisitor ( ) ; pObj. accept ( lVisitor ) ; return lVisitor. get ( ) ; }
"boolean putMapNotEmptyKeyAndValue ( Map < String , String > map , String key , String value , String defaultValue ) { if ( map == null || social. life. cn. util. StringUtils. isEmpty ( key ) ) { return false ; } map. put ( key, social. life. cn. util. StringUtils. isEmpty ( value )? defaultValue : value ) ; return true ; }"
"void parsesIncomingXmlDocumentComment ( ) { final String comment = ""hello, world!"" ; MatcherAssert. assertThat ( doc. comment ( ), Matchers. equalTo ( comment ) ) ; MatcherAssert. assertThat ( doc. nodes ( ""/*"" ). get ( 0 ). value ( ), Matchers. equalTo ( comment ) ) ; MatcherAssert. assertThat ( doc. nodes ( ""/*"" ). get ( 0 ). value ( ), Matchers. equalTo ( comment ) ) ; }"
"void updateLastCommitSeqno ( ReplDBMSHeader header , long appliedLatency ) { if ( header. getReplDBMSVersion ( ) == 1 ) { lastCommitSeqno = header. getSeqno ( ) ; } else if ( header. getReplDBMSVersion ( ) == 2 ) { lastCommitSeqno = header. getSeqno ( ) + 1 ; } header. setLastCommitSeqno ( appliedLatency ) ; }"
"String formatElapseTime ( final long seconds ) { final long hours = seconds / HOURS_MIL ; final long minutes = seconds / MINUTES_MIL ; final long seconds = seconds - ( hours * HOURS_MIL ) ; return String. format ( ""%02d:%02d:%02d"", hours, minutes, seconds ) ; }"
void updateContainingBlockInfo ( ) { if ( isChest ) { _blockInfo = null ; _blockID = null ; _metaData = null ; } if ( _isChest ) { if ( _blockID!= 0 ) { _blockInfo = _metaData. clone ( ) ; } } }
"String getWinnerMessage ( ) { if ( whiteCount == blackCount ) { return ""It's a tie."" ; } else { String winner = ( whiteCount > blackCount )? ""White"" : ""Black"" ; return winner + "" wins!"" ; } }"
"void setDataDomainInRoute ( Route route , String dataDomain ) { if ( dataDomain == null ) { route. setAttribute ( ""dataDomain"", """" ) ; } else { route. setAttribute ( ""dataDomain"", dataDomain ) ; } }"
"String returnDate ( Date date ) { if ( date == null ) return """" ; return dateFormat. format ( date ) ; }"
AsteriskQueueImpl getQueueByName ( String queueName ) { AsteriskQueueImpl queue = null ; for ( AsteriskQueueImpl queue : queues ) { if ( queue. getQueueName ( ). equals ( queueName ) ) { queue = queue ; break ; } } return queue ; }
void primaryServer ( ServerSessionManager server ) { unregisterFactories ( ) ; if ( server!= null ) { registerFactories ( server ) ; } }
List < String > getDateList ( ) { Collections. sort ( dateList ) ; return dateList ; }
"long roundTripTime ( long timeout , TimeUnit unit ) { if ( latch. await ( timeout, unit ) ) { return received - sent ; } else { return - 2 ; } }"
"long [ ] toLongs ( long data , int length ) { if ( data == 0 ) { return null ; } long [ ] res = new long [ length ] ; for ( int i = 0 ; i < length ; i ++, data ++ ) { res [ i ] = toLong ( data ) ; } return res ; }"
TripStatistics getTripStatistics ( ) { tripStatistics = new TripStatistics ( ) ; return tripStatistics ; }
"void toArray ( long l , byte [ ] b , int offset ) { b [ offset ++ ] = ( byte ) ( ( l >>> 24 ) & 0xFF ) ; b [ offset ++ ] = ( byte ) ( ( l >>> 16 ) & 0xFF ) ; b [ offset ++ ] = ( byte ) ( ( l >>> 8 ) & 0xFF ) ; b [ offset ] = ( byte ) ( l & 0xFF ) ; }"
"void getMetaTags ( HTMLMetaTags metaTags , Node node , URL currURL ) { for ( Iterator < HTMLMetaTags > iter = metaTags. getAllTags ( ). iterator ( ) ; iter. hasNext ( ) ; ) { HTMLMetaTags tag = iter. next ( ) ; String key = tag. getName ( ) ; String value = tag. getValue ( ) ; if ( value!= null &&! value. equals ( currURL. toString ( ) ) ) { robotsMeta. put ( key, value ) ; } } }"
"void testServiceOptions ( ) { EnumSet < Service. ServiceOption > expected = EnumSet. of ( Service. ServiceOption. PERSISTENCE, Service. ServiceOption. REPLICATION, Service. ServiceOption. OWNER_SELECTION, Service. ServiceOption. INSTRUMENTATION ) ; assertThat ( service. getOptions ( ), is ( expected ) ) ; }"
void beginDrawing ( ) { Canvas canvas = graphicsFactory. getCurrentCanvas ( ) ; if ( canvas!= null ) { canvas. beginDraw ( ) ; } }
HalfEdgeTriangleMesh fromMesh ( ITriangleMesh mesh ) { HalfEdgeTriangleMeshFactory factory = new HalfEdgeTriangleMeshFactory ( ) ; factory. setMesh ( mesh ) ; return factory. createHalfEdgeTriangleMesh ( mesh ) ; }
"void parseLitePalConfiguration ( ) { try { LitePalParser ltpParser = new LitePalParser ( ) ; ltpParser. setInput ( new FileInputStream ( LitePalConfiguration. LITEP_INPUT_FILE ), null ) ; } catch ( FileNotFoundException e ) { e. printStackTrace ( ) ; } catch ( XmlPullParserException e ) { e. printStackTrace ( ) ; } }"
"byte [ ] encodeBitmap ( Bitmap bitmap , int quality ) { ByteArrayOutputStream stream = new ByteArrayOutputStream ( ) ; bitmap. compress ( Bitmap. CompressFormat. JPEG, quality, stream ) ; return stream. toByteArray ( ) ; }"
"float rotateAnchor ( float u , float v ) { switch ( mRotation ) { case 0 : return u ; case 1 : return 1 - v ; case 2 : return 1 - u ; case 3 : return 1 - v ; case 4 : return 1 ; } throw new IllegalStateException ( ) ; }"
int [ ] getGpsStatusExtras ( Intent intent ) { if ( intent == null ) return null ; int [ ] extras = intent. getIntArrayExtra ( GPS_STATUS_EXTRAS ) ; return extras ; }
"void printFormattedPayload ( ) { printFormattedHeader ( ) ; for ( int i = 0 ; i < payload. length ; i ++ ) { printFormattedPayload ( i, payload [ i ] ) ; } }"
"void setTimestamp ( PreparedStatement p , int pos , DateFormat format , String value ) { if ( value == null ) { return ; } Timestamp dt = getTimestamp ( value, format ) ; if ( dt == null ) { p. setLong ( pos, - 1 ) ; return ; } p. setTimestamp ( pos, dt ) ; }"
"List < Allele > getAlleles ( ) { ArrayList < Allele > alleles = new ArrayList < Allele > ( values. size ( ) ) ; for ( int i = 0 ; i < values. size ( ) ; i ++ ) { alleles. add ( new Allele ( values. get ( i ), values. get ( i ) ) ) ; } return alleles ; }"
T getUnsecuredClient ( ) { lock. lock ( ) ; try { int size = clients. size ( ) ; if ( size > 0 ) { unsecuredClient = clients. remove ( size - 1 ) ; } return unsecuredClient ; } finally { lock. unlock ( ) ; } }
boolean isSep ( ) { if ( sep == null ) { return true ; } else { return sep ; } }
V valueOf ( OptionSpec < V > option ) { Option <? > [ ] values = option. getValues ( ) ; return values == null? null : values [ 0 ] ; }
int hashCode ( ) { int hash = 17 ; hash = 31 * hash + ( _lockHolder!= null? _lockHolder. hashCode ( ) : 0 ) ; hash = 31 * hash + ( _lockExpiration!= null? _lockExpiration. hashCode ( ) : 0 ) ; return hash ; }
Iterator getChildren ( ) { if ( children == null ) { return Collections. EMPTY_LIST. iterator ( ) ; } else { return children. iterator ( ) ; } }
boolean isNormalFormC ( String str ) { int len = str. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char c = str. charAt ( i ) ; if ( c < 0 || c > 0x7f ) { return false ; } } return true ; }
"void testDistinctFunc ( ) { Map < String, String > map = new HashMap < > ( ) ; Assert. assertTrue ( map. containsKey ( ""one"" ) ) ; Map < String, String > map2 = new ConcurrentHashMap < > ( ) ; map2. put ( ""one"", ""two"" ) ; Assert. assertTrue ( map2. containsKey ( ""one"" ) ) ; Map < String, String > map = new ConcurrentHashMap < > ( ) ; map2. put ( ""one"", ""two"" ) ; Assert. assertTrue ( map2. containsKey ( ""two"" ) ) ; Assert. assertTrue ( map. containsKey ( ""two"" ) ) ; }"
"String getOption ( int code ) { for ( int i = 0 ; i < options. length ; i ++ ) { if ( options [ i ]. getCode ( ) == code ) { return options [ i ]. getValue ( ) ; } } return """" ; }"
boolean isAvailable ( ) { boolean result = false ; if ( timeSlot < maxTimeSlot ) { result = true ; } return result ; }
ArrayList < String > loadFile ( String fileName ) { ArrayList < String > als = new ArrayList < String > ( ) ; FileInputStream fis = new FileInputStream ( fileName ) ; ArrayList < String > line = new ArrayList < String > ( ) ; while ( ( line = fis. readLine ( ) )!= null ) als. add ( line ) ; fis. close ( ) ; return als ; }
"void setUp ( ) { tester = new Rented ( new Customer ( ""Testing"", ""Customer"", ""12-3456"" ) ) ; mgr = new NuxCarRental ( ) ; }"
"void dragStart ( Activity activity , float x , float y , long downTime ) { MotionEvent event = MotionEvent. obtain ( downTime, downTime, x, y, MotionEvent. ACTION_DOWN ) ; dispatchTouchEvent ( event ) ; }"
"InetAddress toInetAddress ( ) { byte [ ] addressBytes = { ( byte ) ( 0xff & ( address [ 0 ] ) ), ( byte ) ( 0xff & ( address [ 1 ] ) ), ( byte ) ( 0xff & ( address [ 2 ] ) ) } ; try { return InetAddress. getByAddress ( addressBytes ) ; } catch ( UnknownHostException e ) { return null ; } }"
String exceptionInfo ( Throwable throwable ) { StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; throwable. printStackTrace ( pw ) ; return sw. toString ( ) ; }
Double getMass ( int bin ) { if ( bin * 2 == data. length / 2 ) return data [ bin * 2 + 1 ] ; return data [ bin * 2 + 1 ] ; }
"Map < String , String > getParamsMap ( ) { final Map < String, String > map = new HashMap < String, String > ( ) ; for ( final Entry < String, String > param : params. entrySet ( ) ) { map. put ( param. getKey ( ), param. getValue ( ) ) ; } return map ; }"
String readString ( ) { int strLen = lengthOfCurrentString ( ) ; char [ ] stringChars = new char [ strLen ] ; for ( int i = 0 ; i < strLen ; i ++ ) { stringChars [ i ] = ( char ) bytes [ streamPosition ++ ] ; } moveToFourByteBoundry ( ) ; return new String ( stringChars ) ; }
boolean isSleeping ( ) { if ( status == Status. SLEEPING ) return true ; else return false ; }
void defaultConfiguration ( ) { s_aRWLock. writeLock ( ). lock ( ) ; try { s_aConfig. load ( ) ; } finally { s_aRWLock. writeLock ( ). unlock ( ) ; } }
int getSimSlotById ( int id ) { SIMInfo simInfo = mAllSimInfoMap. get ( id ) ; return ( simInfo == null )? - 1 : simInfo. mSlot ; }
boolean addClass ( String name ) { if ( classes == null ) { classes = new Vector < String > ( ) ; } classes. addElement ( name ) ; return classes. size ( ) > 0 ; }
"boolean clearBit ( AtomicInteger i , int mask ) { boolean nextBit = true ; while ( nextBit ) { int current = i. get ( ) ; if ( ( current & mask ) == 0 ) { return false ; } nextBit = current & ( ~ mask ) ; } return nextBit ; }"
STElementType getPtType ( ) { if ( ptType == null ) { return STElementType. NORM ; } else { return ptType ; } }
"void deleteNoChildren ( Node parent , boolean parentsLeftChild ) { parent. removeChild ( parent. getLeftChild ( ) ) ; if ( parentsLeftChild ) { parent. getLeftChild ( ). removeChild ( parent ) ; } else { parent. getRightChild ( ). removeChild ( parent ) ; } }"
boolean isProgressStyle ( Notification notification ) { if ( notification!= null && notification instanceof AlertNotification ) { return ( ( AlertNotification ) notification ). isProgressStyle ( ) ; } return false ; }
int deleteMin ( ) { if ( isEmpty ( ) ) return - 1 ; int minItem = findMin ( ) ; array [ 1 ] = array [ currentSize -- ] ; percolateDown ( 1 ) ; return minItem ; }
"void setReverseSort ( final int index ) { checkLocked ( ) ; if ( index < 0 || index >= comparatorChain. size ( ) ) throw new IllegalArgumentException ( ""Invalid index"" ) ; comparatorChain. set ( index, new Comparator ( ) { @ Override public int compare ( Object o1, Object o2 ) { return ( index - 1 ) * o2. compareTo ( o1 ) ; } } ) ; }"
"float [ ] ensureCapacity ( int additionalCapacity ) { int sizeNeeded = size + additionalCapacity ; if ( sizeNeeded > items. length ) resize ( Math. max ( 8, sizeNeeded ) ) ; return items ; }"
Parameters getDayDemoTestEncoderParams ( ) { Parameters p = new Parameters ( ) ; p. setMode ( Parameters. Mode. DAY_OF_WEEK ) ; p. setDayOfWeek ( true ) ; return p ; }
"boolean jdk13Enabled ( ) { try { Class. forName ( ""java.security.AccessController"" ) ; return true ; } catch ( ClassNotFoundException e ) { return false ; } }"
"void newCall ( Call call , ProtocolControlFrame recvCallFrame ) { call. setAck ( true ) ; sendAck ( call, recvCallFrame ) ; }"
"URI buildUri ( String uri ) { if ( uri. startsWith ( ""http"" ) ) { return new URI ( uri ) ; } else if ( uri. startsWith ( ""https"" ) ) { return new URI ( uri ) ; } else { return new URI ( uri ) ; } }"
float furthestDistance ( final Rectangle r ) { final float w = Math. abs ( w - r. w ) ; final float h = Math. abs ( h - r. h ) ; return ( float ) Math. sqrt ( w * w + h * h ) ; }
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
void saveChunk ( Chunk par1Chunk ) { if ( par1Chunk == null ) { saveEmptyChunk ( ) ; } else { chunks. add ( par1Chunk ) ; } lastSaveTime = System. currentTimeMillis ( ) ; }
"Filter retypeFilter ( Filter filter , FeatureTypeMap typeMap ) { FilterFactory2 ff = new FilterFactory2 ( ) ; ff. setFilterClass ( typeMap. getFilterClass ( ) ) ; ff. setFilterId ( filter. getFilterId ( ) ) ; return ff ; }"
boolean hasScheme ( StringBuffer uri ) { int len = uri. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char c = uri. charAt ( i ) ; if ( c == ':' ) { return i > 0 ; } else if (! Character. isLetterOrDigit ( c ) && ( c!= '+' && c!= '-' && c!= '.' ) ) { return false ; } } return false ; }
void removeContact ( String username ) { for ( int i = 0 ; i < users. size ( ) ; i ++ ) { if ( users. get ( i ). getUsername ( ). equals ( username ) ) { users. remove ( i ) ; } } }
"Map < String , String > getSpiralInput ( ) { String [ ] keyArray = { ""Spiral"", ""Spiral"" } ; Map < String, String > spiralInput = new HashMap < String, String > ( ) ; for ( String key : keyArray ) { if ( key. contains ( ""="" ) ) { spiralInput. put ( key. split ( ""="" ) [ 1 ], key. split ( ""="" ) [ 2 ] ) ; } } return spiralInput ; }"
ArrayList < Hashtags_Entity > getHashtags ( ) { if ( hashtags == null ) { hashtags = new ArrayList < Hashtags_Entity > ( ) ; } return hashtags ; }
"void packTriggerConditionsInBundle ( Bundle bundle , TriggerConditions conditions ) { bundle. putBoolean ( R. string. trigger_conditions_key, true ) ; bundle. putBoolean ( R. string. trigger_conditions_value, false ) ; if ( conditions!= null ) { bundle. putBoolean ( R. string. trigger_conditions_key, conditions ) ; } }"
D getVehiclePropertyValue ( VehiclePropertyType < D > vehicleProperty ) { if ( vehicleProperty == null ) return null ; return vehicleProperties. get ( vehicleProperty ) ; }
"ITreeNode getChild ( int index , ELVisitor visitor ) { if ( fCurrentNode == null ) return null ; ITreeNode child = fCurrentNode. getChild ( index ) ; if ( child!= null ) { visitor. visit ( child ) ; } return child ; }"
Registry lookupRegistry ( int port ) { registry = LocateRegistry. getRegistry ( port <= 0? Registry. REGISTRY_PORT : port ) ; return registry ; }
"File platformIndependentUriToFile ( final URI fileURI ) { try { return new File ( fileURI. getSchemeSpecificPart ( ), fileURI. getPath ( ) ) ; } catch ( final URISyntaxException e ) { throw new RuntimeException ( e ) ; } }"
"void setLabelText ( String labelText ) { if ( labelText. contains ( "":"" ) ) { String [ ] pair = labelText. split ( "":"", 2 ) ; if ( pair. length == 2 ) { labelText = pair [ 0 ] + "":"" + pair [ 1 ] ; } } else { labelText = labelText ; } }"
"void initField ( int fldno , int type , int length , String name ) { int offset = fldno * fieldsize + name. length ( ) ; if ( offset > fldno ) { fldno = ( fldno - 1 ) * fieldsize ; } data. setInt ( fldno, type ) ; data. setInt ( fldno + 1, length ) ; data. setString ( name, offset ) ; }"
"String getClassName ( String className ) { int classNameEnd = className. length ( ) - CLASS_EXTENSION. length ( ) ; return className. substring ( 0, classNameEnd ) ; }"
"HttpResponse executeGET ( String request , String ... params ) { ensureOpen ( ) ; HttpGet httpGet = new HttpGet ( buildURL ( request, params ) ) ; HttpResponse response = httpGet. execute ( ) ; verifyStatus ( response ) ; return response ; }"
String formatISO8601Date ( Date date ) { try { return iso8601DateFormat. print ( date ) ; } catch ( RuntimeException ex ) { throw handleException ( ex ) ; } }
"void startTabSwitchLatencyTiming ( final TabSelectionType type ) { if ( DEBUG ) Log. d ( TAG, ""startTabSwitchLatencyTiming"" ) ; tabSwitchLatencyCounters. put ( type, new Long ( 0 ) ) ; }"
"void sendCommandOPEN ( final Socket sk , final String command ) { final PrintWriter out = new PrintWriter ( sk. getOutputStream ( ) ) ; out. println ( command ) ; out. close ( ) ; }"
"Group makeNewRandomGroup ( Client client ) { String name = UUID. randomUUID ( ). toString ( ) ; Group group = client. getGroup ( name ) ; Log. debug ( ""New group: "" + name ) ; return group ; }"
void skipSpaces ( ) { for ( ; ; ) { switch ( current ) { default : return ; case 0x20 : case 0x09 : case 0x0D : } current = reader. read ( ) ; } }
java . util . List < Attribute > getAttributes ( ) { if ( attributes == null ) { attributes = new com. amazonaws. internal. ListWithAutoConstructFlag < Attribute > ( ) ; attributes. setAutoConstruct ( true ) ; } return attributes ; }
"Label createLabel ( Composite comp , String text ) { Label l = new Label ( comp, SWT. NONE ) ; l. setText ( text ) ; return l ; }"
"void setGreaterThan1DampingRatio ( ) { DistanceJoint dj = new DistanceJoint ( b1, b2, new Vector2 ( 1.0, 2.0 ), new Vector2 ( - 3.0, 0.5 ) ) ; dj. setDampingRatio ( 2.0 ) ; }"
java . util . List < TagDescription > getTags ( ) { if ( tags == null ) { tags = new com. amazonaws. internal. ListWithAutoConstructFlag < TagDescription > ( ) ; tags. setAutoConstruct ( true ) ; } return tags ; }
"String getAssetNameGlobal ( String url ) { String assetName = null ; assetName = url. split ( ""/"" ) [ 3 ]. split ( ""|."" ) [ 0 ] ; return WordUtils. capitalize ( assetName ) ; }"
"void setWildcard ( final String field , final Long value ) { if ( value!= null ) { final MapWriter mapWriter = getWildcardWriter ( field ) ; LOG. trace ( ""Parsed wildcard field: {}, as long: {}"", field, value ) ; final VarCharWriter w = mapWriter. varChar ( cleanExtensions. get ( field ) ) ; writeString ( w, value. toString ( ) ) ; } }"
"Collection < Track > getTopTracks ( String country , String apiKey ) { Result result = Caller. getInstance ( ). call ( ""geo.getTopTracks"", apiKey, ""country"", country ) ; return ResponseBuilder. buildCollection ( result, Track. class ) ; }"
"SourceAccountingLine createNewAccountingLineForDocument ( DistributionOfIncomeAndExpenseDocument document ) { SourceAccountingLine sourceAccountingLine = new SourceAccountingLine ( ) ; String documentContent = document. getContent ( ) ; if (! documentContent. equals ( """" ) ) { sourceAccountingLine. setContent ( documentContent ) ; } return sourceAccountingLine ; }"
"Topic createTopic ( String topicId ) { try ( TopicAdminClient topicAdminClient = TopicAdminClient. create ( ) ) { TopicName topicName = TopicName. create ( projectId, topicId ) ; Topic topic = topicAdminClient. createTopic ( topicName ) ; return topic ; } }"
int getScaleForType ( PrimitiveTypeInfo typeInfo ) { switch ( typeInfo. getPrimitiveCategory ( ) ) { case DECIMAL : return ( ( DecimalTypeInfo ) typeInfo ). scale ( ) ; case FLOAT : return 7 ; case DOUBLE : return 15 ; case BYTE : case SHORT : case INT : case LONG : case VOID : return 0 ; default : return HiveDecimal. SYSTEM_DEFAULT_SCALE ; } }
"boolean initAsync ( XWalkInitListener listener , Context context ) { if ( ThreadUtils. runningOnUiThread ( ) ) return false ; init ( listener, context ) ; return true ; }"
"XYSeries toXYSeries ( ) { XYSeries xySeries = new XYSeries ( mTitle ) ; for ( int i = 0 ; i < mValues. size ( ) ; i ++ ) { double value = mValues. get ( i ) ; xySeries. add ( i + 1, value, mColors. get ( i ), mExplains. get ( i ) ) ; } return xySeries ; }"
"void testFindall ( ) { Log. level4Debug ( ""Testing DriverOperations.findall()"" ) ; DriverOperations instance = new DriverOperations ( ) ; assert ( instance. findAll ( ""USB|VID_XXXX&PID_XXXX"" ). contains ( """" ) ) ; }"
void testAddNewBrand ( ) { Brand brand = new Brand ( ) ; brandDao. addBrand ( brand ) ; EasyMock. expectLastCall ( ). times ( 1 ) ; replay ( brandDao ) ; brandServiceImpl. addBrand ( brand ) ; verify ( brandDao ) ; }
"RepositoryCommit addCommit ( String repository , String branch , RevCommit commit ) { RepositoryCommit commitModel = new RepositoryCommit ( repository, branch, commit ) ; if ( commits. add ( commitModel ) ) { authorCount = - 1 ; return commitModel ; } return null ; }"
boolean isLine ( ) { if ( surface. getType ( )!= org. newdawn. loaders. ac3d. AC3DSurface. POLYGON ) { return true ; } else { return false ; } }
"void writeOneAttribute ( String name , Object value ) { if ( value instanceof Boolean ) value = ( ( Boolean ) value ). booleanValue ( )? ""1"" : ""0"" ; writer. write ( name ) ; writer. write ('' ) ; writer. write ( value. toString ( ) ) ; writer. write ( '|n' ) ; }"
Implementors getInstance ( ) { if ( fgInstance == null ) { fgInstance = new Implementors ( ) ; } return fgInstance ; }
"void fireSelectedEndEvent ( int sourceNode , ElemTemplateElement styleNode , String attributeName , XPath xpath , XObject selection ) { if ( hasTraceListeners ( ) ) { Node source = getDOMNodeFromDTM ( sourceNode ) ; fireSelectedEndEvent ( new SelectionEvent ( m_transformer, source, styleNode, attributeName, xpath, selection ) ) ; } }"
String readSingle ( ) { String line = reader. readLine ( ) ; return line ; }
void showZoomUI ( float maxZoom ) { SwingUtilities. invokeLater ( new Runnable ( ) { public void run ( ) { showZoomUI ( maxZoom ) ; } } ) ; }
boolean isServiceEnabled ( XMPPConnection connection ) { try { DiscoverInfo result = ServiceDiscoveryManager. getInstanceFor ( connection ). discoverInfo ( connection ) ; return result. containsFeature ( AMPExtension. NAMESPACE ) ; } catch ( XMPPException e ) { return false ; } }
"double toDouble ( Datum datum , final double defaultValue ) { if ( datum instanceof Number ) { return ( ( Number ) datum ). doubleValue ( ) ; } return defaultValue ; }"
void nextPage ( ) { if ( _currPage < _total ) { _currPage ++ ; } else if ( _currPage > _total ) { _currPage = _total ; } }
"void releaseLocalIdOnDisk ( String localId ) { MapEntry entry = getMapEntry ( localId ) ; if ( entry. retainCount == 0 ) { localIdMap. remove ( localId ) ; } else { localIdMap. put ( localId, entry. retainCount - 1 ) ; } }"
boolean isPoint ( ) { double d = max - min ; double d1 = Math. abs ( d ) ; double d2 = Math. abs ( d ) ; double d3 = Math. abs ( d ) ; double d4 = Math. abs ( d ) ; if ( d1 > d2 || d1 < d3 || d2 > d4 ) { return false ; } return true ; }
"boolean getBooleanProperty ( final String name , final boolean defaultValue ) { final String prop = getStringProperty ( name ) ; if ( prop!= null ) { return Boolean. parseBoolean ( prop ) ; } return defaultValue ; }"
boolean hasDuplicates ( ) { if ( _vector. size ( ) > 1 ) { for ( int i = 0 ; i < _vector. size ( ) - 1 ; i ++ ) { if ( _vector. get ( i )!= _vector. get ( i + 1 ) ) { return true ; } } } return false ; }
boolean hasNext ( ) { if ( m_hasNext == null ) { close ( ) ; m_hasNext = null ; } return m_hasNext ; }
void setVector ( Coords v ) { x = v. x ; y = v. y ; z = v. z ; }
"void checkWithDefinition ( ) { Matrix22 m1 = new Matrix22 ( 1.0, 2.0 ) ; Matrix22 m2 = new Matrix22 ( 1.0, 2.0 ) ; m1. setMaximumSize ( 4 ) ; m2. setMaximumOrder ( 3 ) ; Matrix22 m3 = new Matrix22 ( 0.0, 2.0 ) ; m3. setLowerOrder ( 1 ) ; m3. setUpperOrder ( 2 ) ; m3. setUpperOrder ( 3 ) ; assertEquals ( 4.0, m1. upperOrder ( ) ) ; assertEquals ( 5.0, m1. lowerOrder ( ) ) ; }"
"int getZeroTerminatedByteLength ( byte [ ] bytes , int offset ) { int i ; for ( i = offset ; i < bytes. length ; i ++ ) { if ( bytes [ i ] == 0 ) { break ; } } return i - offset ; }"
boolean isPlayerHoldingWrench ( EntityPlayer player ) { if ( gameManager instanceof PlayerManager ) { return ( ( PlayerManager ) gameManager ). isHoldingWrench ( player ) ; } return false ; }
"float [ ] [ ] derivBasisFunctions ( float u , int grade ) { float [ ] [ ] functions = new float [ grade ] [ ] ; for ( int i = 0 ; i < grade ; i ++ ) { functions [ i ] = derivativeBasisFunctions ( u ) ; } return functions ; }"
List < Image > getSharedImages ( ) { List < Image > sharedImages = new ArrayList < Image > ( ) ; for ( Shelf s : getShelves ( ) ) { if (! s. isShared ( ) ) { sharedImages. add ( s. getImage ( ) ) ; } } return sharedImages ; }
SeedAlignmentData retrieveSeedAlignmentData ( Set < String > proteinIds ) { SeedAlignmentData seedAlignmentData = new SeedAlignmentData ( ) ; for ( String proteinId : proteinIds ) { seedAlignmentData. addProteins ( proteinId ) ; } return seedAlignmentData ; }
"List < String > getTestLabels ( ) { if ( ScriptFileTests. testScriptNames == null ) { throw new IllegalStateException ( ""Must initialize list of test names before creating tests."" ) ; } return ScriptFileTests. testScriptNames ; }"
"ResultSet getTiemposBackup ( ) { String query = ""SELECT *FROM TB_TIEMPOS WHERE CODIGO IS NOT NULL"" ; ResultSet rset = db. ejecutar ( conn, query ) ; return rset ; }"
void mult2And ( int mask ) { for ( int i = 0 ; i <= coefficients. length ; i ++ ) { coefficients [ i ] = ( byte ) ( coefficients [ i ] & mask ) ; } }
boolean evaluateEnablement ( Expression expression ) { if ( expression!= null && expression. getType ( ) == ExpressionType. BOOLEAN ) { return ( ( Boolean ) expression ). booleanValue ( ) ; } return false ; }
"void navigateActionListener ( ActionEvent event ) { FacesContext context = FacesContext. getCurrentInstance ( ) ; Map map = context. getExternalContext ( ). getRequestParameterMap ( ) ; String [ ] attrName = ( String [ ] ) map. get ( ""f:attributes"" ) ; context. getExternalContext ( ). setAttribute ( attrName, null ) ; }"
void disposeFonts ( ) { for ( Iterator < Font > iter = m_FontMap. values ( ). iterator ( ) ; iter. hasNext ( ) ; ) iter. next ( ). dispose ( ) ; m_FontMap. clear ( ) ; for ( Iterator < Font > iter = m_FontToBoldFontMap. values ( ). iterator ( ) ; iter. hasNext ( ) ; ) iter. next ( ). dispose ( ) ; m_FontToBoldFontMap. clear ( ) ; }
"GTFSStop fromGTFS ( String line ) { String [ ] parts = line. split ( "","" ) ; return new GTFSStop ( parts [ 0 ], parts [ 1 ], Integer. parseInt ( parts [ 2 ] ) ) ; }"
"Set < T > intersectSets ( final Set < T > set1 , final Set < T > set2 ) { final Set < T > result = new HashSet < T > ( ) ; result. addAll ( set1 ) ; result. removeAll ( set2 ) ; return ( result ) ; }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
boolean isRunning ( ) { try { return Driver. isRunning ( ) ; } catch ( Exception e ) { return false ; } }
"void onBaseMoving ( ) { if ( game. getRound ( ). getY ( ) == 0 ) { baseCenterX = game. getWidth ( ) - 2 ; baseCenterY = game. getHeight ( ) - 2 ; } else if ( game. getRound ( ). getX ( ) == 0 && game. getRound ( ). getY ( ) == 0 ) { baseCenterX = game. getWidth ( ) - 2 ; baseCenterY = game. getHeight ( ) - 2 ; } game. setRotation ( baseCenterX, baseCenterY ) ; }"
"XMLElement createXMLElement ( String elementName , String namespace ) { XMLElement result = null ; if ( namespace!= null ) { result = new XMLElement ( elementName, namespace ) ; } else { result = new XMLElement ( elementName ) ; } return result ; }"
GramlabProject getProject ( File f ) { GramlabProject ret = null ; if ( f. isDirectory ( ) ) { File [ ] files = f. listFiles ( ) ; if ( files!= null && files. length > 0 ) { ret = new GramlabProject ( files [ 0 ] ) ; } else { ret = getProject ( f ) ; } } return ret ; }
"Number getValue ( final int a_row , final int a_column ) { final String key = a_row + ""_"" + a_column ; final Number result = m_data. get ( key ) ; if ( result == null ) { if ( m_data. containsKey ( a_row ) ) { result = m_data. get ( a_row ) ; } else { result = NumberUtils. getDouble ( m_data. get ( a_row ), key ) ; } } return result ; }"
String [ ] getNameProjection ( ) { String [ ] nameProjection = { PhoneNumber. FORMAT_NAME } ; return nameProjection ; }
void generateStateToken ( ) { byte [ ] randomBytes = new byte [ 16 ] ; randomBytes [ 0 ] = ( byte ) ( random. nextLong ( ) & 0xFF ) ; randomBytes [ 1 ] = ( byte ) ( random. nextLong ( ) & 0xFF ) ; randomBytes [ 2 ] = ( byte ) ( random. nextLong ( ) & 0xFF ) ; randomBytes [ 3 ] = ( byte ) ( random. nextLong ( ) & 0xFF ) ; secureStateToken ( randomBytes ) ; }
"String getAdjustedProperty ( HttpServletRequest request , String property ) { String retVal = request. getParameter ( property ) ; request. setAttribute ( property, retVal ) ; return retVal ; }"
String getActualProperty ( ) { String actual = command. getName ( ) ; return actual ; }
"byte [ ] convertToByteArray ( long n ) { n = n ^ ( ( int ) ( n >>> 32 ) ) ; byte [ ] key = new byte [ 8 ] ; packLong ( n, key, 0 ) ; return key ; }"
"float calculateValue ( byte source , float scaleMin , float scaleMax , float byteRangeMin , float byteRangeMax ) { float multiplier = ( ( source & 0xff ) << 24 ) + ( ( scaleMax - scaleMin ) / ( byteRangeMax - byteRangeMin ) ) ; return multiplier * ( scaleMin + scaleMax ) / ( byteRangeMax - byteRangeMin ) ; }"
void loadRotate ( float rot ) { float [ ] rotMatrix = new float [ 6 ] ; rotMatrix [ 0 ] = rot ; rotMatrix [ 1 ] = rot ; rotMatrix [ 2 ] = rot ; rotMatrix [ 3 ] = rot ; }
"String getClientWebSocketProtocol ( String request ) { String [ ] headers = request. split ( ""  "" ) ; String wsProtocol = """" ; for ( int i = 0 ; i < headers. length ; i ++ ) { if ( headers [ i ]. contains ( ""WebSocket-Protocol"" ) ) { wsProtocol = ( headers [ i ]. split ( "":"" ) [ 1 ] ). trim ( ) ; break ; } } return wsProtocol ; }"
"ModelAndView hiController ( ) { ModelAndView mv = new ModelAndView ( ""hiController"" ) ; return mv ; }"
"String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"void addCell ( int row , int col , Cell c ) { if ( cellMap. containsKey ( row ) ) { cellMap. get ( row ). add ( col, c ) ; } else { List < Cell > list = new ArrayList < Cell > ( ) ; list. add ( c ) ; cellMap. put ( row, list ) ; } }"
"TreeMap < Date , Double > getPerformanceOverTime ( ) { HashMap < Date, Double > percentOverTime = new TreeMap < Date, Double > ( ) ; for ( Map. Entry < Date, Integer > dateEntry : map. entrySet ( ) ) { if ( dateEntry. getValue ( ) >= 100 ) { percentOverTime. put ( dateEntry. getKey ( ), 100.0 ) ; } else { percentOverTime. put ( dateEntry. getKey ( ), 1.0 ) ; } } return percentOverTime ; }"
int toGreyScale ( int argb ) { int alpha = ( ( argb >> 24 ) & 0xFF ) | ( ( argb >> 16 ) & 0xFF ) ; return ( int ) ( alpha * 255 ) ; }
"ScoreFunction toFunction ( QueryShardContext context ) { if ( functions. length == 0 ) { return null ; } for ( int i = 0 ; i < functions. length ; i ++ ) { ScoreFunction fn = functions [ i ]. toFunction ( context ) ; if ( fn!= null ) { return fn ; } } throw new RuntimeException ( ""Function not found"" ) ; }"
boolean isAlphaNumeric ( String token ) { try { Long. parseLong ( token ) ; } catch ( NumberFormatException nfe ) { return false ; } return true ; }
"void clearCache ( @ Nonnull final ClassLoader aClassLoader ) { ValueEnforcer. notNull ( aClassLoader, ""ClassLoader"" ) ; m_aRWLock. writeLock ( ). lock ( ) ; try { if ( m_aResourceBundleBundles. isEmpty ( ) ) return ; for ( final String sKey : m_aResourceBundleBundles. keySet ( ) ) m_aResourceBundleBundles. remove ( sKey ) ; } finally { m_aRWLock. writeLock ( ). unlock ( ) ; } }"
"String getFromCompressedUnicode ( final byte [ ] string , final int offset , final int len ) { try { return new String ( string, offset, len, ""ISO-8859-1"" ) ; } catch ( UnsupportedEncodingException e ) { throw new InternalError ( ) ; } }"
"void testSerialization ( ) { CategoryAxis a1 = new CategoryAxis ( ""Test Axis"" ) ; a1. setTickLabelPaint ( ""C1"", new GradientPaint ( 1.0f, 2.0f, Color. red, 3.0f, 4.0f, Color. white ) ) ; CategoryAxis a2 = ( CategoryAxis ) TestUtilities. serialised ( a1 ) ; assertEquals ( a1, a2 ) ; }"
void setForkJoinConcurrency ( int count ) { ForkJoinConcurrency. count = count ; Set < Thread > list = Executors. newSetHashMap ( ) ; for ( int i = 0 ; i < count ; i ++ ) { list. add ( new Thread ( ) { @ Override public void run ( ) { test ( ) ; } } ) ; } }
void removeRequestObserver ( RequestObserverVersion1 observer ) { RequestObserverWrapper wrapper = new RequestObserverWrapper ( observer ) ; requestObserverMap. remove ( wrapper ) ; }
"String readTemplateContents ( String templateFilePath , final Map < String , String > variables ) { String contents = template ( templateFilePath ) ; if ( variables!= null ) { for ( String key : variables. keySet ( ) ) { contents = contents. replaceAll ( key, variables. get ( key ) ) ; } } return contents ; }"
int read16Bit ( ) { int result = 0 ; for ( int i = 0 ; i < 2 ; i ++ ) { int b = readByte ( ) ; result |= ( b & 0x01 ) << ( i * 8 ) ; } return result ; }
"void markAllCellsAsEditable ( ) { for ( int r = 0 ; r < SUDOKU_SIZE ; r ++ ) { for ( int c = 0 ; c < SUDOKU_SIZE ; c ++ ) { Cell cell = getCell ( r, c ) ; cell. setEditable ( false ) ; } } }"
"void addVertex ( String identifier , Component component , String ... edges ) { Vertex node = new Vertex ( identifier, component ) ; for ( String edge : edges ) node. addEdge ( edge ) ; vertexMap. put ( identifier, node ) ; }"
"void testCreateSpriteBombGameObject ( ) { Sprite bombSprite = factory. createSprite ( bomb ) ; assertNotNull ( bombSprite ) ; assertEquals ( BOMB, bombSprite. getGameObject ( ) ) ; testImagesEqual ( bombSprite, ""resources/Bomb.png"" ) ; }"
"void createClassDeclaration ( ) { out. write ( ';' ) ; out. write ( packageName ) ; out. write ( '(' ) ; for ( int i = 0 ; i < classes. size ( ) ; i ++ ) { out. write ( classes. get ( i ). getName ( ) ) ; if ( i < classes. size ( ) - 1 ) { out. write ( ',' ) ; } } out. write ( ')' ) ; }"
"Cipher getCipher ( byte [ ] key , byte [ ] iv , int mode ) { Cipher cipher = Cipher. getInstance ( ""Blowfish/ECB/PKCS5Padding"" ) ; cipher. init ( Cipher. ENCRYPT_MODE, key, new IvParameterSpec ( iv ) ) ; return cipher ; }"
Book findBook ( String bookName ) { for ( Book i : books ) { if ( i. getName ( ). equals ( bookName ) ) { return i ; } } return null ; }
