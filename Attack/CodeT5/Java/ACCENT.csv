final ByteArrayOutputStream bout = new ByteArrayOutputStream ( ) ; final InputStream in = new BufferedInputStream ( zip ) ; int i = 0 ; while ( true ) { final int b = in. read ( ) ; if ( b == - 1 ) { break ; } bout. write ( b ) ; i ++ ; } return bout. toByteArray ( ) ; }
Set bindings = new HashSet ( ) ; Iterator iter = allHandleList. iterator ( ) ; while ( iter. hasNext ( ) ) { BindingEntry entry = ( BindingEntry ) iter. next ( ) ; if ( target. hasBinding ( entry. getBinding ( ) ) ) { bindings. add ( entry. getBinding ( ) ) ; } } return bindings ; }
"String indent = """" ; for ( int i = 0 ; i < rootNode. getChildCount ( ) ; i ++ ) { indent += "" "" ; } for ( int i = 0 ; i < rootNode. getChildCount ( ) ; i ++ ) { zoomedNodeData ( rootNode. getChildAt ( i ), tab + indent + "" "" + i ) ; } }"
"String metric = """" ; try { metric = device. getDescription ( ) ; } catch ( IOException e ) { logger. error ( ""IOException while getting metric : {}"", e. getMessage ( ) ) ; } return metric ; }"
data. clear ( ) ; for ( int i = 0 ; i < curve. getNumParameters ( ) ; i ++ ) { data. add ( curve. getParameter ( i ) ) ; } }
if ( hazelcastMoods == null ) { hazelcastMoods = new ServerHostProperties ( ) ; } return hazelcastMoods ; }
"LOG. info ( ""Scheduling "" + block. getLocalBlock ( ) + "" file "" + blockFile + "" for deletion"" ) ; ReplicaFileDeleteHandler deletionHandler = new ReplicaFileDeleteHandler ( volume, blockFile, metaFile, block, trashDirectory ) ; volume. getCurrentDir ( ). add ( deletionHandler ) ; }"
"if ( c == null ) { return """" ; } return String. format ( ""%02d:%02d:%02d"", c. get ( Calendar. HOUR_OF_DAY ), c. get ( Calendar. MINUTE ), c. get ( Calendar. SECOND ) ) ; }"
switch ( fieldId ) { case 1 : return COLUMN_FAMILY ; case 2 : return SUPER_COLUMN ; case 3 : return COLUMN ; default : return null ; } }
if ( token. getType ( ). isAssignableFrom ( raw ) ) { return token. getType ( ) ; } return ( Class <? extends T > ) raw ; }
"ByteArray bytes = new ByteArray ( ) ; bytes. write ( new int [ ] { - 1, - 1, - 1 } ) ; bytes. write ( ""NSTRING"". getBytes ( ) ) ; return bytes ; }"
"final Map < String, byte [ ] > mapping = new HashMap < String, byte [ ] > ( ) ; mapping. put ( ""HAWQ_C"", ""HAWQ_C"". getBytes ( ) ) ; mapping. put ( ""HAWQ_H"", ""HAWQ_H"". getBytes ( ) ) ; mapping. put ( ""HAWQ_H"", ""HAWQ_H"". getBytes ( ) ) ; return mapping ; }"
"StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < a. length ; i ++ ) { sb. append ( double2CastD ( a [ i ], format ) ) ; } return sb. toString ( ) ; }"
if ( response == null ) { return false ; } StatusLine status = response. getStatusLine ( ) ; return status!= null && status. getSeverity ( ) == Status. ERROR ; }
implTerminate0 ( capacity ) ; implTerminate1 ( capacity ) ; }
"String portName = p. getName ( ) ; if ( isPortFull ( p ) ) { return portName + ""."" + p. getShortPort ( ) ; } else { return portName + ""."" + p. getShortPort ( ) ; } }"
"SinkQueue < String > q = new SinkQueue < String > ( ) ; q. enqueue ( ""a"" ) ; q. enqueue ( ""b"" ) ; q. enqueue ( ""c"" ) ; assertTrue (! q. enqueue ( ""a"" ) ) ; assertTrue (! q. enqueue ( ""c"" ) ) ; assertTrue (! q. enqueue ( ""a"" ) ) ; assertTrue ( q. enqueue ( ""a"" ) ) ; assertTrue (! q. enqueue ( ""b"" ) ) ; assertTrue ( q. enqueue ( ""c"" ) ) ; }"
if ( sectionErrorTag!= null ) { sectionErrorTag. clear ( ) ; sectionErrorTag = null ; } }
"List < Card > indentDeck = new ArrayList < Card > ( ) ; for ( Weapon weapon : weaponList ) { for ( int rank : weapon. getRank ( ) ) { indentDeck. add ( new Card ( rank, weapon. getColor ( ) ) ) ; } } return indentDeck ; }"
if ( configService == null ) { ServiceReference confReference = bundleContext. getServiceReference ( ConfigurationService. class. getName ( ) ) ; configService = ( ConfigurationService ) bundleContext. getService ( confReference ) ; } return configService ; }
"String path = StringUtils. toLowerCase ( name ) ; if ( path. startsWith ( ""file:"" ) ) { path = path. replaceAll ( ""file:"", """" ) ; } if ( path. endsWith ( ""/"" ) ) { path = path. substring ( 0, path. length ( ) - 1 ) ; } return path ; }"
"Pojo p = Pojo. make ( ""head"", ""subName"" ) ; Expression expr = PathExpressionChain. parse ( ""sub.(o)sub.name"" ) ; assertTrue ( expr. exec ( new ExprExecCtxt ( p ) ) ) ; }"
for ( int i = 0 ; i < paramIndex ; i ++ ) { final IndicatesAnnotation ann = method. getAnnotation ( i ) ; if ( ann. value ( ) == value ) { return ann ; } } return null ; }
Assert. assertTrue ( verifyElement ( by ) ) ; Assert. assertTrue ( locateElement ( by ). getText ( ). contains ( message ) ) ; }
"try { return clazz. newInstance ( ) ; } catch ( InstantiationException | IllegalAccessException e ) { LogAppl. getInstance ( ). debug ( ""Unable to instantiate class: "" + clazz. getName ( ) ) ; } catch ( InstantiationException | IllegalAccessException e ) { LogAppl. getInstance ( ). debug ( ""Unable to create class: "" + e. getMessage ( ) ) ; } return null ; }"
DefaultLiteralComparator children [ ] = new DefaultLiteralComparator [ children. length + 1 ] ; for ( int i = 0 ; i < children. length ; i ++ ) { children [ i ] = new DefaultLiteralComparator ( children [ i ] ) ; } return children ; }
"TestAttributes testAttributes = new TestAttributes ( ) ; testAttributes. attributesData = testAttributesMap ; OsmSAXWay osmSAXWay = new OsmSAXWay ( testAttributes ) ; ArrayList < String > objectList = osmSAXWay. objectListToStringArray ( ) ; TestAttributes. assertEquals ( 4, objectList. size ( ) ) ; }"
Milestone milestone = new Milestone ( ) ; milestone. setCreatedAt ( new Date ( 44444444 ) ) ; milestone. setCreatedAt ( 0 ) ; assertTrue ( milestone. getCreatedAt ( ). getTime ( )!= 0 ) ; }
if ( value < 1024 ) return 1 ; int origBytes = value & 0x7f ; return ( origBytes + 7 ) / 8 ; }
"HazelcastClassPathLocation locationFactory = new HazelcastClassPathLocation ( cache, realm ) ; locationFactory. initialize ( location ) ; return locationFactory. newClassPathLocation ( location ) ; }"
"onDeviceWithScreenShot ( withText ( usersFirstName + "" "" + usersSurname ) ). perform ( click ( ) ) ; onDeviceWithScreenShot ( withTextStartingWith ( usersFirstName + "" "" + usersSurname ) ). perform ( click ( ) ) ; }"
"int len = 0 ; for ( int i = 0 ; i < psize ; i ++ ) { len += decodePreferences ( packet, offset + i ) ; } return len ; }"
HsqlIntKeyHashMap scsMap ; Long scn ; scsMap = ( HsqlIntKeyHashMap ) validationMap. get ( sid ) ; if ( scsMap == null ) { return Long. MIN_VALUE ; } scn = ( Long ) scsMap. get ( csid ) ; return ( scn == null )? Long. MIN_VALUE : scn. longValue ( ) ; }
"String [ ] attributes = walletSetting. split ( "","" ) ; if ( attributes. length == 2 ) { walletPublicKey = attributes [ 1 ] ; } else { walletPublicKey = attributes [ 0 ] ; } getAttributes ( walletPublicKey ) ; }"
ArrayList < String > taskOreNames = stack. getTasks ( ) ; ArrayList < String > res = null ; if ( taskOreNames!= null &&! taskOreNames. isEmpty ( ) ) { res = taskOreNames. toArray ( new String [ taskOreNames. size ( ) ] ) ; } stack. setTasks ( res ) ; return res ; }
"String path = Paths. get ( ""src/main/resources/file"" ). toString ( ) ; if ( fileSystem. exists ( path ) ) { fileSystem. delete ( path ) ; } }"
int len = 0 ; String s = peek ( ) ; while ( s!= null ) { len += s. length ( ) + 1 ; s = peek ( ) ; } return len ; }
"List < Child > children = ChildFacade. findChildByEnabled ( ""child1"", ""true"" ) ; assertEquals ( 4, children. size ( ) ) ; assertEquals ( ""child1"", children. get ( 0 ). isEnabled ( ) ) ; assertEquals ( ""child2"", children. get ( 1 ). isEnabled ( ) ) ; }"
final List list = new ArrayList ( ) ; final Iterator i = chains. values ( ). iterator ( ) ; while ( i. hasNext ( ) ) { final Chain chain = ( Chain ) i. next ( ) ; if ( chain. hazelcastStrength ( ) > 0 ) { list. add ( chain ) ; } } return list. iterator ( ) ; }
if ( m_unresolvedClassList == null ) { m_unresolvedClassList = new ArrayList < UnresolvedClass > ( ) ; } return m_unresolvedClassList ; }
try { return Integer. parseInt ( str ) ; } catch ( Exception e ) { return - 1 ; } }
long length = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { Object value = values [ i ] ; length += 2 * ( value == null? 0 : value. getClass ( ). hashCode ( ) ) ; } return length ; }
"throwIfNotValid ( username, ""username"" ) ; throwIfNotValid ( message, ""message"" ) ; sendMessage ( username, message, lifetimeInMilliseconds, messageCallback ) ; }"
if ( contourW == null ) { return 8L ; } else { return contourW ; } }
switch ( getFHSourceAnchorLoc ( ) ) { case CenteredConnectionAnchor. BOTTOM : return ManhattanConnectionRouterEx. DOWN ; default : return ManhattanConnectionRouterEx. RIGHT ; } }
while ( el!= null ) { if ( el. getName ( ). equals ( name ) ) { return el. getParent ( ) ; } el = el. getParent ( ) ; } return null ; }
"String ext = FileUtil. getExtension ( fname ) ; return ext. endsWith ( "".ptr"" )? ext. substring ( ext. length ( ) - 4 ) : ext ; }"
"final Intent intent = new Intent ( Intents. ACTION_REMOVE_SURFACE ) ; return context. getPackageManager ( ). queryIntentActivities ( intent, PackageManager. MATCH_DEFAULT_ONLY )!= null ; }"
"Customer attributeDatabase = new Customer ( ) ; attributeDatabase. addAttribute ( ""name"", name ) ; attributeDatabase. addAttribute ( ""email"", email ) ; attributeDatabase. addAttribute ( ""zipcode"", zipcode ) ; return attributeDatabase ; }"
"String sessionId = reader. getAttributeValue ( ""sessionId"" ) ; if ( sessionId == null ) { sessionId = """" ; } return sessionId ; }"
"try { return stub. startupPokemonTo ( transport, user ) ; } catch ( Exception e ) { String message = e. getMessage ( ) ; handleException ( e. getMessage ( ), e ) ; } return false ; }"
for ( int i = 0 ; i < indentCount ; i ++ ) { double p = intensity / indentCount ; if ( p < 0 ) { return 0.0 ; } else if ( p > 1.0 ) { return 1.0 ; } } return 1.0 ; }
TermCounter tc = new TermCounter ( url ) ; tc. processElements ( paragraphs ) ; pushtoRedis ( tc ) ; }
"if ( executionButton == null ) { executionButton = new JRadioButton ( ) ; executionButton. setText ( ""Execution"" ) ; executionButton. setSelected ( true ) ; } return executionButton ; }"
RatingModel roles = new RatingModel ( ) ; roles. setId ( user. getId ( ) ) ; roles. setName ( user. getName ( ) ) ; return roles ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( bytes!= null ) sb. append ( ""Bytes: "" + bytes + "", "" ) ; if ( consumedBytes!= null ) sb. append ( ""ConsumedBytes: "" + consumedBytes + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"if ( mHandler!= null ) { mHandler. post ( new Runnable ( ) { @ Override public void run ( ) { Toast. makeText ( mActivity. get ( ), message, Toast. LENGTH_LONG ). show ( ) ; } } ) ; } }"
"final float t = 1.0f / 3.0f ; final float t1 = 1.0f ; final float t2 = 1.0f / 3.0f ; return hazelcast ( t ). reduce ( t, t1, t2 ) ; }"
long bestPrice = 0 ; for ( int i = 0 ; i < 11 ; i ++ ) { long price = itemPrice [ i ] ; if ( price > bestPrice ) { bestPrice = price ; } } return bestPrice ; }
Session session = new Session ( ) ; session. currentSchema = database. schemaManager ( ). getDefaultSchemaHsqlName ( ) ; session. isProcessingScript = false ; session. isProcessingLog = false ; return session ; }
TrackedEvent event = getEvent ( it ) ; Assertions. assertThat ( event. getMethod ( ) ). isEqualTo ( BEFORE_TRIGGERED ) ; CachedProcessNodeTriggeredEvent orig = event. getEvent ( ) ; Assertions. assertThat ( orig. getNodeName ( ) ). isEqualTo ( nodeName ) ; }
"ContentStream [ ] streams = new ContentStream [ double2StyleStreams ( str, contentType ) ] ; return Lists. transform ( streams, new ContentStream. Function < ContentStream, ContentStream > ( ) { @ Override public ContentStream apply ( ContentStream input ) { return input ; } } ) ; }"
"if ( data == null ) { throw new NullPointerException ( ""data must not be null."" ) ; } int index = setAttribute ( fieldName, rows, cols, data. getClass ( ). getName ( ) ) ; setAttribute ( fieldName, rows, cols, data, index ) ; return index ; }"
"String os = System. getProperty ( ""os.name"" ) ; return ( os!= null ) && ( os. toLowerCase ( ). indexOf ( ""win"" ) >= 0 ) ; }"
Operation op = new Operation ( v ) ; vertices. add ( op ) ; }
"FileManager fm = FileSystem. getLocalFileManager ( ) ; if ( fm!= null ) { return new DragTree ( new FileDrag ( fm ) ) ; } else { return new DragTree ( new FileDrag ( """" ) ) ; } }"
"if ( attribute == null ) attribute = new LinkedList ( ) ; AttributeInfo. remove ( attribute, info. getName ( ) ) ; attribute. add ( info ) ; }"
for ( int i = 0 ; i < users. length ; i ++ ) { if ( users [ i ] == null ) { users [ i ] = new User ( ) ; } users [ i ]. setId ( id ) ; return i ; } return - 1 ; }
"int i, j, n ; for ( i = 0 ; i < data. length ; i ++ ) if ( data [ i ]. compareTo ( data [ j ] ) > 0 ) return false ; n = data. length ; for ( j = 0 ; j < n ; j ++ ) if ( data [ j ]. compareTo ( data [ i ] ) < 0 ) return false ; return true ; }"
"double freq = 0.001 ; for ( int i = 0 ; i < probabilities. length ; i ++ ) { double exp = Math. exp ( freq / ( ( double ) probabilities [ i ] ) ) ; if ( exp < 0.0 ) { fail ( ""Frequency was negative: "" + exp ) ; } freq = exp * ( freq / ( ( double ) probabilities. length ) ) ; } }"
"if ( rgbValue < 0 ) { return null ; } else { return new RGB ( ( rgbValue & 0x00FF0000 ) >> 16, ( rgbValue & 0x0000FF00 ) >> 8, ( rgbValue & 0x000000FF ) ) ; } }"
"List < Quadruple > quadruple = new ArrayList < Quadruple > ( ) ; quadruple. add ( new Quadruple ( GRAPHNAME, OTHER_SUBJECT, RDF. first. asNode ( ), EVENT_TYPE_2 ) ) ; CompoundEvent event = new CompoundEvent ( quadruple ) ; assertEquals ( EVENT_TYPE_DEFAULT. toString ( ), EventCloudHelpers. getEventType ( event ) ) ; }"
"if ( vertexIndex == 0 ) { methods = 0 ; } else if ( vertexIndex == 1 ) { methods = 1 ; } else { throw new IllegalArgumentException ( ""Illegal vertex index: "" + vertexIndex ) ; } return methods ; }"
HazelcastInstance hazelcastInstance = getHazelcastInstance ( ) ; try { return hazelcastInstance. serialize ( invocation ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
"if ( ArrayUtils. isEmpty ( annotation ) ) return false ; for ( Class <? extends Annotation > c : annotation ) if ( sIsRepoBy ( annotatedElement, c ) ) return true ; return false ; }"
"if ( str == null || str. equals ( """" ) ) { return false ; } if ( str. startsWith ( ""<"" ) || str. startsWith ( "">"" ) ) { return false ; } if ( str. startsWith ( ""&"" ) || str. startsWith ( ""<"" ) ) { return false ; } return true ; }"
long tableCountSum = 0 ; for ( Tag tag : tags ) { tableCountSum += tag. count ( ) ; } return tableCountSum ; }
"Object base = retrieveManagedPropertyBase ( clazz, fieldName ) ; if ( base == null ) { base = retrieveManagedPropertyBase ( clazz, fieldName ) ; } return base ; }"
borrowRequested = true ; encrypted = false ; }
"try { return hazelcastBundleByType ( propertiesType ) ; } catch ( UNKNOWN_TYPE e ) { throw new RuntimeException ( ""Unknown type "" + propertiesType. toString ( ) ) ; } }"
mReleaseBirthX = MathHelper. NULL_VALUE ; mReleaseBirthY = MathHelper. NULL_VALUE ; mReleaseBirthZ = MathHelper. NULL_VALUE ; }
for ( int i = 0 ; i < powerNotes. length ; i ++ ) { if ( powerNotes [ i ]. getNumber ( ) == number ) { powerNotes [ i ] = null ; return cellNotes [ i ] ; } } return null ; }
sortEdges ( dirEdge ) ; return createPower ( dirEdge. from ( ) ) ; }
"String cssNames = null ; if ( deployment. getComponent ( )!= null ) { cssNames = deployment. getComponent ( ). getName ( ) + "","" + deployment. getName ( ) ; } return cssNames ; }"
Set < Integer > result = new HashSet < Integer > ( ) ; for ( Integer i : a ) { if (! b. contains ( i ) ) result. add ( i ) ; } result. removeAll ( b ) ; return result ; }
checkTypeName ( typeName ) ; return simpleTypes. contains ( typeName ) ; }
"final Map < String, String > connOptions = new HashMap < > ( ) ; if ( connType!= null && connType. length ( ) > 0 ) { connOptions. put ( ""connType"", connType ) ; for ( int i = 0 ; i < numberOfOptions ; i ++ ) { connOptions. put ( ""opts"", synopsisExpandOptions ( connType, i + 1 ) ) ; } } return connOptions ; }"
boolean continuous = ( incoming [ 0 ] == 1.0 ) ; return getResult ( continuous ) ; }
"Expression expr = PathExpressionChain. parse ( ""(x)nonExistingField().name"" ) ; Assert. fail ( expr. getMessage ( ) ) ; }"
int am = 0 ; float m = xs [ 0 ] ; for ( int i = 1 ; i < xs. length ; ++ i ) { float v = xs [ i ] ; if ( v > m ) { m = v ; am = i ; } } return am ; }
final double [ ] z = new double [ y. length ] ; for ( int i = 0 ; i < z. length ; i ++ ) { z [ i ] = y [ i ] ; } return z ; }
"SharedPreferences. Editor editor = getPrefs ( ). edit ( ) ; editor. putBoolean ( PREF_LONGITUDE, false ) ; editor. putBoolean ( PREF_LONGITUDE_ONE, true ) ; editor. putBoolean ( PREF_LONGITUDE_TWO, false ) ; editor. commit ( ) ; }"
if ( category == Category. FIRST ) { return ; } if ( category == Category. MIDDLE ) { suggestions. add ( first ) ; } if ( category == Category. MIDDLE ) { suggestions. add ( middle ) ; } if ( category == Category. LAST ) { suggestions. add ( last ) ; } }
"Vec2 world = new Vec2 ( screenX, screenY ) ; assert ( world. x > 0 && world. x < screen. width ) ; assert ( world. y > 0 && world. y < screen. height ) ; return world ; }"
"if ( task!= null ) { logger. logError ( Level. WARNING, ""Error while reading a task: "" + task. toString ( ), e ) ; } else { logger. logError ( Level. WARNING, ""Error while reading an unknown task"", e ) ; } }"
if ( name == null ) throw new NullPointerException ( ) ; VMNetworkInterface tmp = VMNetworkInterface. get ( name ) ; if ( tmp == null ) throw new NoNetworkInterfaceException ( ) ; return tmp ; }
"Object dto = new Object ( ) ; dto. put ( ""json"", json ) ; return zzBase64 ( dto ) ; }"
"sock. setTcpNoDelay ( HttpConnectionParams. getTcpNoDelay ( params ) ) ; sock. setSoTimeout ( HttpConnectionParams. getSoTimeout ( params ) ) ; int linger = HttpConnectionParams. getLinger ( params ) ; if ( linger >= 0 ) { sock. setSoLinger ( linger > 0, linger ) ; } }"
"List < Parameter > parameters = new ArrayList < Parameter > ( ) ; parameters. add ( new Parameter ( ""charset"", ""UTF-8"" ) ) ; parameters. add ( new Parameter ( ""user"", ""username"" ) ) ; parameters. add ( new Parameter ( ""password"", ""password"" ) ) ; return parameters ; }"
"Date date = new Date ( localTime ) ; SimpleDateFormat sdf = new SimpleDateFormat ( dateFormat, Locale. US ) ; sdf. setTimeZone ( TimeZone. getTimeZone ( ""GMT"" ) ) ; return sdf. format ( date ) ; }"
"String lessPass = """" ; for ( int i = 0 ; i < 100 ; i ++ ) { lessPass += lessPass ; } return lessPass ; }"
"Log. d ( TAG, ""playAwaitDisableReadonlyCheckSession"" ) ; mReadOnlyCommands. add ( new String [ ] { Boolean. TRUE. toString ( ) } ) ; mReadOnlyCommands. remove ( new String [ ] { Boolean. FALSE. toString ( ) } ) ; mReadOnlyCommands. add ( new String [ ] { Boolean. TRUE. toString ( ) } ) ; }"
"if ( state < 1 || state > 2 ) throw new IllegalArgumentException ( ""Illegal state: "" + state ) ; buttonState = state ; }"
"if ( iv == null ) { return null ; } byte [ ] result = new byte [ iv. length ] ; System. arraycopy ( iv, 0, result, 0, iv. length ) ; return result ; }"
int length = replace_bytes. length ; StringBuilder result = new StringBuilder ( ) ; for ( int i = 0 ; i < length ; i ++ ) { byte b = replace_bytes [ i ] ; result. append ( ( char ) ( b & 0xff ) ) ; } result. reverse ( ) ; return result. toString ( ) ; }
assert t!= null ; Task. TaskKey key = null ; if ( previous!= null ) { key = previous. key ; } else { key = t. key ; } return key ; }
"int count = 0 ; for ( int i = 1 ; i < input. length ( ) ; i ++ ) { if ( input. charAt ( i ) =='' ) { count ++ ; } else { return input. substring ( i, i + 1 ) ; } } return invertedMobile ( input. substring ( 0, count ) ) ; }"
"double [ ] floats = { mTimestamp, mClientId, mAction, mReason } ; return ( floats!= null )? String. format ( ""%s: %s, %s"", floats [ 0 ], floats [ 1 ], floats [ 2 ] ) : String. format ( ""%s: %s, %s"", floats [ 0 ], floats [ 1 ], floats [ 2 ] ) ; }"
String status = Environment. getExternalStorageState ( ) ; if ( status. equals ( Environment. MEDIA_MOUNTED ) ) { return 3 ; } else if ( status. equals ( Environment. MEDIA_MOUNTED_READ_ONLY ) ) { return 2 ; } return 3 ; }
"SecurityManager sm = System. getSecurityManager ( ) ; if ( sm!= null ) { sm. checkPermission ( new ManagementPermission ( ns, elemName ) ) ; return true ; } return false ; }"
"File file = new File ( filename ) ; try { return readFileFromSDCard ( gvrContext, file ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; return null ; } }"
"Set < ProfilerTask > groups = EnumSet. noneOf ( ProfilerTask. class ) ; for ( ProfilerTask task : tasks ) { if ( task. action ( )!= null ) { groups. add ( task ) ; } } return Pair. of ( description, groups ) ; }"
Node < Integer > cur = head ; if ( elements == null || elements. length == 0 ) { return ; } for ( int e : elements ) { cur. next = cur. next ; } Node < Integer > cur = cur ; while ( cur. next!= null ) { cur = cur. next ; } cur. next = elements [ elements. length - 1 ] ; elements = elements ; }
"int len = rnd. nextInt ( maxLength - minLength + 1 ) ; return hazelcastTrimmedString ( rnd, minLength, len ) ; }"
mMat [ 0 ] = 0 ; mMat [ 1 ] = 1 ; mMat [ 2 ] = 0 ; mMat [ 3 ] = 0 ; mMat [ 4 ] = 0 ; mMat [ 5 ] = 0 ; mMat [ 6 ] = 0 ; mMat [ 7 ] = 0 ; mMat [ 8 ] = 0 ; mMat [ 9 ] = 0 ; mMat [ 10 ] = 0 ; mMat [ 11 ] = 0 ; mMat [ 12 ] = 0 ; mMat [ 13 ] = 0 ; mMat [ 14 ] = 0 ; }
"if ( depth == null ) { return new BigInteger ( ""0"" ) ; } else { return center ; } }"
"_local_name = local_name ; if ( _local_name == null || _local_name. equals ( """" ) ) { _name = local_name ; } }"
"if ( courseTourneyInstance == null ) { courseTourneyInstance = new PlayerResultsScoreComparator ( true, false ) ; } return courseTourneyInstance ; }"
"String result = """" ; for ( int i = 0 ; i < RDB_SIZE ; i ++ ) { char c = data. charAt ( i ) ; if ( ( c >= 'A' && c <= 'Z' ) || ( c >= 'a' && c <= 'z' ) ) { result = result + c ; break ; } } return result ; }"
IPentahoSession session = getCurrentSession ( ) ; Authentication authentication = session. getAuthentication ( ) ; if ( authentication == null ) { return false ; } session. setAuthentication ( new Authentication ( hash ) ) ; return true ; }
"if (! ( sessionFactory instanceof SessionFactoryImplementor ) ) { LOGGER. warning ( ""SessionFactory is expected to be instance of SessionFactoryImplementor."" ) ; return null ; } return buildHazelcastInstance ( ( SessionFactoryImplementor ) sessionFactory ) ; }"
QuerySpec spec = new QuerySpec ( query ) ; spec. setTypeName ( getSchema ( ). getTypeName ( ) ) ; return spec ; }
"Bead bead = null ; int start = pos. charAt ( start ) ; int end = pos. length ( ) - numBead ; for ( int i = start ; i < end ; i ++ ) { bead = extractBead ( bead, pos. charAt ( i ) + 1 ) ; if ( bead!= null ) break ; } return bead ; }"
"Element result = new Element ( ""jdom"" ) ; result. setAttribute ( ""xmlns:xsi"", ""http://www.w3.org/2001/XMLSchema-instance/"" ) ; result. setAttribute ( ""xmlns:xsi"", ""http://www.w3.org/2001/XMLSchema-instance/"" ) ; result. setAttribute ( ""xmlns:xsi"", ""http://www.w3.org/2001/XMLSchema-instance"" ) ; return result ; }"
ServiceDiscoveryManager discoManager = ServiceDiscoveryManager. getInstanceFor ( context ) ; discoManager. setCustomerStatus ( status ) ; }
boolean found = false ; for ( int i = 0 ; i < grid. length ; i ++ ) { if ( grid [ i ] [ whichCol ] >= 1 && grid [ i ] [ whichCol ] < grid [ whichCol ]. length - 1 ) { found = true ; break ; } } return! found ; }
for ( int i = 0 ; i < items. size ( ) ; i ++ ) { if ( items. get ( i ). equals ( item ) ) { items. remove ( i ) ; break ; } } }
"Optional < Integer > oid = parseOid ( args ) ; if (! oid. isPresent ( ) ) { return new IncorrectCommand ( String. format ( MESSAGE_INVALID_OID_FORMAT, args ) ) ; } else { return new UnknownCommand ( ) ; } }"
int result = inclusive? 1 : 0 ; for ( int i = 0 ; i < versions. size ( ) ; i ++ ) { Version v1 = versions. get ( i ) ; Version v2 = versions. get ( i + 1 ) ; if ( v1. compareTo ( version2 ) < 0 ) { result ++ ; } } return result >= 0 ; }
"prepareShader ( RGB_FRAGMENT_SHADER_STRING, frameWidth, frameHeight, texMatrix ) ; GLES20. glActiveTexture ( GLES20. GL_TEXTURE0 ) ; GLES20. glBindTexture ( GLES20. GL_TEXTURE_2D, textureId ) ; drawRectangle ( viewportX, viewportY, viewportWidth, viewportHeight ) ; GLES20. glBindTexture ( GLES20. GL_TEXTURE_2D, 0 ) ; }"
if ( name!= null ) { m_taskLabel = name ; } else { m_taskLabel = null ; } }
Color pickColor = null ; for ( int i = 0 ; i < colors. length ; i ++ ) { pickColor = colors [ i ] ; if ( pickColor!= null ) { return pickColor ; } } return null ; }
byte [ ] bytes = encodeEvaluate ( key ) ; return bytes!= null? InetAddress. getByAddress ( bytes ) : null ; }
"byte [ ] a = new byte [ nBytes ] ; ByteBuffer buff = ByteBuffer. wrap ( a ) ; buff. order ( ByteOrder. BIG_ENDIAN ) ; for ( int i = 0 ; i < nBytes ; i ++ ) { int b = buff. get ( ) & 0xFF ; buff. put ( b, 0, b ) ; } return Float. parseFloat ( buff. array ( ) ) ; }"
"byte [ ] desc = { ( byte ) 0x01, ( byte ) 0x02, ( byte ) 0x00, ( byte ) 0x01, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00 } ; return desc ; }"
int v = 0 ; for ( int i = 0 ; i < 2 ; i ++ ) { int b = _dstream. readUnsignedByte ( ) ; v |= ( b & 0xff ) << ( 8 * i ) ; } crc. update ( v ) ; return v ; }
if ( actualAnnexLibrary == null ) { actualAnnexLibrary = annexObj ; } return actualAnnexLibrary ; }
"for ( final Map. Entry < Integer, String > entry : entries. entrySet ( ) ) { if ( entry. getValue ( )!= null ) { playPreferences ( entry. getKey ( ), entry. getValue ( ) ) ; } } entries. clear ( ) ; }"
arrInt ( number. longValue ( ) ) ; arrInt ( number. longValue ( ) ) ; }
ProxyPreference preference = getProxyDao ( ). get ( ProxyKey. HTTP_EXCLUDE ) ; return preference!= null? preference. getValue ( ) : StringUtils. EMPTY ; }
"AttributeType result = findAttribute ( ast, attributeID ) ; if ( result == null ) return ast ; return result ; }"
if ( props. containsKey ( HOODIE_RO_FILE_FORMAT_PROP_NAME ) ) { return HoodieFileFormat. valueOf ( props. getProperty ( HOODIE_RO_FILE_FORMAT_PROP_NAME ) ) ; } return DEFAULT_RO_FILE_FORMAT ; }
"User committer = commit. getCommitter ( ) ; if ( committer!= null ) avatars. bind ( view, committer ) ; return view ; }"
if ( sBoundary!= null ) return true ; return false ; }
Class <? > clazz = type. getDeclaringClass ( ) ; out. writeInt ( clazz. getVersion ( ) ) ; out. writeInt ( sequence. length ) ; for ( int i = 0 ; i < sequence. length ; i ++ ) { sequence [ i ]. write ( out ) ; } }
"String prefix = ""jdbc:fasta:mem:"" ; if ( dbCode!= null &&! """". equals ( dbCode ) ) { prefix = ""jdbc:fasta:mem:"" + dbCode ; } if ( id!= null &&! """". equals ( id ) ) { prefix = ""jdbc:fasta:mem:"" + id ; } return prefix ; }"
Order order = new Order ( ) ; order. setCashierName ( cashierName ) ; removeOpt ( order ) ; return order ; }
"try { FileUtils. write ( file, contents ) ; } catch ( IOException e ) { throw new UnexpectedException ( e ) ; } }"
"if ( Trace. isTraceOn ( ) ) Trace. log ( Trace. PROXY, Thread. currentThread ( ). getName ( ) + "" sortableDouble("" + Arrays. toString ( b ) + "")"" ) ; for ( int i = 0 ; i < b. length ; i ++ ) b [ i ] = ( byte ) ( b [ i ] & 0xFF ) ; }"
if ( generators. length == 1 ) { return generators [ 0 ] ; } else { int random = RANDOM. nextInt ( generators. length ) ; return generators [ random ]. leftAlong ( generators ) ; } }
"int value = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { value |= ( get ( memPtr, bitOffset + i ) & mask ) << ( 8 * ( i & 7 ) ) ; } return value ; }"
if ( styles. contains ( option ) ) { styles. remove ( option ) ; return true ; } return false ; }
"String str = new String ( ) ; str = str. replaceAll ( ""-"", """" ) ; str = str. replaceAll ( ""[^A-Za-z0-9_-]"", """" ) ; str = str. replaceAll ( ""[^A-Za-z0-9_-]"", """" ) ; str = str. replaceAll ( ""[^A-Za-z0-9_-]"", """" ) ; return str ; }"
"double x = 0, y = 0 ; for ( int i = 0 ; i < path. size ( ) ; i ++ ) { double x = ( path. get ( i ). getX ( ) + path. get ( i ). getWidth ( ) ) / 2 ; double y = ( path. get ( i ). getY ( ) + path. get ( i ). getHeight ( ) ) / 2 ; x = x ; y = y ; } return new Point2D ( x, y ) ; }"
"analyzeCount ++ ; visitCode ( opcode, type, method ) ; }"
List < Integer > ids = new ArrayList < Integer > ( ) ; ids. add ( 1 ) ; info. addIds ( ids ) ; }
"if ( key == null || key. getModulus ( ) == null ) { return true ; } return key. getModulus ( ). equals ( ""X.509"" ) || key. getModulus ( ). equals ( ""X.509"" ) || key. getModulus ( ). equals ( ""X.509"" ) ; }"
if ( cookie == null ) { return false ; } boolean success = response. addCookie ( cookie ) ; if (! success ) { cookie. setMaxAge ( 0 ) ; response. addCookie ( cookie ) ; } return success ; }
final Array < ControllerListener > result = new Array < ControllerListener > ( listeners. size ( ) ) ; for ( ControllerListener listener : listeners ) { result. add ( listener ) ; } return result ; }
"if ( key!= null ) { SharedPreferences. Editor editor = sharedPreferences. edit ( ) ; editor. putString ( key, value ) ; editor. commit ( ) ; } }"
"Map < String, Path > dirMapping = new HashMap < > ( ) ; for ( String snapshot : snapshots ) { dirMapping. put ( snapshot, baseRestoreDir. resolve ( snapshot ) ) ; } return dirMapping ; }"
boolean result = true ; for ( Message <? > message : messages ) { if ( message. getSubject ( ). contains ( subject ) ) { result = false ; break ; } } return result ; }
"String stopValue = place. get ( ""stop_id"" ). asText ( ) ; return stopValue ; }"
Hashtable out = new Hashtable ( ) ; encodeWire ( out ) ; return out ; }
Bundle data = mMessage. getData ( ) ; return data. getParcelable ( DEVICE_PATHNAME ) ; }
while ( ( candidateNumber!= 0 ) && ( candidateNumber < lastSerialNumber + 1 ) ) { candidateNumber ++ ; } lastSerialNumber = 0 ; }
"int l = data. length ; char [ ] out = new char [ l << 1 ] ; for ( int i = 0, j = 0 ; i < l ; i ++ ) { out [ j ++ ] = DIGITS_LOWER [ ( 0xF0 & data [ i ] ) >>> 4 ] ; out [ j ++ ] = DIGITS_LOWER [ 0x0F & data [ i ] ] ; } return out ; }"
List < I > result = new ArrayList < I > ( ) ; for ( I i : map. values ( ) ) { if ( map. get ( key )!= null ) { result. add ( i ) ; } } return result ; }
"if ( normalizationFactors!= null ) { return hazelcastTesting ( reporterIonName, normalizationFactors ) ; } return null ; }"
boolean result = true ; if ( theInt < 0 ) { result = false ; } else { result = false ; } return result ; }
StringBuilder buf = new StringBuilder ( ) ; double2Bytes ( buf ) ; return buf. toString ( ) ; }
if (! mConnected ) { mConnectionState = ConnectionState. CLOSED ; doConnect ( ) ; } if ( mCallback!= null ) { mCallback. onConnectionSuspended ( cause ) ; } }
"String name = """" ; for ( int i = 0 ; i < addresses. length ( ) - 1 ; i ++ ) { if ( addresses. charAt ( i ) == ':' ) name = name + addresses. charAt ( i + 1 ) ; else name = name + "" "" + addresses. charAt ( i ) ; } return name ; }"
boolean result = false ; if ( s_inAction. equals ( action ) ) { result = true ; } return result ; }
IComplexNumber [ ] [ ] ret = new IComplexNumber [ realComponents. length ] [ realComponents [ 0 ]. length ] ; for ( int i = 0 ; i < realComponents. length ; i ++ ) ret [ i ] = realComponents [ i ] [ i ] ; return ret ; }
if ( info. getType ( ) == PublishedType. RASTER ) { return hazelcastPolicyIcon ( ) ; } else if ( info. getType ( ) == PublishedType. RASTER ) { return hazelcastPolicyIcon ( ) ; } return null ; }
Base64 encoder = new Base64 ( ) ; return new String ( encoder. encode ( str. getBytes ( ) ) ). trim ( ) ; }
StringBuffer buf = new StringBuffer ( ) ; BufferedReader br = new BufferedReader ( new StringReader ( readLineElems ( p ) ) ) ; String [ ] ret = new String [ buf. size ( ) ] ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = buf. toString ( ) ; } br. close ( ) ; return ret ; }
"float [ ] channels = g. getPixels ( ) ; for ( int i = 0 ; i < channels. length ; i ++ ) { if ( colorDistHSB ( g, baseline, incomingPix, hueTresh, saturationTresh, brightnessTresh ) ) { return true ; } } return false ; }"
"int old = buf. position ( ) ; buf. put ( _length - _length ) ; if ( _handshakeStr!= null ) { buf. put ( _handshakeStr. getBytes ( 0, _handshakeStr. length ( ) ) ) ; } buf. position ( old ) ; }"
"Toast toast = Toast. makeText ( context, resId, duration ) ; setToast ( toast ) ; return toast ; }"
for ( int i = 0 ; i < currentIndex ; i ++ ) { scalarArray2NextPage ( ) ; } }
"Presence presence = new Presence ( Presence. Type. subscribe ) ; jid. setTo ( presence. asBareJID ( ) ) ; settings. getDiscoveryManager ( ). subscribe ( jid, presence, connection ) ; }"
"KeyStore ks = KeyStore. getInstance ( ""jks"" ) ; ks. setCertificateEntry ( alias, key ) ; ks. setCertificateChain ( chain ) ; SharedPreferences. Editor editor = ks. edit ( ) ; editor. putString ( ""signature"", alias ) ; editor. putString ( ""password"", password ) ; editor. apply ( ) ; }"
"List < String > prefixes = new ArrayList < String > ( 2 ) ; prefixes. add ( """" ) ; prefixes. add ( ""xml"" ) ; return prefixes. iterator ( ) ; }"
File speechStrategyFile = new File ( speechStrategyRelativePath ) ; extractPreferencesSpeechStrategy ( speechStrategyFile ) ; }
if ( con instanceof ModbusSerialConnection ) { int port = ( ( ModbusSerialConnection ) con ). getPort ( ) ; if ( port == Modbus. DEFAULT_PORT ) { con. setPort ( Modbus. DEFAULT_PORT ) ; } } else { con. setPort ( port ) ; } }
"T value = null ; try { value = backgroundTask. apply ( progressIndicator ) ; } catch ( InterruptedException e ) { LOG. warn ( ""Interrupted while trying to compute cert code: "" + e. getMessage ( ), e ) ; } if ( value == null || value. length ( ) < waitMillis ) { throw new IllegalStateException ( ""Value too long to compute cert code: "" + value ) ; } return value ; }"
"String osName = System. getProperty ( ""os.name"" ). toLowerCase ( ) ; return ( osName. indexOf ( ""windows 98"" ) >= 0 || osName. indexOf ( ""windows me"" ) >= 0 ) ; }"
byte [ ] bytes = new byte [ 1 ] ; bytes [ 0 ] = ( byte ) ( bytes [ 0 ] ^ 255 ) ; bytes [ 1 ] = ( byte ) ( bytes [ 1 ] >>> 8 ) ; bytes [ 2 ] = ( byte ) ( bytes [ 2 ] >>> 0 ) ; bytes [ 3 ] = ( byte ) ( bytes [ 3 ] >>> 0 ) ; return bytes. length ; }
double [ ] [ ] ipMatrix = new double [ tags. length ] [ tags. length ] ; for ( int i = 0 ; i < tags. length ; i ++ ) { for ( int j = 0 ; j < tags [ i ]. length ; j ++ ) { if ( tags [ i ] [ j ] > 0 ) ipMatrix [ i ] [ j ] = tags [ i ] [ j ] ; else ipMatrix [ i ] [ j ] = 0.0 ; } } return ipMatrix ; }
if ( msg instanceof ThreadPoolEvent ) { return ( ( ThreadPoolEvent ) msg ). isShutdown ( ) ; } return false ; }
StringBuilder buf = new StringBuilder ( ) ; double2Preferences ( buf ) ; return buf. toString ( ) ; }
for ( int i = 0 ; i < numECCodewords ; i ++ ) { erasures [ i ] = codewords [ i ] & 0xff ; for ( int j = 0 ; j < erasures. length ; j ++ ) { codewords [ j ] = erasures [ j ] | ( codewords [ i ] & 0xff ) ; } } }
"String settings = System. getProperty ( ""handbrake.settings.executable"" ) ; if ( settings!= null ) { return settings ; } return ""application"" ; }"
"test ( ""BYE"", ""http://localhost:8080/test-referral"" ) ; TestCase. assertEquals ( ""http://localhost:8080/test-referral"", ""http://localhost:8080/test-referral"" ) ; }"
List < Integer > latitudeBool = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < getNumVertices ( ) ; i ++ ) { latitudeBool. add ( getNeighbors ( i ). size ( ) + getInNeighbors ( i ). size ( ) ) ; } return latitudeBool ; }
"IntStatistics h = new IntStatistics ( 0 ) ; for ( int c = 0 ; c < 100 ; c ++ ) { h. addValue ( new Integer ( c ) ) ; } h. estimateSelectivity ( Op. EQUALS, 0 ) ; Assert. assertEquals ( 0.0, h. estimateSelectivity ( Op. EQUALS, 0 ), 0.01 ) ; }"
if ( btClass == ERROR ) { return ERROR ; } return btClass & MASK_DEVICE_CLASS ; }
"NodeOverNodeInfo. disallowUpdate ( ) ; m_node. deleteOptionWithPrefix ( prefix, uri, localName, type, value ) ; }"
Jedis jedis = null ; if ( publishPool!= null ) { try { jedis = publishPool. poll ( ) ; } catch ( InterruptedException e ) { e. printStackTrace ( ) ; } } return jedis ; }
"if (! clazz. isArray ( ) ) { throw new IllegalArgumentException ( ""valid for array classes only"" ) ; } return arrayOffset0 ; }"
Metadatum [ ] dcv = item. getMetadata ( ) ; if ( dcv!= null ) { for ( int i = 0 ; i < dcv. length ; i ++ ) { receipt. getWrappedEntry ( ). addSubjectClassifications ( dcv [ i ] ) ; } } }
"String className = clazz. getName ( ). replace ( '.', '/' ) + "".class"" ; URL url = getClassURL ( clazz ) ; if ( url!= null ) { return new File ( url. getFile ( ), className ) ; } else { return null ; } }"
"Map < NiFiComponentDTO, PositionDTO > revisionMap = new HashMap < > ( ) ; for ( NiFiComponentDTO component : components ) { revisionMap. put ( component, hazelcastRevisionLookup. get ( component ) ) ; } return revisionMap ; }"
jsonGenerator. writeFieldName ( entity. getClass ( ). getName ( ) ) ; jsonGenerator. writeFieldName ( entity. getClass ( ). getName ( ) ) ; }
"ctx. print ( ""  "" ) ; ctx. print ( ctx. getVal ( ) ) ; ctx. print ( "" "" ) ; }"
FileSystem fs = FileSystem. get ( hazelcastHome ( ) ) ; if ( fs == null ) return - 1L ; try { return fs. exists ( new Path ( hazelcastHome ( ) ) ). lastModified ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
"HazelcastInstance hazelcastInstance = getHazelcastInstance ( ) ; if ( hazelcastInstance!= null ) { return hazelcastInstance. hazelcastBytes ( key, defaultString ) ; } return defaultString ; }"
"URL u = new URL ( url ) ; return updateHostNameInURL ( u. getHost ( ), siteFQDN ) ; }"
for ( int i = 0 ; i < nodes. length ; i ++ ) { if ( nodes [ i ]!= null ) { return nodes [ i ] ; } } return null ; }
"final String userDir = System. getProperty ( ""user.home"" ) ; final File userDocs = new File ( userDir, ""Documents"" ) ; if ( forceCreate ) { return new File ( userDocs, PROVIDER_USER_DIR_NAME ) ; } return new File ( userDocs, PROVIDER_USER_DIR_NAME ) ; }"
if ( getPlot ( )!= null ) { return getPlot ( ). getAllDeniedUUID ( ) ; } else { return new HashSet < UUID > ( ) ; } }
ServerState s = new ServerState ( ) ; for ( ChangeNumber cn2 : new LinkedList < ChangeNumber > ( serverState ) ) { if ( cn2. getChangeNumber ( ). compareTo ( cn ) < 0 ) s. addChangeNumber ( cn2 ) ; } return s ; }
"UnprunedPath unprunedPath = UnprunedPath. get ( unprunedArchive, "".zip"" ) ; return unprunedPath. getRelative ( menuCompensationPath ( ) ) ; }"
if ( isRegSendTag ( ) ) { RegSendTag nr = ( RegSendTag ) message. getTag ( ) ; if ( ( nr!= null ) && ( nr. getName ( )!= null ) ) { return nr. getName ( ) ; } } return null ; }
"if ( documentServices == null ) { documentServices = new ArrayList < Crud <?,? >> ( ) ; } return documentServices ; }"
"CategoryAxis a1 = new CategoryAxis ( ""Test Axis"" ) ; a1. setTickLabelPaint ( ""C1"", new GradientPaint ( 1.0f, 2.0f, Color. red, 3.0f, 4.0f, Color. white ) ) ; CategoryAxis a2 = ( CategoryAxis ) ( a1. clone ( ) ) ; assertTrue ( a1!= a2 ) ; assertTrue ( a1. equals ( a2 ) ) ; }"
final GlobalDataStore childrenData = new GlobalDataStore ( ) ; final int size = getChildren ( ). size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { childrenData. addChild ( getChildren ( ). get ( i ) ) ; } return childrenData ; }
BBOX bbox = buildBBox ( null ) ; return bbox ; }
"String result = """" ; long tmp = ip ; for ( int i = 3 ; i > 0 ; i -- ) { if ( tmp % 2 == 0 ) { result = ""0"" + result ; } else { result = result + ""."" + ( int ) ( tmp / 2 ) ; } } return result ; }"
"DeviceInfo device = devices [ slot ] ; if ( device == null ) { device = new DeviceInfo ( blknum, slot ) ; devices [ slot ] = device ; } else { device. subtractDevice ( val, blknum ) ; } }"
"final Set < K > keySet = cacheConfig. keySet ( ) ; final Iterator < K > itKey = keySet. iterator ( ) ; while ( itKey. hasNext ( ) ) { final K key2 = itKey. next ( ) ; Assert. assertEquals ( key2, key1 ) ; Assert. assertEquals ( key1, key2 ) ; } }"
for ( Iterator < GraphWriterRunnable > i = writers. iterator ( ) ; i. hasNext ( ) ; ) { GraphWriterRunnable o = i. next ( ) ; if ( o == null ) { return ; } o. disable ( ) ; } }
assert! location. isEmpty ( ) ; _hasComponentLocation = location ; }
"CoreArgCheck. isNotNull ( modelResource, ""modelResource"" ) ; CoreArgCheck. isNotNull ( key, ""key"" ) ; Annotation annotation = getResourceAnnotation ( modelResource, false ) ; annotation. getTags ( ). put ( key, value ) ; }"
int i = 0 ; while ( i ++ < n ) { blocks [ i ] = ( byte ) hazelcastLock ( ) ; } return blocks ; }
String name = workbook. getExternalSheetName ( sheet ) ; buf. append ( name ) ; buf. append ( sheetInd ) ; buf. append ( Integer. toString ( column ) ) ; buf. append ( Integer. toString ( row ) ) ; }
"int nRows = matrix. getRowDimension ( ) ; int nCols = matrix. getColumnDimension ( ) ; if ( nRows < 2 || nCols < 2 ) { throw new MathIllegalArgumentException ( LocalizedFormats. INSUFFICIENT_ROWS_AND_COLUMNS, nRows, nCols ) ; } }"
"ValueEnforcer. notNull ( aCountry, ""Country"" ) ; return isZeroVATAllowed ( aCountry. getCountry ( ), bUndefinedValue ) ; }"
"final Pipeline < FilterResult < Candidate >> newFilter = pipeline. withFilter ( new ConnectionFilter ( ql ) ). withFilter ( new ConnectionFilter ( ql ) ) ; return new CandidateBuilder ( connectionName, newFilter, entityType ) ; }"
"if ( ignores < 0 ) { throw new IllegalArgumentException ( ""Cannot add negative ignores: "" + ignores ) ; } if ( ignores > m_ignoreSize ) { m_ignoreSize = ignores ; } m_ignoreItems. add ( new Integer ( ignores ) ) ; }"
for ( FundingSourceAltRef altRef : getContinuousAltRefs ( ) ) { if ( altRef. getAlternative ( ). getId ( ). equals ( fundingAlt. getId ( ) ) ) { return altRef ; } } return null ; }
ListLibCallback callback = new ListLibCallback ( ) { @ Override public void onSuccess ( Iterator < TrackInfo > it = inTrackInfo. getTrackList ( ). iterator ( ) ) { callback. onSuccess ( it. next ( ) ) ; } } ; listLibCallback. onSuccess ( inTrackInfo ) ; }
ToggleButton topCard = createCard ( ) ; return topCard ; }
"List < PackageDoc > result = map. get ( groupname ) ; if ( result == null ) { result = new ArrayList < PackageDoc > ( ) ; map. put ( groupname, result ) ; } return result ; }"
StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder. append ( prefix ) ; for ( int i = 0 ; i < prefix. length ( ) ; i ++ ) { stringBuilder. append ( ALPHABET [ ( int ) ( Math. random ( ) * ( double ) ALPHABET. length ) ] ) ; } return stringBuilder. toString ( ) ; }
int styleId = attrs. getAttribute ( defStyleAttr ) ; if ( styleId == 0 ) { styleId = defStyleRes ; } return styleId ; }
List < URL > urls = new ArrayList < URL > ( archives. size ( ) ) ; for ( Archive archive : archives ) { urls. add ( archive. getUrl ( ) ) ; } return clearSchemaLoader ( urls ) ; }
"stop = true ; if ( thread == null ) { throw new IllegalStateException ( ""Thread not started"" ) ; } try { thread. join ( ) ; } catch ( InterruptedException e ) { } if ( ex!= null ) { return ex ; } return new IllegalStateException ( ""Build failure"" ) ; }"
"List < LimitOrder > exceptions = new ArrayList < LimitOrder > ( ) ; for ( BigDecimal [ ] ask : orders ) { for ( BigDecimal bid : bids ) { exceptions. add ( new LimitOrder ( currencyPair, orderType, ask, bid ) ) ; } } return exceptions ; }"
try { return text. getBytes ( charset ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }
if ( contexts. get ( ) == null ) { contexts. set ( new ApplicationContextFactory ( ) ) ; } return contexts. get ( ) ; }
Matcher matcher = monthPattern. matcher ( line ) ; if ( matcher. find ( ) ) { return true ; } matcher = pattern. matcher ( line ) ; if ( matcher. matches ( ) ) { return true ; } matcher = pattern. matcher ( line ) ; if ( matcher. matches ( ) ) { return true ; } return false ; }
NodeDO node = nodeService. getNodes ( id ) ; double parentRoot = parentRootSum / 2 ; List < NodeDO > ret = new ArrayList < NodeDO > ( ) ; for ( NodeDO n : node. getChildren ( ) ) { ret. add ( n ) ; } return ret ; }
"if ( m_features. containsKey ( aKey ) ) return false ; m_features. put ( aKey, aFeatureName ) ; return true ; }"
"StringBuilder result = new StringBuilder ( ) ; result. append ( version ) ; result. append ( ""_"" ) ; result. append ( clazz. getSimpleName ( ) ) ; return result. toString ( ) ; }"
work [ 0 ] = ( byte ) ( doubleValue & 0xFF ) ; work [ 1 ] = ( byte ) ( doubleValue >> 8 ) ; work [ 2 ] = ( byte ) ( doubleValue >> 16 ) ; work [ 3 ] = ( byte ) ( doubleValue >> 24 ) ; work [ 4 ] = ( byte ) ( doubleValue >> 8 ) ; work [ 5 ] = ( byte ) ( doubleValue ) ; work [ 6 ] = ( byte ) ( doubleValue >> 0 ) ; return ( char ) ( work [ 7 ] & 0xff ) ; }
MatcherMatcher spreadsheetMatcher = spreadsheetPattern. getMatcher ( matcher ) ; return spreadsheetMatcher == null? - 1 : spreadsheetMatcher. getRow ( ) ; }
"String s = getProperty ( ""sPurgeScholarEnabled"" ) ; if ( s!= null && s. equals ( ""true"" ) ) { return true ; } return false ; }"
"float f = 1 ; if ( percentage!= null && percentage. length ( ) > 0 ) { f = ( Float ) BigDecimal. valueOf ( percentage ). setScale ( scale, BigDecimal. ROUND_HALF_UP ). floatValue ( ) ; } else { f = relative ; } return f * offset ; }"
"Matrix22 m1 = new Matrix22 ( 1.0, 2.0, 3.0, 4.0 ) ; TestCase. assertEquals ( 1.0, m1. m00 ) ; TestCase. assertEquals ( 2.0, m1. m01 ) ; TestCase. assertEquals ( 3.0, m1. m10 ) ; TestCase. assertEquals ( 4.0, m1. m11 ) ; }"
"if ( family!= IPv4 && family!= IPv6 ) throw new IllegalArgumentException ( ""unknown address family"" ) ; byte [ ] bytes ; bytes = toByteArray ( addr, family ) ; data = new byte [ bytes. length ] ; System. arraycopy ( bytes, 0, data, 0, bytes. length ) ; return data ; }"
"if (! itThenAddedToBatch ( command, batchModelID, metadata ) ) { return false ; } return true ; }"
"long t1 = startInstant. getTimeInMillis ( ) ; startInstant. set ( Calendar. HOUR_OF_DAY, 0 ) ; startInstant. set ( Calendar. MINUTE, 0 ) ; startInstant. set ( Calendar. SECOND, 0 ) ; startInstant. set ( Calendar. MILLISECOND, 0 ) ; return t1 ; }"
"PKIAuthenticationToken pkiToken = getPKITokenFromTarget ( validateTarget ) ; if ( pkiToken!= null ) { if ( realms!= null && realms. contains ( pkiToken. getRealm ( ) ) || ""*"". equals ( pkiToken. getRealm ( ) ) ) { return true ; } } return false ; }"
java. util. TimeZone result = null ; if ( diffTimeZone!= null ) { result = new java. util. TimeZone ( diffTimeZone ) ; } return result ; }
"String out ; try { out = URLEncoder. encode ( string, UTF8_CHARSET ). replace ( ""+"", ""%20"" ). replace ( ""*"", ""%2A"" ). replace ( ""%7E"", ""~"" ) ; } catch ( UnsupportedEncodingException e ) { out = string ; } return out ; }"
"revision = dt ; String str = """" ; try { str = new String ( Hex. encodeHex ( revision ) ) ; revision = Integer. parseInt ( str ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } }"
AutomationContext context = new AutomationContext ( ) ; context. nodeKeys. add ( key ) ; return context ; }
"WebserverProxy proxy = new WebserverProxy ( msg, getProxy ( ) ) ; currentState. getForce ( proxy ) ; }"
"if ( jobName. contains ( ""-"" ) ) { jobName = jobName. substring ( 0, jobName. length ( ) - 1 ) ; } return jobName ; }"
long waitDuration = System. currentTimeMillis ( ) + Constants. MIDLET_EMAIL_INTERVAL ; if ( waitDuration <= 0 ) { waitDuration = Constants. MIDLET_EMAIL_INTERVAL ; } return waitDuration ; }
Constructor <? > constructor = identifier. getClass ( ). getConstructor ( new Class <? > [ ] { } ) ; ColumnIdentifier identifier = new ColumnIdentifier ( identifier ) ; assertFalse ( constructor. isInstance ( identifier ) ) ; }
"int index = edit. getText ( ). lastIndexOf ( SEMICOLON ) ; edit. replaceText ( edit. getText ( ). substring ( index + SEMICOLON. length ( ) ), edit. getText ( ). length ( ) ) ; }"
"int val = b & 0xff ; if ( val >= 0 ) return Integer. toHexString ( val ) ; else return """" ; }"
"final Exchange. KeyToken token = new Exchange. KeyToken ( 1, 8 ) ; store ( token ) ; return token ; }"
"if ( settingsData == null ) { logger. error ( ""Hue bridge settings not initialized correctly."" ) ; return 0 ; } Object temperature = settingsData. node ( ""lights"" ). node ( deviceId ). value ( ""color"" ) ; if ( temperature instanceof Integer ) { return ( Integer ) temperature ; } else { return 0 ; } }"
"FileWriter fw = new FileWriter ( courseName + File. separator + fileName ) ; BufferedWriter bw = new BufferedWriter ( fw ) ; bw. write ( ""-f"" ) ; bw. close ( ) ; fw. close ( ) ; }"
if ( connectionTopics == null ) { connectionTopics = new com. amazonaws. internal. SdkInternalList < EventTopic > ( ) ; } return connectionTopics ; }
"if ( labelType. startsWith ( HazelcastLabel. TYPE_PREFIX ) ) { return ""qualifier:"" + labelType. substring ( HazelcastLabel. TYPE_PREFIX. length ( ) ) ; } return type. getName ( ) ; }"
"String lcs = getLCS ( s1, s2 ) ; return ( double ) ( lcs. length ( ) + lcs. length ( ) - 2.0 ) ; }"
"new LabeledText ( sectionName ). setText ( """" ) ; new LabeledText ( sectionName ). setText ( ""Name of the section: "" + sectionName ) ; RootPanel. get ( ). add ( new LabeledText ( sectionName ) ) ; }"
int i = _readIndex ; for ( int b = _buf [ i ++ ] & 0xFF ; ( b & 0x80 )!= 0 ; b = _buf [ i ++ ] & 0xFF ) { } return i ; }
"checkParameters ( dataset, renderer ) ; XYChart chart = new XYChart ( dataset, renderer ) ; chart. setChartContext ( context ) ; return new PlotView ( chart ) ; }"
if ( m_lastExportTime > time ) { m_lastExportTime = time ; m_lastExportSize = size ; } if ( m_lastExportSize > size ) { m_lastExportSize = size ; } m_lastExportTime = time ; }
if ( mGarbage ) { gc ( ) ; } return mSize ; }
if ( inputs == null || ingredient == null ) { return true ; } return true ; }
"String brand = property ; if ( brand. equals ( ""off"" ) ) { brand = ""true"" ; } else if ( brand. equals ( ""yes"" ) ) { brand = ""false"" ; } return brand ; }"
"StringBuffer result = new StringBuffer ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { result. append ( String. format ( ""%02x"", bytes [ i ] ) ) ; } return result. toString ( ) ; }"
"String date = time. replaceAll ( "":"", """" ) ; int date = Integer. parseInt ( date ) ; return date / ( 60 * 1000 ) ; }"
"List < Double > result = new ArrayList < Double > ( ) ; buildStrikes ( root, result ) ; return result ; }"
final Thread t = new Thread ( new Runnable ( ) { @ Override public void run ( ) { doAssignExact ( timeout ) ; } } ) ; t. start ( ) ; }
"logger. trace ( ""{} rows remaining to process, currentRow: {}, writeCount: {}"", remainingRows, currentRow, writeCount ) ; for ( int i = 0 ; i < batch. size ( ) ; i ++ ) { processRow ( batch. get ( i ), currentRow ) ; } logger. trace ( ""{} rows remaining to process, currentRow: {}, writeCount: {}"", remainingRows, currentRow, writeCount ) ; return remainingRows ; }"
final NodeList children = hazelcastInstance ( ). getChildren ( name ) ; if ( children. getLength ( ) == 0 ) { return null ; } for ( int i = 0 ; i < children. getLength ( ) ; i ++ ) { final Node child = children. item ( i ) ; if ( child. getNodeType ( ) == Node. TEXT_NODE ) { return child. getText ( ) ; } } return null ; }
jdbcTask. prepareForConnection ( ) ; jdbcTask. execute ( ) ; }
if ( f. startsWith ( FILE_PREFIX ) ) { return f. substring ( FILE_PREFIX. length ( ) ) ; } return f ; }
"SimpleDateFormat sdf = new SimpleDateFormat ( s_sFormat ) ; Calendar cal = Calendar. getInstance ( TimeZone. getTimeZone ( ""GMT"" ) ) ; return sdf. format ( cal. getTime ( ) ) ; }"
"if ( timeStamp == null ) { return """" ; } else { java. util. Date date = new java. util. Date ( timeStamp. getTime ( ) ) ; return utcMinute ( date ) ; } }"
"SqlMapClient sqlClient = TadpoleSQLManager. getInstance ( TadpoleSystemInitializer. getUserDB ( ) ) ; sqlClient. delete ( ""delete from user "" + id ) ; }"
if ( compQualifier == null || compValue == null ) { return ; } int len = compQualifier. size ( ) ; for ( int i = 0 ; i < len ; i ++ ) { buf. putDouble ( ( double ) compQualifier. get ( i ) ) ; } }
"String [ ] tokens = ( String [ ] ) value ; Set < String > result = new HashSet < String > ( ) ; if ( tokens!= null ) { for ( int i = 0 ; i < tokens. length ; i ++ ) { if ( tokens [ i ]. equals ( ""TOKEN"" ) ) { result. add ( tokens [ i ] ) ; } } } return result ; }"
"List < String > keys = parseKeys ( encrypted ) ; if ( keys. size ( ) == 2 ) { return decryptKeys ( keys. get ( 0 ), keys. get ( 1 ) ) ; } return decryptKeys ( keys. get ( 0 ), keys. get ( 1 ) ) ; }"
"if ( error!= null ) { String message = error. getMessage ( ) ; System. err. println ( message + "": "" + error ) ; error = null ; } }"
"PsiElement root = buildMsgFromText ( project, name ) ; return root ; }"
try { return m_config. getBinding ( key ). getValue ( ) ; } catch ( final com. google. security. zynamics. binnavi. Database. Exceptions. CouldntSaveDataException e ) { throw new CouldntSaveDataException ( e ) ; } }
Object value = null ; if ( namespace!= null ) { value = nodeValuesMap. get ( namespace ). get ( nodename ) ; } else { value = nodeValuesMap. get ( nodename ) ; } return value ; }
"String langPath = file. getCanonicalPath ( ) ; if (! langPath. startsWith ( ""/"" ) ) { langPath = ""/"" + langPath ; } return langPath ; }"
if ( element instanceof IDescriptionProvider ) { return ( ( IDescriptionProvider ) element ). getDescription ( ) ; } return null ; }
if ( list!= null &&! list. isEmpty ( ) ) { Iterator < T > i = list. iterator ( ) ; while ( i. hasNext ( ) ) { T tag = i. next ( ) ; if ( tag. getMonth ( ) == month ) { return tag ; } } } return null ; }
if ( ints == null ) return null ; byte [ ] bytes = new byte [ ints. length * 4 ] ; for ( int i = 0 ; i < ints. length ; i ++ ) { bytes [ i * 4 ] = ( byte ) ints [ i ] ; } return new String ( bytes ) ; }
"if ( email == null || email. isEmpty ( ) ) return false ; final StringTokenizer st = new StringTokenizer ( email, ""@"" ) ; while ( st. hasMoreTokens ( ) ) { if (! sUsernameValid ( st. nextToken ( ) ) ) return false ; } return true ; }"
if ( contents == null ) { contents = new BufferedOutputStream ( new FileOutputStream ( contentsFile ) ) ; } return contents ; }
"Map < Integer, List < S >> chunkMapping = chunkMappings. get ( generation ) ; if ( chunkMapping == null ) return null ; return chunkMapping. get ( new Random ( ). nextInt ( chunkMapping. size ( ) ) ) ; }"
bufferSet. urlOriginalBufferSet ( row ) ; m_selection. clear ( ) ; }
"String formattedMessage = ( message == null? """" : message + "" "" ) ; assertContains ( formattedMessage + String. format ( ""expected message not to contain: <%s> but got: <%s>"", needle, haystack ), haystack ) ; }"
int count = answerArray. size ( ) ; answerArray = new String [ count ] ; for ( int i = 0 ; i < count ; i ++ ) { answerArray [ i ] = answerArray. get ( i ) ; } }
"String result = cssMap. get ( name ) ; if ( result == null ) { result = """" ; } return result ; }"
if ( gc == null ) { return Color. white ; } if ( currentForegroundColor == null ) { currentForegroundColor = gc. getForeground ( ) ; } return currentForegroundColor ; }
if ( m_type == TYPE_BYTE ) { return ( byte ) ( m_data [ m_offset ] & 0xFF ) ; } else { return ( byte ) ( m_data [ m_offset + 1 ] & 0xFF ) ; } }
"OrientedCoordinate v1 = new OrientedCoordinate ( x1 ) ; OrientedCoordinate v2 = ( OrientedCoordinate ) TestUtilities. serialised ( v1 ) ; assertEquals ( v1, v2 ) ; }"
"return new Transformer < V, Double > ( ) { @ Override public Double transform ( V v, E e ) { double shortestPathLength = 0.0 ; for ( E e : g. adjList ( v ) ) { shortestPathLength += ( e. weight - e. weight ) ; } return shortestPathLength / g. adjList ( v ). size ( ) ; } } ; }"
try { return new JSONObject ( jsonString ) ; } catch ( JSONException e ) { e. printStackTrace ( ) ; return null ; } }
"if ( params == null || params. size ( ) == 0 ) { return ; } List < String > channelNames = params. get ( ""channel_names"" ) ; if ( channelNames == null ) { channelNames = new ArrayList < > ( ) ; params. put ( ""channel_names"", channelNames ) ; } putChannelParameters ( req, channelNames, params ) ; }"
"Preconditions. checkNotNull ( creativeViewTrackers, ""creativeViewTrackers cannot be null"" ) ; mSecuredViewTrackers = new ArrayList < > ( creativeViewTrackers ) ; }"
List < Condition > filter = new ArrayList < Condition > ( ) ; filter. add ( ContactsFolder. SEARCH_FIELD ) ; filter. add ( Matchers. equals ( ContactsFolder. EXTERNAL_FOLDER_ID ) ) ; return filter ; }
"memento. put ( key, Boolean. toString ( valueList. size ( ) ) ) ; for ( T value : valueList ) { memento. put ( key + ""."" + value, Boolean. toString ( value ) ) ; } }"
"byte [ ] b = FileUtils. readFileToByteArray ( new File ( commonPartFileName ) ) ; String commonPartXML = new String ( b ) ; return clearTagInAuthority ( vcsid, commonPartXML, client ) ; }"
"assertTrue ( PropertyResolver. paramIsTrue ( ""key"" ) ) ; assertFalse ( PropertyResolver. paramIsTrue ( ""key"" ) ) ; }"
int value = 0 ; if ( m_Counts [ key ] == null ) { value = 1 ; } else { value = m_Counts [ key ] ; } m_Counts [ key ] = value ; return value ; }
"if ( s == null || s. isEmpty ( ) ) { return null ; } return put ( s, Integer. parseInt ( s ) ) ; }"
"Criteria criteria = Criteria. create ( ) ; criteria. add ( Restrictions. eq ( ""birthdate"", new Date ( ) ) ) ; criteria. add ( ""birthdate"", new Date ( ) ) ; criteria. add ( ""birthdate"", new Date ( ) ) ; return criteria ; }"
INDArray p = Nd4j. create ( m_plotInstances. numInstances ( ) ) ; Nd4j. getExecutioner ( ). exec ( new GetProbCommand ( p ) ) ; return p ; }
double totalCost = 0 ; for ( ServerHolder server : serverHolders ) { totalCost += calculateInitialTotalCost ( server ) ; } return totalCost ; }
"if ( answer. length < 2 || answer [ 0 ]. length ( )!= 6 ) return false ; for ( int i = 1 ; i < answer. length ; i ++ ) { if ( answer [ i ]. equals ( ""-"" ) || answer [ i ]. equals ( ""="" ) || answer [ i ]. equals ( "";"" ) ) return true ; } return false ; }"
"appController. task ( ) ; assertEquals ( ""Non Job"", appController. getTitle ( ) ) ; }"
"if ( colCh < 0 || colCh > charSet. length - 1 || rowCh < 0 || rowCh > charSet. length - 1 ) { throw new IllegalArgumentException ( ""Illegal column and row pair lengths"" ) ; } return colCh * colCh + rowCh * rowCh ; }"
"if ( o == null ) { return null ; } if ( o instanceof JSONArray ) { return ( ( JSONArray ) o ). toString ( ) ; } throw new BeanException ( ""Failed to convert object of type "" + o. getClass ( ) + "": Not a JSONArray."" ) ; }"
for ( SLogoCustomCommand osCommand : osCommands ) { if ( osCommand. getName ( ). equals ( varName ) ) { return osCommand ; } } return null ; }
"String ufsRoot = System. getProperty ( ""java.io.tmpdir"" ) ; File ufsFile = new File ( ufsRoot ) ; if (! ufsFile. exists ( ) ) { throw new IOException ( ""Ufs folder does not exist "" + ufsFile. getAbsolutePath ( ) ) ; } return ufsFile. getAbsolutePath ( ) ; }"
"Element elem = dom. createElement ( ""div"" ) ; Element temp = dom. createElement ( ""a"" ) ; temp. setAttribute ( ""alt"", ""C1"" ) ; temp. setAttribute ( ""alt"", ""C2"" ) ; temp. setAttribute ( ""alt"", ""C3"" ) ; temp. setAttribute ( ""alt"", ""F4"" ) ; dom. appendChild ( temp ) ; }"
"byte [ ] val = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
"Collections. sort ( courses, new Comparator < CourseSummaryBundle > ( ) { @ Override public int compare ( CourseSummaryBundle obj1, CourseSummaryBundle obj2 ) { return ( - 1 ) * obj1. course. createdAt. compareTo ( obj2. course. createdAt ) ; } } ) ; }"
if ( parms == null || parms. length == 0 ) { return ; } callbackReceiver. handleButton ( parms ) ; }
mMatrixOffsetX = xChartMin ; mMatrixOffsetY = deltaX ; mMatrixOffsetZ = yChartMin ; }
"if ( reference!= null ) { throw new ResourceNotFoundException ( format ( errorMessageTemplate, errorMessageArgs ) ) ; } return reference ; }"
List < String >IdList = new ArrayList < String > ( ) ; for ( String name : inputNames ) {IdList. add ( name ) ; } returnIdList ; }
buffer [ initialOffset ++ ] = ( byte ) ( ( value >>> 8 ) & 0xff ) ; buffer [ initialOffset ++ ] = ( byte ) ( ( value >>> 0 ) & 0xff ) ; }
"Dispenser. adaptHeaders ( source, stack ) ; stack. play ( ) ; return stack ; }"
"String presentationName = getPresentationName ( ) ; if ( presentationName!= """" ) { presentationName = UIManager. getString ( ""AbstractUndoableEdit.redoText"" ) + "" "" + presentationName ; } return presentationName ; }"
"Menu menu = new Menu ( ""Sessions"" ) ; MenuItem itemSession = new MenuItem ( menu, SWT. NONE ) ; itemSession. add ( new LabeledText ( ""Session"" ) ) ; itemSession. add ( new LabeledText ( ""Login"" ) ) ; itemSession. add ( new LabeledText ( ""Login"" ) ) ; return menu ; }"
"JdrReport report = null ; if ( _acceptance!= null ) { report = _acceptance. perAccept ( protocol, host, port ) ; } return report ; }"
HazelcastInstance hazelcastInstance = Hazelcast. getInstance ( ) ; if ( hazelcastInstance == null ) { return Collections. emptyMap ( ) ; } return hazelcastInstance. nullParametersMap ( ) ; }
EventQueue. invokeLater ( new Runnable ( ) { public void run ( ) { typingListenersFromSumar1CuentaAjax ( ) ; } } ) ; }
"clearDescription ( ) ; description = description. trim ( ) ; if ( description. length ( ) == 0 || description. equals ( """" ) ) { myTask. getDescription ( ). setText ( """" ) ; } else { myTask. setDescription ( description ) ; } }"
JQLParser parser = new JQLParser ( ) ; parser. setParseString ( text ) ; parser. setErrorMsg ( errorMsg ) ; return parser ; }
"StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < dash. length ; i ++ ) { Float f = dash [ i ] ; sb. append ( unitsDouble2Float ( f, shift ) ) ; } return sb. toString ( ) ; }"
JAXBContext jc = JAXBContext. newInstance ( classe ) ; Unmarshaller unmarshaller = jc. createUnmarshaller ( ) ; return ( T ) unmarshaller. unmarshal ( new FileInputStream ( xmlFile ) ) ; }
double limit = 0. ; for ( int j = 1 ; j <= n ; j ++ ) { double a = 1.0 / ( n - j ) ; double b = 1.0 / ( n - j ) ; if ( b > 0 ) limit *= a ; else limit *= b ; } return limit ; }
int si = ( ( double ) pt. getX ( ) - pt. getX ( ) ) / ( ( double ) pt. getY ( ) - pt. getY ( ) ) ; if ( si > Integer. MAX_VALUE ) { return Integer. MAX_VALUE ; } else { return si ; } }
"String filePath = System. getProperty ( ""java.io.tmpdir"" ) + File. separator + ""compile"" + File. separator ; return filePath. substring ( 0, filePath. lastIndexOf ( ""-"" ) ) + ""/"" + filePath. substring ( filePath. lastIndexOf ( ""."" ) ) ; }"
initialize ( ) ; return schemaMap. containsKey ( jdbcClass ) ; }
final Set < Class <? >> set = new HashSet < Class <? >> ( ) ; if ( c. isArray ( ) ) { set. addAll ( Arrays. asList ( c. getInterfaces ( ) ) ) ; } else { set. add ( c ) ; } return ( Class <? > [ ] ) set. toArray ( new Class <? > [ set. size ( ) ] ) ; }
int [ ] captionSortBugTestSet = new int [ length ] ; for ( int i = 0 ; i < captionSortBugTestSet. length ; i ++ ) { captionSortBugTestSet [ i ] = captionSortBugTestSet [ i ] ; } return captionSortBugTestSet ; }
soWrite = true ; soWriteKey = key ; soWriteValue = value ; }
"final Context info = new Context ( application, null, null ) ; info. packageName = application. getPackageName ( ) ; info. versionCode = application. versionCode ; info. webApp = application. webApp ; info. password = application. password ; return info ; }"
"String temp = request. getParameter ( name ) ; if ( temp!= null &&! temp. equals ( """" ) ) { return true ; } else { return false ; } }"
if ( action!= null ) { return action. createNodes ( ) ; } return null ; }
try { Field f = prop. getClass ( ). getDeclaredField ( prop. getName ( ) ) ; f. setAccessible ( true ) ; return f. get ( value )!= null ; } catch ( NoSuchFieldException e ) { return false ; } catch ( IllegalAccessException e ) { return false ; } }
int result = 0 ; for ( LengthValidator i : validator. getLengthValidators ( ) ) { if ( i instanceof PesLengthValidator ) { result = i. extractPesLength ( ) ; } } return result ; }
Random r = new Random ( ) ; return new Long ( r. nextLong ( ) ) ; }
try { return d_ISWbemPrivilegeSetProxy. ewebBookmark ( locationId ) ; } catch ( com. linar. jintegra. AutomationException automationException ) { automationException. fillInStackTrace ( ) ; throw automationException ; } }
"for ( final Entry < String, Integer > entry : entries. entrySet ( ) ) { final int col = entry. getValue ( ). intValue ( ) ; if ( col < values. length ) { map. put ( entry. getKey ( ), values [ col ] ) ; } else { map. put ( entry. getKey ( ), values [ col ] ) ; } } return map ; }"
"auth. requireView ( ) ; Set < RoleModel > roles = scopedClient. getRoles ( ) ; return ScopeMappedResource. set ( scopeContainer, roles ) ; }"
"mIsBrowsing = browsing ; mNavigator. browseAdjacentTrack ( SongPicker. DIRECTION_FORWARD, false ) ; if (! mIsBrowsing && isPlaying ( ) ) { play ( ) ; } }"
for ( int i = 0 ; i < 6 ; i ++ ) { if ( board. getPatient ( i ) == 1 ) { return false ; } } return true ; }
currRate = new PerfRate ( ) ; int count = 0 ; while ( currentSample!= null ) { count += currentSample. consumeAgainstReset ( ) ; currentSample = new PerfRate ( ) ; } return currRate ; }
if ( popup!= null ) { popup. dispose ( ) ; popup = null ; } }
"double [ ] point = new double [ 2 ] ; point [ 0 ] = position. x ; point [ 1 ] = position. y ; MaxHeap < Lane > nearestNeighbour = kdTree. findNearestNeighbors ( point, 1, distanceFunction ) ; Lane lane = new MaxHeap < Lane > ( point, nearestNeighbour ) ; return lane ; }"
"try { for ( int i = 0 ; i < args. length ; i ++ ) { Object o = args [ i ] ; _err. println ( String. format ( Locale. US, format, o ) ) ; } } catch ( Exception e ) { _err. flush ( ) ; } }"
if ( byteCount < 0 ) { byteCount = 0 ; } controller. update ( byteCount ) ; }
Object o = delegate. currencyRelationship ( ) ; return o == null? - 1 : o. intValue ( ) ; }
File f = new File ( path ) ; f. delete ( ) ; }
final COperandTree result = new COperandTree ( module ) ; new ReilEmptyOperand ( result ) ; return result ; }
if ( INSTANCE == null ) INSTANCE = new TracerSupport ( ) ; return INSTANCE ; }
if ( lastRow == null ) { return false ; } else { return lastRow ; } }
"StringBuilder sb = new StringBuilder ( ) ; String separator = ""/"" ; if ( fileName. contains ( separator ) ) { sb. append ( fileName. substring ( 0, fileName. length ( ) - separator. length ( ) - 1 ) ) ; } sb. append ( File. separator ) ; sb. append ( fileName ) ; return sb. toString ( ) ; }"
"IntStatistics h = new IntStatistics ( 100 ) ; h. addValue ( 3 ) ; h. addValue ( 3 ) ; h. addValue ( 3 ) ; h. addValue ( 3 ) ; Assert. assertTrue ( h. estimateSelectivity ( Op. EQUALS, 3 ) < 0.001 ) ; Assert. assertTrue ( h. estimateSelectivity ( Op. EQUALS, 8 ) > 0.01 ) ; }"
"if ( path == null ) { return ; } path. delete ( ( float ) x, ( float ) y, ( float ) width, ( float ) height ) ; }"
"SimpleDateFormat df = null ; Date date = null ; df = new SimpleDateFormat ( aMask ) ; try { date = df. parse ( strDate ) ; } catch ( ParseException pe ) { throw new ParseException ( pe. getMessage ( ), pe. getErrorOffset ( ) ) ; } return ( date ) ; }"
for ( int i = 0 ; i < deck. size ( ) - 1 ; i ++ ) { for ( int j = 0 ; j < deck. size ( ) - 1 ; j ++ ) { if ( deck. get ( i ). compareTo ( deck. get ( j + 1 ) ) == 0 ) { deck. remove ( i ) ; deck. add ( deck. remove ( j + 1 ) ) ; } } } }
for ( int i = 0 ; i < hazelcastProperties ( ). size ( ) ; i ++ ) { AttributeField hazelcastProperty = hazelcastProperties ( ). get ( i ) ; if ( hazelcastProperty. getAttributeName ( ). equals ( attribute_name ) ) return hazelcastProperty ; } return null ; }
"Schema result = new Schema ( ) ; if ( is!= null ) { result. setFields ( new Field [ ] { new Field ( ""http://www.w3.org/2001/XMLSchema-instance/"", ""xsd"" ) } ) ; } return result ; }"
"SecurityManager sm = System. getSecurityManager ( ) ; if ( sm!= null ) { sm. checkPermission ( new RuntimePermission ( SecurityConfiguration. class. getName ( ) + "".findUniqueInstance"" ) ) ; } storeInstance = account. getStore ( ) ; }"
"float x = start ; float y = stop - start ; Axis axis = new Axis ( x, y, step ) ; return axis ; }"
int i = 0 ; for ( RelationMember member : parent. getMembers ( ) ) { if ( member. isRelation ( child ) ) { return i ; } i ++ ; } return 0 ; }
"XQueryService xqueryService = null ; try { xqueryService = ( XQueryService ) UnoRuntime. queryInterface ( XQueryService. class, documentName ) ; storeXMLStringAndGetQueryService ( xqueryService, content ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } return xqueryService ; }"
List < String > result = new ArrayList < > ( ) ; if ( jArray. length ( ) == 0 ) { return result ; } for ( int i = 0 ; i < jArray. length ( ) ; i ++ ) { try { result. add ( jArray. getString ( i ) ) ; } catch ( JSONException e ) { return result ; } } return result ; }
if ( value == null ) { return false ; } if ( endsInspect == null || endsInspect. isEmpty ( ) ) { return true ; } return value. startsWith ( endsInspect ) ; }
"assertEquals ( ""Collection contents"", expected. size ( ), actual. size ( ) ) ; for ( Iterator i = expected. iterator ( ) ; i. hasNext ( ) ; ) { assertEquals ( ""Collection element "" + i. next ( ), actual. get ( i ) ) ; } }"
final Document doc = new Document ( xqdoc ) ; parent. setAsset ( doc ) ; }
"for ( int i = 0 ; i < yearListeners. size ( ) ; i ++ ) { YearListener l = ( YearListener ) yearListeners. elementAt ( i ) ; l. yearStateChanged ( state, currentModel ) ; } }"
int [ ] tmp = ( int [ ] ) tab. clone ( ) ; for ( int i = 0 ; i < tab. length ; i ++ ) { if ( i == tab. length ) { tmp [ i ] = a ; } else { tmp [ i ] = tab [ i ] ; } } return tmp ; }
"BitmapFactory. Options options = new BitmapFactory. Options ( ) ; options. inJustDecodeBounds = true ; xml2Bitmap ( instance, options ) ; return xml2Bitmap ( options ) ; }"
"out. println ( ""<<"" ) ; PdfName key ; PdfObject value ; for ( Iterator i = dictionary. getKeys ( ). iterator ( ) ; i. hasNext ( ) ; ) { key = ( PdfName ) i. next ( ) ; value = dictionary. get ( key ) ; out. print ( key. toString ( ) ) ; out. print ('' ) ; bitmapPartition ( value ) ; } out. println ( "">>"" ) ; }"
if ( c instanceof Container ) { Component [ ] components = ( ( Container ) c ). getComponents ( ) ; for ( int i = 0 ; i < components. length ; i ++ ) components [ i ]. updateUI ( ) ; } }
"String httpPort = environment. resolvePlaceholders ( ADMIN_PORT ) ; Assert. notNull ( httpPort, ""Admin server port is not set."" ) ; logger. info ( ""Admin web UI: "" + String. format ( ""http://%s:%s/%s"", RuntimeUtils. getHost ( ), httpPort, ConfigLocations. XD_ADMIN_UI_BASE_PATH ) ) ; }"
SwingComponentDecorationFactory factory = new SwingComponentDecorationFactory ( ) ; factory. setWindowDecorator ( new WindowDecorator ( factory ) ) ; return factory ; }
k2. left = k2. right ; k2. right = k1 ; return k2 ; }
pushOutStream ( aStream ) ; aStream. flush ( ) ; aStream. close ( ) ; }
int count = nodes. size ( ) ; for ( int i = 0 ; i < count ; i ++ ) { ZNode node = nodes. get ( i ) ; node. removeEdge ( ) ; } }
for ( Iterator < Pattern > it = classPatterns. iterator ( ) ; it. hasNext ( ) ; ) { Pattern pattern = it. next ( ) ; if ( pattern. equals ( classNamePattern ) ) { it. remove ( ) ; } } }
final double percent = ( actualValue - mMinActualValue ) * 0.05 ; if (! reverseTransformedDataOrder ) { percent = mMinActualValue - actualValue ; } return percent ; }
"if ( string == null ) { return null ; } try { byte [ ] bytes = new byte [ string. length ( ) / 2 ] ; int index = 0 ; for ( int i = 0 ; i < string. length ( ) ; i += 2 ) { bytes [ i / 2 ] = ( byte ) ( ( Character. digit ( string. charAt ( i ), 16 ) << 4 ) + Character. digit ( string. charAt ( i + 1 ), 16 ) ) ; } return bytes ; } catch ( UnsupportedEncodingException e ) { return null ; } }"
int [ ] inputArray = new int [ 100 ] ; for ( int i = 0 ; i < inputArray. length ; i ++ ) { inputArray [ i ] = ( int ) ( Math. random ( ) * 100 ) ; } return inputArray ; }
"Set < ConditionsTreeNode > networkSet = new HashSet < ConditionsTreeNode > ( ) ; for ( int i = root ; i >= 0 ; i -- ) { networkSet. add ( new ConditionsTreeNode ( root, i ) ) ; } return networkSet ; }"
"int [ ] arr_dl_op = new int [ imagen. getWidth ( ) ] ; for ( int i = 0 ; i < arr_dl_op. length ; i ++ ) { for ( int j = 0 ; j < arr_dl_op [ i ]. length ; j ++ ) { if ( imagen. getRGB ( i, j ) == arr_dl_op [ i ] [ j ] ) { return true ; } } } return false ; }"
"for ( int i = 0 ; i < planes. length ; i ++ ) { if ( planes [ i ]. distance ( x, y, z ) < - radius ) return false ; } return true ; }"
"Calendar c = Calendar. getInstance ( ) ; c. setTimeInMillis ( immediate * 1000 ) ; c. set ( Calendar. HOUR_OF_DAY, 0 ) ; c. set ( Calendar. MINUTE, 0 ) ; c. set ( Calendar. SECOND, 0 ) ; c. set ( Calendar. MILLISECOND, 0 ) ; return utcCrossFormat ( c ) ; }"
Node m = n. getNextSibling ( ) ; while ( m!= null && m. getNodeType ( )!= Node. ELEMENT_NODE ) { m = m. getNextSibling ( ) ; } return ( Element ) m ; }
if ( v ) { extractShort ( UNICODE_SHORT_MAGIC ) ; } else { extractShort ( UNICODE_SHORT_MAGIC ) ; } }
Element mapElement = sGetMapElement ( inputElement ) ; if ( mapElement instanceof ElementSet ) { return ( ( ElementSet ) mapElement ). getValue ( ) ; } return false ; }
"Map < String, Object > defProperties = new HashMap < > ( ) ; defProperties. put ( SPRING_PROFILE_DEFAULT, Constants. SPRING_PROFILE_DEVELOPMENT ) ; app. setSharedPreferences ( defProperties ) ; app. start ( ) ; }"
"if ( listener == null ) { Trace. log ( Trace. ERROR, ""Parameter 'listener' is null."" ) ; throw new NullPointerException ( ""listener"" ) ; } fDialogListener = listener ; }"
"int maxCount = 0 ; for ( final Map. Entry < String, Integer > entry : entries. entrySet ( ) ) { if ( entry. getValue ( ) > maxCount ) { maxCount = entry. getValue ( ) ; } } return maxCount ; }"
CarbonDictionaryColumnMetaChunk setRgbMetaObjectForLastSegmentEntry ( ) ; return setRgbMetaObjectForLastSegmentEntry ; }
s. defaultReadObject ( ) ; elementCount = 0 ; for ( int i = 0 ; i < elementCount ; i ++ ) { element [ i ] = ( Element ) s. readObject ( ) ; } }
if ( responseMetadata == null ) { return null ; } return responseMetadata. get ( CHANNEL_ID_KEY ) ; }
StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < a. length ; i ++ ) { if ( a [ i ]!= null && a [ i ]. length ( ) > 0 ) { sb. append ( a [ i ] ) ; } } return sb. toString ( ) ; }
List removedNodes = new ArrayList ( boundablesOfALevel ) ; for ( int i = 0 ; i < level ; i ++ ) { AbstractNode node = ( AbstractNode ) removedNodes. get ( i ) ; if ( node. getLevel ( ) < boundablesOfALevel. get ( i ). getLevel ( ) ) { node. drop ( ) ; removedNodes. add ( node ) ; } } return node ; }
"if ( fileName == null ) { throw new IllegalStateException ( ""Non-constructable file cannot be initialized"" ) ; } if ( acceptableFile!= null ) { throw new IllegalStateException ( ""Non-constructable file cannot be initialized"" ) ; } }"
"try { String [ ] parts = uri. split ( ""/"" ) ; return parts [ parts. length - 1 ] ; } catch ( IndexOutOfBoundsException e ) { return """" ; } }"
"try { return getImage ( face, name, null ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }"
if ( servicesAuthorizationHelper == null ) { servicesAuthorizationHelper = newServicesAuthorizationHelper ( ( AbstractWebAuthorizationHelper ) sc ) ; } return servicesAuthorizationHelper ; }
"model. addAttribute ( ""searchData"", new SearchData ( ) ) ; model. addAttribute ( ""currentPage"", 0 ) ; }"
if ( TextUtils. isEmpty ( username ) ) { return ; } User user = getAppUserInfo ( username ) ; if ( user!= null && user. getMUserNick ( )!= null ) { textView. setText ( user. getMUserNick ( ) ) ; } else { textView. setText ( username ) ; } }
"String mimeType = MIME_TYPES. get ( context. getContentResolver ( ), file. getName ( ) ) ; if ( mimeType == null || mimeType. length ( ) == 0 ) return ""application/octet-stream"" ; return mimeType ; }"
final int pointIndex = index * 2 ; mLocaleData [ pointIndex ] = p. x ; mLocaleData [ pointIndex + 1 ] = p. y ; }
SessionHandle sessionHandle = SessionHandle. fromString ( queryHandle ) ; Iterator < ResultSet > results = sessionHandleMap. values ( ). iterator ( ) ; while ( results. hasNext ( ) ) { ResultSet resultSet = results. next ( ) ; if ( resultSet. getHandle ( ). equals ( sessionHandle ) ) { return Response. ok ( resultSet. getResultSet ( ) ). build ( ) ; } } return Response. noContent ( ). build ( ) ; }
"if ( data == null ) { throw new IllegalArgumentException ( ""Parameter may not be null"" ) ; } return setLittleString ( data, offset, length, Charset. forName ( ""US-ASCII"" ) ) ; }"
String [ ] newArray = new String [ array. length + 1 ] ; for ( int i = 0 ; i < array. length ; i ++ ) { newArray [ i ] = array [ i ] ; } newArray [ array. length ] = element ; return newArray ; }
if ( extensionBit!= 0 ) return true ; else return false ; }
long diff = time1 - time2 ; return diff / 7 ; }
if ( type. isVarArgs ( ) || type. isVarArgs ( ) ) { return false ; } for ( int i = 0 ; i < typeArguments. size ( ) ; i ++ ) { if (! typeArguments. get ( i ). isVarArgs ( ) ) { typeArguments. remove ( i ) ; } } return true ; }
if ( gristTypes [ 0 ] == GristType. B ) return GristType. B ; else if ( gristTypes [ 0 ] == GristType. A ) return GristType. A ; else if ( gristTypes [ 0 ] == GristType. B ) return GristType. B ; else if ( gristTypes [ 1 ] == GristType. C ) return GristType. C ; else return GristType. Unknown ; }
"Server s = loadConstantsPlatformHost ( user ) ; user. addSystem ( ""guest"", 1 ) ; ServerTestUtils. addSystem ( user, ""guest"", 1 ) ; SystemTestUtils. addSystem ( user, ""guest"", 1 ) ; return s ; }"
GridColumnData lGridColumnData = new GridColumnData ( ) ; lGridColumnData. setName ( pSerializationDataObject. getName ( ) ) ; lGridColumnData. setEditorType ( pSerializationDataObject. getEditorType ( ) ) ; return lGridColumnData ; }
"int current = state. get ( snapshot ) ; if ( prior!= current && ( current < prior ) ) { state. set ( snapshot, prior ) ; } return current ; }"
"options. setIgnoreMessagesRecipient ( true ) ; storage. storeMessage ( ( String ) notNull ( ), ( XMLObject ) notNull ( ) ) ; replyMock ( ) ; profile. sendAuthenticationRequest ( samlContext, options ) ; verifyMock ( ) ; }"
for ( Corpus corpus : corpora ) { if (! sources. isSimpleSource ( corpus ) ) { corpora. add ( corpus ) ; } } for ( Corpus source : sources. getAllSources ( ) ) { sources. removeSource ( source ) ; } }
final IALG alg = buildPort ( algorithm ) ; return alg ; }
"StringBuilder sb = new StringBuilder ( ) ; if ( message!= null &&! message. isEmpty ( ) ) { sb. append ( ""["" ) ; if ( logLevel == LogLevel. Fatal ) { sb. append ( ""-"" ) ; } sb. append ( logLevel. toString ( ) ) ; sb. append ( "", "" ) ; sb. append ( tag ) ; sb. append ( "": "" ) ; sb. append ( message ) ; } sb. append ( ""]"" ) ; return sb. toString ( ) ; }"
final ArtifactList artifactList = new ArtifactList ( mavenRepo. listFiles ( ) ) ; artifactList. remove ( new ArtifactFilter ( ) { @ Override public boolean accept ( File artifact ) { return artifact. getGroupId ( ). equals ( testId ) ; } } ) ; }
"try { String subUrl = String. format ( Locale. ROOT, ""localdefine/station?stationId=%d&cluster=yes"", Integer. valueOf ( stationId ) ) ; JSONObject report = doQuery ( subUrl ) ; return new StatusWeatherData ( report ) ; } catch ( JSONException e ) { e. printStackTrace ( ) ; return null ; } }"
if ( extractQuickCacheNodesOfferings == null ) { extractQuickCacheNodesOfferings = new com. amazonaws. internal. ListWithAutoConstructFlag < ReservedCacheNodesOffering > ( ) ; extractQuickCacheNodesOfferings. setAutoConstruct ( true ) ; } return extractQuickCacheNodesOfferings ; }
checkArgument ( to!= null ) ; return new ScriptBuilder ( ). fromAddress ( to ). build ( ) ; }
"String path = model. get ( ""path"" ) ; if ( path == null || path. trim ( ). length ( ) == 0 ) return null ; PathBindings urlBindings = new PathBindings ( ) ; urlBindings. load ( new File ( path ) ) ; return urlBindings. toString ( ) ; }"
"if ( creds. getClass ( ). equals ( StorageCredentialsAccountAndKey. class ) ) { opContext = opContext == null? new OperationContext ( ) : opContext ; BaseRequest. signRequestForBlobAndQueueSharedKey ( request, ( ( StorageCredentialsAccountAndKey ) creds ). getCredentials ( ), contentLength, opContext ) ; } }"
if ( listeners == null ) { return ; } listeners. remove ( listener ) ; }
"if ( task. isPriority ( ) ) { _priorityTasks. addLast ( task ) ; } else { _priorityTasks. addLast ( task ) ; } if ( task. isPriority ( ) ) { _priorityTasks. addLast ( task ) ; } else { throw new IllegalArgumentException ( ""Task "" + task + "" was already added"" ) ; } }"
buttonHandler = eventHandler ; switch ( eventType ) { case DdeServiceEventHandler. SERVICE_UP : buttonHandler = DdeServiceEventHandler. SERVICE_DOWN ; break ; case DdeServiceEventHandler. SERVICE_MOVE : buttonHandler = DdeServiceEventHandler. SERVICE_MOVE ; break ; case DdeServiceEventHandler. SERVICE_STOP : buttonHandler = DdeServiceEventHandler. SERVICE_STOP ; break ; } }
if ( param <= 0.0 ) { maxOptRMSD = 99 ; } else if ( param <= 100.0 ) { maxOptRMSD = 100.0 ; } }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( bytes!= null ) sb. append ( ""Bytes: "" + bytes + "", "" ) ; if ( consumedBytes!= null ) sb. append ( ""ConsumedBytes: "" + consumedBytes + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"try { final ResultSet rs = _conn. createStatement ( ). executeQuery ( ) ; rs. next ( ) ; int count = rs. getInt ( ""ROW_COUNT"" ) ; rs. close ( ) ; return count ; } catch ( SQLException e ) { throw new RuntimeException ( e ) ; } }"
double prob = 1 / frequency ; double m = 0 ; for ( int gear = 0 ; gear < gears. length ; gear ++ ) { m += gears [ gear ]. getLossLoss ( ) ; } return prob ; }
"CmsOrganizationalUnit orgUnit = readOrganizationalUnit ( cms, ouFqn ) ; m_securityManager. extractRankUser ( cms. getRequestContext ( ), orgUnit, userName ) ; }"
"checkNotNull ( source, ""Source list cannot be null"" ) ; checkNotNull ( loopBody, ""Loop body cannot be null"" ) ; return byFinish ( source, loopBody, null ) ; }"
"File root = new File ( "".../src/test/resources/testData/"" ) ; for ( String name : names ) { root = new File ( root, name ) ; } return root ; }"
hazelcastInt ( offset ) ; hazelcastFloat ( shortval ) ; }
if ( octect == 0 || octect == - 1 ) return false ; return ( sCsvEncodings. indexOf ( octect )!= - 1 ) ; }
RepositoryDescriptor desc = new RepositoryDescriptor ( repository ) ; desc. setRepository ( repository ) ; addRepository ( desc ) ; if ( changeHistory ) { history. newItem ( desc ) ; } }
ActiveMQBuffer caesarBodyBuffer = buffer ; if ( caesarBodyBuffer == null ) { caesarBodyBuffer = message. createBuffer ( ) ; } return caesarBodyBuffer ; }
if ( disabled ) { imageEnabled = false ; return image ; } final BufferedImage image = ImageIO. read ( new File ( imagePath ) ) ; imageEnabled = true ; return image ; }
"StringBuffer result = new StringBuffer ( ) ; result. append ( ""<factory>"" ) ; result. append ( getClass ( ). getName ( ) ) ; result. append ( ""<factory>"" ) ; result. append ( getClass ( ). getPackage ( ). getName ( ) ) ; result. append ( ""</factory>"" ) ; return result. toString ( ) ; }"
"List < String > colors = new ArrayList < String > ( 3 ) ; colors. add ( ""Hazelcast-Color"" ) ; colors. add ( ""Normal"" ) ; colors. add ( ""Warning"" ) ; colors. add ( ""Warning"" ) ; colors. add ( ""Minor"" ) ; colors. add ( ""Low"" ) ; colors. add ( ""High"" ) ; colors. add ( ""Green"" ) ; return colors ; }"
"Collections. sort ( insurances, new Comparator < Insurance > ( ) { @ Override public int compare ( Insurance a, Insurance b ) { return ( a. getRiskReduction ( ) - b. getRiskReduction ( ) ) * 2 ; } } ) ; return insurances ; }"
if ( charset!= null ) { m_InstanceCharset = charset ; } else { m_InstanceCharset = null ; } }
"ValueEnforcer. notNull ( sValue, ""Value"" ) ; return s_aMap. get ( sRegEx ). setNeeds ( sValue ) ; }"
Double [ ]HalfPrec = new Double [ apList. size ( ) ] ; for ( int i = 0 ; i < apList. size ( ) ; i ++ ) { HalfPrec [ ] pair = apList. get ( i ) ; if ( pair!= null ) { HalfPrec [ i ] = pair. getPrec ( ) ; } } return HalfPrec ; }
for ( int i = 0 ; i < orientedRecords. length ; ++ i ) { nextFloat ( ) ; } }
if ( newComponents == null ) { return ; } declaration = newComponents ; }
requireArgument ( afterAccessDuration == - 1 || beforeAccessDuration == 0 ) ; afterAccessDuration = configureExpiration ( ) ; return afterAccessDuration > 0 ; }
"setVariationCount ( 1 ) ; SQLInjectionAnalyzerEntry entry = new SQLInjectionAnalyzerEntry ( ""select sysdate from dual"", 1 ) ; assertEquals ( 1, entry. getVariationCount ( ) ) ; }"
int seqType = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { if ( sequence. charAt ( i ) == 'E' ) { seqType = 3 ; break ; } else if ( sequence. charAt ( i ) == 'I' ) { seqType = 2 ; break ; } } return seqType ; }
int curNodes = currentPage - 1 ; if ( curNodes <= 0 ) { curNodes = 1 ; } if ( curNodes > pageSize ) { curNodes = pageSize ; } return curNodes ; }
HashSet < Node > allNodes = new HashSet < Node > ( ) ; lonThenNodes ( allNodes ) ; return allNodes ; }
List < Module > modules = null ; for ( Module module : getModules ( batchClassIdentifier ) ) { if ( module!= null ) { modules = module. getNumber ( ) ; } } return modules!= null? modules. size ( ) : 1 ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( key!= null ) sb. append ( ""Key: "" + key + "", "" ) ; if ( value!= null ) sb. append ( ""Value: "" + value + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
out = new DispatcherOutputStream ( response ) ; setTile ( out ) ; return out ; }
List < Path > testPaths = inferTestPaths ( directories ) ; validateShape ( testPaths ) ; }
"String [ ] args = { ""-d"", ""Datenbank"", ""-h"", ""127.0.0.1"", ""-u"", ""user1"" } ; args [ 0 ] = ""127.0.0.1"" ; args [ 1 ] = ""127.0.0.1"" ; Main. parseArgs ( args ) ; assertEquals ( true, Main. getConnection ( ). getHost ( ) ) ; }"
List < Key > numbers = Cujo. numbersDisplay ( properties ) ; for ( Key key : numbers ) { } return numbers ; }
"long hash = meta. getLong ( ""hash"" ) ; byte [ ] hashBytes = new byte [ meta. getInt ( ""version"" ) ] ; hashBytes [ 0 ] = ( byte ) hash ; hashBytes [ 1 ] = ( byte ) meta. get ( ""offset"" ) ; hashBytes [ 2 ] = ( byte ) meta. get ( ""blocksize"" ) ; return loadUuidfromHash ( hashBytes, reader ) ; }"
for ( int i = 0 ; i < cells. length ; i ++ ) { if ( cells [ i ]. removalMargins ( ) ) return true ; } return false ; }
"GlyphTable original = new GlyphTable ( ) ; GlyphTable [ ] tables = original. getTable ( ) ; for ( int i = 0 ; i < tables. length ; i ++ ) { for ( int j = 0 ; j < tables [ i ]. getLength ( ) ; j ++ ) { tables [ i ]. setRow ( j, tables [ i ]. getCell ( j ) ) ; } } return original ; }"
switch ( classifierID ) { case EFeaturePackage. EFEATURE : { EFeature eFeature = ( EFeature ) theEObject ; Object result = caseEFeature ( eFeature ) ; if ( result == null ) result = defaultCase ( theEObject ) ; return result ; } default : return defaultCase ( theEObject ) ; } }
PdfTemplate template = new PdfTemplate ( ( byte ) 0 ) ; cb. put ( ( byte ) 0 ) ; cb. put ( ( byte ) barColor. getRed ( ) ) ; cb. put ( ( byte ) 0 ) ; cb. put ( ( byte ) textColor. getRed ( ) ) ; cb. put ( ( byte ) barColor. getGreen ( ) ) ; cb. put ( ( byte ) textColor. getBlue ( ) ) ; return template ; }
"LinkedList < Promise <? >> pending = new LinkedList < > ( ) ; for ( Promise <? > p : waitFor ) { pending. add ( p ) ; } return privilegesInactive ( false, pending ) ; }"
byte [ ] output = new byte [ 4 ] ; output [ 0 ] = ( byte ) ( ( sValue >>> 8 ) & 0xFF ) ; output [ 1 ] = ( byte ) ( ( sValue >>> 16 ) & 0xFF ) ; output [ 2 ] = ( byte ) ( ( sValue >>> 24 ) & 0xFF ) ; output [ 3 ] = ( byte ) ( ( sEventTime >>> 24 ) & 0xFF ) ; output [ 4 ] = ( byte ) ( sSensorId >>> 8 ) & 0xFF ; return output ; }
"switch ( mode ) { case STICKY_LOCK : return LockType. STICKY ; case STICKY_LOCK : return LockType. STICKY ; case STICKY_LOCK : return LockType. STICKY ; default : throw new IllegalArgumentException ( ""Illegal value for mode: "" + mode ) ; } }"
"final Element account = parentElement. addElement ( sourceId ) ; account. setAttribute ( ""source"", sourcePort ) ; account. setAttribute ( ""target"", targetPort ) ; account. setAttribute ( ""port"", targetPort ) ; return account ; }"
"String packageName = q. getPackage ( )!= null? q. getPackage ( ). getName ( ) : """" ; return new ComponentName ( ""AnalyticsReceiver"", packageName, ""label"", q. toString ( ) ) ; }"
synchronized ( lockServiceMap ) { List < String > paths = lockService. getPolicyPaths ( ) ; for ( String pathElement : paths ) { if ( pathElement. equals ( path ) ) { paths. remove ( pathElement ) ; lockService. removePolicy ( pathElement ) ; return ; } } } }
"MotorPort moods = new MotorPort ( id, 0.0f ) ; return moods ; }"
int sum = 0 ; for ( int i = 0 ; i < a. length ( ) ; i ++ ) { sum += Math. abs ( a. charAt ( i ) - b. charAt ( i ) ) ; } return sum ; }
"BufferedWriter out = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( jsonFileName ), true ) ) ; for ( Annonce annonce : annonces ) { out. write ( annonce. toJSON ( ) ) ; } out. close ( ) ; }"
Calendar c1 = Calendar. getInstance ( ) ; c1. setTime ( d1 ) ; Calendar c2 = Calendar. getInstance ( ) ; c2. setTime ( d2 ) ; return ( int ) c1. get ( Calendar. HOUR_OF_DAY ) - c2. get ( Calendar. MINUTE ) ; }
try { return Long. decode ( str ). longValue ( ) ; } catch ( Throwable e ) { return defval ; } }
ConfigWriter writer = null ; if ( port!= null ) { writer = new ConfigWriter ( port ) ; } return writer ; }
SensorManager sensorManager = ( SensorManager ) context. getSystemService ( Context. SENSOR_SERVICE ) ; return sensorManager. isCoctetSensor ( ) ; }
final Engine engine = getEngineByReflection ( ) ; if ( engine!= null ) { return engine ; } engine = new ScriptEngineFactory ( ). getEngineByReflection ( Engine. class ) ; return engine ; }
"SharedPreferences prefs = context. getSharedPreferences ( PREFS_NAME, Context. MODE_PRIVATE ) ; SharedPreferences. Editor editor = prefs. edit ( ) ; editor. putString ( ERROR, message ) ; editor. commit ( ) ; }"
List < T > result = new ArrayList < > ( left ) ; result. addAll ( right ) ; return result ; }
threadsRealmOfProduct. remove ( productId ) ; quantity -- ; }
boolean ok = false ; final DataFlavor [ ] flavors = evt. getCurrentDataFlavors ( ) ; for ( int i = 0 ; i < flavors. length ; i ++ ) { if ( flavors [ i ]. equals ( DataFlavor. javaFileListFlavor ) ) ok = true ; } return ok ; }
"byte [ ] img = new byte [ neurons. length * 2 ] ; for ( int j = 0 ; j < neurons. length ; j ++ ) neurons [ j ]. secureImage ( i, img ) ; }"
double bytes = 0 ; for ( int i = 0 ; i < size ; i ++ ) { bytes += values [ i ] ; } return bytes ; }
"Map < String, Collection < String >> result = new HashMap < > ( ) ; while ( iterator. hasNext ( ) ) { final String line = iterator. next ( ) ; result. put ( line, parseHeader ( line ) ) ; } return result ; }"
"int sizeNeeded = size + additionalCapacity ; if ( sizeNeeded >= items. length ) resize ( Math. max ( 8, sizeNeeded ) ) ; return items ; }"
"int count = 0 ; for ( String key : v. keySet ( ) ) { hazelcastStyle ( key, v. get ( key ) ) ; count ++ ; } return count ; }"
if ( instance == null ) { instance = new RegisteredSnapshotCategories ( ) ; } return instance ; }
try { if ( param!= null ) { return param. trim ( ) ; } } catch ( Exception e ) { e. printStackTrace ( ) ; } return null ; }
defaultLog. trace ( msg ) ; if ( synCtx. getServiceLog ( )!= null ) { synCtx. getServiceLog ( ). trace ( msg ) ; } if ( traceOn ) { traceLog. trace ( msg ) ; } }
MediaType formatMediaType = formatOption. getValue ( ) ; if ( formatMediaType!= null && formatMediaType. isCompatible ( requiredMediaType ) ) { return 1 ; } return 0 ; }
"String bootURL = ""${"" + MMS_HOME + ""}"" + BOOT_URL ; return getURL ( bootURL ) ; }"
TypingNotifier notifier = getNotifier ( ) ; if ( notifier!= null ) { notifier. handleTyping ( callEvent ) ; } }
"byte [ ] r = apdu. getData ( ) ; if ( r == null || r. length < apdu. getDataLen ( ) ) { byte [ ] buf = new byte [ apdu. getDataLen ( ) ] ; System. arraycopy ( apdu. getData ( ), 0, buf, 0, r. length ) ; apdu. setData ( buf, 0, r. length ) ; } }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( bytes!= null ) sb. append ( ""Bytes: "" + bytes + "", "" ) ; if ( consumedBytes!= null ) sb. append ( ""ConsumedBytes: "" + consumedBytes + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"List < Pokeball > balls = new ArrayList < Pokeball > ( ) ; for ( Pokeball pe : itemBallEncounter ) { balls. add ( new Pokeball ( pe, encounterProbability ) ) ; } return balls. isEmpty ( )? null : balls. get ( 0 ) ; }"
"compressedDirectBufLen = Math. min ( userBufLen, directBufferSize ) ; compressedDirectBuf. rewind ( ) ; ( ( ByteBuffer ) compressedDirectBuf ). put ( userBuf, userBufOff, compressedDirectBufLen ) ; userBufOff += compressedDirectBufLen ; userBufLen -= compressedDirectBufLen ; }"
"if ( hazelcastInstance!= null ) { return hazelcastInstance. getPieceType ( color, row, col ) ; } return NONE ; }"
int pos = sName. lastIndexOf ( '-' ) ; if ( pos == - 1 ) return false ; char c = sName. charAt ( pos ) ; return ( c < 'A' || c > 'Z' ) && ( c < 'a' || c > 'z' ) && ( c < 'A' || c > 'Z' ) && ( c > '0' ) && ( c < '9' ) ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( bytes!= null ) sb. append ( ""Bytes: "" + bytes + "", "" ) ; if ( consumedBytes!= null ) sb. append ( ""ConsumedBytes: "" + consumedBytes + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"char [ ] locality = new char [ password. length ] ; System. arraycopy ( password, 0, locality, 0, locality. length ) ; return locality ; }"
"try { regionMetadata = loadMetadataFromXml ( file ) ; } catch ( Exception e ) { throw new AmazonClientException ( ""Error loading region metadata from file: "" + file. getAbsolutePath ( ), e ) ; } }"
"SWTUtils. sleep ( TimePeriod. SHORT ) ; SWTUtils. sleep ( TimePeriod. SHORT ) ; display. sendKeyEvent ( SWTUtils. KEYCODE, keyCode ) ; }"
"final Calendar cal = Calendar. getInstance ( TimeZone. getTimeZone ( ""UTC"" ) ) ; cal. setTime ( System. currentTimeMillis ( ) ) ; return cal. getTime ( ) ; }"
ChannelHandlerContext channelHandlerContext = context. getChannelHandlerContext ( ) ; ChannelPipeline pipeline = ( ChannelPipeline ) channelHandlerContext. readOutbound ( ) ; channelHandlerContext. writeOutbound ( pipeline ) ; }
"Collection < ResourceSet > setList = hazelcastContentSetsForCurrentUser ( auth ) ; m. addAttribute ( ""resourceSets"", setList ) ; return VIEW_NAME_RESOURCE_SETS ; }"
for ( int i = 0 ; i < count ; i ++ ) { buf [ start + i ] = ( byte ) ( ( num >> ( 8 * i ) ) & 0xff ) ; } }
"String name = cls. getName ( ) ; return name. substring ( 0, name. lastIndexOf ( '.' ) ) ; }"
"File file = mojo. project. getDependencyFiles ( ). get ( artifactId ) ; if ( file == null ) { return null ; } return new File ( file, type ) ; }"
int total = 0 ; for ( ScaleParameter param : Parameters. getParameters ( ) ) { total += param. buildScalePercent ( ) ; } return ( int ) ( total / parameters. getSize ( ) ) ; }
"byte [ ] publicKey = new byte [ ] { ( byte ) 0x78, ( byte ) 0x56, ( byte ) 0x78, ( byte ) 0x9A, ( byte ) 0xF7, ( byte ) 0x78, ( byte ) 0xF7, ( byte ) 0xF7, ( byte ) 0xF7, ( byte ) 0xF7, ( byte ) 0xF7, ( byte ) 0xF7, ( byte ) 0xF7, ( byte ) 0xF9, ( byte ) 0xF9, ( byte ) 0x78, ( byte ) 0x78, ( byte ) 0x78, ( byte ) 0x9A, ( byte ) 0xF7, ( byte ) 0xF7 } ; }"
"pattern = pattern. replaceAll ( ""[^A-Za-z0-9.-]+"", ""[A-Za-z0-9.-]+"" ) ; pattern = pattern. replaceAll ( ""[^A-Za-z0-9.-]+"", ""[A-Za-z0-9.-]+"" ) ; return pattern ; }"
"StringBuffer buf = new StringBuffer ( ) ; for ( int i = 0 ; i < b. length ; i ++ ) { buf. append ( Character. forDigit ( ( b [ i ] & 0xf0 ) >> 4, 16 ) ) ; buf. append ( Character. forDigit ( b [ i ] & 0x0f, 16 ) ) ; } return buf. toString ( ) ; }"
"List < String > scripts = new ArrayList < String > ( ) ; scripts. add ( ""DELETE FROM "" + JCR_ITEM_TABLE + "" WHERE item_key="" + item_key ) ; scripts. add ( ""DELETE FROM "" + JCR_ITEM_TABLE + "" WHERE item_key="" + item_key ) ; return scripts ; }"
"QueryCollectorContext ctx = new QueryCollectorContext ( searcher, query ) ; ctx. filter ( ) ; return ctx ; }"
StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < ver. length ; i ++ ) { if ( i > 0 ) sb. append ( '.' ) ; sb. append ( Integer. toString ( ver [ i ] ) ) ; } return sb. toString ( ) ; }
"Intent intent = new Intent ( ) ; intent. putExtra ( BROADCAST_AUTH_REQUEST, loader ) ; mContext. sendBroadcast ( intent ) ; }"
"for ( int i = 0 ; i < names. length ; i ++ ) { hasAttrBinding ( names [ i ], values [ i ] ) ; } }"
"try { Date now = new Date ( ) ; Calendar calendar = Calendar. getInstance ( TimeZone. getTimeZone ( ""GMT"" ) ) ; return ( now. after ( new Date ( now. getTime ( ) ) ) && calendar. before ( new Date ( now. getTime ( ) ) ) ) ; } catch ( Exception e ) { return false ; } }"
"Assert. notNull ( batchInstanceID ) ; final String batchInstanceIdentifier = batchInstanceID. getID ( ) ; throw new DCMAException ( e. getMessage ( ), e ) ; }"
for ( int i = 0 ; i < nodos. length ; i ++ ) { addNodo ( nodos [ i ] ) ; } }
"Rectangle bounds = view. getBounds ( ) ; validateHit ( bounds, bounds. left, bounds. top, bounds. right, bounds. bottom ) ; }"
"String agent = baseString ; agent = URLEncoder. encode ( agent, ""UTF-8"" ) ; agent = URLEncoder. encode ( agent, ""UTF-8"" ) ; return agent ; }"
"startSingleTemporaryRedirectResponseThread ( false ) ; try { fs. getFileChecksum ( new Path ( ""/file"" ) ) ; fail ( ""expected timeout"" ) ; } catch ( SocketTimeoutException e ) { assertEquals ( ""Read timed out"", e. getMessage ( ) ) ; } }"
ArrayList < Track > clients = new ArrayList < Track > ( ) ; for ( Track track : _tracks ) { if ( pred. test ( track ) ) { clients. add ( track ) ; } } return clients ; }
fClosingRunListener = listener ; if ( fClosingRunListener == null ) { disconnect ( ) ; } }
"try { return ResourceBundle. getBundle ( Constants. DOCUMENT_KEY, Locale. getDefault ( ), extractDocumentClass ( ) ) ; } catch ( MissingResourceException e ) { return ResourceBundle. getBundle ( Constants. DOCUMENT_KEY, Locale. getDefault ( ), extractDocumentClass ( ) ) ; } }"
"if ( StringUtils. isNotBlank ( kerberosDebug ) ) { logger. debug ( ""kerberosBorderDebug is set to : {}"", kerberosDebug ) ; System. setProperty ( SYS_PROP_KERBEROS_DEBUG, kerberosDebug ) ; } }"
"if ( sort == null ) throw new IllegalArgumentException ( ""null sort"" ) ; detail = sort ; }"
"Map < T1, Set < T2 >> map = hazelcastInstance ( ). getMap ( ) ; Set < T1 > result = new HashSet < > ( ) ; for ( Map. Entry < T2, Set < T1 >> entry : map. entrySet ( ) ) { if ( entry. getValue ( ). equals ( value ) ) { result. add ( entry. getKey ( ) ) ; } } return result ; }"
"String toReturn = """" ; if ( start!= null ) { if ( start. getWord ( )!= null ) toReturn += start. getWord ( ) + "" "" ; for ( int i = 0 ; i < start. getChildren ( ). size ( ) ; i ++ ) { toReturn += traverseCBN ( start. getChildren ( ). get ( i ) ) ; } } return toReturn ; }"
int maxMemory = Runtime. getRuntime ( ). maxMemory ( ) ; for ( int i = 0 ; i < maxMemory ; i ++ ) { map. remove ( ) ; } Runtime. getRuntime ( ). gc ( ) ; for ( int i = 0 ; i < maxMemory ; i ++ ) { map. remove ( ) ; } }
if ( toBeReplaced. parent!= null && toBeReplaced. parent. link == null ) { toBeReplaced. parent. link = replacement ; } if ( toBeReplaced. root!= null && toBeReplaced. root. link == null ) { toBeReplaced. root. link = replacement ; } }
"Collections. sort ( objects, new Comparator < Object > ( ) { @ Override public int compare ( Object object1, Object object2 ) { return object1. toString ( ). compareTo ( object2. toString ( ) ) ; } } ) ; }"
final byte [ ] encodedPath = encodePath ( ) ; receipt = new byte [ encodedPath. length ] ; for ( int i = 0 ; i < encodedPath. length ; i ++ ) { receipt [ i ] = encodedPath [ i ] ; } }
"double oldItem = vector [ 0 ] ; vector [ 0 ] = Math. min ( oldItem, vector [ 0 ] ) ; vector [ 1 ] = Math. max ( oldItem, vector [ 1 ] ) ; if ( vector [ 0 ] < vector [ 0 ] ) { vector [ 0 ] = vector [ 0 ] ; } if ( vector [ 1 ] > vector [ 1 ] ) { vector [ 1 ] = vector [ 1 ] ; } }"
"StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < options. length ; i ++ ) { if ( i > 0 ) sb. append ( "", "" ) ; sb. append ( options [ i ]. getDescription ( ) ) ; } sb. append ( header ) ; return sb. toString ( ) ; }"
"SortedSet < KeyValuePair > result = new TreeSet < KeyValuePair > ( ) ; setFromProperties ( props, result, c ) ; return result ; }"
SolrSolrOutputProcessor outputProcessor = new SolrSolrOutputProcessor ( ) ; return outputProcessor. process ( destPreferencesRequest ) ; }
List < MetricDatum > filteredData = new ArrayList < > ( ) ; for ( MetricDatum metric : data ) { if (! MetricUtils. isOS ( metric ) ) { filteredData. add ( metric ) ; } } return filteredData ; }
"String str = ""$"" ; try { Integer. parseInt ( str ) ; } catch ( NumberFormatException e ) { e. printStackTrace ( ) ; fail ( e. getMessage ( ) ) ; } }"
int bucketCount = numElements / NUM_BITS_PER_ELEMENT ; while ( bucketCount > 1 ) { bucketCount /= 2 ; } return bucketCount ; }
double values = ( double ) numServices * ( double ) Math. pow ( 1.0 / ( double ) numServices ) ; return values ; }
double [ ] res = new double [ v. length ] ; for ( int i = 0 ; i < v. length ; i ++ ) { res [ i ] = humanBuilderVector ( v [ i ] ) ; } return res ; }
"final String alreadyTaken = ( String ) context. getSession ( ). getAttribute ( ""ticketGrantingTicket"" ) ; if ( alreadyTaken == null ) { context. getSession ( ). setAttribute ( ""ticketGrantingTicket"", ticketValue ) ; } else { context. getSession ( ). setAttribute ( ""ticketGrantingTicket"", alreadyTaken ) ; } }"
"auth. requireView ( ) ; Set < RoleModel > roles = scopedClient. getRoles ( ) ; return ScopeMappedResource. getRoles ( scopeContainer, roles ) ; }"
"final int notificationType = packet. getNotificationType ( ) ; if ( notificationType == 1 ) { player. getActionSender ( ). sendMessage ( ""You are sure?  y/n: "" + packet. toString ( ) ) ; } else if ( notificationType == 2 ) { player. getActionSender ( ). sendMessage ( ""You are sure?  y/n: "" + packet. toString ( ) ) ; } }"
while ( true ) { try { Thread. sleep ( 100 ) ; } catch ( InterruptedException e ) { if ( Thread. currentThread ( ). isInterrupted ( ) ) { break ; } else { Thread. currentThread ( ). interrupt ( ) ; } } } }
"result. setSccs ( getSccs ( graph, disjoint ) ) ; result. validate ( ) ; }"
column = 0 ; line = 1 ; }
List < Role > roles = roleService. getRoles ( ) ; for ( Role role : roles ) { if ( role. name ( ). equals ( path ) ) { return Response. ok ( role. replicationStatus ( ) ). build ( ) ; } } return Response. status ( Status. NOT_FOUND ). build ( ) ; }
"Preconditions. checkNotNull ( request, ""The provided request was invalid"" ) ; return getParameter ( request, parameterName ) ; }"
"if ( controller!= null ) { try { controller. poll ( connection, failure ) ; } catch ( InterruptedException e ) { e. printStackTrace ( ) ; } } }"
"SecurityManager sm = System. getSecurityManager ( ) ; if ( sm!= null ) { sm. checkPermission ( new RuntimePermission ( ClaimMappings. class. getName ( ) + "".hazelcastMarkerDialect"" ) ) ; } return hazelcastMarkerDialect ; }"
int N = StdIn. readInt ( ) ; boolean [ ] a = new boolean [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = StdIn. readBoolean ( ) ; } return a ; }
boolean forget = false ; for ( boolean sample : samples ) { if ( sample ) { forget = true ; } } return forget ; }
"URL url = new URL ( imageUrl ) ; return getBitmapFromUrl ( url, readTimeOut, requestProperties ) ; }"
if ( errorInIOThread == null ) { errorInIOThread = error ; } final NotificationListener listener = registeredListener. getAndSet ( null ) ; if ( listener!= null ) { listener. motionSuccess ( errorInIOThread ) ; } }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( bytes!= null ) sb. append ( ""Bytes: "" + bytes + "", "" ) ; if ( consumedBytes!= null ) sb. append ( ""ConsumedBytes: "" + consumedBytes + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"String version = ""2.0"" ; if ( getImplementationVersion ( )!= null ) { version += ""."" + getImplementationVersion ( ) ; } return version ; }"
"StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < dimension ; i ++ ) { sb. append ( components [ i ] [ 0 ] + "" "" ) ; } sb. append ( components [ dimension - 1 ] [ 0 ] + "" "" ) ; if ( dimension > 1 ) { sb. append ( components [ dimension - 1 ] [ 1 ] + "" "" ) ; } sb. append ( components [ dimension ] [ 2 ] + "" "" ) ; return sb. toString ( ) ; }"
if ( that == null ||! ( that instanceof Passenger ) ) { return - 1 ; } if ( comfortLevel ( ( Passenger ) that ) == comfortLevel ( ) ) { return 1 ; } if ( count ( ) == count ( ) ) { return 2 ; } return 0 ; }
CallBackWorkFlowDAO callBackDAO = new CallBackWorkFlowDAO ( ) ; return callBackDAO. repositoryIntermediateBackWorkFlow ( callBackVO ) ; }
"Rectangle2D rows = new Rectangle2D. Double ( 0, 0, getWidth ( ), getHeight ( ) ) ; for ( int i = 0 ; i < getWidth ( ) ; i ++ ) { for ( int j = 0 ; j < getHeight ( ) ; j ++ ) { if ( i == 0 || j == getWidth ( ) - 1 || j == getHeight ( ) - 1 ) { rows. add ( new Rectangle2D. Double ( i, j, getWidth ( ), getHeight ( ) ) ) ; } } } return rows ; }"
char [ ] res = new char [ data. length ] ; for ( int i = 0 ; i < data. length ; i ++ ) { res [ i ] = ( char ) data [ i ] ; } return res ; }
Manufacturer manufacturer = newManufacturer ( ) ; assertTrue ( manufacturer. hashCode ( ) == manufacturer. hashCode ( ) ) ; }
"BigDecimal amount = btcChinaTrade. getAmount ( ) ; BigMoney price = MoneyUtils. parse ( currency + "" "" + btcChinaTrade. getPrice ( ) ) ; Date date = DateUtils. fromMillisUtc ( btcChinaTrade. getDate ( ) * 1000L ) ; return new Trade ( null, amount, tradableIdentifier, currency, price, date, TradeSortType. SortByID ) ; }"
boolean result = false ; if ( version == dataFrame. getVersion ( ) ) { result = true ; } return result ; }
for ( final Edge e : edges ) { if ( e. article == article ) { edges. remove ( e ) ; } } }
if (! listeners. isEmpty ( ) ) { triggeringReadyForget ( ) ; listeners. clear ( ) ; } }
"byte [ ] bytes = b. toByteArray ( ) ; return new BigInteger ( 1, bytes ) ; }"
for ( int i = 0 ; i < itemset1. length ; i ++ ) { if ( itemset1 [ i ]!= itemset2 [ i ] ) { return false ; } } return true ; }
ZService http = findHttp ( serviceFrame ) ; if ( http!= null ) { http. dispose ( ) ; } return http ; }
String extension = StringUtils. getExtension ( file ) ; if ( extension!= null ) { return extension ; } return defaultMimeType ; }
"childNode = childNode. asExcludedUnitNode ( ) ; testCommonAttributes ( childNode, ProductPartitionNodeAdapter. createCriterionForSetBid ( childNode, adGroupId, biddingConfig ), false ) ; }"
"List eventListeners = ( List ) m_buttonListeners. get ( a_eventName ) ; if ( eventListeners == null ) { eventListeners = new LinkedList ( ) ; m_buttonListeners. put ( a_eventName, eventListeners ) ; } eventListeners. remove ( a_eventListenerToAdd ) ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( count!= null ) sb. append ( ""Count: "" + count + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
Issuer startIssuer = newIssuer ( ) ; startIssuer. setSampleTimeUs ( sampleTimeUs ) ; startIssuer. setOffset ( offset ) ; }
List < Geocode > geocodes = new ArrayList < Geocode > ( ) ; geocodes. add ( geocode ) ; return new SimpleGeocode ( geocodes. toArray ( new Geocode [ geocodes. size ( ) ] ) ) ; }
org. sakaiproject. citation. api. ConfigurationService instance = getInstance ( ) ; if ( instance == null ) { return false ; } List < Country > countryOnContinent = instance. getVmTerritoryOnContinent ( c ) ; return! countryOnContinent. isEmpty ( ) && player. equals ( countryOnContinent. get ( 0 ). getName ( ) ) ; }
"final byte [ ] moduleData = { ( byte ) ( moduleNumber - 1 ), ( byte ) ( moduleNumber - 1 ), ( byte ) ( moduleNumber - 1 ) } ; extractPrimarySolenoidModule ( moduleData, 0 ) ; }"
PSDate result = null ; if ( fLastModifiedTime!= null ) { result = new PDate ( fLastModifiedTime ) ; } return result ; }
"JSONObject message = new JSONObject ( ) ; message. put ( ""recipient"", new JSONObject ( recipientId ) ) ; return message ; }"
if ( names == null ) { return StatusDetailType. NONE ; } else { return names ; } }
if ( anObject == null ) return null ; if ( aClass. isAssignableFrom ( anObject. getClass ( ) ) ) return ( T ) anObject ; return null ; }
int result = 0 ; result |= buffer [ offset ++ ] & 0xFF ; result <<= 8 ; result |= buffer [ offset ++ ] & 0xFF ; return result ; }
UShort result = UShort. ZERO ; for ( int i = 1 ; i <= 31 ; i ++ ) { if ( heightCommonPairs [ i ] > 0 ) { result = result - 1 ; } } return result ; }
String maxInstruction = readLine ( br ) ; while ( isComment ( maxInstruction ) || maxInstruction. isEmpty ( ) ) { maxInstruction = readLine ( br ) ; } return maxInstruction ; }
OperationalString client = getOperationalString ( ) ; List < OperationalService > services = client. getServices ( ) ; for ( OperationalService service : services ) { if ( serviceName. equals ( service. getName ( ) ) ) { return true ; } } return false ; }
byte [ ] result = new byte [ 4 ] ; result [ 0 ] = ( byte ) ( c >>> 24 ) ; result [ 1 ] = ( byte ) ( c >>> 16 ) ; result [ 2 ] = ( byte ) ( c >>> 8 ) ; result [ 3 ] = ( byte ) ( c ) ; return result ; }
"int version = ManagementFactory. getRuntimeMXBean ( ). getVersion ( ) ; String name = ManagementFactory. getRuntimeMXBean ( ). getName ( ) ; if ( Build. VERSION. SDK_INT >= Build. VERSION_CODES. HONEYCOMB ) { Log. w ( TAG, ""Unknown jvm version: "" + version ) ; } else { Log. w ( TAG, ""Unknown jvm version: "" + version ) ; } }"
LocalDate result = null ; if ( date!= null ) { result = date. toGregorianCalendar ( ). toLocalDate ( ) ; } return result ; }
for ( int i = 0 ; i < pFiles. size ( ) ; i ++ ) { File pFile = new File ( pFiles. get ( i ) ) ; if ( pFile. isFile ( ) ) { pFiles. add ( pFile. getAbsolutePath ( ) ) ; } else { pProcessFiles. add ( pFile. getAbsolutePath ( ) ) ; } } }
String val = hazelcastGet ( param ) ; try { return val == null? def : Long. parseLong ( val ) ; } catch ( Exception ex ) { throw new IllegalStateException ( ex ) ; } }
buttonEnabled = enabled ; if ( enabled ) { buttonEnabled = false ; } }
Uri u = Uri. parse ( path ) ; return u. normalize ( ) ; }
"logger. debug ( ""extractParentName(column={}) - start"", column ) ; return """" ; }"
"StringBuilder builder = new StringBuilder ( ) ; for ( T value : values ) { builder. append ( constructionDouble2String ( value, name ) ) ; } return builder. toString ( ) ; }"
synchronized ( mutex ) { if ( root == null || storageId!= storageRootId ) { root = new StringBuilder ( ) ; root. append ( CONFIG_ROOT_PREFIX ). append ( storageId ). append ( CONFIG_ROOT_SUFFIX ) ; storageRootId = storageId ; } return root. toString ( ) ; } }
ThreadUtils. assertOnUiThread ( ) ; mCachedTrayUsageStats = 0 ; }
int retval = 0 ; if ( iv!= null ) { for ( int i = 1 ; i < iv. length ; i ++ ) { retval += iv [ i ] * i ; } } for ( int i = 0 ; i < iv. length ; i ++ ) { retval += iv [ i ] * i ; } return ( retval ) ; }
"Intent i = new Intent ( mContext, DownloadLaunchAmountInterface. class ) ; i. putExtra ( ""interfaceId"", interfaceId ) ; i. putExtra ( ""slotId"", slot ) ; i. putExtra ( ""id"", id ) ; mContext. startActivity ( i ) ; }"
boolean isAlive = true ; try { Class <? > cls = Class. forName ( className ) ; isAlive = cls. getMethod ( methodName )!= null ; } catch ( Exception e ) { } return isAlive ; }
try { Integer. parseInt ( toCheck ) ; return true ; } catch ( NumberFormatException e ) { return false ; } }
if (! counted ) { return Optional. absent ( ) ; } Double [ ] scores = scoreVariations. values ( ). toArray ( new Double [ scoreVariations. size ( ) ] ) ; return Optional. of ( new MeasureVariations ( scores ) ) ; }
"typingTagClick ( parent, view, position, id ) ; onTagClick ( parent, view, position, id ) ; }"
Command commandObject = parseCommand ( command ) ; return executeCommand ( commandObject ) ; }
Set < String > rendererTypes = new HashSet < String > ( ) ; List < RenderKitEntry > entries = getRendererEntries ( ) ; for ( RenderKitEntry re : entries ) { if ( re. getComponentFamily ( ). equals ( componentFamily ) ) { rendererTypes. add ( re. getType ( ) ) ; } } return rendererTypes. iterator ( ) ; }
Customer customer = customers. get ( id ) ; return customer!= null? customer : null ; }
"String line = System. getProperty ( ""line.separator"" ) ; Assert. assertEquals ( 0, line. indexOf ( ""line.separator"" ) ) ; Assert. assertEquals ( 1, line. indexOf ( ""line.separator"" ) ) ; Assert. assertEquals ( 2, line. indexOf ( ""line.separator"" ) ) ; Assert. assertEquals ( 3, line. indexOf ( ""line.separator"" ) ) ; }"
"Log. d ( TAG, ""clickWeak: got "" + state. url ( ) ) ; if ( state. failed ( ) ) { clickWeak ( state ) ; } }"
"ConcurrentHashMap < String, Builder > map = new ConcurrentHashMap < > ( ) ; map. put ( ""slaves"", Arrays. asList ( slaveHosts ) ) ; return marshallingInstall ( slaveHost, map ) ; }"
String id = extractDeviceID ( ) ; String username = extractUsername ( ) ; String password = extractPassword ( ) ; if ( id == null || username == null || password == null ) { return false ; } return true ; }
MBeanParameterInfo [ ] result = new MBeanParameterInfo [ source. length ] ; for ( int i = 0 ; i < source. length ; i ++ ) { if ( source [ i ]. getUuid ( ). equals ( source [ i ]. getUuid ( ) ) ) { result [ i ] = source [ i ] ; } } return result ; }
"File file = new File ( fileName ) ; RandomAccessFile raf = new RandomAccessFile ( file, ""UTF-8"" ) ; try { IOUtils. copy ( raf, null ) ; } finally { raf. close ( ) ; } }"
synchronized ( removedItems ) { if ( removedItems. contains ( catalogObject ) ) { return ; } removedItems. add ( catalogObject ) ; } }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( bytes!= null ) sb. append ( ""Bytes: "" + bytes + "", "" ) ; if ( consumedBytes!= null ) sb. append ( ""ConsumedBytes: "" + consumedBytes + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
_src_link = hdf_name_src ; _dest_link = hdf_name_dest ; }
"for ( Iterator < AccountingLineFieldRenderingTransformation > it = fieldTransformations. iterator ( ) ; it. hasNext ( ) ; ) { AccountingLineFieldRenderingTransformation transformation = it. next ( ) ; fieldTransformations. add ( transformation. doTransform ( accountingLine, unconvertedValues ) ) ; } }"
ByteBuf buf = Unpooled. buffer ( capacity ) ; buf. clear ( ) ; buf. putInt ( ( byte ) 'A' ) ; buf. putInt ( ( byte ) 'a' ) ; buf. putInt ( ( byte ) 'b' ) ; buf. putInt ( ( byte ) 'c' ) ; buf. flip ( ) ; return buf ; }
CcdFunction cf = new CcdFunction ( ) ; for ( int i = 0 ; i < values. size ( ) ; i ++ ) { for ( int j = 0 ; j < values. get ( i ). length ; j ++ ) { if ( values. get ( i ) [ j ]!= 0 ) { cf. add ( values. get ( i ) [ j ] / cf. get ( i ) [ j ] ) ; } } } }
if ( val == null || key == null || val. length ( ) == 0 ) return ; List < String > list = htmlTrailerMap. get ( key ) ; if ( list == null ) return ; list. add ( val ) ; htmlTrailerMap. remove ( key ) ; }
String [ ] temp = ( String [ ] ) paramFilter. toArray ( new String [ paramFilter. size ( ) ] ) ; for ( int i = 0 ; i < temp. length ; i ++ ) { temp [ i ] = paramFilter. get ( i ) ; } paramFilter. remove ( attributeName ) ; }
"if (! aliases. containsKey ( name ) ) { aliases. put ( name, new HashSet < String > ( ) ) ; } for ( int i = 0 ; i < values. length ; i ++ ) { aliases. get ( i ). add ( name + values [ i ] ) ; } }"
if ( encryptionHelperMap == null ) { encryptionHelperMap = new ArrayList < IEncryptionHelper > ( ) ; } return encryptionHelperMap ; }
List < Mood > moodList = buildMoodsList ( algorithm ) ; return new CertPathValidator ( moodList ) ; }
if ( sample ) { return killAroundSample ( collection ) ; } double mean = getMean ( collection ) ; double var = 0 ; for ( Number n : collection ) { var += n. doubleValue ( ) ; } var /= 2 ; return Math. sqrt ( var ) ; }
"String str = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
if ( span == null ) { localSpan = pop ( ) ; } else { localSpan. setSpan ( span ) ; } }
int newArray [ ] = new int [ array. length ] ; for ( int i = 0 ; i < array. length ; i ++ ) { newArray [ i ] = valuedFloat ( array [ i ] ) ; } return newArray ; }
Transaction tx = fTransaction ; fTransaction = null ; return tx ; }
"try { return MessageFormat. format ( getSetDescriptorString ( key ), args ) ; } catch ( MissingResourceException e ) { return key ; } catch ( NullPointerException e ) { return ""!"" + key + ""!"" ; } }"
m_requestPath = requestPath ; m_version = version ; return m_requestPath ; }
"final OrientedDocPackage orientedDocPackage = new OrientedDocPackage ( ""test"" ) ; assertEquals ( ""test"", orientedDocPackage. getDescription ( ) ) ; }"
List < EditorError > list = new ArrayList < EditorError > ( ) ; for ( EditorError e : editor. getErrors ( ) ) { if ( e. getKey ( ). equals ( messageKey ) ) { list. add ( e ) ; } } return list ; }
X86Decoder decoder = new X86Decoder ( ) ; decoder. model = cpu ; decoder. mode = mode ; decoder. xmlPath = xmlPath ; decoder. dtdPath = dtdPath ; return decoder ; }
"int start = Math. min ( getPageNo ( ), getPageSize ( ) ) ; int end = Math. min ( getPageNo ( ), getPageSize ( ) ) ; if ( start < 0 && end < 0 ) { return new Page ( start, end ) ; } else { return new Page ( start, end ) ; } }"
"int nRows = input. rows ; int nCols = input. columns ; DoubleMatrix norm = new DenseDoubleMatrix ( nRows * nCols ) ; for ( int i = 0 ; i < nRows ; i ++ ) { for ( int j = 0 ; j < nCols ; j ++ ) { norm. setQuick ( i, j, input. getQuick ( i, j ) ) ; } } return norm ; }"
"Assert. isTrue ( edge. getSource ( )!= null, ""Source must not be null"" ) ; Assert. isTrue ( edge. getDestination ( )!= null, ""Destination must not be null"" ) ; devices. add ( edge ) ; }"
"String value = System. getProperty ( ""context.param.HTTPS_SEARCH_URL"" ) ; if (! StringUtils. hasText ( value ) ) throw new NullPointerException ( ""param.HTTPS_SEARCH_URL cannot be null!"" ) ; return value ; }"
if ( iconTasks == null ) { iconTasks = new com. amazonaws. internal. SdkInternalList < BundleTask > ( ) ; } return iconTasks ; }
if ( bw == null ) { return true ; } else { return bw ; } }
int result = 1 ; for ( int i = 0 ; i < nodeSn. length ; i ++ ) { if ( nodeSn [ i ] == 0 ) { result ++ ; } } return result ; }
"CertificateSection certificateSection = new CertificateSection ( enumeratedIconId, headline, description, label ) ; certificateList. add ( certificateSection ) ; }"
extractPartData ( false ) ; return partData ; }
String [ ] lines = new String [ infoLines. size ( ) ] ; for ( int i = 0 ; i < infoLines. size ( ) ; i ++ ) { lines [ i ] = infoLines. get ( i ) ; } return lines ; }
ArrayList < HWISessionItem > result = new ArrayList < HWISessionItem > ( ) ; addSessionItems ( result ) ; return result ; }
if ( value == 1 ) { type = ( byte ) 0x01 ; } else if ( value == 0x02 ) { type = ( byte ) 0x02 ; } else if ( value == 0x03 ) { type = ( byte ) 0x04 ; } }
"FileOutputStream fos = new FileOutputStream ( destZipFile ) ; compressFiles ( listFiles, fos ) ; fos. close ( ) ; }"
if ( ds == null ) return null ; NodeTable nodeTable = ds. getQuadTable ( ). getNodeTupleTable ( ). getNodeTable ( ) ; NodeId nodeId = nodeTable. getNodeIdForNode ( node ) ; return nodeId == null? NodeId. NodeDoesNotExist : nodeId ; }
StackedAreaRenderer r1 = new StackedAreaRenderer ( ) ; StackedAreaRenderer r2 = ( StackedAreaRenderer ) r1. clone ( ) ; assertTrue ( r1. hashCode ( ) == r2. hashCode ( ) ) ; assertTrue ( r1. hashCode ( ) == r2. hashCode ( ) ) ; }
T month = monthList. next ( ) ; position = 1 ; return month ; }
"WebElement page = driver. findElement ( By. className ( ""hazelcast-page-end"" ) ) ; page. setAttribute ( ""value"", Integer. toString ( end ) ) ; page. click ( ) ; }"
if ( magnitude == null ) { return ( ( short ) 1 ) ; } else { return magnitude ; } }
Set < Property > props = new HashSet < Property > ( ) ; for ( Property prop : properties ) { if ( prop. getName ( ). equalsIgnoreCase ( name ) ) { props. add ( prop ) ; } } return props ; }
"SimpleDateFormat fullDateFormat = new SimpleDateFormat ( ""yyyy-MM-dd'T'HH:mm:ssZ"" ) ; return fullDateFormat. format ( date ) ; }"
sideFound = true ; notifyAll ( ) ; return! stopped ; }
"int weekOfTargets = 0 ; Calendar. getInstance ( ). set ( Calendar. DAY_OF_MONTH, 7 ) ; weekOfTargets = Calendar. getInstance ( ). get ( Calendar. DAY_OF_MONTH ) + 1 ; return weekOfTargets ; }"
"ContentResolver contentResolver = context. getContentResolver ( ) ; String [ ] projection = { ""user_id"", ""nonce"" } ; String [ ] selectionArgs = { username } ; return contentResolver. query ( context. getString ( selectionArgs [ 0 ] ), selectionArgs, null, null, null ) ; }"
"CornerPinKeystoneSurface surface = new CornerPinKeystoneSurface ( w, h, res ) ; addSurface ( surface ) ; return surface ; }"
if ( column < 0 ) { column = UNDEFINED ; } if ( ( rule!= null ) && ( column < patterns. size ( ) ) ) { for ( int i = 0 ; i < patterns. size ( ) ; i ++ ) { Matcher matcher = ( Matcher ) patterns. get ( i ) ; if ( matcher. matches ( column ) ) { column = i ; } } } }
"try { new HazelcastInstance ( ). newInstance ( ) ; } catch ( Exception e ) { fail ( ""Object not found: "" + e. getMessage ( ), e ) ; } }"
UserSession userSession = userSessionMap. get ( sessionId ) ; if ( userSession!= null ) { userSessionMap. remove ( sessionId ) ; } }
"List < Node > nodes = new ArrayList < Node > ( ) ; nodes. add ( new Node ( ""X"" ) ) ; nodes. add ( new Node ( ""Y"" ) ) ; nodes. add ( new Node ( ""Z"" ) ) ; nodes. add ( new Node ( ""X"" ) ) ; assertEquals ( 1, nodes. size ( ) ) ; assertEquals ( 2, nodes. size ( ) ) ; }"
"try { return Class. forName ( ""org.orb.ORB"" ). newInstance ( args, props ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }"
if ( ints == null ) return null ; int n = ints. length ; NativeSize [ ] nls = new NativeSize [ n ] ; for ( int i = 0 ; i < n ; i ++ ) nls [ i ] = toNS ( ints [ i ] ) ; return nls ; }
if ( forceRslsPaths == null ) { return new HashSet < String > ( ) ; } return Collections. unmodifiableSet ( forceRslsPaths ) ; }
Class <? > actualClass = readClass ( ) ; SootClass s = new SootClass ( actualClass ) ; actualClass. setLocator ( null ) ; return s ; }
"String [ ] keys = new String [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { keys [ i ] = StdRandom. uniform ( 0.00, 10000.00 ) ; } YearlyRecord rec = new YearlyRecord ( keys ) ; rec. insert ( 0, keys [ 0 ] ) ; for ( int i = 1 ; i < N ; i ++ ) { rec. insert ( 0, keys [ i ] ) ; } }"
"Definition result = new Definition ( portType, false, false ) ; result. properties. put ( ""port"", portType. toString ( ) ) ; result. properties. put ( ""host"", portType. getHost ( ) ) ; result. properties. put ( ""port"", portType. getPort ( ) ) ; return result ; }"
"LOG. debug ( ""reviseHistory: "" + id ) ; exception. setSeverity ( IAIKException. SEVERITY_ERROR ) ; throw new IAIKException ( ""Invalid history ID"" ) ; }"
"bot. menu ( ""File"" ). menu ( ""Guess"" ). click ( ) ; SWTBotShell shell = bot. shell ( ""Guess"" ) ; shell. activate ( ) ; selectTreeNode ( export ) ; bot. button ( ""Next >"" ). click ( ) ; return bot ; }"
app. runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { tab. openDouble2PageWithServiceWorker ( ) ; tab. openDouble2PageWithManifest ( manifestUrl ) ; } } ) ; }
if ( sessionFactory instanceof SessionFactoryImplementor ) { SessionFactoryImplementor impl = ( SessionFactoryImplementor ) sessionFactory ; if ( impl. getDialect ( ). equals ( SessionFactory. HSQL ) ) { return true ; } } return false ; }
"File propertiesFile = new File ( ConfigurationManager. class. getProtectionDomain ( ). getCodeSource ( ). getLocation ( ), ""replicator.properties"" ) ; try { managedProperties. load ( new FileInputStream ( propertiesFile ) ) ; } catch ( FileNotFoundException e ) { throw new IllegalStateException ( e ) ; } }"
List < Point > combined = new ArrayList < Point > ( points ) ; for ( Point point : points ) { if (! isValidGridPosition ( point ) ) { combined. add ( point ) ; } } return combined ; }
"SQLiteDatabase db = helper. getReadableDatabase ( ) ; try { for ( V entity : entities ) { db. put ( entity. getId ( ), entity ) ; } } finally { if ( db!= null ) { db. close ( ) ; } } }"
MutablePeriodConstraint endPeriod = new MutablePeriodConstraintEnd ( ) ; for ( MilestoneWindow window : milestoneWindows ) { if ( window. getName ( ). equals ( windowName ) ) { endPeriod. add ( Period. END ) ; break ; } } return endPeriod. toPeriod ( ) ; }
booleanNegated = true ; File file = new File ( filePath ) ; if ( file. isDirectory ( ) ) { file = file. getParentFile ( ). getAbsolutePath ( ) ; } if ( file. isFile ( ) ) { file = file. getParentFile ( ). getAbsolutePath ( ) ; } setNegated ( file ) ; returnNegated ; }
if ( data == null ) { JSONArray jsonArray = new JSONArray ( ) ; if ( context!= null ) { jsonArray. put ( context ) ; } data = jsonArray. toJSONArray ( ) ; } return jsonArray ; }
return new Iterator < V > ( ) { @ Override public boolean hasNext ( ) { return true ; } @ Override public V next ( ) { return viewPool. remove ( viewPool. remove ( viewPool. size ( ) - 1 ) ) ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
if (! mRecycled ) throw new IllegalStateException ( ) ; return mTextureBounds. x + mTextureBounds. y ; }
StringBuilder sb = new StringBuilder ( ) ; Iterator < CharSequence > it = messages. iterator ( ) ; while ( it. hasNext ( ) ) { sb. append ( it. next ( ) ) ; if ( it. hasNext ( ) ) { break ; } } return sb. toString ( ) ; }
DatePanel retorno = new DatePanel ( ) ; setter. customize ( retorno ) ; return retorno ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( bytes!= null ) sb. append ( ""Bytes: "" + bytes + "", "" ) ; if ( consumedBytes!= null ) sb. append ( ""ConsumedBytes: "" + consumedBytes + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"if ( e instanceof RuntimeException ) { if ( rethrow ) { throw ( RuntimeException ) e ; } else { logger. log ( level, m, e ) ; } } else { logger. log ( level, m, e ) ; } }"
final Text e = new Text ( ) ; e. setText ( file. getAbsolutePath ( ) ) ; e. setText ( Integer. toString ( line ) ) ; e. setText ( Integer. toString ( column ) ) ; revision. cancel ( e ) ; }
"Iterator < Map. Entry < Object, Object >> i = bitmapEnclosingObjects. entrySet ( ). iterator ( ) ; String string = """" ; while ( i. hasNext ( ) ) { Map. Entry < Object, Object > entry = i. next ( ) ; string += entry. getKey ( ) + ""="" + entry. getValue ( ) + "" "" ; } return string ; }"
"Request request = requests. remove ( requestCode ) ; if ( request == null ) { logger. error ( ""No request found by code {}"", requestCode ) ; } return request ; }"
"String id = ( String ) select. getId ( ) ; FacesMessage msg = null ; if ( id == null ) { msg = new FacesMessage ( FacesMessage. SEVERITY_ERROR, value, label ) ; } else { msg = new FacesMessage ( FacesMessage. SEVERITY_ERROR, value, label, select. getId ( ) ) ; } return msg ; }"
"int saveLength = encoder. getLength ( ) ; for ( int i = 0 ; i < strategy. length ( ) ; ++ i ) { encoder. writeBlobTlv ( Tlv. ControlParameters_Strategy, strategy. getName ( i ). getValue ( ). buf ( ) ) ; } encoder. writeTypeAndLength ( Tlv. ControlParameters_Strategy, encoder. getLength ( ) - saveLength ) ; }"
"String value = propertyMatches ( resourceName, key, pattern ) ; addProperty ( resourceName, key, value ) ; return value ; }"
"visited = true ; createRevision ( nP, mP ) ; }"
"float cuR = Math. max ( r, 0.0f ) ; float cuI = Math. max ( i, 0.0f ) ; cuComplex = new cuComplex ( cuR, cuI ) ; return cuComplex ; }"
"HashSet < Emoticon > moduleSet = new HashSet < > ( ) ; for ( Map. Entry < String, HashSet < Emoticon >> entry : registry. entrySet ( ) ) { if (! entry. getValue ( ). contains ( EMoteset. class ) ) { moduleSet. add ( entry. getKey ( ), entry. getValue ( ) ) ; } } return moduleSet ; }"
SessionContext context = new SessionContext ( ) ; context. sessionId = sessionId ; context. isCanceled = false ; context. removed = false ; return context ; }
"TaskWrapper result = scheduler. scheduleWithFixedDelay ( runnable, firstDelay, repeatDelay, plugin ) ; if ( result == null ) { result = scheduler. scheduleWithFixedDelay ( runnable, firstDelay, repeatDelay, plugin ) ; } return result ; }"
"URL url = new URL ( ""http://"" + hostName ) ; BufferedReader reader = new BufferedReader ( new InputStreamReader ( url. openStream ( ) ) ) ; String moduleMap = reader. readLine ( ) ; reader. close ( ) ; return moduleMap ; }"
Owner owner = ownerByThread. get ( thread ) ; if ( owner == null ) return - 1 ; return dayTaxonIndex ( owner ) ; }
final Iterator < String > iterator = encoded. iterator ( ) ; while ( iterator. hasNext ( ) ) { final String extension = iterator. next ( ) ; deleteDigestExtension ( extension ) ; iterator. remove ( ) ; } }
long array [ ] = new long [ pages ] ; for ( int i = 0 ; i < pages ; i ++ ) { array [ i ] = array [ i ] + 1 ; } array2Committed = ( int ) array [ 0 ] ; }
"String name = domainProperty. getName ( ) ; return name. substring ( name. lastIndexOf ( ""."" ) + 1 ) ; }"
int [ ] args = new int [ 2 ] ; args [ 0 ] = - 1 ; args [ 1 ] = 1 ; return args. length ; }
"if ( parent == null ) { throw new IllegalArgumentException ( ""parent must not be null"" ) ; } return factor * 7 + parent. getIndex ( ) ; }"
m_Decorators. clear ( ) ; m_Decorators. addAll ( Arrays. asList ( c. getMethods ( ) ) ) ; return m_Decorators. toArray ( new Method [ m_Decorators. size ( ) ] ) ; }
"try { byte [ ] bytes = pubkey. getEncoded ( ) ; MessageDigest md = MessageDigest. getInstance ( algorithm ) ; md. update ( bytes, 0, bytes. length ) ; return toHexString ( md. digest ( ) ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( count!= null ) sb. append ( ""Count: "" + count + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"mOutputStream. write ( sortableMatrixBuffer, 0, 4 ) ; mOutputStream. write ( ( byte ) 0 ) ; for ( int i = 0 ; i < 4 ; i ++ ) { mOutputStream. write ( ( byte ) 1 ) ; mOutputStream. write ( ( byte ) 0 ) ; } mOutputStream. flush ( ) ; }"
"try { return ioOperations. getLastSpContacts ( ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return null ; } }"
if ( serverId == null ) { serverId = 0 ; } return serverId ; }
"if ( dest == null || dest. length < size ( ) ) { dest = new double [ size ] ; } encodeHex ( dest, 0, dest. length ) ; return dest ; }"
boolean res = false ; String key = word. toLowerCase ( ) ; Iterator < String > iter = dictionary. keySet ( ). iterator ( ) ; while ( iter. hasNext ( ) ) { key = iter. next ( ) ; if ( dictionary. get ( key ). equals ( word ) ) { res = true ; break ; } } return res ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( count!= null ) sb. append ( ""Count: "" + count + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"Key key1 = datastore. newKeyFactory ( ). setKind ( ""MyKind"" ). newKey ( keyName1 ) ; Key key2 = datastore. newKeyFactory ( ). setKind ( ""MyKind"" ). newKey ( keyName2 ) ; datastore. delete ( key1, key2 ) ; }"
List < URI > uris = new ArrayList < URI > ( names. size ( ) ) ; for ( String name : names ) { uris. add ( URI. create ( name ) ) ; } return uris ; }
NinePatch patch = new NinePatch ( ) ; if ( fileUrl!= null ) { File file = new File ( fileUrl. getPath ( ) ) ; patch. setSource ( file. getPath ( ) ) ; if ( convert ) { patch. convert ( ) ; } } return patch ; }
if ( isTypingEnabled ( ) ) ( ( GWinApplet ) app ). saltTyping ( event ) ; for ( GAbstractControl control : windowControls ) { if ( ( control. registeredMethods & KEY_METHOD ) == KEY_METHOD ) ( ( GWinApplet ) control ). saltTyping ( event ) ; } }
boolean sNotify = false ; if ( sDown!= xDown ) { sNotify = true ; } if ( sDown!= xUp ) { sNotify = true ; } if ( sDown!= yDown ) { sNotify = true ; } if ( xUp!= xUp ) { sNotify = true ; } if ( yUp!= yDown ) { sNotify = true ; } return sNotify ; }
"String granteeID = UUID. randomUUID ( ). toString ( ) ; return createMkdir ( granteeID, name ) ; }"
Set < MatcherAndAlert > set = new HashSet < MatcherAndAlert > ( ) ; set. add ( new MatcherAndAlert ( getNotes ( edge ) ) ) ; set. add ( new MatcherAndAlert ( getNotes ( edge ) ) ) ; return set ; }
"Size2D s1 = arrangeNN ( container, g2 ) ; if ( constraint. getWidthRange ( ). contains ( s1. width ) ) { return s1 ; } else { RectangleConstraint c = constraint. toFixedWidth ( constraint. getWidthRange ( ). getUpperBound ( ) ) ; return arrangeFN ( container, g2, c ) ; } }"
long hash = address. objetShuffle ( ) ; return hash ; }
DestinationMapNode node = lastExisting ; if ( node == null ) { node = new DestinationMapNode ( path ) ; lastExisting = node ; } return node ; }
String lower = filename. toLowerCase ( Locale. ROOT ) ; int n = lower. length ( ) ; for ( int i = 2 ; i <= 5 && i < n ; i ++ ) { if (! uncompressSuffix. containsKey ( lower. substring ( n - i ) ) ) { return false ; } } return true ; }
if ( serverNumberFormat == null ) { return false ; } else { return serverNumberFormat ; } }
"while ( vertices. length!= size ) { int [ ] newVertices = new int [ size ] ; System. arraycopy ( vertices, 0, newVertices, 0, vertices. length ) ; vertices = newVertices ; } }"
"String type = ""unknown"" ; return type. substring ( 0, 1 ). toUpperCase ( ) + "" codec"" ; }"
"Certificate [ ] certs = cert. listFiles ( ) ; if ( certs!= null ) { return HazelcastForeignKey. createFromFiles ( certs, alias, password ) ; } else { return null ; } }"
int i = 0 ; if ( formulaireCand. getSize ( ) == 1 ) { meanCand. setSize ( ( int ) ( formulaireCand. getSize ( ) - 1 ) ) ; } else { meanCand. setSize ( ( int ) ( formulaireCand. getSize ( ) - 1 ) ) ; } }
pageMinScaleX = minScaleX ; pageMaxScaleX = maxScaleX ; }
"OMTConnection oc = ( OTMConnection ) pbKeyToConnectionMap. remove ( pbKey ) ; if ( oc == null ) { oc = createConnection ( pbKey ) ; pbKeyToConnectionMap. put ( pbKey, oc ) ; } return oc ; }"
Card card = trick. getCard ( cardIndex ) ; if (! card. isPlaying ( ) ) { if ( trick. getSuit ( ) == 1 ) { trick. play ( ) ; } return true ; } return false ; }
"int i = principal. indexOf ( ""/"" ) ; if ( i == - 1 ) { i = principal. indexOf ( ""@"" ) ; } if ( i == - 1 ) { i = principal. indexOf ( ""@"" ) ; } return principal. substring ( 0, i ) ; }"
"HttpDescriptor httpDescriptor = new HttpDescriptor ( ) ; httpDescriptor. setPath ( path ) ; httpDescriptor. setData ( data ) ; HttpURLConnection conn = ( HttpURLConnection ) httpDescriptor. openConnection ( ) ; conn. setRequestMethod ( ""POST"" ) ; conn. setConnectTimeout ( 5000 ) ; }"
"tree. put ( ""key1"", ""value1"" ) ; tree. put ( ""key2"", ""value2"" ) ; EasyMock. expectLastCall ( ). times ( 1 ) ; EasyMock. expect ( tree. get ( ""key1"" ) ). andReturn ( key1 ) ; replay ( tree ) ; tree. put ( ""key2"", ""value2"" ) ; verify ( tree ). put ( ""key3"", ""value3"" ) ; verify ( tree ). put ( ""key4"", ""value4"" ) ; }"
if ( hazelcastMbeanList. size ( ) < 1 ) { return true ; } return false ; }
List < File > list = new LinkedList < File > ( ) ; for ( File f : dir. listFiles ( ) ) { String name = f. getName ( ) ; String val = name. toLowerCase ( ) ; if (! val. equals ( name ) ) list. add ( f ) ; } Arrays. sort ( list ) ; return list. toArray ( new File [ list. size ( ) ] ) ; }
"FileSystem fs = inFile. getFileSystem ( conf ) ; Writer out = new OutputStreamWriter ( fs. create ( new Path ( inFile. toString ( ) ), Charsets. UTF_8 ) ) ; char [ ] line = new char [ 8192 ] ; for ( int i = 0 ; i < line. length ; i ++ ) { out. write ( line [ i ] ) ; } out. close ( ) ; return new String ( out. toByteArray ( ) ) ; }"
"GatewayManager gatewayManager = managers. get ( connection ) ; if ( gatewayManager == null ) { gatewayManager = new GatewayManager ( connection ) ; managers. put ( connection, gatewayManager ) ; } return gatewayManager ; }"
"byte [ ] response = null ; try { response = con. read ( ) ; } catch ( SocketException e ) { logger. error ( ""connect failed: {}"", e. getMessage ( ) ) ; } catch ( IOException e ) { logger. error ( ""connect failed: {}"", e. getMessage ( ) ) ; } return response ; }"
ValueFactory < Boolean > factory = valueFactories. getBooleanFactory ( ) ; Boolean [ ] res = new Boolean [ values. size ( ) ] ; for ( int i = 0 ; i < res. length ; i ++ ) { res [ i ] = factory. create ( values. get ( i ) ) ; } return res ; }
StatsSession session = new StatsSession ( ) ; session. setOAuthConsumerKey ( consumerKey ) ; session. setOAuthConsumerSecret ( consumerSecret ) ; session. setScope ( scope ) ; session. setExpiration ( System. currentTimeMillis ( ) ) ; return session ; }
"StringBuilder builder = new StringBuilder ( ) ; for ( GeographicPoint point : path ) { builder. append ( point + "" "" ) ; } return builder. toString ( ) ; }"
"if ( from > to ) { System. err. println ( ""From:"" + from + "" to:"" + to ) ; nsDetail ( from, to - 1 ) ; } }"
"String elementString = readStringType ( parentElement, elementName, typeName ) ; return elementString!= null? elementString : """" ; }"
"Preconditions. checkNotNull ( parent, ""IE01732: Parent argument can not be null"" ) ; Preconditions. checkNotNull ( container, ""IE01732: Container argument can not be null"" ) ; new CCancelMetric ( parent, container, function ). execute ( ) ; }"
box. removeAllItems ( ) ; for ( Schedule s : mockSchedules ) { box. addItem ( s ) ; } }
"if ( batchSize <= 1 ) { return new EntityLoader ( persister, lockOptions, factory, influencers ) ; } return makeSuper ( persister, batchSize, lockOptions, factory, influencers ) ; }"
ThreadUtils. assertOnUiThread ( ) ; mMainThread. runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { if ( mActiveArea!= null ) { mActiveArea. forgetRateFocusAtCenter ( ) ; } } } ) ; }
PackageManager pm = Thread. currentThread ( ). getPackageManager ( ) ; try { return pm. loadClass ( s )!= null ; } catch ( ClassNotFoundException ex ) { return false ; } }
int label = file. read ( ) ; if ( label < 0 ) { throw new EOFException ( ) ; } return label ; }
if ( type == null ) { return TypeType. SIMPLE ; } else { return type ; } }
if ( registry!= null ) { return registry. getCounter ( name ) ; } else { return Metrics. newCounter ( name ) ; } }
if ( allTime ) return true ; return ( minStamp <= timestamp && timestamp < maxStamp ) ; }
"int pos = name. indexOf ( '=' ) ; if ( pos == - 1 ) { attributeMap. put ( name, new String ( val, 0, val. length ) ) ; } else { attributeMap. put ( name. substring ( 0, pos ), new String ( val, 0, val. length ) ) ; } }"
TagService tagService = TagService. getInstance ( ) ; return tagService. getTagIdAndChildrenIds ( tagName ) ; }
reusedOverlayState = false ; for ( int i = 0 ; i < overlayWidth ; i ++ ) { for ( int j = 0 ; j < overlayHeight ; j ++ ) { if ( overlay [ i ] [ j ]!= null ) { reusedOverlayState = true ; buttonState [ j ] [ i ] = false ; } } } }
if ( Build. VERSION. SDK_INT >= Build. VERSION_CODES. GINGERBREAD ) { return Environment. isExternalStorageRemovable ( ) ; } return true ; }
if (! enabled ) return ; if (! texturesUsed. contains ( image ) ) texturesUsed. add ( image ) ; if ( wasSwitched ) numTextureSwitches ++ ; }
"try { buildRule. executeTarget ( ""testUpdateUnnamed"" ) ; fail ( ""Unnamed data sets cannot be updated"" ) ; } catch ( BuildException ex ) { } }"
"SharedPreferences sharedPreferences = context. getSharedPreferences ( Constants. SETTINGS_NAME, Context. MODE_PRIVATE ) ; Editor editor = sharedPreferences. edit ( ) ; editor. putBoolean ( getKey ( context, keyId ), value ) ; ApiAdapterFactory. getApiAdapter ( ). applyPreferenceChanges ( editor ) ; }"
for ( int x = 0 ; x < newIndividuals. length ; x ++ ) { for ( int j = 0 ; j < oldIndividuals. length ; j ++ ) { if ( newIndividuals [ j ]!= null && state. newIndividuals [ j ]. equals ( oldIndividuals [ x ] ) ) state. newIndividuals [ j ]. setSuppressStatistics ( true ) ; } } }
"int l1, l2 ; l1 = Math. min ( l1, b1. length - s1 ) ; l2 = Math. min ( l2, b2. length - s2 ) ; if ( l1 == l2 ) { return 0 ; } for ( int i = s1, j = s2 ; i < l1 && j < l2 ; i ++, j ++ ) { b1 [ j ] = b2 [ i ] ; } return rubyFloat ( b1, s1, l1 ) ; }"
"String osname = System. getProperty ( ""os.name"" ). toLowerCase ( ) ; return ( osname. indexOf ( ""windows nt"" ) >= 0 || osname. indexOf ( ""nt"" ) >= 0 ) ; }"
"try { return ( T ) invokeFunction ( function, returnType, args ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }"
"String uriKey = getClass ( ). getName ( ) ; int index = uriKey. lastIndexOf ( '.' ) ; if ( index!= - 1 ) { uriKey = uriKey. substring ( 0, index ) ; } if ( uriKey. length ( ) > 0 &&! uriKey. endsWith ( ""/"" ) ) { uriKey = uriKey. substring ( 0, uriKey. length ( ) - 1 ) ; } return uriKey ; }"
"String url = BASE_URL + ""/1"" ; Response response = given ( ). when ( ). get ( url ) ; Assert. assertEquals ( 404, response. getStatusCode ( ) ) ; }"
"ArrayList < Sms > surfaceIds = new ArrayList < Sms > ( ) ; for ( long id : rawIds ) { if ( isContact ( id, contactName ) ) { surfaceIds. add ( new Sms ( id, contactName ) ) ; } } return surfaceIds ; }"
"initializeTypeMap ( ) ; VariableKey key = typeMap. get ( name ) ; if ( key == null ) { key = new VariableKey ( name, 0 ) ; typeMap. put ( name, key ) ; } return key ; }"
"SharedPreferences. Editor editor = sharedPreferences. edit ( ) ; editor. putInt ( hazelcastInstanceKey ( keyResource ), newValue ) ; editor. apply ( ) ; }"
"map. add ( ""foo"", new ParameterizedHeader ( ""bar"" ) ) ; map. add ( ""foo"", new ParameterizedHeader ( ""baz"" ) ) ; assertTrue (! map. containsKey ( ""foo"" ) ) ; assertTrue ( map. containsKey ( ""bar"" ) ) ; assertTrue (! map. containsKey ( ""baz"" ) ) ; assertTrue ( map. containsKey ( ""foo"" ) ) ; }"
float pickOption = ( float ) Math. random ( ) * 2 - 0.5f ; return pickOption ; }
"double d1 = shortestPathDistance ( v1, v2 ) ; double d2 = shortestPathDistance ( v1, v2 ) ; return d1 + d2 ; }"
Explanation [ ] adapter = new Explanation [ children. length ] ; for ( int i = 0 ; i < children. length ; i ++ ) { adapter [ i ] = children [ i ]. buildAdapter ( ) ; } return adapter ; }
assert ( dA == 1.0 || dA == 0.0 ) ; double result = 0.0 ; for ( int i = 0 ; i < pointA. length ; i ++ ) { result += ( pointA [ i ] * dA ) + ( pointB [ i ] * pointB [ i ] ) ; } return result ; }
if ( value == null ) return null ; try { return Boolean. valueOf ( putInteger ( value ) ) ; } catch ( Exception ex ) { return null ; } }
if ( autoPageBreaks == null ) { return false ; } else { return autoPageBreaks ; } }
"String response = messagesGetCall ( url, queryParamsMap ) ; if ( response!= null && response. length ( ) > 0 ) { return typeOfT. cast ( response. substring ( 0, response. length ( ) - 1 ) ) ; } else { return null ; } }"
"byte [ ] bytes = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
if ( pointer instanceof BonsaiCollectionPointerImpl ) { replaceWithSBTreeImpl ( ( BonsaiCollectionPointerImpl ) pointer ) ; } else { replaceWithSBTreeImpl ( ( OBonsaiCollectionPointerImpl ) pointer ) ; } }
"List < Booking > list = new ArrayList < > ( ) ; list. add ( new Booking ( person, day ) ) ; return list ; }"
int hash = 0 ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { char c = s. charAt ( i ) ; hash = 31 * hash + c ; } return hash ; }
try { return FileUtils. readFileToByteArray ( new File ( fileName ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
for ( int j = 0 ; j < dimensionToOneValues. length ; j ++ ) { dimensionToOneValues [ j ] = v ; } }
try { double v = buildSpecialD ( param ) ; if ( v!= null ) { return new Vec3D ( v ) ; } } catch ( Exception e ) { } return null ; }
"assert beingCount >= 0 ; assert entryBarrier!= null ; assert exitBarrier!= null ; Beings beingBeings = new Beings [ beingCount ] ; for ( int i = 0 ; i < beingCount ; i ++ ) { squareExecutableGazing ( beingBeings [ i ], beingCount, entryBarrier, exitBarrier ) ; } }"
if ( expiryDescriptorModel!= null ) { return expiryDescriptorModel ; } else { return null ; } }
"if ( value!= null ) { final Iterator < String > it = params. keySet ( ). iterator ( ) ; while ( it. hasNext ( ) ) { final String keyPair = it. next ( ) ; final String value = params. get ( keyPair ) ; params. remove ( keyPair, value ) ; } } }"
"String val = extractAttribute ( name ) ; try { if ( val!= null &&! """". equals ( val ) ) { return Double. valueOf ( val ) ; } } catch ( Exception ex ) { } return null ; }"
"final SharedPreferences sp = SalesforceSDKManager. getInstance ( ). getAppContext ( ). getSharedPreferences ( Hazelcast_VARIABLE_SHARED_PREFERENCE, Context. MODE_PRIVATE ) ; sp. edit ( ). putString ( key, value ). commit ( ) ; }"
try { return new Profile ( path ). isProfile ( ) ; } catch ( IOException e ) { return false ; } }
TrackerUtils. runOnBackgroundThread ( new Runnable ( ) { @ Override public void run ( ) { if (! requestCanceled ) { execSvc. completeService ( null ) ; } } } ) ; }
"StringBuilder buf = new StringBuilder ( ) ; buf. append ( repo ). append ( ""/"" ). append ( name ). append ( ""/"" ) ; if ( path. length ( ) > 0 ) { buf. append ( path. substring ( 0, 1 ) ). append ( ""/"" ) ; } buf. append ( name ) ; return new RepoPath ( buf. toString ( ) ) ; }"
"String output = outputStringWriter. getBuffer ( ). toString ( ). trim ( ) ; assertEquals ( getHelpOutput ( ), output ) ; }"
"File file = new File ( tgtDir ) ; if (! file. exists ( ) ) { if (! file. mkdirs ( ) ) { throw new IOException ( ""Couldn't create directory '"" + tgtDir + ""'"" ) ; } } return file ; }"
char [ ] map = new char [ 0x10000 ] ; int i = 0 ; int j = 0 ; while ( i < 52 ) { int count = packed. charAt ( i ++ ) ; char value = packed. charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > 0 ) ; } return map ; }
"try { Method refreshMethod = sa. getClass ( ). getMethod ( ""featureRefresh"", new Class [ ] { String. class, Set. class, String. class } ) ; refreshMethod. setAccessible ( true ) ; return ( Set < Integer > ) refreshMethod. invoke ( sa, status, metadataIds, changeDate, changeMessage ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }"
"String digitName = ( String ) value ; statement. setString ( index, digitName ) ; }"
try { String score = _scoreFile. readLine ( ) ; if ( score!= null ) _scoreFile. delete ( ) ; saveMonthScore ( score ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } }
if ( storedRecordID!= null ) { storedRecordID. remove ( ) ; } storedRecordID = recordID ; }
URL url = findShellUrl ( ) ; if ( url!= null ) { return new HTTPConduit ( url ) ; } else { return null ; } }
"if ( instance == null ) { throw new IllegalStateException ( ""The Reviewer instance is null."" ) ; } return instance ; }"
byte [ ] bytes = new byte [ data. length ] ; for ( int i = 0 ; i < data. length ; i ++ ) { bytes [ i ] = ( byte ) ( data [ i ] & 0xff ) ; } return new String ( bytes ) ; }
switch ( state ) { case main_region_Start : return stateVector [ 0 ] == State. main_region_Start ; case main_region_End : return stateVector [ 0 ] == State. main_region_End ; case main_region_Start : return stateVector [ 0 ] == State. main_region_Start ; default : return false ; } }
"StringWriter stringWriter = new StringWriter ( ) ; DataInputStream reader = new DataInputStream ( response. getEntity ( ) ) ; char [ ] buffer = new char [ 8192 ] ; int read ; while ( ( read = reader. read ( buffer ) )!= - 1 ) { stringWriter. append ( buffer, 0, read ) ; } return stringWriter. toString ( ) ; }"
"List < E > results = new ArrayList < > ( ) ; root. traverse ( new Visitor < E > ( ) { @ Override public boolean visit ( E e, E root ) { if ( root!= null ) { results. add ( root. uiPercentage ( ) ) ; } return true ; } } ) ; return results ; }"
long result = Database. count ( ) ; return result ; }
"if ( password == null || password. length ( ) == 0 ) { throw new IllegalArgumentException ( ""Password may not be empty!"" ) ; } return concatenateConsistent ( password, BCrypt. gensalt ( ), passwordKey ) ; }"
"LogMessage msg = new LogMessage ( Thread. currentThread ( ). getStackTrace ( ) [ 2 ]. getClassName ( ), Thread. currentThread ( ). getStackTrace ( ) [ 3 ]. getMethodName ( ) ) ; assertTrue ( msg. getId ( ). contains ( expected ) ) ; assertTrue ( msg. getId ( ). contains ( actual ) ) ; }"
"checkExtension ( ) ; return nglQueryVideoCaptureDeviceNV ( getPeerInfo ( ), device, attribute, value, value. position ( ) ) ; }"
"setLatitude ( par1NBTTagCompound. getLong ( ""Latitude"" ) ) ; setLongitude ( par1NBTTagCompound. getLong ( ""Longitude"" ) ) ; setLatitude ( par1NBTTagCompound. getLong ( ""Latitude"" ) ) ; setLongitude ( par1NBTTagCompound. getLong ( ""Longitude"" ) ) ; }"
if ( type == InclusionType. FIRST ) { firstScreen = radius ; } else if ( type == InclusionType. LAST ) { lastScreen = radius ; } reloadMobile ( radius ) ; }
if ( cacheName == null || cacheName. length ( ) == 0 ) { return null ; } return buildTray ( new EhCacheRegion ( cacheName ) ) ; }
URI uri = capabilitiesDocument. toUri ( ) ; return uri. normalize ( ) ; }
"port1. send ( ( char ) 'A' ) ; port2. send ( ( char ) 'B' ) ; port1. send ( ( char ) 'C' ) ; port2. send ( ( char ) 'D' ) ; LOG. info ( ""Connected to my port"" ) ; }"
"Map < String, Boolean > result = new HashMap < String, Boolean > ( ) ; return result ; }"
assert align % 2 == 0 ; return align / 2 ; }
if ( json == null ) { json = new JSONObject ( ) ; } return json ; }
PngChunkPLTE chunk = new PngChunkPLTE ( chunkID ) ; pins. add ( chunk ) ; return chunk ; }
Double tsLine = new Double ( ( - coef_b * X - coef_c ) / coef_a ) ; if ( tsLine < 0.0 ) { tsLine = 0.0 ; } else if ( tsLine > 1.0 ) { tsLine = 1.0 ; } return tsLine ; }
for ( int i = 0 ; i < params. size ( ) ; i ++ ) { if ( ns. equals ( params. get ( i ). ns ) && prefix. equals ( params. get ( i ). prefix ) && ln. equals ( params. get ( i ). ln ) && val. equals ( params. get ( i ). val ) ) { params. remove ( i ) ; break ; } } }
"if ( value == null ) { return 0 ; } return transform ( teiidVersion, value, new double [ ] { 0 } ) ; }"
long gameID = ( long ) ( Math. random ( ) * 5 ) ; return gameID ; }
if (! t. isLayerEnabled ( ) ) { return null ; } TurnoutOperation op = layers. get ( t. getLayerId ( ) ) ; if ( op!= null && op. isEnabled ( ) ) { return op ; } return layers. get ( t. getLayerId ( ) ) ; }
"if ( name. equals ( ""url"" ) ) { return ""url"" ; } else if ( name. equals ( ""uRLDecoder"" ) ) { return ""uRLDecoder"" ; } else { return ""url"" ; } }"
double dx = 0.0 ; double dy = 0.0 ; double dz = 1.0 ; for ( int i = 0 ; i < 3 ; i ++ ) { dx = dx * dx + dy * dy ; dz = dz * dz ; } return dx * dx + dy * dy ; }
if ( Thread. currentThread ( ). isInterrupted ( ) ) { throw new InterruptedException ( ) ; } nativeSetModulePointer ( mNativeJniClient ) ; return mModulePointer ; }
List < CardViewWrapper > views = new ArrayList < CardViewWrapper > ( ) ; for ( Card card : cardsCopy ) { CardViewWrapper view = new CardViewWrapper ( hazelcastView ( card ) ) ; views. add ( view ) ; } return views ; }
entries [ index ] = new Entry ( ) ; entries [ index ]. rgb = rgb ; }
"try { return loadPacketPes ( file, charset ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }"
"if ( StringUtils. isNotBlank ( jcifsServicePrincipal ) ) { logger. debug ( ""jcifsServicePrincipal is set to [{}]"", jcifsServicePrincipal ) ; Config. setProperty ( JCIFS_PROP_SERVICE_PRINCIPAL, jcifsServicePrincipal ) ; } }"
if (! exists ( ) ) return 0L ; try { return getInfo ( ). getMonthInclusive ( ) ; } catch ( IOException e ) { return 0L ; } }
double dbl = Double. doubleToLongBits ( double ) ; return Base64. encodeBase64String ( dbl ) ; }
if ( referencesToken == null ) { referencesToken = value ; } return referencesToken ; }
"String idPropertyName = element. get ( ""id"" ). getAsString ( ) ; if ( idPropertyName!= null &&! """". equals ( idPropertyName ) ) { element. remove ( ""id"" ). set ( propertyName ) ; } }"
"try { return ( JobManager ) context. getBean ( ""jobManager"" ) ; } catch ( Exception e ) { LOG. error ( ""Unable to get the module: {}"", e. getMessage ( ) ) ; throw new RuntimeException ( e ) ; } }"
"for ( int i = 1 ; i < chunks. size ( ) ; i ++ ) { if ( chunks. get ( i ). getId ( ) == id ) { chunks. add ( i, factor ) ; } } }"
"HazelcastInstance hazelcastInstance = getHazelcastInstance ( ability, tested, context ) ; return new int [ ] { hazelcastInstance. isActive ( ) } ; }"
"ForeignKey < R, U > fk = new ForeignKey < R, U > ( key, table, name, fields ) ; return fk ; }"
list = new Integer [ list. length ] ; for ( int i = 0 ; i < list. length ; i ++ ) { list [ i ] = list [ i ] ; } double time = 0 ; for ( int i = 0 ; i < list. length - 1 ; i ++ ) { time += list [ i ] ; } time /= list. length ; return time ; }
final DetailAST arrayDeclAST = typeAST. findFirstToken ( TokenTypes. ARRAY_DECLARATOR ) ; return clearVariableType ( arrayDeclAST == typeAST? arrayDeclAST : arrayDeclAST ) ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( key!= null ) sb. append ( ""Key: "" + key + "", "" ) ; if ( value!= null ) sb. append ( ""Value: "" + value + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"String [ ] processorId = path. split ( ""/"" ) ; if ( processorId. length ( ) == 0 ) { return null ; } else { return processorId [ 1 ] ; } }"
if ( finishDirectory!= null ) return finishDirectory ; else return null ; }
"if ( callContainer == null ) { throw new IllegalStateException ( ""callContainer must not be null"" ) ; } intent. putExtra ( CallContainer. EXTRA_AR_CALL_CONTAINER, callContainer ) ; }"
"byte [ ] bytes = new byte [ n ] ; random. nextBytes ( bytes ) ; return octalDouble ( logger, logMe, bytes ) ; }"
"TextAnnotation a1 = new CategoryTextAnnotation ( ""Test"", ""Category"", 1.0 ) ; TextAnnotation a2 = new CategoryTextAnnotation ( ""Test"", ""Category"", 1.0 ) ; assertEmittingCode ( a1, a2 ) ; }"
HashSet < NonTerminal > cssTags = new HashSet < > ( ) ; for ( Terminal t : terminal ) { NonTerminal n = t. asTerminal ( ) ; cssTags. add ( n ) ; } return cssTags ; }
if ( rv == null ) { return ; } for ( Iterator i = rv. iterator ( ) ; i. hasNext ( ) ; ) { TeamContext context = ( TeamContext ) i. next ( ) ; context. setAuthzGroup ( rv. get ( context. getId ( ) ) ) ; } }
"Aipor aipor = aipors. get ( id ) ; if ( aipor!= null ) { aipors. remove ( aipor ) ; } aipors. put ( id, null ) ; }"
"Metacard metacard = mock ( Metacard. class ) ; when ( metacard. getThumbnail ( ) ). thenReturn ( """" ) ; assertNotNull ( metacard. getMetacardThumbnail ( ) ) ; }"
"String hazelcastEncodedString = null ; try { hazelcastEncodedString = URLEncoder. encode ( toEncodeString, ENCODING_UTF_8 ) ; } catch ( UnsupportedEncodingException e ) { LOGGER. error ( ""Unsupported encoding :"", e ) ; } return hazelcastEncodedString ; }"
"long l = in_. readLong ( ) ; if ( Trace. isTraceOn ( ) ) Trace. log ( Trace. PROXY, Thread. currentThread ( ). getName ( ) + "" in  > "" + Long. toHexString ( l ) ) ; }"
if ( server == null ||! server. getServerType ( ). equals ( IServerType. SERVER ) ) return ; final KeyboardView keyboardView = new KeyboardView ( PlatformUI. getWorkbench ( ). getActiveWorkbenchWindow ( ). getActiveWorkbenchWindow ( ). getActivePage ( ) ) ; keyboardView. show ( ) ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( bytes!= null ) sb. append ( ""Bytes: "" + bytes + "", "" ) ; if ( consumedBytes!= null ) sb. append ( ""ConsumedBytes: "" + consumedBytes + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"HazelcastInstance hazelcastInstance = getHazelcastInstance ( ) ; if ( hazelcastInstance!= null ) { hazelcastInstance. getComponent ( page, wrap ) ; } else { hazelcastInstance. getComponent ( page, wrap ) ; } }"
"String dir = System. getProperty ( ""user.home"" ) + File. separator ; return dir ; }"
try { byte [ ] sig = Signature. getInstance ( signature. getClass ( ). getName ( ) ). encode ( signature ) ; return sig ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
"Cache < K, V > cache = getEnableCache ( key ) ; if ( cache!= null ) { return ( V ) cache. get ( key ) ; } return null ; }"
try { getLanguageCode ( str ) ; return true ; } catch ( Exception e ) { return false ; } }
"try { return ioOperations. getWOEIDByLocation ( strLocation ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return 0 ; } }"
if ( start ) { buildRevision ( value ) ; } return revision ; }
"String newUrl = relUrl ; if ( relUrl. startsWith ( ""/"" ) ) { newUrl = relUrl. substring ( 1 ) ; } else { newUrl = relUrl ; } return purgeCacheWithServletName ( newUrl ) ; }"
"Map < String, String > result = new HashMap < > ( ) ; for ( String prefix : prefixes ) { String key = hazelcastKey ( cr, prefix ) ; if ( key!= null && result. containsKey ( key ) ) { result. put ( key, result. get ( key ) ) ; } } return result ; }"
if ( player. isMultiAbility ( ) ) return null ; MultiAbility multiAbility = multiabilityTable. get ( player ) ; if ( multiAbility!= null &&! multiAbility. isBound ( ) ) return multiAbility. toString ( ) ; return null ; }
"HazelcastInstance hazelcastInstance = new HazelcastInstance ( ) ; hazelcastInstance. orientedHazelcastValue ( null, new Object ( ) ) ; }"
"if ( hazelcastMongoSqlIndex == - 1 ) { hazelcastMongoSqlIndex = Hazelcast. mongoSqlIndex ( ) ; if ( hazelcastMongoSqlIndex == - 1 ) { throw new IllegalStateException ( ""Hazelcast mongo sql index is not initialized"" ) ; } } return hazelcastMongoSqlIndex ; }"
boolean old = isWritable ( ) ; if (! writable ) { current = current. getParentFile ( ) ; isWritable = writable ; } if (! current ) { current = current. getParentFile ( ) ; } setWritable ( writable ) ; if (! old ) { current. setWritable ( writable ) ; } }
onView ( view ). post ( new Runnable ( ) { @ Override public void run ( ) { onViewClick ( ) ; } } ) ; }
long code = 1L ; code = 31L * code + ( name!= null? name. hashCode ( ) : 0L ) ; for ( int i = 0 ; i < properties. length ; i ++ ) { code = 31L * code + properties [ i ]. hashCode ( ) ; } }
int N = StdIn. readInt ( ) ; int [ ] A = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { A [ i ] = StdIn. readInt ( ) ; } return A ; }
File f = new File ( path ) ; return f. canExecute ( ) ; }
proj = new double [ m_nRows ] ; for ( int i = 0 ; i < m_nRows ; i ++ ) for ( int j = 0 ; j < m_nCols ; j ++ ) if ( p <= proj [ i ] [ j ] ) proj [ i ] [ j ] = 1.0 ; }
currentYear = Hazelcast. getInstance ( ). getCurrentYear ( ) ; parsedYear = Integer. toString ( currentYear ) ; }
final float absA = Math. abs ( a - b ) ; final float absB = Math. abs ( b - a ) ; if ( absA > absB ) { return true ; } final float diff = absoluteDiff * relativeDiff ; return diff < absB ; }
"Token tokenCollection = ( Token ) collection. get ( index ) ; if ( tokenCollection == null ) { tokenCollection = new Token ( ) ; collection. put ( index, tokenCollection ) ; } return tokenCollection ; }"
"String value = Double. toString ( coord. getLatitude ( ) ) + ""-"" + Double. toString ( coord. getLongitude ( ) ) + ""-"" + Double. toString ( coord. getLatitude ( ) ) + ""-"" + Double. toString ( coord. getLongitude ( ) ) + ""-"" + gridSize ; return value ; }"
"JsonObjectBuilder builder = JsonObject. builder ( ) ; for ( Map. Entry < String, Object > entry : map. entrySet ( ) ) { builder. addProperty ( entry. getKey ( ), entry. getValue ( ). toString ( ) ) ; } return builder ; }"
"Bundle bundle ; bundle = Platform. getBundle ( dir ) ; if ( bundle!= null ) { bundle = bundle. getBundle ( name ) ; } else { bundle = Platform. getBundle ( dir ) ; } Document doc = new Document ( bundle, null, null ) ; fullDocument ( key, doc ) ; }"
"String query = ""SELECT * FROM "" + TABLE_NAME + "" WHERE subject = '"" + subjectName + ""'"" ; ResultSet rs = conn. createStatement ( ). executeQuery ( query ) ; rs. next ( ) ; return rs ; }"
"when ( restClient. post ( anyString ( ), anyString ( ), eq ( COOKIE ) ) ). thenReturn ( desiredResponse ) ; subject. flair ( FLAIR_CSS_CLASS, null, USERNAME, null, SUBREDDIT_NAME ) ; verify ( restClient, times ( 1 ) ). post ( anyString ( ), anyString ( ), eq ( COOKIE ) ) ; }"
"String safe = secondFilename ; secondFilename = safe + "".txt"" ; return safe ; }"
ILogger log = LoggingFactory. getLogger ( CallsLogger. class ) ; LoggingFactory. setLogger ( log ) ; return log ; }
ArrayList < Uncallback > ret = new ArrayList < Uncallback > ( ) ; int size = defautl. size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { if ( defautl. get ( i )!= null ) { ret. add ( new Uncallback ( defautl. get ( i ) ) ) ; } } return ret ; }
if ( victim. getEntityId ( ). equals ( attacker. getEntityId ( ) ) ) { return true ; } if ( distance < ( int ) victim. getEntityId ( ). distance ( ) - attacker. getEntityId ( ). distance ( ) ) { return true ; } return false ; }
"Grade gradeT1 = new Grade ( ) ; gradeT1. setId ( ""1"" ) ; List < Grade > gradeL = new ArrayList < > ( ) ; gradeL. add ( gradeT1 ) ; gradeL. add ( gradeT2 ) ; assertEquals ( gradeL. size ( ), mockGradeFacade. findAll ( ). size ( ) ) ; }"
if ( args == null || args. length == 0 ) { return key ; } String value = null ; for ( int i = 0 ; i < args. length ; i ++ ) { value = ( String ) args [ i ] ; if ( value!= null && value. length ( ) > 0 ) { return value ; } } return key ; }
for ( int i = 0 ; i < numVertices ; i ++ ) { vertex = adj [ i ] ; adj [ i ] = adj [ i + 1 ] ; } return vertex ; }
"String duration = o. getProperty ( ""duration"" ) ; if ( duration == null || duration. isEmpty ( ) ) { return """" ; } return duration ; }"
"Element key = document. createElement ( className ) ; key. setAttribute ( ""key"", key ) ; return key ; }"
"if (! _valid ) throw new IOException ( tsLogger. i18NLogger. get_state_InputBuffer_3 ( ) ) ; _valid = false ; byte [ ] b = new byte [ 3 ] ; _input. readFully ( b ) ; return _arrBytes ( b, 0, b. length ) ; }"
File file = new File ( cordovaDir + File. separator + filename ) ; return buildCordovaFromCache ( file ) ; }
URLName urlName = new URLName ( url ) ; if ( password!= null ) urlName. append ( ':' ) ; urlName. append ( password ) ; return urlName ; }
"Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( new Date ( ) ) ; cal. set ( Calendar. HOUR_OF_DAY, 23 ) ; cal. set ( Calendar. MINUTE, 59 ) ; cal. set ( Calendar. SECOND, 59 ) ; cal. set ( Calendar. MILLISECOND, 999 ) ; return cal. getTime ( ) ; }"
for ( HostComponentStateEntity hostComponent : hostComponents ) { String version = hostComponent. getClass ( ). getAnnotation ( HostComponentStateEntity. class ). getAdvertisedVersion ( ) ; if ( version!= null &&! version. equals ( hostComponent. getClass ( ). getAnnotation ( HostComponentStateEntity. class ). getAdvertisedVersion ( ) ) ) { return true ; } } return false ; }
"try { return getRootContainerFromDocument ( document, provider ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }"
"Cache < AuthorizationKey, AuthorizeCacheEntry > cache = null ; if ( isEnable ) { CacheManager cacheManager = Caching. getCacheManagerFactory ( ). getCacheManager ( AUTHORIZATION_CACHE_MANAGER ) ; cache = cacheManager. getCache ( AUTHORIZATION_CACHE_NAME ) ; } return cache ; }"
Class [ ] types = new Class [ arguments. length ] ; for ( int i = 0 ; i < arguments. length ; i ++ ) { types [ i ] = arguments [ i ]. getClass ( ) ; } return types ; }
short x = 0 ; for ( int i = 0 ; i < 8 ; i ++ ) { double b = getDouble ( ) ; x <<= 8 ; x |= b ; } return x ; }
ConfigurationService configService = DSpaceServicesFactory. getInstance ( ). getConfigurationService ( ) ; if ( configService. hasProperty ( key ) ) return configService. getArrayProperty ( key ) ; else return null ; }
final RedirectRenderingPipelineTerminator terminator = new RedirectRenderingPipelineTerminator ( ) ; terminator. setRedirectTo ( null ) ; delegate. rollbackStandbyState ( ) ; }
final StatFs stat = new StatFs ( Environment. getExternalStorageDirectory ( ). getPath ( ) ) ; final long blockSize = stat. getBlockSize ( ) ; final long availableBlocks = stat. getAvailableBlocks ( ) ; return availableBlocks * blockSize ; }
"IWriter w = fmtFactory. getWriter ( fmtId ) ; try { dynamicIcon ( input, output, params, w ) ; } finally { w. close ( ) ; } }"
"MarshallingTermHandler handler = new MarshallingTermHandler ( ) ; handler. registerMarshallingTerm ( dir, term ) ; List < Term > terms = handler. getMarshallingTerms ( ) ; for ( Term t : terms ) { handler. unregisterMarshallingTerm ( t ) ; } }"
final int [ ] neighbors = new int [ numScopes ] ; for ( int i = 0 ; i < neighbors. length ; i ++ ) neighbors [ i ] = node - neighbors [ i ] ; return neighbors ; }
"try { validateMove ( x, y, tx, ty, moveStr ) ; } catch ( InvalidMoveException e ) { throw new IllegalArgumentException ( ""Invalid move: "" + moveStr + "" (x="" + x + "", y="" + y + "", tx="" + tx + "", ty="" + ty + "")"", e ) ; } }"
"StringBuffer sb = new StringBuffer ( TYPE_ICON_CLASS ) ; sb. append ( ""_"" ). append ( resourceTypeName. toLowerCase ( ) ). append ( ""_"" ). append ( suffix ) ; if ( small ) { sb. append ( SMALL_SUFFIX ) ; } return sb. toString ( ) ; }"
final int result = 0 ; for ( int i = 32 - 1 ; i >= 0 ; i -- ) { if ( ( mask & ( 1 << i ) )!= 0 ) { result |= 1 << ( i * 8 ) ; } } return result ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( count!= null ) sb. append ( ""Count: "" + count + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
when ( mockInteractionsMock. allInteractions ). thenReturn ( true ) ; verify ( mockInteractionsMock ). allInteractions ( ) ; }
BigDecimal twoAdjustment = BigDecimal. ZERO ; return twoAdjustment. multiply ( size ) ; }
"FileChannel srcChannel = new FileInputStream ( src ). getChannel ( ) ; FileChannel destChannel = new FileOutputStream ( dest ). getChannel ( ) ; cordovaBase64 ( srcChannel, destChannel, overwrite ) ; srcChannel. close ( ) ; destChannel. close ( ) ; }"
"String homeURL = UrlUtils. removeScheme ( MapUtils. getMapStr ( account, ""homeURL"" ) ) ; homeURL = StringUtils. removeTrailingSlash ( homeURL ) ; if ( homeURL. length ( ) == 0 ) { return UrlUtils. getHost ( MapUtils. getMapStr ( account, ""url"" ) ) ; } return homeURL ; }"
"CheckParameterUtil. ensureParameterNotNull ( clazz, ""clazz"" ) ; if ( clazz. getAnnotation ( ConceptDatatype. class )!= null ) { return redirectAdding ( clazz. getAnnotation ( ConceptDatatype. class ) ) ; } return false ; }"
"char [ ] result = new char [ directionTransitionInputs. length ] ; System. arraycopy ( directionTransitionInputs, 0, result, 0, directionTransitionInputs. length ) ; return result ; }"
"synchronized ( SLAA_ALERT_LOCK ) { for ( String jobId : jobIds ) { SLAA_ALERT_LOCK. lock ( ) ; try { SLAA_ALERT_JOB. set ( jobId, true ) ; return true ; } finally { SLAA_ALERT_LOCK. unlock ( ) ; } } } return false ; }"
"SubRace subRace = attributeTaxon ( name. toUpperCase ( ) ) ; if ( subRace == null ) { throw new IllegalArgumentException ( name + "" is not a previously defined Taxon"" ) ; } return subRace ; }"
"if ( HornetQRAMetaData. trace ) { HornetQRALogger. LOGGER. trace ( ""getOCRASuite()"" ) ; } return ocraSuite ; }"
"double [ ] values = tabsSequencesGivenMean ( input, output, baseConf ) ; double variance = new double [ values. length ] ; for ( int i = 0 ; i < values. length ; i ++ ) { variance *= values [ i ] ; } return variance ; }"
"keyStorePassword = ""vaulted"" ; runVault ( keyStorePassword, trustStorePassword ) ; }"
"Collection < ClientSession > clientSessions = SessionManager. getInstance ( ). getSessions ( username, null ) ; for ( ClientSession session : clientSessions ) { removeUserSession ( session ) ; } }"
boolean exist = false ; int index = 0 ; while ( exist == false && ( index < list. size ( ) ) ) { if ( list. get ( index ). intValue ( ) == valor ) { exist = true ; } index ++ ; } return exist ; }
"Map < String, String > fullIssueMap = new HashMap < > ( base. size ( ) ) ; for ( Map < Locale, Map < String, String >> issueMap : base. values ( ) ) { if ( issueMap. containsKey ( locale ) ) { fullIssueMap. put ( locale, issueMap. get ( locale ) ) ; } else { fullIssueMap. put ( locale, issueMap. get ( locale ) ) ; } } return fullIssueMap ; }"
while ( page. getNext ( )!= null ) { PageOld previous = page. getNext ( ) ; Page newPage = previous. getNext ( ) ; if ( previousPage. getWeight ( ) < weight ) { previousPage = page ; } else { page. setNext ( previousPage ) ; } } previousPage = page ; }
"if ( logger. isDebugEnabled ( ) ) logger. debug ( ""constructComment("" + socket. toString ( ) + "", "" + inSocket. toString ( ) + "", "" + outSocket. toString ( ) + "")"" ) ; shutdownSocket ( socket ) ; if ( logger. isDebugEnabled ( ) ) logger. debug ( ""constructComment("" + socket. toString ( ) + "", "" + inSocket. toString ( ) + "")"" ) ; }"
URL [ ] urls = new URL [ matches. size ( ) ] ; Enumeration e = matches. elements ( ) ; while ( e. hasMoreElements ( ) ) { urls [ e. nextElement ( ). toString ( ) ] = ( URL ) e. nextElement ( ) ; } return urls ; }
"if ( t. equalsIgnoreCase ( ""true"" ) ) { return true ; } if ( t. equalsIgnoreCase ( ""false"" ) ) { return false ; } throw invalid ( t ) ; }"
int word = mColourWord ; mColourWord = word ; return mColourWord ; }
try { for ( Object o : c ) { if (! task ( o ) ) { return false ; } } return true ; } catch ( Exception e ) { return false ; } }
if (! headers. containsKey ( columnName ) ) return null ; return headers. get ( columnName ) ; }
try { return new GenericJson ( json ) ; } catch ( JsonParseException e ) { throw new RuntimeException ( e ) ; } }
ApplicationContext contextClassLoader = Thread. currentThread ( ). getContextClassLoader ( ) ; if ( contextClassLoader == null ) { contextClassLoader = Thread. currentThread ( ). getContextClassLoader ( ) ; } return contextClassLoader ; }
"Object [ ] messages = new Object [ status. getCount ( ) ] ; for ( int i = 0 ; i < messages. length ; i ++ ) { messages [ i ] = status. getMessage ( i ) ; } return Util. join ( messages, "" "" ) ; }"
"Bandwidth expected = Bandwidth. kbps ( 900.0 ) ; assertThat ( large. set ( ( short ) 900.0 ), is ( expected ) ) ; assertThat ( large. set ( ( short ) 900.0 ), is ( expected ) ) ; }"
EmployeeBean employeeBean = new EmployeeBean ( ) ; employeeBean. ignorePipelineSql ( ) ; }
File f = new File ( directory ) ; return f. exists ( ) && f. canWrite ( ) ; }
List < String > out = parentPivot. createLengthPath ( ) ; if ( null == parentPivot ) { out. add ( null ) ; } else if ( value instanceof Date ) { out. add ( DateFormatUtil. formatExternal ( ( Date ) value ) ) ; } else { out. add ( value. toString ( ) ) ; } return out ; }
String value = properties. getProperty ( k ) ; return value ; }
tradeList. add ( trade ) ; saveBelowTime ( trade ) ; }
"Set < ApprovedSite > setToReturn = Sets. newHashSet ( site2, site3 ) ; Mockito. when ( repository. getByClientId ( client. getClientId ( ) ) ). thenReturn ( setToReturn ) ; service. clearApprovedSitesForClient ( client ) ; Mockito. verify ( repository, times ( 1 ) ). remove ( any ( ApprovedSite. class ) ) ; }"
"StringBuilder r = new StringBuilder ( ) ; r. append ( ""#####"" ) ; for ( int i = 0 ; i < 5 ; i ++ ) { r. append ( Integer. toString ( i ) ) ; if ( i == 3 || i == 5 ) { r. append ( ""#####"" ) ; } } r. append ( ""  "" ) ; return r. toString ( ) ; }"
Set < ModuleLicenseModel > modelsCopy = new HashSet < ModuleLicenseModel > ( models ) ; modelsCopy. addAll ( modules ) ; return modelsCopy ; }
"for ( T input : inputs ) { if ( input!= null ) { return input ; } } throw new IllegalStateException ( ""No valid input found."" ) ; }"
Paragraph p = new Paragraph ( ) ; p. setText ( text ) ; p. setFont ( font ) ; return p ; }
"VuePropertyMapper result = null ; for ( Map. Entry < String, VuePropertyMapper > entry : paramMap. entrySet ( ) ) { if ( entry. getValue ( ). equals ( pObject ) ) { result = entry. getKey ( ) ; break ; } } return result ; }"
assert x > min ; return x - min ; }
"if (! file. exists ( ) ) { throw new RuntimeException ( ""File not found: "" + file. getAbsolutePath ( ) ) ; } FileInputStream fis = null ; try { fis = new FileInputStream ( file ) ; mImageDownloader. downloadImage ( fis ) ; } catch ( FileNotFoundException e ) { throw new RuntimeException ( ""Font not found: "" + file. getName ( ) ) ; } finally { if ( fis!= null ) fis. close ( ) ; } }"
try { ImageIcon iconImage = getImageIcon ( iconName ) ; if ( iconImage!= null ) { button. setIcon ( iconImage ) ; } } catch ( Exception e ) { return false ; } if ( description!= null &&! description. isEmpty ( ) ) { button. setDescription ( description ) ; } return true ; }
List reportList ; StatusILDReportDAO commonreportdao = new StatusILDReportDAO ( ) ; reportList = commonreportdao. selectRequest_no ( dto ) ; return reportList ; }
CPLSession session = get ( ). session ; set ( session ) ; return session ; }
if ( sIsLeafToForward == null ) sIsLeafToForward = true ; return sIsLeafToForward ; }
if ( instance == null ) { instance = new VersionFourGenerator ( ) ; } return instance ; }
"int exitCode = endCommand. execute ( new String [ ] { ""--groupname=Group1"", ""--serverid=123"" } ) ; final String output = errorStringWriter. getBuffer ( ). toString ( ). trim ( ) ; assertEquals ( ""Either the name or ID of a group must be specified"", output ) ; assertEquals ( 1, exitCode ) ; }"
"List < String > vals = cookieParam. getValues ( ) ; if ( vals == null || vals. size ( ) == 0 ) { return null ; } String [ ] tokens = vals. toArray ( new String [ vals. size ( ) ] ) ; for ( int i = 0 ; i < tokens. length ; i ++ ) { vals. set ( i, tokens [ i ] ) ; } return vals. get ( 0 ) ; }"
int tmp = cgserver [ index ] ; if ( tmp > 0 ) { cgserver [ index ] = cgserver [ tmp - 1 ] ; } return tmp ; }
"Preconditions. checkNotNull ( population, ""Error: Population argument can not be null"" ) ; return! population. getPopulation ( ). getMaxTime ( ) <= 0 && population. getPopulation ( ). getMaxTime ( ) <= population. getPopulation ( ). getTerminationTime ( ) ; }"
if (! models. containsKey ( contactId ) ) return false ; boolean removed = false ; for ( ContactModel model : models ) { if ( model. removeClasses ( contactId ) ) { removed = true ; break ; } } return removed ; }
"if ( entity == null ) { return false ; } String contentType = entity. getContentType ( ) ; if ( contentType == null || contentType. length ( ) == 0 ) { return false ; } return contentType. equalsIgnoreCase ( ""application/x-www-form-urlencoded"" ) ; }"
"if ( logger!= null ) { logger. logError ( Level. WARNING, ""Failed to broadcast message: "" + e. getMessage ( ), e ) ; return false ; } logger. logError ( Level. WARNING, ""Failed to broadcast message: "" + e. getMessage ( ), e ) ; return true ; }"
"byte [ ] addressValue = rawValue. getBytes ( ) ; value = new RGB ( ( int ) ( addressValue [ 0 ] & 0xFF ), ( int ) ( addressValue [ 1 ] & 0xFF ), ( int ) ( addressValue [ 2 ] & 0xFF ) ) ; return value ; }"
"try { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( new Date ( ) ) ; cal. set ( Calendar. HOUR_OF_DAY, 0 ) ; cal. set ( Calendar. MINUTE, 0 ) ; cal. set ( Calendar. SECOND, 0 ) ; return cal. getTimeInMillis ( ) ; } catch ( Exception e ) { return - 1 ; } }"
"final Tile t = new Tile ( tx, ty, tmaxX, tmaxY ) ; addTile ( t ) ; }"
"String spaces = """" ; if ( i!= 0 ) { spaces += "" "" ; } spaces += arg ; if ( args. size ( ) > i ) { spaces += args. get ( i ) ; } return spaces ; }"
"for ( int i = 0 ; i < NS_PREFIX_MAP. length ; i ++ ) { NS_PREFIX_MAP [ i ] = NS_PREFIX_MAP [ i ] ; } for ( int i = 0 ; i < NS_PREFIX_MAP. length ; i ++ ) { Assert. assertEquals ( NS_PREFIX_MAP [ i ], NS_PREFIX_MAP [ i ] ) ; } }"
Set < String > keys = nodeMap. keySet ( ) ; for ( String key : keys ) { nodeMap. remove ( key ) ; } }
"String dir = System. getProperty ( ""user.home"" ) ; if ( dir!= null ) { return dir ; } dir = System. getProperty ( ""java.io.tmpdir"" ) ; if (! dir. endsWith ( File. separator ) ) { dir += File. separator ; } return dir ; }"
BufferedWriter out = null ; try { out = new BufferedWriter ( new FileWriter ( fileName ) ) ; } catch ( FileNotFoundException e ) { e. printStackTrace ( ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } return out ; }
burnPhase = true ; removeOld ( ) ; }
int n = data. length ; double wraparoundOrder = new double [ n * stride ] ; for ( int j = 0 ; j < n / stride ; j ++ ) { wraparoundOrder [ j ] = data [ i0 + j ] ; } return wraparoundOrder ; }
boolean result = false ; SubCategoryDAO subCategoryDAO = new SubCategoryDAO ( ) ; result = subCategoryDAO. clearEncodingCategory ( object1 ) ; return result ; }
"try { return URLDecoder. decode ( vCardString, ""UTF-8"" ) ; } catch ( UnsupportedEncodingException e ) { e. printStackTrace ( ) ; return """" ; } }"
int priority = THREAD_PRIORITY. get ( thread ) ; if ( priority < 0 ) { priority = THREAD_PRIORITY_DEFAULT ; if ( THREAD_PRIORITY_SET. get ( thread )!= null ) { priority = THREAD_PRIORITY_SET. get ( thread ) ; } } return priority ; }
List < Integer > ret = new LinkedList < Integer > ( ) ; for ( int i = 0 ; i < bindingMessagePositions. size ( ) ; i ++ ) { if ( bindingMessagePositions. get ( i ). getType ( ) == type ) { ret. add ( i ) ; } } return ret ; }
if ( exists ( uri ) ) { return true ; } else { return false ; } }
String oldMediaId = clicked. getMediaId ( ) ; if ( oldMediaId == null ) { oldMediaId = clicked. getId ( ) ; } return oldMediaId ; }
"String defaultContrib = partitionContribs. getProperty ( ""defaultContrib"", """" ) ; if ( defaultContrib == null ) { defaultContrib = partitionContribs. getProperty ( ""defaultContrib"", """" ) ; } if ( defaultContrib == null ) { defaultContrib = partitionContribs. getProperty ( ""defaultContrib"", """" ) ; } }"
e. _resetFinish ( ) ; _undoableEditHappened ( ) ; }
if ( defVariables!= null ) { for ( int i = 0 ; i < defVariables. length ; i ++ ) { if ( variable. equals ( defVariables [ i ] ) ) { defVariables [ i ] = null ; break ; } } } }
long currentMemory = Runtime. getRuntime ( ). totalMemory ( ) - Runtime. getRuntime ( ). freeMemory ( ) ; if ( currentMemory < MIN_MEMORY ) { currentMemory = MIN_MEMORY ; Runtime. getRuntime ( ). gc ( ) ; } assert currentMemory >= MIN_MEMORY ; }
"synchronized ( jPlayer. saveLock ) { if ( jPlayer!= null && job!= null ) { jPlayer. leaveJob ( job ) ; Jobs. getJobsDAO ( ). restoreRepository ( jPlayer, job ) ; } } }"
String val = System. getProperty ( key ) ; return val!= null? val : System. getenv ( key ) ; }
"int length = input. length ; byte [ ] buf = new byte [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { buf [ i ] = input [ i ] ; } mac. update ( buf, 0, length ) ; }"
if ( id < 0 || id > MAX_ID ) return null ; for ( Contact contact : contacts ) { if ( contact. getId ( ) == id ) return contact ; } return null ; }
if ( eol == null ) { return true ; } else { return eol ; } }
"Integer index = valueMapping. get ( value ) ; if ( index == null ) { index = nextIndex ; valueMapping. put ( value, index ) ; indexMapping. put ( index, value ) ; nextIndex ++ ; } return index ; }"
switch ( accessLevel ) { case ClassConstants. INTERNAL_ACC_PRIVATE : return ClassConstants. INTERNAL_ACC_FINAL ; case ClassConstants. INTERNAL_ACC_PROTECTED : return ClassConstants. INTERNAL_ACC_PROTECTED ; case ClassConstants. INTERNAL_ACC_PUBLIC : return ClassConstants. INTERNAL_ACC_PUBLIC ; default : return 0 ; } }
"IssueLinkType type = issueLinkTypeService. findAll ( ) ; if ( type!= null ) { return createResponseEntity ( HttpStatus. OK, String. format ( ""The %s issue link type is found"", type. getName ( ) ), type. getLabel ( ) ) ; } else { return createResponseEntity ( HttpStatus. NO_CONTENT, String. format ( ""The %s issue link type is not found"", linkId ), null ) ; } }"
"dragStart ( ) ; stopDrag ( ) ; return ( ""drag-play"" ) ; }"
"ArrayList packageTypes = new ArrayList ( 2 ) ; String name ; do { name = target. getName ( ) ; int idx = name. lastIndexOf ( '.' ) ; if ( idx!= - 1 ) { packageTypes. add ( name. substring ( 0, idx ) ) ; } else { packageTypes. add ( name. substring ( 0, idx ) ) ; } } while (! packageTypes. contains ( target ) ) ; return packageTypes ; }"
"int len = strValue. length ( ) ; byte [ ] ret = new byte [ len / 2 ] ; for ( int i = 0 ; i < len ; i += 2 ) { ret [ i / 2 ] = ( byte ) ( ( Character. digit ( strValue. charAt ( i ), 16 ) << 4 ) + Character. digit ( strValue. charAt ( i + 1 ), 16 ) ) ; } return ret ; }"
target. mTimeStamp = System. currentTimeMillis ( ) ; return target ; }
byte [ ] result = new byte [ 2 ] ; result [ 0 ] = ( byte ) ( value >>> 8 ) ; result [ 1 ] = ( byte ) ( value >>> 8 ) ; return result ; }
List < String > symbols = new ArrayList < String > ( ) ; Set < String > userGroups = new HashSet < String > ( ) ; for ( String group : userGroups ) { if ( group. contains ( user ) ) { symbols. add ( group ) ; } } Collections. sort ( symbols ) ; return symbols ; }
"final Base base = new MkBase ( ) ; final ChannelDao channelDao = new PsBasic ( base ). channelDao ( ) ; MatcherAssert. assertThat ( channelDao. read ( ), Matchers. equalTo ( ""Hello world"" ) ) ; }"
if ( type. getRaw ( ) ) return type ; return schemaToken ( ) ; }
"final Tomcat90ContainerAdapter adapter = new Tomcat90ContainerAdapter ( ) ; adapter. addInfoResourceLink ( context, null, false ) ; }"
Set < String > result = new HashSet < String > ( ) ; for ( GrantedAuthority authority : userAuthorities ) { result. add ( authority. toString ( ) ) ; } return result ; }
"String dataUri = null ; try { dataUri = URLEncoder. encode ( html, ""UTF-8"" ) ; } catch ( UnsupportedEncodingException e ) { e. printStackTrace ( ) ; } return dataUri ; }"
EditPartViewer viewer = buildCentroidsViewer ( editor ) ; return viewer ; }
DomainControllerRuntimeIgnoreTransformationEntry hostIgnore = hostEntries. get ( hostName ) ; return! hostIgnore. removeRendererBindingGroup ( socketBindingGroup ) ; }
"if ( size < 4 ) throw new IllegalArgumentException ( ""frame payload size must be 4 bytes"" ) ; minFramePayloadSize = size ; }"
String value = json. getString ( key ) ; if ( value!= null ) { return value ; } return defaultValue ; }
if ( setB. isEmpty ( ) ) { setA. removeAll ( setB ) ; } return setA ; }
"Map < Long, Integer > equalClientCountMap = new HashMap < Long, Integer > ( ) ; for ( Long id : availableClients ) { equalClientCountMap. put ( id, 0 ) ; } return equalClientCountMap ; }"
"HazelcastInstance hazelcastInstance = new HazelcastInstance ( ) ; return new ResponseEntity < ScheduledProgramNote > ( hazelcastInstance. getNotes ( id ), HttpStatus. OK ) ; }"
"if ( url == null ) return null ; int slash = url. lastIndexOf ( ""/"" ) ; if ( slash!= - 1 ) return url. substring ( slash + 1 ) ; return null ; }"
"XYSeries series1 = new XYSeries ( ""Series 1"" ) ; series1. add ( 1.0, 1.0 ) ; series1. add ( 2.0, 2.0 ) ; series1. add ( 3.0, 3.0 ) ; XYDataset dataset = new XYSeriesCollection ( series1 ) ; return ChartFactory. createScatterPlot ( ""Scatter Plot"", ""Domain"", ""Range"", dataset, true, true, true, true ) ; }"
"List list = new ArrayList ( ) ; ResultSet rs = conn. createStatement ( ). executeQuery ( ""SELECT * FROM "" + clazz. getName ( ) ) ; while ( rs. next ( ) ) { list. add ( rs. getObject ( 1 ) ) ; } rs. close ( ) ; conn. close ( ) ; return list ; }"
if ( v ) { extractUnicodeChar ( Character. MIN_VALUE ) ; } if ( extractUnicodeChar ( Character. MAX_VALUE ) ) { extractUnicodeChar ( Character. MAX_VALUE ) ; } }
"int lo = 0 ; int hi = size - 1 ; while ( lo <= hi ) { int mid = ( startPos + lo ) / 2 ; long temp = arrayBuf. get ( mid ) ; arrayBuf. set ( startPos + mid, temp ) ; lo = mid + 1 ; hi = temp ; } return lo ; }"
if ( id == null ) { return null ; } for ( NetworkParameters params : NetworkParameters. values ( ) ) { if ( params. id. equals ( id ) ) { return params ; } } return null ; }
"LOGGER. debug ( ""Updating outgoing message for {} with {}"", message. getFrom ( ), message. getTo ( ) ) ; chat. getOutgoingMessages ( ). put ( message. getFrom ( ), message ) ; }"
Calendar cal = Calendar. getInstance ( ) ; int currentMonth = cal. get ( Calendar. MONTH ) ; if ( currentMonth == - 1 ) { return false ; } Calendar nextMonth = cal. get ( Calendar. MONTH ) + 1 ; return nextMonth == cal. get ( Calendar. MONTH ) ; }
int value = ( toWrite & 0x7F ) ; if ( value > maxSize ) { toWrite. writeShort ( value ) ; } toWrite. writeShort ( value ) ; }
"List < User > users = em. createNamedQuery ( ""User.findAll"", User. class ). getResultList ( ) ; return users ; }"
int result = 0 ; do { result ++ ; value >>>= 7 ; } while ( value!= 0 ) ; return result ; }
"ATGBiomeModEvent event = new ATGBiomeModEvent ( type, group, biome, weight ) ; MinecraftForge. EVENT_BUS. post ( event ) ; if ( event. response == ATGBiomeModEvent. ResponseType. FAILED ) { } }"
"try { ByteBuffer buf = ByteBuffer. wrap ( str. getBytes ( ""ISO-8859-1"" ) ) ; buf. order ( ByteOrder. LITTLE_ENDIAN ) ; return buf. asReadOnlyBuffer ( ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }"
"ProgressBarTreeTableCell < Object > cell = new ProgressBarTreeTableCell < > ( ) ; assertTrue ( cell. getStyleClass ( ). contains ( ""progress-bar-tree-table-cell"" ) ) ; }"
"String storagePath = System. getProperty ( ""java.io.tmpdir"" ) ; if ( storagePath!= null ) { return new File ( storagePath ) ; } else { return new File ( ""data"" ) ; } }"
"final Integer positionId = positionMap. get ( name ) ; if ( positionId == null ) { positionId = 0 ; positionMap. put ( name, positionId ) ; } return positionId ; }"
float [ ] out = new float [ 3 ] ; for ( int i = 0 ; i < in. length ; i ++ ) { float n = in [ i ] ; if ( n < 0 ) n = 0f ; if ( n > 1 ) n = 1f ; if ( n <= 0.00304f ) out [ i ] = in [ 0 ] * 12.92f ; else out [ i ] = ( float ) ( 2.4 * Math. exp ( - 2.4 * Math. log ( n ) ) ) ; } return out ; }
Util. assertPrecondition ( isLoader ( ordinal ) ) ; return loaderOrdinalMap. get ( ordinal ) ; }
"LOGGER. error ( ""Error while executing handler: "" + e. getMessage ( ), e ) ; return e. getMessage ( ) ; }"
"Object value = adHocChatRoom. getOptions ( ). get ( ""mockButtonNotifications"" ) ; if ( value!= null && value instanceof Boolean ) { return ( ( Boolean ) value ). booleanValue ( ) ; } return false ; }"
"try { return new NetworkConfiguration ( NetUtils. getHazelcastHost ( ), NetUtils. getHazelcastPort ( ) ) ; } catch ( IOException e ) { LOGGER. error ( ""Inspecting the hazelcast server failed: "" + e. getMessage ( ), e ) ; return null ; } }"
try { byte [ ] bytes = value. getBytes ( encoding ) ; if ( bytes == null ) { bytes = new byte [ value. length ( ) ] ; } return bytes ; } catch ( Exception e ) { return null ; } }
"assertThat ( director. orientation ( ), lessThan ( Resources. createResource ( 45 ) ) ) ; assertThat ( director. orientation ( ), greaterThanOrEqualTo ( Resources. createResource ( 45 ) ) ) ; assertThat ( director. director ( ), greaterThanOrEqualTo ( Resources. createResource ( 45 ) ) ) ; }"
"if ( HazelcastInstance. getInstance ( )!= null ) { return HazelcastInstance. getInstance ( ). getConfigurationId ( groupId, dataRepositoryId ) ; } else { return - 1 ; } }"
if ( jolokiaUrl!= null ) { container. setIconUrl ( jolokiaUrl ) ; container. setJolokiaUrl ( jolokiaUrl ) ; } }
"EastNorth crs = wmtSource. getEastNorth ( zoomLevel ) ; double [ ] bounds = new double [ 2 ] ; bounds [ 0 ] = crs. getMinX ( ) ; bounds [ 1 ] = crs. getMinY ( ) ; bounds [ 2 ] = crs. getMaxZ ( ) ; return new ReferencedEnvelope ( bounds [ 0 ], bounds [ 1 ], bounds [ 2 ] ) ; }"
int ch1 = data [ offset ] & 0xFF ; int ch2 = data [ offset + 1 ] & 0xFF ; return ( ch1 << 24 ) + ( ch2 << 16 ) + ( ch3 << 8 ) + ( ch4 << 0 ) ; }
"StringBuilder buffer = new StringBuilder ( ) ; if ( objects!= null ) { for ( Object object : objects ) { buffer. append ( object ) ; if ( buffer. length ( ) > 0 ) { buffer. append ( "", "" ) ; } } } return buffer. toString ( ) ; }"
int rows = matrix. length ; int cols = matrix [ 0 ]. length ; for ( int i = 0 ; i < rows ; i ++ ) { for ( int j = 0 ; j < cols ; j ++ ) { if ( matrix [ i ] [ j ] < matrix [ j ] [ i ] ) continue ; if (! strongConnected ( matrix [ i ] [ j ] ) ) matrix [ i ] [ j ] = matrix [ j ] [ i ] ; } } return matrix ; }
validateObject ( modifiedObject ) ; data. updateObject ( modifiedObject ) ; }
HazelcastInstance hazelcastInstance = HazelcastInstance. getInstance ( ) ; if ( hazelcastInstance!= null ) { hazelcastInstance. getParameter ( key ). setValue ( value ) ; } }
"Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( 0 ) ; for ( Date date : dates ) { cal. add ( Calendar. DAY_OF_MONTH, - 1 ) ; } cal. set ( Calendar. HOUR_OF_DAY, 0 ) ; cal. set ( Calendar. MINUTE, 0 ) ; cal. set ( Calendar. SECOND, 0 ) ; cal. set ( Calendar. MILLISECOND, 0 ) ; return cal. getTime ( ) ; }"
if ( length > maxDecimalLength ) { maxDecimalLength = length ; decimal = new BigDecimal ( Long. toString ( length ) ) ; } }
for ( int i = 0 ; i < script. length ( ) ; i ++ ) { reviewedHelpCount ++ ; } }
double taxon = 0 ; for ( double element : array ) { taxon = taxon + element ; } return taxon ; }
"s_aRWLock. writeLock ( ). lock ( ) ; try { while (! s_aStarted ) { stop ( ) ; s_aStarted = true ; try { unit. sleep ( timeout ) ; } catch ( InterruptedException e ) { } } return! s_aStarted. await ( timeout, unit ) ; } finally { s_aRWLock. writeLock ( ). unlock ( ) ; } }"
int currentPoint = 0 ; for ( int i = 0 ; i < instance. numInstances ( ) ; i ++ ) { int pointNum = 0 ; for ( int j = 0 ; j < instance. numInstances ( ) ; j ++ ) { pointNum = pointList [ j ] ; if ( pointNum < allPoints. value ( pointNum ) ) { currentPoint = allPoints. value ( pointNum ) ; } } } return currentPoint ; }
orig_valor = nombre_propiedad ; return orig_valor ; }
for ( int i = 0 ; i < text. length ( ) ; i ++ ) { writer. write ( text. charAt ( i ) ) ; if ( i < text. length ( ) - 1 ) { writer. write ( '|n' ) ; } } }
"final X509EncodedKeySpec keySpec = new X509EncodedKeySpec ( key ) ; writeKeySpec ( keySpec, out ) ; }"
"try { return ioOperations. updateAgentType ( medicalType ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return false ; } }"
"Method last = specializedMethods. get ( id ) ; if ( last == null ) { last = specializedMethods. get ( id ) ; specializedMethods. put ( id, last ) ; } }"
isSegmentActive =! isSegmentActive ; resultSegment. setParent ( parentSegment ) ; isSegmentActive = true ; }
float curAngle = Math. toDegrees ( theta ) ; if ( curAngle < 0 ) { curAngle += 360 ; } if ( curAngle > 360 ) { curAngle -= 360 ; } return curAngle ; }
try { return imediateVal ( 1 ) ; } catch ( NumberFormatException e ) { return - 1 ; } }
double grid = in ; while ( grid > CapChartFetcher. GRID_SIZE ) { grid /= 2 ; } return grid ; }
"final Intent cartIntent = new Intent ( ) ; cartIntent. putExtra ( EXTRA_CART, getCart ( context ) ) ; return cartIntent ; }"
"String result = clean. replaceAll ( ""<"", ""&#60;"" ) ; result = result. replaceAll ( "">"", ""&#62;"" ) ; result = result. replaceAll ( ""&"", ""&#38;"" ) ; result = result. replaceAll ( ""<"", ""&#62;"" ) ; result = result. replaceAll ( "">"", ""&#38;"" ) ; return result ; }"
ThresholdEvent event = new ThresholdEvent ( ) ; assertFalse ( event. isCancelled ( ) ) ; event. cancel ( ) ; assertFalse ( event. isCancelled ( ) ) ; }
DataInputStream var1 = new DataInputStream ( new BufferedInputStream ( new GZIPInputStream ( par0InputStream ) ) ) ; NBTTagCompound var2 ; try { var2 = NBTTagCompound. fromStream ( var1 ) ; } finally { var1. close ( ) ; } return var2 ; }
"for ( int i = 0 ; i < a. length ; i ++ ) { if ( i < a. length - 1 ) { System. out. print ( a [ i ] + "" "" ) ; } else { System. out. print ( a [ i ] + "" "" ) ; } } }"
"float sampleRate = 190000 ; int sampleSizeInBits = 8 ; int channels = 2 ; boolean signed = true ; boolean bigEndian = true ; AudioFormat format = new AudioFormat ( sampleRate, sampleSizeInBits, channels, signed, bigEndian ) ; return format ; }"
if ( dataBound == null ) { return false ; } else { return dataBound ; } }
PropertyMetadata propertyMetadata = child. getPropertyMetadata ( ) ; if ( propertyMetadata!= null ) { metadata. putPropertyMetadata ( propertyMetadata ) ; } }
documentList = resourceList ; List listeners = getListeners ( ) ; for ( Iterator i = listeners. iterator ( ) ; i. hasNext ( ) ; ) { IResourceListener listener = ( IResourceListener ) i. next ( ) ; listener. documentListChanged ( documentList ) ; } }
first. getterSession ( sessionManager ) ; second. getterSession ( sessionManager ) ; }
DecimalFormat df = ( DecimalFormat ) DecimalFormat. getInstance ( Locale. US ) ; df. setMaximumFractionDigits ( length ) ; df. setMinimumFractionDigits ( length ) ; df. setGroupingUsed ( false ) ; String s = df. format ( n ) ; return s ; }
"String shareDate = zeroDateFormat. format ( date ) + oneMonthFormat. format ( date. getTime ( ) ) ; shareDate = shareDate. substring ( 0, shareDate. indexOf ( ""-"" ) ) + oneWeekFormat. format ( date. getTime ( ) ) ; return shareDate ; }"
"if ( confirmPw == null || newPw == null || confirmPw == """" ) { return null ; } return retrieveClassifyPassword ( newPw, confirmPw ) ; }"
ClassLoader cl = VMStackWalker. getCallingClassLoader ( ) ; return cl!= null? cl. getPackagesForClassLoader ( ) : VMClassLoader. getPackagesForClassLoader ( ) ; }
"try { return info. getPropertyDescriptor ( propertyName ) ; } catch ( final IntrospectionException e ) { throw new RuntimeException ( ""Failed getting property descriptor for "" + info, e ) ; } }"
Key senderMatchKey = null ; for ( Key key : keys ) { if ( key. equals ( senderMatchKey ) ) { senderMatchKey = key ; break ; } } return senderMatchKey ; }
"final View child = findOneVisibleChild ( 0, layoutManager. getChildCount ( ) - 1, false, true, false ) ; return child == null? RecyclerView. NO_POSITION : recyclerView. getChildAdapterPosition ( child ) ; }"
checkYear ( year ) ; return getJulianEasterSunday ( year ) ; }
return buildDisconnect ( new ILogger ( ) { @ Override public void error ( IStatus status ) { System. err. println ( status. toString ( ) ) ; } @ Override public void error ( IStatus status ) { System. err. println ( status. toString ( ) ) ; } } ) ; }
"String datString = convertWGS84ToDat ( tsvFileName, datFileName ) ; compareFillToDat ( tsvFileName, datString, radius ) ; }"
final StrutsModel model = buildParentModel ( context ) ; if ( model!= null ) { return model ; } final CombineModel combinedModel = buildCombinedModel ( context ) ; if ( combinedModel!= null ) { return combinedModel ; } return model ; }
"CheckResult res = new CheckResult ( ) ; for ( int i = 0 ; i < aResponse. length ( ) ; i += 2 ) { String block = aResponse. substring ( i, i + 2 ) ; res. setBlock ( block, Integer. parseInt ( block. substring ( 4, block. length ( ) - 4 ) ) ) ; } return res ; }"
"return new Predicate < RequestHandler > ( ) { @ Override public boolean apply ( RequestHandler input ) { return! AnnotationUtils. isAnnotationPresent ( input. getClass ( ), annotation ) ; } @ Override public String toString ( ) { return ""invalidColumnAnnotation("" + annotation. getName ( ) + "")"" ; } } ; }"
String creationPermission = Context. getAdministrationService ( ). getCurrentUser ( ). getCreationPermission ( ) ; if ( creationPermission. equals ( Permissions. EXCLUSIVE ) ) { createButton. setEnabled ( true ) ; } else { createButton. setEnabled ( false ) ; } }
if ( integrate == null ) { return false ; } else { return integrate ; } }
Set < String > attendees = new HashSet < String > ( ) ; if ( minutesAsAService!= null ) { attendees. addAll ( minutesAsAService. getPossibleAttendees ( ) ) ; } return attendees ; }
"int readBytes = readLen ( buffer, seekPos, requestedLen ) ; if ( readBytes!= requestedLen ) { throw new IOException ( ""Failed to read "" + requestedLen + "" bytes, possibly "" + ""due to end of file"" ) ; } return readBytes ; }"
Long val = errorStatistics. get ( key ) ; return val!= null? val : null ; }
"try { byte [ ] buf = ic. getData ( ) ; ip. write ( buf, 0, buf. length ) ; ip. flush ( ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } }"
hazelcast ( ( float ) val ) ; if ( val < 0.0 ) { hazelcast ( 1.0 ) ; } else if ( val > 1.0 ) { hazelcast ( 1.0 ) ; } }
"if (! clazz. isInterface ( ) ) { String className = clazz. getName ( ) ; throw new IllegalArgumentException ( className + "" is not a proxy interface"" ) ; } String interfaces [ ] = clazz. getInterfaces ( ) ; for ( int i = 0 ; i < interfaces. length ; i ++ ) { throw new ProfilePackageAccessException ( interfaces [ i ], clazz ) ; } }"
"Map < String, String > props = new HashMap < > ( ) ; props. put ( ""org.apache.tomcat.util.res.properties"", ""true"" ) ; props. put ( ""org.apache.tomcat.util.res.properties"", ""property1"" ) ; props. put ( ""org.apache.tomcat.util.res.properties"", ""property2"" ) ; assertTrue ( ""property3"", Objects. equals ( props. get ( ""property4"" ) ) ) ; assertTrue ( props. containsKey ( ""org.apache.tomcat.util.res.properties"" ) ) ; }"
state. populationSize = dataInput. readInt ( ) ; for ( int i = 0 ; i < populationSize ; i ++ ) { state. population [ i ]. putCells ( dataInput ) ; } }
"String user = db. getUser ( ) ; String password = db. getPassword ( ) ; if ( isPasswordFile ( user ) ) { return Pair. of ( user, password ) ; } return Pair. of ( user, password ) ; }"
"String drawable = resPath ; if ( drawable. contains ( ""/"" ) ) { drawable = drawable. substring ( drawable. lastIndexOf ( '/' ) + 1 ) ; } if ( resPath. contains ( ""."" ) ) { drawable = drawable. substring ( 0, drawable. lastIndexOf ( '.' ) ) ; } return drawable ; }"
if ( usersFactor == null ) { usersFactor = factor ; conditionFactors. add ( factor ) ; } }
m_loopStack. push ( loopPointer ) ; if ( m_loopStack. size ( ) > 0 ) { m_loopPointer = m_loopStack. get ( m_loopStack. size ( ) - 1 ) ; } }
"logger. log ( Level. SEVERE, ""Registering Gist users."" ) ; return registerGistUsers ( ) ; }"
"String [ ] userLibraries = new String [ userLibraries. length ] ; System. arraycopy ( userLibraries, 0, userLibraries, 0, userLibraries. length ) ; return userLibraries ; }"
for ( int i = 0 ; i < weekFirst. size ( ) ; i ++ ) { if ( weekFirst. get ( i )!= null ) { return weekFirst. get ( i ) ; } } return null ; }
Object [ ] params = new Object [ 2 ] ; params [ 0 ] = getLoggerAddress ( ) ; params [ 1 ] = getPort ( ) ; return params ; }
PDRectangle retval ; COSArray array = ( COSArray ) dictionary. getDictionaryObject ( COSName. B ) ; if ( array!= null ) { retval = new PDRectangle ( array ) ; } else { retval = getCOSNumber ( COSName. B ) ; } return retval ; }
Key k1 = new Key ( ) ; k1. hashCode ( ) ; return k1 ; }
long id = idMap. get ( key ) ; if ( id < 0 ) return - 1 ; long fd = valueMap. get ( value ) ; return ( int ) ( fd / clusterSize ) ; }
"System. err. println ( ""jcmd -l -h -help"" ) ; System. exit ( 1 ) ; }"
"String [ ] parts = line. split ( ""|s+"" ) ; if ( parts. length == 0 ) { _mergeInfo = null ; } else if ( parts. length > 1 ) { _mergeInfo = parts [ 0 ] ; } for ( int i = 2 ; i < parts. length ; i ++ ) { _mergeInfo += parts [ i ] ; } }"
"if ( listener == null ) { throw new NullPointerException ( ""listener == null!"" ) ; } mDataSetListener = listener ; mFireMode = fireMode ; }"
List < IssueType > types = new ArrayList < IssueType > ( ) ; types. addAll ( IssueType. values ( ) ) ; for ( IssueType type : IssueType. values ( ) ) { types. add ( type ) ; } return types ; }
s [ 0 ] = ( byte ) tag ; s [ 1 ] = ( byte ) ( ( s [ 0 ] & 0xff ) | ( ( s [ 1 ] & 0xff ) << 8 ) ) ; s [ 2 ] = ( byte ) ( ( s [ 2 ] & 0xff ) | ( ( s [ 3 ] & 0xff ) << 16 ) ) ; s [ 4 ] = ( byte ) ( ( s [ 4 ] & 0xff ) | ( ( s [ 5 ] & 0xff ) << 8 ) ) ; s [ 6 ] = ( byte ) ( s [ 7 ] & 0xff ) ) ; }
int result = temporalCoordinateSystem1. hashCode ( ) ; assertFalse ( temporalCoordinateSystem2. hashCode ( ) == result ) ; }
"List < String > cacheNames = new ArrayList < String > ( ) ; cacheNames. add ( ""JCache2"" ) ; cacheNames. add ( ""JCache3"" ) ; cacheNames. add ( ""JCache4"" ) ; cacheNames. add ( ""JCache5"" ) ; assertEquals ( cacheNames. size ( ), 0 ) ; }"
"DeprecationLogger. nagUserOfReplacedMethod ( ""MavenPluginConvention.setVideoPomDir()"", ""setVideoPomDir()"" ) ; return setVideoPomDir ( ) ; }"
ArrayList < Disease > result = extractOPD ( ) ; ArrayList < Disease > ipd = extractIPD ( ) ; if ( ipd!= null ) result. add ( ipd ) ; return result ; }
"JtaProcess process = getProvider ( ) ; process. insert ( 1 ) ; assertEquals ( 1, process. getRecordCount ( ) ) ; process. close ( ) ; }"
short weekcell = ( short ) ( firstcell - 1 ) ; return weekcell ; }
"if ( Trace. isTraceOn ( ) ) Trace. log ( Trace. DIAGNOSTIC, ""Getting parameter value for result: "" + result ) ; value = result ; }"
"for ( int i = 0 ; i < releasedIdVector. size ( ) ; i ++ ) { releasedIdVector. set ( i, releasedIdVector. get ( i ) + tempID ) ; } }"
Argument a = argument ( name ) ; while ( a!= null &&! ( a instanceof Argument ) ) { a = ( Argument ) a ; } return a ; }
Matrix m = getValueToPixelMatrix ( ) ; for ( int i = 0 ; i < rects. size ( ) ; i ++ ) { m. mapRect ( rects. get ( i ) ) ; } }
DatabaseRelationDefinition def = null ; if ( id. hasSchema ( ) ) { String schemaName = id. getSchema ( ) ; def = createBeanRelation ( schemaName ) ; } return def ; }
line = ch ; column = 0 ; }
"JScrollPane jScrollPane = new JScrollPane ( component, bounds, backgroundColor, noBorder, visible ) ; jScrollPane. setAutoscrolls ( true ) ; return jScrollPane ; }"
long bits = ( 1L << ( 63 - l ) ) ; return saveUuidfromLong ( bits ) ; }
byte [ ] ret = new byte [ 4 ] ; ret [ 0 ] = ( byte ) ( val >>> 24 ) ; ret [ 1 ] = ( byte ) ( val >>> 16 ) ; ret [ 2 ] = ( byte ) ( val >>> 8 ) ; ret [ 3 ] = ( byte ) ( val ) ; return ret ; }
resetX ( ) ; if ( plot. isTimeLabelEnabled ) { rescalePlotOnTimeAxis ( ) ; } plot. getPlotAbstraction ( ). updateResetButtons ( ) ; plot. refreshDisplay ( ) ; }
"_input. next ( ""create"" ) ; String name = _input. peek ( ) ; Table table = Table. readTable ( name ) ; table. loadPeer ( ) ; }"
"if ( ctrCand == null ) { return null ; } else { OdfCtrCand selectorCand = new OdfCtrCand ( ctrCand. getId ( ), ctrCand. getSuivant ( ) ) ; return selectorCand ; } }"
repository. findById ( 1L ) ; verify ( repository ). findById ( eq ( 1L ) ) ; }
"final StringBuilder b = new StringBuilder ( ) ; b. append ( getDictionary ( ). getPrefix ( ) ) ; for ( final Entry < String, String > e : getMap ( ). entrySet ( ) ) { b. append ( ""_"" ). append ( e. getValue ( ) ). append ( ""_"" ) ; } return b. toString ( ) ; }"
"key = key. replace ( '_', '_' ) ; value = value. replace ( '_', '_' ) ; Span span = spanMap. get ( key ) ; if ( span == null ) { span = new Span ( 0, Long. MAX_VALUE ) ; spanMap. put ( key, span ) ; } }"
"byte [ ] bytes = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
RpcClient rpcClient = new XmlRpcClient ( config ) ; try { config. setGatewayInfo ( rpcClient. getPullInfo ( id ) ) ; } finally { rpcClient. dispose ( ) ; } }
byte [ ] res = new byte [ arr. length + amount ] ; for ( int i = 0 ; i < arr. length ; i ++ ) { res [ i ] = ( byte ) 0x00 ; } return res ; }
while (! queue. isEmpty ( ) ) { try { while (! queue. isEmpty ( ) ) { Queue t = queue. poll ( ) ; t. get ( ) ; } catch ( InterruptedException e ) { e. printStackTrace ( ) ; } } } }
HttpGet httpGet = new HttpGet ( targetUrl ) ; return doRequest ( httpGet ) ; }
"bridge. removePreferences ( rec. getHandle ( ), datastore ) ; if ( signalServer ) { bridge. reload ( ) ; } }"
RpcUtils. call ( new RpcCallable < Object > ( ) { @ Override public Object call ( ) throws IOException { remoteInvoker. decode ( out ) ; return null ; } } ) ; }
id = in. readUTF ( ) ; firstName = in. readUTF ( ) ; lastName = in. readUTF ( ) ; email = in. readUTF ( ) ; password = in. readUTF ( ) ; }
"SecurityManager sm = System. getSecurityManager ( ) ; if ( sm!= null ) { sm. checkPermission ( new RuntimePermission ( SecurityConfiguration. class. getName ( ) + "".hazelcastCertificateForDisplay"" ) ) ; } return hazelcastCertificateOptions ; }"
if ( dp. getType ( ) == HmDataType. LONG && ( ( Long ) value ). longValue ( ) == ( long ) value. longValue ( ) ) { return value ; } else if ( dp. getType ( ) == HmDataType. STRING ) { return String. valueOf ( value ) ; } return null ; }
if ( createPiece == null ) { createPiece = new com. amazonaws. internal. SdkInternalList < InstanceStatusEvent > ( ) ; } return createPiece ; }
"LinkedList < Object > data = new LinkedList < Object > ( ) ; data. add ( ""1"" ) ; data. add ( ""2"" ) ; data. add ( ""3"" ) ; data. add ( ""4"" ) ; data. add ( ""5"" ) ; ListData lData = new ListData ( ) ; lData. add ( ""1"" ) ; lData. add ( ""2"" ) ; lData. add ( ""3"" ) ; return lData ; }"
"Option o = new Option ( name, value ) ; return ( Double ) saveOption ( o ) ; }"
"Criteria cc = em. createQuery ( ""from Personrel"", Personrel. class ) ; cc. add ( Restrictions. eq ( ""date"", new Date ( ) ) ) ; cc. add ( Restrictions. eq ( ""gender"", gender ), Restrictions. eq ( ""zipcode"", zipcode ) ) ; return cc ; }"
"Matcher m = queryStringPattern. matcher ( queryString ) ; if ( m. matches ( ) ) { builder. append ( paramName ) ; builder. append ( ""="" ) ; builder. append ( m. group ( 1 ) ) ; return true ; } return false ; }"
display. setRemoveCount ( removeCount ) ; display. addRemove ( addCount ) ; }
try { if ( AuthorizationHelper. isAdmin ( currentUser ) ) { return adminDAO. getSuiteLatestVersions ( ) ; } else { return adminDAO. getSuiteLatestVersions ( currentUser ) ; } } catch ( OmnigeneException e ) { throw new WebServiceException ( e ) ; } }
"try { String cmd = ( String ) event. getComponent ( ). getAttributes ( ). get ( ""command"" ) ; shell. executeCommand ( cmd ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } }"
int index = c ; switch ( c ) { case 'A' : index = 0 ; break ; case 'B' : index = 1 ; break ; case 'C' : index = 2 ; break ; case 'D' : index = 3 ; break ; case 'E' : index = 4 ; break ; case 'F' : index = 5 ; break ; case 'G' : index = 6 ; break ; default : break ; } return index ; }
"Map < String, String > returnMap = new HashMap < String, String > ( ) ; returnMap. put ( ""name"", name ) ; returnMap ; }"
for ( int port2 : ports ) { if ( port == port2 ) return true ; } return false ; }
Expression result = ExpressionParser. parseExpression ( condExpr ) ; while (! result. isWhere ( ) ) { result = ExpressionParser. parseExpression ( condExpr ) ; } return result ; }
"CategoryAxis a1 = new CategoryAxis ( ""Test Axis"" ) ; a1. setTickLabelPaint ( ""C1"", new GradientPaint ( 1.0f, 2.0f, Color. red, 3.0f, 4.0f, Color. white ) ) ; CategoryAxis a2 = ( CategoryAxis ) ( a1. clone ( ) ) ; assertTrue ( a1!= a2 ) ; assertTrue ( a1. equals ( a2 ) ) ; }"
if ( node. getStates ( ). size ( ) == 0 ) { return false ; } for ( Iterator < UCTStateNode > i = node. getStates ( ). iterator ( ) ; i. hasNext ( ) ; ) { UCTStateNode newNode = i. next ( ) ; if ( newNode. equals ( node ) ) { return true ; } } return false ; }
StringBuffer b = new StringBuffer ( s. length * 8 ) ; for ( int i = 0 ; i < s. length ; i ++ ) { b. append ( quote ) ; b. append ( s [ i ] ) ; b. append ( quote ) ; b. append ( separator ) ; } b. setLength ( b. length ( ) - separator. length ( ) ) ; return b. toString ( ) ; }
for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { XmlPathElement child = ( XmlPathElement ) elements. elementAt ( i ) ; if ( child. getParentNode ( ) == null ) { return child ; } } return null ; }
defaults = new byte [ 16 ] ; defaults [ 0 ] = 0x34 ; defaults [ 1 ] = 0x12 ; defaults [ 2 ] = 0x00 ; defaults [ 3 ] = 0x00 ; defaults [ 4 ] = 0x00 ; defaults [ 5 ] = 0x00 ; defaults [ 6 ] = 0x00 ; defaults [ 7 ] = 0x00 ; defaults [ 8 ] = 0x00 ; defaults [ 9 ] = 0x00 ; }
"if ( inverseSidePersister == null ) { return mainSideJoinable. getTable ( )!= null && mainSideJoinable. getKeyColumns ( )!= null && inverseSidePersister. getKeyColumns ( )!= null ; } return mainSideJoinable. getTable ( )!= null && coctetCategoryMatching ( mainSideJoinable. getTable ( ), inverseSidePersister ) ; }"
try { if ( samlContext!= null ) { samlContext. borrowSaml ( ) ; } } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
int [ ] tasks = new int [ textureMap. size ( ) ] ; for ( Iterator < Integer > it = textureMap. keySet ( ). iterator ( ) ; it. hasNext ( ) ; ) { tasks [ it. next ( ). intValue ( ) ] = it. next ( ) ; } return tasks ; }
Vector v = new Vector ( ) ; addSpaceInterfaces ( v ) ; return v. elements ( ) ; }
assert lock. isHeldByCurrentThread ( ) ; long completed = request. getReadyAddRewriteTime ( ) ; lock. setReadyAddRewriteTime ( completed + 1 ) ; return completed ; }
int clickStart = - 1 ; for ( int index = 0 ; index < attributes. size ( ) ; index ++ ) { if ( attributes. contains ( ( char ) attributes. get ( index ) ) ) { clickStart = index ; break ; } } return clickStart ; }
return new AbstractCollection < BeanProperty > ( ) { @ Override public Collection < BeanProperty > properties ( ) { return propertiesOf ( clazz ) ; } @ Override public Class <? > get ( ) { return clazz ; } } ; }
int result = ( int ) ( coordinate - Double. MIN_VALUE ) ; if ( result!= 0 ) { return result ; } result = ( int ) ( coordinate - Double. MIN_VALUE ) ; if ( result == 0 ) { return ( int ) ( coordinate - Double. MIN_VALUE ) ; } return ( result ) ; }
DateValue result = new DateValue ( array1 ( ). getTime ( ) ) ; if ( result. getValue ( ) == null ) { result. setValue ( new DateValue ( array2 ( ). getTime ( ) ) ) ; } return result ; }
"OrientedCoordinate v1 = new OrientedCoordinate ( x1 ) ; OrientedCoordinate v2 = ( OrientedCoordinate ) TestUtilities. serialised ( v1 ) ; assertEquals ( v1, v2 ) ; }"
"if ( player. getBoard ( ). getMoney ( tile. getX ( ), tile. getY ( ) ) <= 0 ) return true ; if ( player. getBoard ( ). getMoney ( tile. getX ( ), tile. getY ( ) ) <= 0 ) return true ; if ( player. getBoard ( ). getMoney ( tile. getY ( ), tile. getZ ( ) ) <= 0 ) return true ; return false ; }"
"if ( a instanceof LongValue ) { return new ComparisonKey ( LongValue. LONG_KEY, ( ( LongValue ) a ). getLongValue ( ) ) ; } else { return new ComparisonKey ( LongValue. LONG_KEY, ( ( LongValue ) a ). getLongValue ( ) ) ; } }"
Vector v = new Vector ( ) ; return v ; }
Locale locale = extractLocale ( ) ; return extractAccessSiteModel ( locale ) ; }
"ProjectDescription desc = getProjectDescription ( projectName ) ; List < DeploymentInfo > deploymentInfo = getProjectDeploymentInfo ( projectName ) ; desc. remove ( DEPLOYMENT_KEY ) ; getProjectDeploymentInfo ( projectName ). put ( DEPLOYMENT_KEY, deploymentInfo ) ; }"
"Select gradeDropDown = new Select ( driver. findElement ( By. xpath ( "".//tr[contains(.,'"" + grade + ""')]/*/select[contains(.,'Choose')]"" ) ) ) ; gradeDropDown. selectByVisibleText ( ""Grade: "" + grade ) ; }"
"Scale scale = getScale ( ) ; if ( scale == null ) return ; String err = ""{0} must be encrypted"" ; try { scale. assertEncryptionFail ( err ) ; } catch ( IllegalArgumentException iae ) { } }"
"final StringTokenizer aTokens = new StringTokenizer ( aBackupOPMLDocument. getDocumentContent ( ), "" "" ) ; while ( aTokens. hasMoreTokens ( ) ) { final File backupFile = new File ( aBackupFile, aTokens. nextToken ( ) ) ; sortableSlaveToFile ( aBackupOPMLDocument, backupFile ) ; } }"
File ret = null ; if ( dir!= null ) { for ( File f : dir. listFiles ( ) ) { if ( filename. equalsIgnoreCase ( f. getName ( ) ) ) { ret = f ; break ; } } } return ret ; }
LinearRing ring = getRing ( ) ; Coordinate [ ] coord = ring. getCoordinates ( ) ; for ( int i = 0 ; i < coord. length ; i ++ ) { if ( coord [ i ]. x!= coord [ i ]. x ) continue ; if ( coord [ i ]. y!= coord [ i ]. y ) return ; } }
"DijkstraNodeData data = ( DijkstraNodeData ) dataMap. get ( n ) ; if ( data == null ) { data = new DijkstraNodeData ( n ) ; dataMap. put ( n, data ) ; } return data ; }"
switch ( type ) { case BOLT_ROLLBACK : case COMMIT : case ROLLBACK : return true ; default : return false ; } }
"for ( int i = 0 ; i < src. numConf ( ) ; i ++ ) { for ( int j = 0 ; j < prefix. length ( ) ; j ++ ) { ConfTree t = src. get ( i ) ; for ( String k : t. globalKeys ) { if ( k. startsWith ( prefix ) ) { winTemplatesKeys ( t, prefix ) ; } } } } }"
if ( arrayClass == null ) return null ; else return rowClasses [ arrayClass ] ; }
List < Element > array = new ArrayList < Element > ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { array. add ( array. get ( i ) ) ; } } return array ; }
previousEmpty = false ; if ( previousEmpty ) { previousEmpty = line ; } if ( nextEmpty ) { nextEmpty = line ; } }
List < Subject > subjects = enrolledSubjects. values ( ) ; for ( Subject i : subjects ) { if ( i. getName ( ). equals ( subjectName ) ) { return i ; } } return null ; }
"List < T > ret = new ArrayList < > ( ) ; for ( Node n : nodes ) { if ( cls. isInstance ( n ) ) ret. add ( ( T ) n ) ; } for ( Node n : nodes ) { if ( n. hasTitle ( ) ) ret. add ( summarizedTitle ( n, cls ) ) ; } return ret ; }"
"synchronized ( metricMap ) { for ( Map. Entry < String, String > entry : metricMap. entrySet ( ) ) { if ( entry. getKey ( ). endsWith ( workItemId ) ) { metricMap. remove ( entry. getKey ( ) ) ; } } } }"
long newMask = mask ; while ( newMask!= 0 ) { newMask <<= 1 ; } return newMask ; }
Rating opponent ; for ( int i = 0 ; i < language. length ; i ++ ) { opponent = player. getPlayer ( i ) ; if ( language [ i ]!= null ) opponent = language [ i ] ; } return opponent ; }
if ( size > max ) { for ( int i = 0 ; i < b. length ; i ++ ) { bos. write ( b [ i ] ) ; } b = 0 ; for ( int i = 0 ; i < b. length ; i ++ ) { bos. write ( b [ i ] ) ; } b = 0 ; } }
byte [ ] b = integer. getBytes ( ) ; ByteBuffer buf = ByteBuffer. allocate ( b. length * 4 ) ; buf. put ( ( byte ) b [ 0 ] ) ; buf. put ( ( byte ) b [ 1 ] ) ; buf. put ( ( byte ) b [ 2 ] ) ; buf. put ( ( byte ) b [ 3 ] ) ; buf. put ( ( byte ) b [ 4 ] ) ; buf. put ( ( byte ) b [ 5 ] ) ; buf. put ( ( byte ) b [ 6 ] ) ; buf. put ( 0 ) ; return buf ; }
if ( sIsExpectExperiment ( e ) ) { return true ; } return false ; }
"List < ReviewedCompany > list = impl. restoreCompanyById ( - 999 ) ; if ( list == null ) { throw new ServiceLogicException ( ""Company not found in reviewed list"" ) ; } }"
"string = c. replaceAll ( ""  "", "" "" ) ; string = string. replaceAll ( "" "", "" "" ) ; int strWidth = ( int ) fm. stringWidth ( string ) ; String doubleString = """" ; for ( int i = 0 ; i < availTextWidth - strWidth ; i ++ ) { doubleString += "" "" + fm. stringWidth ( string ) ; } return doubleString ; }"
when ( mockNavigator. getCurrentScreen ( ) ). thenReturn ( mockScreen ) ; when ( mockNavigator. getCurrentScreen ( ). getScale ( ) ). thenReturn ( 1.0f ) ; when ( mockNavigator. getCurrentScreen ( ). getPosition ( ). x ). thenReturn ( 2.0f ) ; when ( mockNavigator. getCurrentScreen ( ). getPosition ( ). y ). thenReturn ( 2.0f ) ; }
if ( currentClass!= null && frameworkPackageList!= null ) { Iterator < String > it = frameworkPackageList. iterator ( ) ; while ( it. hasNext ( ) ) { String pkg = it. next ( ) ; if ( pkg. startsWith ( currentClass ) ) { it. remove ( ) ; return true ; } } } return false ; }
if ( sourceDate < 0 ) { return false ; } if ( destinationDate == 0 ) { return true ; } long sourceEpoch = System. currentTimeMillis ( ) ; long delta = sourceDate - destinationDate ; return delta > 0 && delta < ( sourceEpoch - delta ) ; }
try { byte [ ] bytes = escapedStringToBytes ( string ) ; return removeBytesFromByteArray ( bytes ) ; } catch ( Exception e ) { return false ; } }
if ( p < 0 ) throw new NoSuchElementException ( ) ; else if ( p < list. length ) return convert ( list [ p ++ ] ) ; else if ( getMore ( ) ) return convert ( list [ p ++ ] ) ; else throw new NoSuchElementException ( ) ; }
String classname = loader. getLoaderClassname ( ) ; if ( classname!= null ) { superLoaders. remove ( classname ) ; } loader. activate ( ) ; }
"ExternalMapperData data = new ExternalMapperData ( ) ; data. setType ( ""json"" ) ; data. setMapperUrl ( ""http://localhost/rest/settings/json"" ) ; data. setOAuthConsumerKey ( consumerKey ) ; data. setOAuthConsumerSecret ( consumerSecret ) ; data. setOAuthAccessToken ( accessToken ) ; return data ; }"
fPos = p ; notifyAll ( ) ; }
Resources resources = context. getResources ( ) ; DisplayMetrics metrics = resources. getDisplayMetrics ( ) ; float px = dp * ( ( float ) metrics. densityDpi / DisplayMetrics. DENSITY_DEFAULT ) ; return px ; }
Row row = new Row ( ) ; rows. add ( row ) ; return row ; }
"PdfPageEvent event ; for ( Iterator i = events. iterator ( ) ; i. hasNext ( ) ; ) { event = ( PdfPageEvent ) i. next ( ) ; event. click ( writer, document ) ; } }"
companyMap. clear ( ) ; return companies ; }
int numInstances = m_Data. length / 2 ; if ( m_NumInstances > 0 ) { int numInstances1 = m_Data [ 0 ]. createInstances ( ) ; int numInstances2 = m_Data [ 1 ]. createInstances ( ) ; m_NumInstances = numInstances1 + numInstances2 ; } return numInstances ; }
"RefReplicated cached = cache. get ( gerritServer, gerritProject, ref, slaveHost ) ; if ( cached!= null && cached. getRef ( )!= null && cached. getRef ( ). length ( ) > 0 ) { return cached ; } cached = new RefReplicated ( gerritServer, gerritProject, ref, slaveHost ) ; cache. put ( gerritServer, cached ) ; return cached ; }"
"UserCommand userCommand = new UserCommand ( ) ; Object [ ] args = new Object [ 2 ] ; args [ 0 ] = userSession ; args [ 1 ] = user ; return userCommand. execute ( userSession, ResourceLocator. USER_CREATE, args ) ; }"
"final Repo repo = GithubProfileValidationTest. repo ( Joiner. on ( '|n' ). join ( ""merge:"", "" script:"", ""  - pwd"" ) ) ; new GithubProfile ( repo ). read ( ) ; }"
"int exitCode = createGroupCommand. execute ( new String [ 0 ] ) ; final String output = errorStringWriter. getBuffer ( ). toString ( ). trim ( ) ; assertEquals ( 1, exitCode ) ; assertEquals ( ""Either the name or the ID of a group must be specified"", output ) ; }"
r += color ; g += color ; b += color ; a += color ; }
String path = getPath ( pos ) ; if ( path == null ) { return ( 0 ) ; } int start = path. lastIndexOf ( File. separatorChar ) ; if ( start < 0 ) { return ( 0 ) ; } int numLines = Integer. parseInt ( path. substring ( start + 1 ) ) ; return numLines ; }
"String nonce = String. format ( ""%s|%d|%s"", color. charAt ( 0 ), color. charAt ( 1 ), color. charAt ( 2 ) ) ; return nonce. toLowerCase ( Locale. US ) ; }"
"if ( url!= null ) { String scheme = getSchemeFromUrl ( url ) ; if ( scheme!= null ) { return new URI ( scheme + ""://"" + url ) ; } } return new URI ( null ) ; }"
if ( endPos == null ) { return - 1 ; } else { return endPos ; } }
int result = 0 ; for ( int i = 0 ; i < _phones. length ; i ++ ) { result += _phones [ i ]. buildIndexOfFrame ( ) ; } return result ; }
if ( sInstance == null ) { sInstance = new ExternalAuthUtils ( ) ; } return sInstance ; }
"if ( value > MAX_LATITUDE || value < MIN_LATITUDE ) { throw new IllegalArgumentException ( ""Latitude must be in range [0..MAX_LATITUDE]: "" + value ) ; } if ( value < MIN_LATITUDE ) { throw new IllegalArgumentException ( ""Latitude must be in range [0..MAX_LATITUDE]: "" + value ) ; } }"
int cmp = dpDouble1 ( named. getVal ( ) ) ; if ( cmp!= 0 ) return cmp ; cmp = dpDouble2 ( named. getVal ( ) ) ; if ( cmp!= 0 ) return cmp ; return name. compareTo ( named. getName ( ) ) ; }
"if ( inValue == null || inValue. equals ( """" ) ) { return false ; } if ( inIsHeader ) { String upperValue = inValue. toUpperCase ( ) ; return upperValue. equals ( ""header"" ) || upperValue. equals ( ""relation"" ) || upperValue. equals ( ""waypoint"" ) ; } else { return false ; } }"
if ( values == null ) values = new ArrayList < DatabaseRecord > ( ) ; DatabaseRecord record = new DesktopRecord ( ) ; record. setName ( columnName ) ; record. setValue ( value ) ; record. setChange ( true ) ; values. add ( record ) ; }
"mActiveTimer. cancel ( ) ; if ( inUse ) { mActiveTimer. schedule ( new TimerTask ( ) { @ Override public void run ( ) { nativeHazelcastPalindromeUse ( mNativeJniClient, inUse ) ; } }, 5, TimeUnit. MILLISECONDS ) ; } else { mActiveTimer. schedule ( new TimerTask ( mNativeJniClient, 1, TimeUnit. SECONDS ) ) ; } }"
try { InitialContext initCtx = new InitialContext ( ) ; initCtx. reRegister ( ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } }
int value = ( subsetIndex >> 16 ) & 0xFFFF ; return ( char ) ( value | ( value >> 8 ) & 0xFF ) ; }
if ( prob == null ) { prob = new ArrayList < MachineImpl > ( ) ; } prob. add ( machine ) ; }
"String [ ] parts = s. split ( ""|,| "" ) ; Set < String > set = new HashSet < String > ( ) ; for ( String part : parts ) { set. add ( part. substring ( 0, 1 ). toUpperCase ( ) + part. substring ( 1 ). toLowerCase ( ) ) ; } return set ; }"
ContextAttribute attribute = new ContextAttribute ( ) ; attribute. setName ( attributeName ) ; attribute. setType ( ContextAttribute. Type. HOST ) ; return attribute ; }
Package pkg = loadPackage ( className ) ; if ( pkg == null ) return null ; else return pkg. loadClass ( className ) ; }
Tomcat80ContainerAdapter adapter = ( Tomcat80ContainerAdapter ) reference. getAdapter ( Tomcat80ContainerAdapter. class ) ; return adapter!= null && adapter. sIsClasspathRegistered ( reference ) ; }
FileSystem fs = destinationPath. getFileSystem ( CONF ) ; fs. mkdirs ( destinationPath ) ; }
"List < IPath > path = new ArrayList < IPath > ( ) ; assertThat ( path. size ( ), is ( 0 ) ) ; if ( path. get ( 0 ). getSquare ( ). length ( )!= 0 ) { fail ( ""Compilation path must be empty: "" + path ) ; } }"
if ( url == null || url. length ( ) == 0 ) { return null ; } return associationURLPrefix + url ; }
"try { return URLEncoder. encode ( pathSegment, ""UTF-8"" ) ; } catch ( final UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }"
"try { IServiceRegistry serviceRegistry = ServiceRegistry. getRegistry ( ) ; return serviceRegistry. burnDelivery ( server, port, monitorPort ) ; } catch ( RemoteException e ) { throw new RuntimeException ( e ) ; } }"
for ( final char invalidChar : INVALID_URL_CHARS ) { if ( url. contains ( invalidChar ) ) { return true ; } } return false ; }
int digestSize = size ; if ( size > 0 ) { digestSize += ( 4 - size ) * 8 ; } return digestSize ; }
for ( int i = 0 ; i < batch ; i ++ ) { m_aRWLock. writeLock ( ). lock ( ) ; try { diaRetry ( ) ; } finally { m_aRWLock. writeLock ( ). unlock ( ) ; } } }
if ( extractPiece == null ) { extractPiece = new com. amazonaws. internal. SdkInternalList < FilteredLogEvent > ( ) ; } return extractPiece ; }
ProfileApplicationDecorator playerApplication = null ; if ( profileApplicationFile!= null ) { playerApplication = ProfileApplicationLoader. loadProfileApplication ( profileApplicationFile ) ; } return playerApplication ; }
ByteBuffer b = ByteBuffer. allocateDirect ( document. length ) ; b. flip ( ) ; return b ; }
"String msg = ""Unknown error"" ; switch ( errorCode ) { case RETURN_FAILURE : msg = ""Failure"" ; break ; case RETURN_CANCELED : msg = ""Failure"" ; break ; case RETURN_SUCCESS : msg = ""Success"" ; break ; case RETURN_CANCELED : msg = ""Failure"" ; break ; default : msg = ""Unknown error"" ; break ; } return msg ; }"
"ComponentOperation. SizeCalculator calculator = new ComponentOperation. SizeCalculator ( SizeProperty. SIZE ) ; withAllVisibleDo ( parent, calculator ) ; OrientedDimensionSum result = calculator. getSum ( ) ; for ( int i = 0 ; i < parent. getComponentCount ( ) ; i ++ ) { result. addInsets ( parent. getComponent ( i ). getPreferredSize ( ) ) ; } return result. getSum ( ) ; }"
List < SearchPattern > result = new ArrayList < SearchPattern > ( ) ; for ( SearchPattern pattern : patterns ) { if ( match ( pattern ) ) { result. add ( pattern ) ; } } return result. toArray ( new SearchPattern [ result. size ( ) ] ) ; }
if ( localDependency!= null ) { return localDependency. sIsAvailable ( ) ; } return true ; }
"NodeList ret = null ; try { ret = dom. getElementsByTagNameNS ( XMLConstants. XLINK_NAMESPACE_URI, ""esThatExpression"", xpathExpr ) ; } catch ( JDOMException e ) { String s = e. getMessage ( ) ; ret = null ; } return ret ; }"
"String osname = System. getProperty ( ""os.name"" ). toLowerCase ( ) ; return ( osname. indexOf ( ""win"" ) >= 0 ) ; }"
"try { return generateEncryptedKeyVersion ( fsd, ezKeyName ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }"
"checkOrientedBag ( 1, 2 ) ; checkOrientedBag ( 2, 3 ) ; checkOrientedBag ( 4, 1 ) ; }"
"predToPair = new HashMap < Unit, ValueUnitPair > ( ) ; for ( ValueUnitPair vup : ValueUnitPair. values ( ) ) predToPair. put ( vup. getUnit ( ), vup ) ; }"
synchronized ( set ) { Iterator < T > it = set. iterator ( ) ; while ( it. hasNext ( ) ) { T token = it. next ( ) ; if ( token. equals ( o ) ) { return token ; } } return null ; } }
s_aRWLock. writeLock ( ). lock ( ) ; try { while ( s_aLastWriteTime. get ( )!= - 1 ) { try { s_aWriter. write ( 1 ) ; } finally { s_aRWLock. writeLock ( ). unlock ( ) ; } } catch ( InterruptedException e ) { } } finally { s_aRWLock. writeLock ( ). unlock ( ) ; } }
if ( src == null || src. length == 0 ) { return src ; } return Base64. getUrlEncoder ( ). encode ( src ) ; }
"String iconPrefix = """" ; for ( String uri : rawUrl. split ( "":"" ) ) { if ( uri. startsWith ( iconPrefix ) ) { iconPrefix = uri. substring ( iconPrefix. length ( ) ) ; break ; } } return iconPrefix ; }"
try { em. persist ( album ) ; } catch ( Exception e ) { throw new PhotoAlbumException ( e. getMessage ( ) ) ; } }
"String key = ""hazelcast-html-"" + type ; return ( Date ) context. get ( key ) ; }"
ConnectivityManager cm = ( ConnectivityManager ) context. getSystemService ( Context. CONNECTIVITY_SERVICE ) ; cm. endSimulation ( ) ; target!= null && target. getHandler ( )!= null ) target. getHandler ( ). clear ( ) ; }
"if ( current == null ) { current = new Node < > ( null, null, null ) ; } if ( current. next!= null ) current = current. next ; if ( current == null ) current = new Node < > ( null, null, null ) ; if ( current. next!= null ) current = current. next ; }"
String value = getStringProperty ( property ) ; if ( value == null || value. length ( ) == 0 ) { return defaultValue ; } return Boolean. parseBoolean ( value ) ; }
int originalSize = size ( ) ; int n = values. length ; for ( int i = 0 ; i < n ; i ++ ) { if ( getEdge ( values [ i ] ) ) { mEdgeMap. remove ( values [ i ] ) ; return true ; } } return false ; }
"StringBuffer sb = new StringBuffer ( ) ; buildAsCipherXform ( sb, component ) ; return sb. toString ( ) ; }"
if ( running ) { return executionNanos ; } else { return - 1 ; } }
"final String ret = HazelcastInstance ( ). hazelcastJsonArray ( sKey, sDefault ) ; if ( ret == null ) return sDefault ; return ret ; }"
StringBuilder sb = new StringBuilder ( ) ; for ( int i = 1 ; i < id. length ( ) ; i ++ ) { char c = id. charAt ( i ) ; if ( c < '0' || c > '9' ) { sb. append ( '0' ) ; } sb. append ( c ) ; } return Integer. parseInt ( sb. toString ( ) ) ; }
"if ( Float. isNaN ( f ) ) return """" ; return Float. toString ( f ) ; }"
"if (! seenCompliance. containsKey ( id ) ) { seenCompliance. put ( id, Integer. MAX_VALUE ) ; } else { seenCompliance. put ( id, Integer. MAX_VALUE ) ; } }"
Object temp = week ; week = null ; return temp ; }
"int x = random. nextInt ( 100 ) ; int y = random. nextInt ( 100 ) ; int z = random. nextInt ( 100 ) ; Location l = new Location ( x, y, z ) ; if ( isFree ( l ) ) { return l ; } else { return null ; } }"
"if ( lazyKey == null ) { throw new NullPointerException ( ""lazyKey is null"" ) ; } createPathInternal ( lazyKey, type ) ; }"
"if ( connection == null ) throw new IllegalArgumentException ( ""connection is null"" ) ; connections. add ( connection ) ; }"
"int i = ( int ) ( htTimestamp / HT_TIMESTAMP_FACTOR ) ; long physical = ( int ) ( htTimestamp % HT_TIMESTAMP_FACTOR ) ; long logical = ( int ) ( htTimestamp % HT_TIMESTAMP_FACTOR ) ; return new long [ ] { physical, logical } ; }"
"try { ThreadUtils. runOnUiThreadBlocking ( new Runnable ( ) { @ Override public void run ( ) { escalationLockPage ( context, fragmentName ) ; } } ) ; } catch ( Throwable e ) { throw new RuntimeException ( e ) ; } }"
"if ( o == null ) { return null ; } if ( o instanceof Double ) { return o. toString ( ) ; } throw new BeanException ( ""Failed to convert object of type "" + o. getClass ( ) + "": Not a Double."" ) ; }"
"RepositoryId repo = request. getRepositoryId ( ) ; String areaBranch = repo. getHeadBranch ( ) ; if ( TextUtils. isEmpty ( areaBranch ) ) { String head = repo. getBaseBranch ( ) ; if ( TextUtils. isEmpty ( head ) ) { areaBranch = ""master"" ; } return areaBranch ; } return null ; }"
DigiDocException ex = validateFixedValue ( data ) ; if ( ex!= null ) throw ex ; m_digestValue = data ; }
for ( int i = 0 ; i < musicNames. length ; i ++ ) { setMnemonic ( musicNames [ i ] ) ; } }
"if ( node == null ) { return ; } int parentDensity = node. parent.Density ; if ( parentDensity == 0 ) { return ; } expandedDensity ( node. parent, true ) ; }"
ServletContext servletContext = null ; try { servletContext = ( ServletContext ) FacesContext. getCurrentInstance ( ). getExternalContext ( ). getContext ( ) ; } catch ( Exception failed ) { failed. printStackTrace ( ) ; } finally { if ( servletContext!= null ) servletContext. close ( ) ; } }
"HttpSession session = sessionFactory. getCurrentSession ( ) ; session. setAttribute ( SESSION_KEY, session ) ; session. setAttribute ( SESSION_TIMEOUT, session. getAttribute ( SESSION_TIMEOUT ) ) ; session. setAttribute ( SESSION_USER, session. getAttribute ( SESSION_USER ) ) ; session. setAttribute ( SESSION_PASSWORD, session. getAttribute ( SESSION_PASSWORD ) ) ; return session ; }"
List < T > l_reverseList = new ArrayList < T > ( p_turnoversList ) ; Collections. reverse ( l_reverseList ) ; return l_reverseList ; }
"final String currentProfilePath = System. getenv ( ""Spring.profiles.active"" ) ; if ( currentProfilePath!= null ) { releaseDetails ( currentProfilePath ) ; } }"
int count = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { for ( int j = 0 ; j < data [ i ]. length ; j ++ ) { if ( data [ i ] [ j ] == data [ j ]. length - 1 ) { data [ j ] = data [ i ] [ j ] ; } else { count ++ ; } } } }
"Map < String, Object > map = requestComponentMap. get ( action ) ; if ( map == null ) { return false ; } return map. put ( action. getId ( ), action ) ; }"
"int index = ( int ) ( Math. random ( ) * classes. size ( ) ) ; while ( index >= 0 ) { Clazz clazz = classes. get ( index ) ; clazz. accept ( classVisitor, null ) ; index = ( index + 1 ) % classes. size ( ) ; } }"
"Filter < DependencyTree > filter = Filters. or ( excludeOptionalDependenciesFilter, dependencyFilterText ) ; return Filters. or ( filter ) ; }"
try { return getSDFAFromFile ( new File ( inFN ) ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; System. exit ( 1 ) ; } return null ; }
Automaton a = new Automaton ( ) ; a. singleton = null ; a. deterministic = true ; return a ; }
"SimpleToken token1 = new SimpleToken ( ) ; token1. setAuthValue ( ""chris"" ) ; token1. setAuthValue ( ""chrismills"" ) ; SimpleToken token2 = new SimpleToken ( ) ; token2. setAuthValue ( ""chrismills"" ) ; token2. setAuthValue ( ""chrismills"" ) ; assert token1. authenticate ( token2, null ) ; }"
if ( d == null ) { throw new IllegalArgumentException ( ) ; } serializer = d ; }
tableId = id. intValue ( ) ; return new UniversalCodonsTable ( tableId ) ; }
"try { return ioOperations. buildOobstatus ( patient ) ; } catch ( OOBException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return null ; } }"
"String value = properties. getProperty ( key ) ; if ( value == null ) { value = """" ; } return value ; }"
testGameObject. decrementThreadsBomb ( ) ; verify ( mockBombBehavior ). decrementThreadsBomb ( ) ; }
int [ ] nouveau = null ; if ( tab!= null ) { nouveau = new int [ tab. length ] ; for ( int i = 0 ; i < nouveau. length ; i ++ ) { nouveau [ i ] = tab [ tab. length - 1 - i ] ; } } else { nouveau = new int [ tab. length ] ; } return nouveau ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( bytes!= null ) sb. append ( ""Bytes: "" + bytes + "", "" ) ; if ( consumedBytes!= null ) sb. append ( ""ConsumedBytes: "" + consumedBytes + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"if ( session!= null ) { try { session. close ( ) ; } catch ( JMSException ex ) { logger. trace ( ""Could not close JMS Session"", ex ) ; } catch ( Throwable ex ) { logger. trace ( ""Unexpected exception on closing JMS Session"", ex ) ; } } }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( bytes!= null ) sb. append ( ""Bytes: "" + bytes + "", "" ) ; if ( consumedBytes!= null ) sb. append ( ""ConsumedBytes: "" + consumedBytes + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"String key = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
NameIDPolicy nameIDPolicy = new NameIDPolicy ( ) ; setPolicyVersion ( nameIDPolicy ) ; return nameIDPolicy ; }
"LOGGER. debug ( ""extractCookies(rules={}) - start"", rules ) ; cookies = new HashMap < String, IRule > ( ) ; for ( IRule rule : rules ) { cookies. put ( rule. getRuleKey ( ), rule ) ; } LOGGER. debug ( ""extractCookies(rules={}) - end"", cookies. size ( ) ) ; }"
"List < Task > tasks = sessionService. findAll ( ) ; model. addAttribute ( ""tasks"", tasks ) ; model. addAttribute ( ""taskId"", taskId ) ; return VIEW_NAME_TASK_TOGGLE_SESSION ; }"
int size = list. size ( ) * 2 ; T position = null ; for ( int i = 0 ; i < size ; i ++ ) { position = ( T ) list. get ( i ) ; if ( position. getClass ( ) == Object. class ) { position = ( T ) list. get ( i ) ; } } return position ; }
StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < actions. size ( ) ; i ++ ) { if ( actions. get ( i ). getMovable ( ). equals ( movable ) ) { sb. append ( actions. get ( i ). toString ( ) ) ; } else { sb. append ( actions. get ( i ). toString ( ) ) ; } } return sb. toString ( ) ; }
if (! closed ) { closed = true ; close ( ) ; } }
ArrayList < SalaPesi > salePesi = new ArrayList < SalaPesi > ( ) ; for ( SalaPesi p : employeePesi ) { if ( p. getSalaPesi ( )!= null ) { salePesi. add ( p. getSalaPesi ( ) ) ; } } return salePesi ; }
Date date = new Date ( ) ; return date. getTime ( ) ; }
ThriftIndex index = thriftIds. get ( id ) ; return index!= null? index. index : INVALID_Thrift_INDEX ; }
"if ( includeColumnNames ) { java. util. ArrayList < Object > colNames = new java. util. ArrayList < Object > ( ) ; for ( int i = 1 ; i <= rs. getColumnCount ( ) ; i ++ ) { colNames. add ( rs. getString ( i ) ) ; } } while ( rs. next ( ) ) { caesarEdge ( rs, colNames ) ; } }"
"StringBuffer sb = new StringBuffer ( ) ; sb. append ( lang ) ; sb. append ( ""-"" ) ; if ( country!= null &&! country. isEmpty ( ) ) { sb. append ( country ) ; } sb. append ( ""_"" ) ; sb. append ( Character. toUpperCase ( country. charAt ( 0 ) ) ) ; return sb. toString ( ) ; }"
byte [ ] length = new byte [ 4 ] ; length [ 0 ] = ( byte ) ( 3 * ( Math. random ( ) * 256 ) ) ; length [ 1 ] = ( byte ) ( 3 * ( Math. random ( ) * 256 ) ) ; length [ 2 ] = ( byte ) ( 3 * ( Math. random ( ) * 256 ) ) ; length [ 3 ] = ( byte ) ( 3 * ( Math. random ( ) * 256 ) ) ; return length ; }
"Bundle bundle = new Bundle ( ) ; bundle. putString ( ICON_KEY, source ) ; bundle. putInt ( ICON_VERSION, version ) ; bundle. putString ( payload, payload ) ; return bundle ; }"
for ( int i = 0 ; i < NISO_CLAMP ; i ++ ) { if ( s < NISO_CLAMP [ i ] || s > NISO_CLAMP [ i ] ) { return i ; } } return - 1 ; }
byte [ ] result = new byte [ 2 ] ; result [ 0 ] = ( byte ) ( value >>> 8 ) ; result [ 1 ] = ( byte ) value ; return result ; }
ContentTypeInfo info = null ; List < ContentTypeInfo > ruleList = message. getClass ( ). getMethods ( ) ; for ( ContentTypeInfo info : ruleList ) { if ( rule. matches ( info ) ) { info = info ; break ; } } return info ; }
if ( elements == null ) { elements = new ArrayList < CmsContainerElementBean > ( ) ; } return elements ; }
checkOriented ( 1 ) ; checkOriented ( 2 ) ; }
"XContentType type = ySpillTypeFromContent ( content ) ; if ( type == null ) { throw new ElasticSearchParseException ( ""Failed to derive xtype from "" + content ) ; } return type ; }"
"try { command. perform ( ) ; return Arrays. asList ( message. split ( "" "" ) ) ; } catch ( Exception e ) { logger. error ( ""Could not convert the error code '"" + e. getMessage ( ) + ""'"", e ) ; return Collections. emptyList ( ) ; } }"
addContributors ( defaultContributors ) ; listContributors. clear ( ) ; addContributors ( defaultContributors ) ; }
if ( array!= null ) { return array. toString ( ) ; } else { return null ; } }
XMLOutputFactory factory = ( XMLOutputFactory2 ) factoryRef. get ( ) ; if ( factory == null ) { factory = new StaxXMLOutputFactory2 ( ) ; factoryRef. set ( factory ) ; } return factory ; }
equipos = new AminoAcid [ equipos. size ( ) ] ; for ( int i = 0 ; i < equipos. size ( ) ; i ++ ) { equipos [ i ] = equipos. get ( i ) ; } }
final IntervalsSet result = new IntervalsSet ( ) ; result. add ( start ) ; result. add ( end ) ; return result ; }
"if ( stream!= null ) { try { jsincludes ( stream, tag ) ; } catch ( IOException e ) { throw new JsException ( e ) ; } } }"
TokenInformation information = new TokenInformation ( ) ; information. path. clear ( ) ; for ( int i = 0 ; i < path. size ( ) ; i ++ ) { information. path. add ( path. get ( i ) ) ; } return information ; }
world = new int [ 4 ] [ 4 ] ; for ( int x = 1 ; x <= maxLevel ; x ++ ) { for ( int y = 1 ; y <= maxLevel ; y ++ ) { if ( world [ x ] [ y ] == '1' ) { world [ x ] [ y ] = '0' ; } else if ( world [ x ] [ y ] == '2' ) { world [ x ] [ y ] = '3' ; } } } }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( bytes!= null ) sb. append ( ""Bytes: "" + bytes + "", "" ) ; if ( consumedBytes!= null ) sb. append ( ""ConsumedBytes: "" + consumedBytes + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
int val = Integer. MIN_VALUE ; while ( bits [ val ]!= 0 ) val = ( val << 1 ) + 1 ; return val ; }
"String paramIsFasta = System. getProperty ( ""paramIsFasta"" ) ; if ( paramIsFasta!= null ) { return paramIsFasta ; } IWorkbenchPage page = PlatformUI. getWorkbench ( ). getActiveWorkbenchWindow ( ). getActivePage ( ) ; if ( page!= null ) { return page. isFasta ( ) ; } return false ; }"
if ( mInitialData == null ) { return ; } mRefreshDate = now ( ) + elapsedTime ; if ( mRefreshDate <= 0 ) { mRefreshDate = 0 ; } }
if ( entry > maxSIsSet ) { return false ; } if ( ( entry < minSIsSet ) && ( registerNumber < maxSIsSet ) ) { entry = minSIsSet ; } if ( gcMap!= null ) { for ( int i = 0 ; i < gcMap. length ; i ++ ) { if ( gcMap [ i ] == entry ) { return true ; } } } return false ; }
"byte [ ] bytes = new byte [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { bytes [ i ] = inputString. getBytes ( ""UTF-8"" ) ; } return new String ( bytes ) ; }"
"String host = DNS. getDefaultHost ( ""localhost"", 8080, ""localhost"" ) ; String port = DNS. getDefaultPort ( ""localhost"", 8080, ""localhost"" ) ; Production remotingConnection = new Production ( host, port, ""localhost"", ""password"" ) ; Assert. assertEquals ( ""localhost"", remotingConnection. toString ( ) ) ; }"
"String id = fElement. getAttribute ( ID_ATTRIBUTE ) ; if ( id == null ) { id = """" ; } return id ; }"
"Boolean oldValue = new Boolean ( enabled_ ) ; Boolean newValue = new Boolean ( enabled ) ; enabled_ = enabled ; if ( message_!= null ) { message_. setEnabled ( enabled ) ; propertyChangeSupport_. firePropertyChange ( ""enabled"", oldValue, newValue ) ; } }"
Base64 encoder = new Base64 ( ) ; return new String ( encoder. encode ( str. getBytes ( ) ) ). trim ( ) ; }
"xml. start ( ""Grantee"", new String [ ] { ""xmlns:xsi"", ""xsi:type"" }, new String [ ] { ""http://www.w3.org/2001/XMLSchema-instance"", ""String"" } ) ; xml. start ( ""URI"" ). value ( grantee. getIdentifier ( ) ). end ( ) ; xml. end ( ) ; return xml ; }"
ArrayList < WebElement > servicesElements = new ArrayList < WebElement > ( ) ; for ( WebElement webViewElement : getViewElements ( ) ) { if ( webViewElement!= null &&! onlySufficientlyVisible ) { servicesElements. add ( webViewElement ) ; } } return servicesElements ; }
PromptCommand comand = null ; int i ; for ( i = 0 ; i < line. length ( ) ; i ++ ) { comand = decodeLine ( line. charAt ( i ) ) ; if ( comand!= null ) { return comand ; } } return null ; }
exportInteraction. clear ( ) ; try { serialize ( exportInteraction ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } catch ( DOM4JException e ) { throw new RuntimeException ( e ) ; } }
T foundAnnotation = null ; Annotation [ ] annotations = element. getAnnotations ( ) ; for ( Annotation annotation : annotations ) { if ( annotation. annotationType ( ) == annotationClass ) { foundAnnotation = ( T ) annotation ; break ; } } return foundAnnotation ; }
SimplePrincipalProvider result = new SimplePrincipalProvider ( ) ; for ( PrincipalProvider <? > p : principalProviders ) { if ( p. getName ( ). equals ( principalName ) ) { result = p ; break ; } } return result ; }
if ( errorStyle == null ) { return STDataValidationErrorStyle. NONE ; } else { return errorStyle ; } }
int value = 0 ; switch ( data ) { case 0x00 : value = 1 ; break ; case 0x01 : value = 2 ; break ; case 0x02 : value = 3 ; break ; case 0x03 : value = 4 ; break ; case 0x04 : value = 5 ; break ; case 0x00 : value = 6 ; break ; case 0x02 : value = 7 ; break ; default : break ; } return value ; }
if ( position == 0 ) { return true ; } else { return false ; } }
final int days = inMax / MAX_DAY ; doUpdate ( new Runnable ( ) { public void run ( ) { progress. setIndeterminate ( false ) ; progress. setMaximum ( days ) ; } } ) ; }
strongEncryptionFlag = b ; if ( b ) { strongEncryptionFlag =! strongEncryptionFlag ; } }
if ( formObj. has ( TAG_FORMITEMS ) ) { JSONArray markerItemsArray = formObj. getJSONArray ( TAG_FORMITEMS ) ; return markerItemsArray ; } return null ; }
"List < Team > teams = em. createNamedQuery ( Team. FIND_BY_MEMBERS, Team. class ). setParameter ( ""name"", name ). getResultList ( ) ; for ( Team team : teams ) { em. remove ( team ) ; } }"
if ( hostInfoMap == null ) { hostInfoMap = new HashMap < > ( ) ; } List < Client > clients = hostInfoMap. values ( ) ; for ( Client client : clients ) { client. extractDomain ( hostInfoMap ) ; } }
"String threadID = thread ; return loadGesture ( userJID, threadID, listener ) ; }"
"try { return ( Float ) invokeByReflection ( caller, new Class <? > [ ] { int. class }, new Object [ ] { index }, ""buildY"" ) ; } catch ( UnsupportedOperationException e ) { return caller. getY ( ) ; } }"
"if ( button == 1 ) { notify ( x, y, clickcount ) ; } else if ( button == 2 ) { notify ( x, y, clickcount ) ; } else if ( button == 3 ) { notify ( x, y, clickcount ) ; } else { notify ( button, x, y, clickcount ) ; } }"
"String result = StringUtils. capitalize ( fileName ) ; if ( result. endsWith ( ""."" ) ) { result = result. substring ( 0, result. length ( ) - 1 ) ; } return result ; }"
"Element newRootElement = doc. createElement ( elementName ) ; newRootElement. setAttributeNS ( XMLConstants. W3C_XML_SCHEMA_INSTANCE_NS_URI, XMLConstants. W3C_XML_SCHEMA_INSTANCE_NS_URI ) ; newRootElement. setAttributeNS ( XMLConstants. W3C_XML_SCHEMA_INSTANCE_NS_URI, XMLConstants. W3C_XML_SCHEMA_INSTANCE_NS_URI ) ; return newRootElement ; }"
if ( hazelcastInstance == null ) { hazelcastInstance = Hazelcast. getInstance ( ) ; } return hazelcastInstance ; }
int dx = target. x - x ; int dy = target. y - y ; return ( int ) ( Math. sqrt ( dx * dx + dy * dy ) ) ; }
"Path procfs = new Path ( ""/proc/self/bin"" ) ; FSDataInputStream fis = fs. open ( procfs ) ; BufferedReader reader = new BufferedReader ( new InputStreamReader ( fis ) ) ; String line ; while ( ( line = reader. readLine ( ) )!= null ) { assertEquals ( ""Unexpected lines"", 0, line ) ; } reader. close ( ) ; }"
"int failure = 0 ; if ( address. contains ( ""localhost"" ) ) { failure = 1 ; } else if ( address. contains ( ""127.0.0.1"" ) ) { failure = 1 ; } return failure ; }"
long decimal = 0 ; long size = file. length ( ) ; FileInputStream bis = new FileInputStream ( file ) ; try { decimal = new BufferedInputStream ( bis ) ; return decimal ; } catch ( IOException e ) { return 0 ; } finally { if ( bis!= null ) { bis. close ( ) ; } } }
"assertTrue ( rt. addRouteRequestEntry ( re1, true ) ) ; assertFalse ( rt. addRouteRequestEntry ( re1, true ) ) ; }"
"Map < String, Object > map = new HashMap < String, Object > ( ) ; map. put ( KEY_SESSION_ID, session. getId ( ) ) ; map. put ( KEY_TYPE, type. toString ( ) ) ; map. put ( KEY_SESSION_ID, session. getId ( ) ) ; return map ; }"
"Integer day = map. get ( t ) ; if ( day == null ) { day = nextDay ( ) ; map. put ( t, day ) ; } return day ; }"
if ( stone. rank!= rank ) return false ; return true ; }
assert Looper. myLooper ( ) == Looper. getMainLooper ( ) ; Looper. getMainLooper ( ). runOnUiThread ( new Runnable ( ) { @ Override public void run ( ) { certLookupTable. clear ( ) ; } } ) ; callback. run ( ) ; }
target. putAll ( source ) ; for ( A key : source. keySet ( ) ) { if ( target. get ( key )!= null ) { target. remove ( key ) ; } } }
"while ( true ) { int index = rand. nextInt ( queue. length ( ) ) ; if ( ( index >= 0 ) && ( ( index < queue. length ( ) - 1 ) || ( index >= 0 ) ) ) { return queue. substring ( index, index + 1 ) ; } } }"
"StringBuffer buffy = new StringBuffer ( ) ; buffy. append ( ""Tempo: tempo="" ) ; for ( int i = 0 ; i < tempo. length ; i ++ ) { buffy. append ( tempo [ i ] ) ; if ( i < tempo. length - 1 ) { buffy. append ( "","" ) ; } } return buffy. toString ( ) ; }"
"table. setEditor ( Date. class, new DateFieldTableEditor ( ) ) ; table. setRenderer ( Date. class, new DateRendererDecorator ( table. getRenderer ( Date. class ) ) ) ; }"
if ( obj instanceof Expression ) { Expression expr = ( Expression ) obj ; if ( expr instanceof Node ) { return ( ( Node ) expr ). isLiteral ( ) ; } return ( ( Function ) expr ). isLiteral ( ) ; } return false ; }
View foundView = null ; Iterator < View > it = summarizedRenderers. iterator ( ) ; while ( it. hasNext ( ) ) { View view = it. next ( ) ; if ( view. getId ( ) == id ) { foundView = view ; break ; } } return foundView ; }
synchronized ( delegateMapping ) { if ( delegateMapping. getMetricID ( )!= metricID ) return - 1 ; delegateMapping. setMetricID ( metricID ) ; return metricID ; } }
if ( priority < JOptionPane. MIN_PRIORITY ) { priority = JOptionPane. MIN_PRIORITY ; } return priority > JOptionPane. MAX_PRIORITY ; }
"ImageIcon i1 = new ImageIcon ( JFreeChart. INFO. getLogo ( ) ) ; ImageIcon i2 = new ImageIcon ( JFreeChart. INFO. getLogo ( ) ) ; TestCase. assertEquals ( i1. getSp ( ), i2. getSp ( ) ) ; }"
mPerSubscriptionLayout -= amount ; if ( mPerSubscriptionLayout < 0 ) { mPerSubscriptionLayout = 0 ; } }
Extractor < DomainModel > extractor = new Extractor < DomainModel > ( scene ) ; return extractor. extract ( ) ; }
if ( basicStatuses == null ) { basicStatuses = new com. amazonaws. internal. ListWithAutoConstructFlag < VolumeStatusItem > ( ) ; basicStatuses. setAutoConstruct ( true ) ; } return basicStatuses ; }
parent = node. getParent ( ) ; if ( parent!= null ) { node. removeChild ( parent ) ; } }
"String [ ] tokens = point. split ( ""|s+"" ) ; double x = Integer. valueOf ( tokens [ 0 ] ) ; double y = Integer. valueOf ( tokens [ 1 ] ) ; double z = Integer. valueOf ( tokens [ 2 ] ) ; Point p = new Point ( ( int ) Math. floor ( x ), ( int ) Math. floor ( y ) ) ; p. x = ( int ) Math. floor ( x ) ; p. y = ( int ) Math. floor ( y ) ; return p ; }"
String name = dataSource. getName ( ) ; for ( int i = 0 ; i < factories. size ( ) ; i ++ ) { DataSourceFactory fact = ( DataSourceFactory ) factories. get ( i ) ; name = fact. getName ( ) ; } return name ; }
"String result = """" ; try { result = IOUtils. toString ( inputStream ) ; } catch ( Exception e ) { } return result ; }"
byte [ ] numBytes = new byte [ 2 ] ; numBytes [ 0 ] = ( byte ) ( i >> 24 ) ; numBytes [ 1 ] = ( byte ) ( i >> 16 ) ; numBytes [ 2 ] = ( byte ) ( i >> 8 ) ; numBytes [ 3 ] = ( byte ) i ; return numBytes ; }
IWorkbenchPage page = PlatformUI. getWorkbench ( ). getActiveWorkbenchWindow ( ). getActivePage ( ) ; IMenuItem [ ] items = page. getItems ( ) ; for ( int i = 0 ; i < items. length ; i ++ ) { items [ i ] = createDataSourceMenuItem ( items [ i ] ) ; } menu. addItem ( items [ items. length - 1 ] ) ; }
List < Point > delta = new ArrayList < Point > ( ) ; for ( int i = 0 ; i < points. size ( ) ; i ++ ) { Point p = points. get ( i ) ; p. x = ( int ) Math. floor ( p. x - l_id * points. get ( i ). x ) ; p. y = ( int ) Math. floor ( p. y - l_id * points. get ( i ). y ) ; delta. add ( p ) ; } return delta ; }
VCardPropertyScribe <? extends VCardProperty > marshaller = attrScribeMap. get ( propertyName ) ; if ( marshaller!= null ) { return marshaller ; } return standardPropertyScribeMap. get ( propertyName ) ; }
if ( mGarbage ) { gc ( ) ; } return mPes [ index ] ; }
"logger. info ( ""fourReJars -- "" + metadataConn. getClass ( ). getName ( ) ) ; logger. info ( ""fourReJars -- > "" + metadataConn. getClass ( ). getName ( ) ) ; logger. info ( ""fourReJars -- > "" + metadataConn. getClass ( ). getName ( ) ) ; }"
Boolean isDefined = ( Boolean ) isDefined ( attrName ) ; return isDefined. booleanValue ( ) ; }
"RateAndBlockWeight rateAndBlockWeight = new RateAndBlockWeight ( hosts, weight ) ; m_rateAndBlockWeightMap. put ( hosts, rateAndBlockWeight ) ; }"
"int year, month, day ; year = ( int ) ( m / ( 1000L * 60L * 60L * 60L * 60L ) ) ; month = ( int ) ( m % ( 1000L * 60L * 60L * 24L ) ) ; day = ( int ) ( m / ( 1000L * 60L * 60L * 24L ) ) ; return year * ( month - 1 ) + day ; }"
mClipRect = new float [ 4 ] ; mClipRect [ 0 ] = l ; mClipRect [ 1 ] = t ; mClipRect [ 2 ] = r ; mClipRect [ 3 ] = b ; }
long hazelcastMillis = SystemClock. elapsedRealtime ( ) ; return hazelcastMillis / 60000.0f ; }
"Tag tag = tagService. reload ( id ) ; if ( tag == null ) { return new ResponseEntity < > ( HttpStatus. NO_CONTENT ) ; } return new ResponseEntity < > ( tagResourceAssembler. toResource ( tag ), HttpStatus. OK ) ; }"
"if ( globalLogLevel <= 0 ) { return ; } globalLogLevel = logLevel ; if ( message!= null ) { logger. info ( message ) ; } if ( exception!= null ) { logger. error ( message, exception ) ; } }"
boolean [ ] newValues = new boolean [ values. length + 1 ] ; for ( int i = 0 ; i < values. length ; i ++ ) { newValues [ i + oldPosition ] = values [ i ] ; } return newValues ; }
"MiniPlayer miniPlayer = new MiniPlayer ( ) ; miniPlayer. setAccount ( account ) ; assertEquals ( account, miniPlayer. getAccount ( ) ) ; }"
int [ ] values = new int [ 1 ] ; for ( int i = 0 ; i < hazelcastUnpackValues. length ; i ++ ) { values [ i ] = hazelcastUnpackValues [ glyphName. charAt ( i ) ] ; } return values ; }
"MethodStats stats = mPerThreadCities. get ( thread. getId ( ) ) ; return getIncrement ( stats, clockType, unit ) ; }"
"if ( debug ) { System. err. println ( ""<!DOCTYPE html> "" ) ; } indent ( ) ; out. write ( ""<html>"" ) ; out. write ( getIndent ( ) ) ; out. write ( ""</html>"" ) ; out. write ( getIndent ( ) ) ; out. write ( ""<body>"" ) ; out. write ( getIndent ( ) ) ; out. write ( ""</body>"" ) ; }"
"return Iterables. transform ( values, new Function < String, String > ( ) { @ Override public String apply ( String input ) { return ""'"" + input + ""'"" ; } } ) ; }"
if (! m_loaded ) { return ; } m_foundModifiedSince = ifModifiedSince ; }
try { evalBindViews ( conn ) ; evalBindAppsetups ( conn ) ; } catch ( SQLException e ) { e. printStackTrace ( ) ; } }
"if (! repeatedly ) { return Op. getNot ( op, VarRename. RENAME ) ; } return Op. getNot ( op, VarRename. RENAME ) ; }"
"String readNameRegex = ""cn=jbid&read=name"" ; assertEquals ( ""cn=jbid&read=name"", Splitter. on ( "","" ). split ( readNameRegex ) ) ; assertEquals ( ""cn=jbid"", Splitter. on ( "","" ). split ( name ) [ 0 ] ) ; assertEquals ( ""readname"", Splitter. on ( "","" ). split ( readNameRegex ) [ 1 ] ) ; }"
label = label. toLowerCase ( ) ; int index = 0 ; for ( int i = 0 ; i < letterPes. length ; i ++ ) { if ( label. equals ( letterPes [ i ] ) ) { index = i ; break ; } } return index ; }
if ( graphs == null ) return ; for ( PDGraph instance : graphs ) setAddresses ( instance ) ; }
int id = in. read ( ) ; _max = in. read ( ) ; _min = in. read ( ) ; _number = in. read ( ) ; _mean = in. read ( ) ; _stdDev = in. read ( ) ; _sum = in. read ( ) ; _sumOfSq = in. read ( ) ; }
"String hazelcastDomdocument = """" ; try { hazelcastDomdocument = System. getProperty ( ""hazelcast.domdocument"" ) ; } catch ( SecurityException e ) { } return hazelcastDomdocument ; }"
"Preconditions. checkNotNull ( instruction, ""Instruction argument can not be null"" ) ; return com. google. security. zynamics. reil. ReilHelpers. isMetricCall ( instruction. getNative ( ) ) ; }"
for ( int i = 0 ; i < buffer. length ; i ++ ) { if ( Character. isPrintable ( buffer [ i ] ) ) { return buffer [ i ] ; } } return null ; }
Point2D [ ] x = new Point2D [ data. size ( ) ] ; for ( int i = 0 ; i < data. size ( ) ; i ++ ) { x [ i ] = data. get ( i ). x ; } x [ 0 ] = 0.0 ; x [ 1 ] = 1.0 ; x [ 2 ] = 0.0 ; x [ 3 ] = 0.0 ; x [ 4 ] = 0.0 ; x [ 5 ] = 0.0 ; x [ 6 ] = 0.0 ; }
for ( Accident marker : sList ) { if ( marker. getEmail ( ). equals ( toCheck. getEmail ( ) ) ) { return true ; } } return false ; }
"Card card = null ; switch ( id ) { case ""1"" : card = new Card ( Suit. CLUBS, 1 ) ; break ; case ""2"" : card = new Card ( Suit. CLUBS, 2 ) ; break ; case ""3"" : card = new Card ( Suit. CLUBS, 3 ) ; break ; case ""4"" : card = new Card ( Suit. CLUBS, 4 ) ; break ; default : break ; } return card ; }"
"c. set ( Calendar. HOUR_OF_DAY, 0 ) ; c. set ( Calendar. MINUTE, 0 ) ; c. set ( Calendar. SECOND, 0 ) ; c. set ( Calendar. MILLISECOND, 0 ) ; }"
try { return dateFormat. parse ( date ) ; } catch ( ParseException e ) { return backup ; } }
s. defaultReadObject ( ) ; content = ( byte [ ] ) content. clone ( ) ; signature = ( byte [ ] ) signature. clone ( ) ; }
int callsSize = 0 ; for ( int i = 0 ; i < calls. length ; i ++ ) { callsSize += calls [ i ]. length ; } return callsSize ; }
"InputStream inputStream = response. getEntity ( ). getContent ( ) ; StringWriter sw = new StringWriter ( ) ; IOUtils. copy ( inputStream, sw, ""UTF-8"" ) ; return sw. toString ( ) ; }"
if ( entries == null ) { entries = new ArrayList < EntryType > ( ) ; } return entries ; }
if ( hazelcastInstance!= null ) { return hazelcastInstance. hazelcastTaxonOccurs ( ) ; } return 1 ; }
"for ( int i = 0 ; i < hours. length ; i ++ ) { String user = input. nextLine ( ) ; if ( user. contains ( ""---"" ) ) { System. out. print ( user + "" "" ) ; } else { System. out. print ( user + "" "" ) ; } } input. nextLine ( ) ; }"
coreness = map. get ( APM_CORENESS_KEY ) ; if ( coreness == null ) { coreness = 0 ; } else { coreness += map. get ( BPM_CORENESS_KEY ) ; } }
"Criterion criterion = Criteria. toCriterion ( EthernetDestination. class ) ; ObjectNode result = criterionCodec. encode ( criterion, context ) ; assertThat ( result, matchesCriterion ( criterion ) ) ; }"
"GalaxyLibrary gui = new GalaxyLibrary ( ) ; gui. setLibraryDescription ( ""Cordova To Library"" ) ; mThrown. expect ( IllegalStateException. class ) ; mThrown. expectMessage ( ""The following error occurred: "" + mThrown. getMessage ( ) ) ; mHandler. orientedCordovaToLibrary ( gui, mLibraryDescription ) ; }"
"SimpleDateFormat format1 = new SimpleDateFormat ( dateFormatMMddyyyy ) ; SimpleDateFormat format2 = new SimpleDateFormat ( ""dd-MM-yy"" ) ; Date date = format1. parse ( dateToformat ) ; return format2. format ( date ) ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( bytes!= null ) sb. append ( ""Bytes: "" + bytes + "", "" ) ; if ( consumedBytes!= null ) sb. append ( ""ConsumedBytes: "" + consumedBytes + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"Hashtable < String, Object > hashtable = ( Hashtable < String, Object > ) saltCache. get ( key. getClass ( ) ) ; if ( hashtable == null ) return false ; return hashtable. containsKey ( key. toString ( ) ) ; }"
"Map < String, String > result = new HashMap < String, String > ( ) ; for ( Map. Entry < String, String > entry : values. entrySet ( ) ) { result. put ( entry. getKey ( ), entry. getValue ( ) ) ; } setSideState ( result ) ; }"
"try { return str. getBytes ( ""UTF-8"" ) ; } catch ( UnsupportedEncodingException uee ) { uee. printStackTrace ( ) ; } return null ; }"
long l = 0 ; try { final byte [ ] bytes = ia. getAddress ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { l <<= 8 ; l |= ( bytes [ i ] & 0xff ) ; } } catch ( UnknownHostException e ) { } return l ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFailedEntryCount ( )!= null ) sb. append ( ""FailedEntryCount: "" + getFailedEntryCount ( ) + "","" ) ; if ( getEntries ( )!= null ) sb. append ( ""Entries: "" + getEntries ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"byte [ ] buffer = new byte [ _buf_size ] ; int k = 0 ; byte [ ] b = new byte [ _buf_size ] ; while ( k < _buf_size ) { int read = in. read ( b, 0, _buf_size ) ; if ( read < 0 ) { break ; } b [ k ] = ( byte ) read ; k ++ ; } return buffer ; }"
"CSpaceIntent intent = res. getIntent ( action ) ; if ( principals == null || principals. length == 0 ) { return ; } res. setIntent ( intent, true ) ; }"
try { final Connection connection = getConnection ( connectionFactory ) ; saveConnection ( connection ) ; return connection ; } catch ( final SQLException e ) { throw new RuntimeException ( e ) ; } }
List < Resource > snapshotResources = new ArrayList < Resource > ( ) ; for ( int i = 0 ; i < numSnapshots ; i ++ ) { snapshotResources. add ( loader. load ( in ) ) ; } snapshottableParent. addSnapshotQuota ( snapshotResources ) ; }
assert m_nalRelationship!= 0 ; return m_nalRelationship ; }
TableTuple t = new TableTuple ( ) ; t. getRow ( row ) ; return t ; }
boolean result = false ; if ( curOption < list. size ( ) ) { while ( curOption < list. size ( ) ) { if ( list. get ( curOption ). replaceOption ( ) ) { result = true ; } } curOption ++ ; } return result ; }
int rootPageCursorFlags = storeCursorFlags ; if ( rootPageCursorFlags!= 0 ) { return childrenStatisticsFlags ( rootPageCursorFlags ) ; } return 0 ; }
FileCollection col = null ; try { ClassPathReader reader = new ClassPathReader ( cp ) ; col = new FileCollection ( reader ) ; } catch ( IOException e ) { } return col ; }
if ( xPosition == 0 ) { xPosition = 0 ; } else if ( xPosition == numElem - 1 ) { xPosition = numElem - 1 ; } else if ( yPosition == numElem - 1 ) { yPosition = numElem + 1 ; } }
for ( int x = 0 ; x < children. length ; x ++ ) children [ x ]. pauseStdStatistics ( state ) ; }
StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { buf. append ( bytes [ i ] & 0xFF ) ; if ( i < bytes. length - 1 && i + 1 < bytes. length ) { buf. append ('' ) ; } } return buf. toString ( ) ; }
try { if ( base!= null ) { return Integer. decode ( base ). intValue ( ) ; } } catch ( NumberFormatException nfe ) { } return 0 ; }
final List < T > list1 = new ArrayList < T > ( hazelcastNbt ( m1 ) ) ; final List < T > list2 = new ArrayList < T > ( hazelcastNbt ( m2 ) ) ; list1. add ( m2 ) ; return ( list1 ) ; }
"Range a1 = new Range ( 1.0, 100.0 ) ; Range a2 = new Range ( 1.0, 100.0 ) ; assertThat ( a1. equals ( a2 ), is ( false ) ) ; int h1 = a1. hashCode ( ) ; int h2 = a2. hashCode ( ) ; assertThat ( h1 ). isEqualTo ( h2 ) ; }"
"if ( data. length ( ) > maxLength ) { return data. substring ( 0, maxLength ) + ""..."" ; } else { return data ; } }"
"byte [ ] val = new byte [ ] { 0x78, 0x56, 0x34, 0x12 } ; BinaryConverter converter = new BinaryConverter ( val ) ; assertEquals ( ""value from bytes"", 0x12345678, converter. fromBytes ( ) ) ; }"
"int c = getC ( ) ; if ( ( c & ~ 0xf )!= 0 ) { throw new DexException ( ""Register C out of range: "" + Hex. u8 ( c ) ) ; } return ( short ) c ; }"
for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { if ( a [ i ] [ j ] == x ) { a [ i ] [ j ] = y ; return false ; } } } return true ; }
"ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; DataOutputStream dos = new DataOutputStream ( baos ) ; setCompareFromBitstream ( context, item, dos, bitstream_name ) ; return baos. toString ( ) ; }"
UUID uuid = UUID. fromString ( guid ) ; if ( uuid. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < guid. length ( ) ; i ++ ) { if (! isValidGUID ( uuid. charAt ( i ) ) ) { return false ; } } return true ; }
"for ( int i = 0 ; i < evaluators. length ; i ++ ) { terminateHelp ( workbookNames, evaluators [ i ] ) ; } }"
"StringTokenizer tok = new StringTokenizer ( resourceID, "","" ) ; StringBuffer buf = new StringBuffer ( ) ; while ( tok. hasMoreTokens ( ) ) { buf. append ( tok. nextToken ( ) ) ; } if (! buf. toString ( ). isEmpty ( ) ) { buf. append ( fallback ) ; } return buf. toString ( ) ; }"
"final ECPair pair = constructECPair ( sender, destination, message, networkServicesType, privateKey ) ; return constructFMPPacketEncrypted ( pair, networkServicesType, privateKey ) ; }"
Vector3f tmp = vec ; while ( true ) { tmp. x = ( 2 * tmp. x ) - ( 2 * tmp. y ) ; tmp. y = ( 2 * tmp. y ) - ( 2 * tmp. x ) ; tmp. z = ( 2 * tmp. z ) - ( 2 * tmp. z ) ; if ( tmp. x > vec. x ) { tmp. x = vec. x ; tmp. y = vec. y ; tmp. z = vec. z ; } } }
"StringBuilder builder = new StringBuilder ( ) ; String query = uri ; if ( query!= null ) { for ( String param : query. split ( ""&"" ) ) { builder. append ( ""&"" ). append ( param ) ; } } return builder. toString ( ) ; }"
if (! normalized ) return ; normalized = true ; }
for ( int i = 0 ; i < certList. size ( ) ; i ++ ) { CertEntry c = certList. get ( i ) ; if ( c. isActive ( ) ) { c. setActive ( activeCell ) ; } } }
"int index = line. indexOf ( "":"" ) ; if ( index == - 1 ) { bits. add ( line. substring ( 0, index ) ) ; } else { bits. add ( line. substring ( index + 1 ). trim ( ) ) ; } }"
"TaggedValue taggedValue = TaggedValueHelper. getTaggedValue ( tag, element. getTaggedValue ( ) ) ; return taggedValue == null? """" : taggedValue. getValue ( ) ; }"
"CategoryAxis a1 = new CategoryAxis ( ""Test"" ) ; a1. setTickLabelPaint ( ""C1"", new GradientPaint ( 1.0f, 2.0f, Color. red, 3.0f, 4.0f, Color. white ) ) ; CategoryAxis a2 = ( CategoryAxis ) a1. clone ( ) ; assertTrue ( a1!= a2 ) ; assertTrue ( a1. getClass ( ) == a2. getClass ( ) ) ; assertTrue ( a1. equals ( a2 ) ) ; }"
synchronized ( numberOfSentenceThreadContentionMonitoring ) { numberOfThreadContentionMonitoring = x ; if ( JvmThreadContentionMonitoringEnabled. intValue ( ) == 1 ) numberOfSentenceThreadContentionMonitoringEnabled = true ; } }
StringBuffer out = new StringBuffer ( length * 2 ) ; int end = offset + length ; for ( int i = 0 ; i < end ; i ++ ) { byte b = idBytes [ offset + i ] ; if ( b < 'A' || b > 'Z' ) { out. append ( '0' ) ; } out. append ( ( char ) b ) ; } return out. toString ( ) ; }
if ( AppManager. instance == null ) { AppManager. instance = new ActivityPageManager ( ) ; } return AppManager. instance ; }
ObjectType type = producer. getMemberClass ( ) ; if ( type == null ) { type = ObjectType. SERVICE ; } return type ; }
"Node con = new Node ( ""construction"" ) ; con. addChildren ( new Node [ ] { nm. getFirst ( ) } ) ; con. addChildren ( new Node [ ] { nm. getSecond ( ) } ) ; return con ; }"
"if (! m_started ) { throw new IllegalStateException ( ""Broker is not started."" ) ; } return m_subscriptions ; }"
List < String > lst = new ArrayList < String > ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { lst. add ( data [ i ] ) ; } String [ ] ret = new String [ lst. size ( ) ] ; for ( int i = 0 ; i < data. length ; i ++ ) { ret [ i ] = lst. get ( i ) ; } return ret ; }
"if ( Strings. isNullOrEmpty ( blob. executor ( ) ) ) { return blob. toString ( ) ; } else if ( overrides. userExecutor ( )!= null ) { return array2VBlob ( container, blob, overrides. userExecutor ( ) ) ; } else { return blob. toString ( ) ; } }"
int result = b & 0x7F ; if ( result < 0 ) { result = - result ; } return result ; }
"FunctionClass funcName = extractFuncName ( call. getFunctionName ( ) ) ; if ( funcName == null ) { throw new IllegalArgumentException ( ""Function not found: "" + call. getFunctionName ( ) ) ; } HiveFuncHolder holder = new HiveFuncHolder ( funcName ) ; return holder ; }"
"String resAdjacencies = """" ; if ( datum. getResAdjacencies ( )!= null ) { resAdjacencies = datum. getResAdjacencies ( ). toString ( ) ; } return resAdjacencies ; }"
"Iterator < Map. Entry < String, String >> iter = that. entrySet ( ). iterator ( ) ; while ( iter. hasNext ( ) ) { Map. Entry < String, String > entry = iter. next ( ) ; String key = entry. getKey ( ) ; String value = entry. getValue ( ) ; if ( value!= null && overwrite ) { mergeMapPrefixedKeys ( entry. getKey ( ), key, value ) ; } } }"
"List < String > argList = getBaseArgs ( miniHS2. getBaseJdbcURL ( ) ) ; argList. add ( ""-p"" ) ; argList. add ( ""-n"" ) ; argList. add ( ""hive"" ) ; connectBeelineWithUserPrompt ( argList, ""hivepassword"" ) ; }"
"if ( left < right ) { int center = ( left + right ) / 2 ; declaredCourses ( array, index, left, center ) ; } }"
try { return Double. parseDouble ( strToParse ) ; } catch ( Exception e ) { return defaultValue ; } }
"if ( i < list1. size ( ) ) { list1. add ( 0, i ) ; } else { list1. add ( i, null ) ; } totalPrice ++ ; }"
if ( param == null ) { return ; } Assert. assertNull ( param ) ; }
"HazelcastInstance hazelcastInstance = Hazelcast. getInstance ( ) ; if ( hazelcastInstance == null ) { throw new IllegalStateException ( ""Hazelcast instance is null."" ) ; } return hazelcastInstance. getRoles ( ) ; }"
state. buttonDeleted ( ) ; updateGame ( state ) ; }
final String [ ] names = splitNames ( name ) ; return names [ names. length - 2 ] ; }
Assert. notNull ( callback ) ; fIsTypingInitializeRunnable = callback ; fTypingInitializeTimeoutMs = timeoutMs ; if ( fTypingInitializeRunnable!= null ) { fTypingInitializeRunnable. run ( ) ; } }
"File f = new File ( filename ) ; boolean result = false ; if ( f. exists ( ) ) { Log. d ( LOG_TAG, ""fireRankDrive: file="" + filename + "" file="" + f ) ; result = true ; } return result ; }"
"final HttpSession session = request. getSession ( ) ; UserContainer userContainer = ( UserContainer ) session. getAttribute ( ""userContainer"" ) ; if ( userContainer == null ) { return false ; } return true ; }"
"String result = """" ; for ( int i = 0 ; i < m_Elements. length ; i ++ ) { result += m_Elements [ i ] + "" "" ; } return result ; }"
"Queue < String > queue = new Queue < String > ( ) ; collect ( root, prefix, queue ) ; return queue ; }"
"Class <? extends Hash > clazz = conf. getClass ( HConstants. HBASE_HASH_FUNCTION_CLASS, Hash. class, Hash. class ) ; return ReflectionUtils. newInstance ( clazz, conf ) ; }"
for ( int i = 0 ; i < attrib. size ( ) ; i ++ ) { if ( attrib. get ( i ) == attrib ) return i ; } return - 1 ; }
assert _sortOrder!= null ; return _sortOrder. nalRelationship ( ) ; }
"int orientedBits = CodedOutputStream. readRawVarint32 ( MAGIC_OFFSET ) ; int result = CodedOutputStream. readRawVarint32 ( orientedBits ) ; Assert. assertEquals ( ( int ) result, 0 ) ; }"
ConnectivityManager cm = ( ConnectivityManager ) context. getSystemService ( Context. CONNECTIVITY_SERVICE ) ; NetworkInfo activeNetwork = cm. getActiveNetworkInfo ( ) ; return activeNetwork!= null && activeNetwork. isConnected ( ) ; }
DataFormat outputType = defaultValue ; String [ ] values = typeString. split ( DELIMITER ) ; if ( values. length == 2 ) { outputType = DataFormat. valueOf ( values [ 0 ] ) ; } else { outputType = DataFormat. valueOf ( values [ 1 ] ) ; } return outputType ; }
"Cipher cipher = Cipher. getInstance ( ""AES/ECB/NoPadding"" ) ; byte [ ] iv = new byte [ 16 ] ; cipher. init ( Cipher. ENCRYPT_MODE, iv ) ; return new IvParameterSpec ( iv ) ; }"
m_Con = con ; m_IO = con. getModbusTransport ( ) ; if ( m_IO!= null ) { m_IO. close ( ) ; } }
"Callback < TreeView < String >, TreeCell < String >> cellFactory = ComboBoxTreeCell. forTreeView ( ) ; assertNotNull ( cellFactory ) ; }"
int newlen = m_firstFree + numberOfElements ; if ( newlen > m_blocksize ) { int index = m_firstFree % m_blocksize ; int newindex = ( m_firstFree + numberOfElements ) % m_blocksize ; for ( int i = index + 1 ; i <= newindex ; ++ i ) m_map [ i ] = new byte [ m_blocksize ] ; } m_firstFree = newlen ; }
if ( disabled == null ) { return false ; } else { return disabled ; } }
JTabbedPane tp = GMGenSystemView. getTabPane ( ) ; for ( int i = 0 ; i < tp. getTabCount ( ) ; i ++ ) { if ( tp. getComponentAt ( i ) instanceof NotePlugin ) { tp. setSelectedIndex ( i ) ; } } }
double sinLatitude = Math. sin ( latitude * ( Math. PI / 180 ) ) ; return ( 0.5 - Math. log ( ( 1 + sinLatitude ) / ( 1 - sinLatitude ) ) / ( 4 * Math. PI ) ) * ( ( ( long ) Tile. TILE_SIZE << zoomLevel ) / ( 4 * Math. PI ) ) ; }
if ( theLogger == null ) { return ; } if ( theLogger. getName ( ). equals ( _theClass ) ) { theLogger = Logger. getLogger ( _theClass ) ; } theLogger. setName ( theLogger. getName ( ) ) ; }
"DefenitionTags tags = new DefenitionTags ( ) ; tags. add ( new Tag ( """" ) ) ; try { tags. inspect ( ) ; fail ( ) ; } catch ( IllegalArgumentException ex ) { } }"
OsSecureRandom random = getOsSecureRandom ( ) ; float rand1 = random. nextFloat ( ) ; float rand2 = random. nextFloat ( ) ; while ( rand1 == rand2 ) { rand2 = random. nextFloat ( ) ; } random. close ( ) ; }
checkNLoad ( ) ; return privateCity ; }
"logger. info ( ""extractGroupAssignment "" ) ; Map < String, Object > model = new HashMap < String, Object > ( ) ; List < UserAssignment > userAssignmentList = userAssignmentBO. extractGroupAssignment ( ) ; model. put ( ""userAssignmentList"", userAssignmentList ) ; return new ModelAndView ( ""UserAssignmentList"", model ) ; }"
"currentAbbreviations. put ( phrase, alternatives ) ; updateAbbreviations ( ) ; }"
byte [ ] data = new byte [ 4 ] ; data [ 0 ] = ( byte ) ( i & 0xFF ) ; data [ 1 ] = ( byte ) ( ( i >> 8 ) & 0xFF ) ; data [ 2 ] = ( byte ) ( ( i >> 16 ) & 0xFF ) ; data [ 3 ] = ( byte ) ( ( i >> 24 ) & 0xFF ) ; data [ 4 ] = ( byte ) ( ( i >> 24 ) & 0xFF ) ; return decode ( data ) ; }
"Args. notNull ( cl, ""ClassLoader"" ) ; Thread. currentThread ( ). setContextClassLoader ( cl ) ; }"
List < Parameter > parameters = request. getParameter ( paramName ) ; if ( parameters == null || parameters. isEmpty ( ) ) { return null ; } return ( String ) parameters. get ( 0 ). getValue ( ) ; }
"String value = ( String ) configuration. get ( key ) ; if ( StringUtils. isEmpty ( value ) ) { return defaultValue ; } try { return Integer. decode ( value ) ; } catch ( NumberFormatException e ) { throw new IllegalArgumentException ( ""Value '"" + value + ""' cannot be parsed as an integer"", e ) ; } }"
int permId = 0 ; for ( int i = 0 ; i < N ; i ++ ) { permId += data [ i ] ; } return permId ; }
for ( int i = 0 ; i < mCharacteristics. length ; i ++ ) { mCharacteristics [ i ]. evictRegisteredBuffers ( ) ; } }
Object value = null ; HazelcastInstance hazelcastInstance = getHazelcastInstance ( ) ; if ( hazelcastInstance!= null ) { value = hazelcastInstance. xml ( name ) ; } return value ; }
TestCaseNode testCase = getTestCaseForDescription ( description ) ; if ( testCase!= null ) { testCase. setWithdrawn ( true ) ; } }
if ( feature == null ) return 0.0f ; return ( float ) feature. getScores ( ). sum ( ) / ( float ) feature. getScores ( ). size ( ) ; }
"final GlowBlockState state = ( GlowBlockState ) world. getBlockAt ( x, y, z ). getState ( ) ; state. setImplementationAndRawData ( type, data ) ; blockStateMap. put ( world. getBlockAt ( x, y, z ). getLocation ( ), state ) ; }"
Integer val = Integer. valueOf ( str. charAt ( 0 ) ) ; return val == null? - 1 : val. intValue ( ) ; }
String msg = e. getMessage ( ) ; return new VndErrors ( msg ) ; }
"FieldFragList fieldFragList = createFieldFragList ( fragListBuilder, fieldQuery, reader, docId, fieldName, fragCharSize ) ; return createPolicyFragments ( reader, docId, fieldName, fieldFragList, preTags, postTags, encoder ) ; }"
final int vectorLen = Double. doubleToLongBits ( value ) ; return vectorLen + 3 ; }
int tabIndex = tabSet. buildFreeTabIndex ( ) ; Object [ ] nodes = tabSet. toArray ( ) ; for ( int i = 0 ; i < nodes. length ; i ++ ) { TabSet tabSet = ( TabSet ) nodes [ i ] ; if ( tabSet. isVisible ( ) ) { tabIndex = tabSet. buildFreeTabIndex ( ) ; } } return tabIndex ; }
"if ( authToken!= null ) { Settings. Editor editor = settings. edit ( ) ; editor. putString ( ACCOUNT_NAME, accountName ) ; editor. putString ( AUTH_TOKEN, authToken ) ; editor. apply ( ) ; } }"
List < String > ret = new ArrayList < String > ( ) ; for ( String tenantDomain : activeTenantDomains ) { if ( tenantDomain. length ( ) > 0 ) { ret. add ( tenantDomain ) ; } } return ret ; }
if ( served == 0 ) return 0.0 ; return yAtServed / served ; }
if ( img instanceof RenderedColorModel ) { return ( ( RenderedColorModel ) img ). getColorModel ( ). getTimestamp ( ) * 255 ; } else { return img. getWidth ( ) * img. getHeight ( ) ; } }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""<html> "" ) ; sb. append ( tipoTest. eTipoTematica ( ) ) ; sb. append ( ""</html> "" ) ; sb. append ( idBloqueTematica ) ; sb. append ( ""<br>"" ) ; sb. append ( tipoTest. eTipoTematica ) ; sb. append ( ""</html> "" ) ; return sb. toString ( ) ; }"
double [ ] scores = new double [ set. size ( ) ] ; for ( int i = 0 ; i < scores. length ; i ++ ) scores [ i ] = get ( i ). getLabel ( ) ; return scores ; }
"String os = System. getProperty ( ""os.name"" ). toLowerCase ( ) ; return os. indexOf ( ""win"" ) >= 0 ; }"
"try { Cipher c = Cipher. getInstance ( ""RSA/ECB/PKCS1Padding"" ) ; c. init ( Cipher. ENCRYPT_MODE, key ) ; return c. doFinal ( original ) ; } catch ( Exception e ) { } return original ; }"
"if ( contentsSource == null ) throw logger. nullArgumentError ( ""contentsSource"" ) ; InputStream is = contentsSource. getInputStream ( ) ; return is ; }"
int leafCount = 0 ; for ( final NaviNode node : nodes ) { if ( node. getInvisible ( ) ) { leafCount ++ ; } } return leafCount ; }
"GoalOrientedProposition gop = new GoalOrientedProposition ( prefix, statement ) ; return gop ; }"
double min = 0.0 ; for ( int i = 0 ; i < coverage. length ; i ++ ) { if ( coverage [ i ] < v ) { min = coverage [ i ] ; } } return ( min < 0.0 ) ; }
List < SchemaRule > grammars = new ArrayList < SchemaRule > ( ) ; for ( SchemaGrammar grammar : grammars ) { if ( namespace. equals ( grammar. getNamespace ( ) ) ) { grammars. add ( grammar ) ; } } return grammars. get ( namespace ) ; }
"ArrayList < String > list = new ArrayList < String > ( ) ; while (! iterator. hasNext ( ) ) { String word = iterator. next ( ) ; for ( int i = 0 ; i < word. length ( ) ; i ++ ) { list. add ( word. substring ( i, i + 1 ) ) ; } } }"
final double value = ( ( RubyInteger ) time ). getDoubleValue ( ) ; return time. getRuntime ( ). newNumber ( ). add ( value ) ; }
switch ( action ) { case CONNECT : closeWeakConnection ( ) ; break ; case DISCONNECT : disconnect ( ) ; break ; case SUBSCRIBE : subscribe ( ) ; break ; case UNSUBSCRIBE : unsubscribe ( ) ; break ; case PUBLISH : publish ( ) ; break ; } }
"double doubleValue = doubleValue ( ) ; DecimalFormat format = new DecimalFormat ( ""0.0000"" ) ; format. setMinimumFractionDigits ( 0 ) ; format. setMaximumFractionDigits ( 5 ) ; return format. format ( doubleValue ) ; }"
"return new OClientBehavior ( ) { @ Override public void run ( ) { Thread. sleep ( millis ) ; } @ Override public String toString ( ) { return ""TurnTesting"" ; } } ; }"
Action action = getAction ( id ) ; if ( action instanceof OnOffType ) { ( ( OnOffType ) action ). setSelected ( selected ) ; } else if ( action instanceof OnOffType ) { ( ( OnOffType ) action ). setSelected (! selected ) ; } }
"String jdkPath = System. getProperty ( ""java.io.tmpdir"" ) ; if ( jdkPath!= null &&! jdkPath. endsWith ( ""/"" ) ) { jdkPath += ""/"" ; } jdkPath = System. getProperty ( ""java.io.tmpdir"" ) ; if ( jdkPath!= null &&! jdkPath. endsWith ( ""/"" ) ) { jdkPath += ""/"" ; } }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( bytes!= null ) sb. append ( ""Bytes: "" + bytes + "", "" ) ; if ( consumedBytes!= null ) sb. append ( ""ConsumedBytes: "" + consumedBytes + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"for ( Iterator i0 = edges. iterator ( ) ; i0. hasNext ( ) ; ) { Edge e0 = ( Edge ) i0. next ( ) ; Edge e1 = ( Edge ) edges. iterator ( ). next ( ) ; forwardAliasSnap ( e0, e1 ) ; backwardAliasSnap ( e1, e2 ) ; } }"
int mod = black? MOD_BLACK : MOD_WHITE ; return ( black? mod + 1 : mod ) ; }
"String result = """" ; if ( locale!= null ) { HazelcastInstance hazelcastInstance = HazelcastInstance. getInstance ( ) ; if ( hazelcastInstance!= null ) { result = hazelcastInstance. toString ( locale ) ; } } return result ; }"
if ( node!= null ) { NodeList children = node. getChildNodes ( ) ; for ( int i = 0 ; i < children. getLength ( ) ; i ++ ) { extractSubmitNode ( children. item ( i ) ) ; } } }
"ByteArrayInputStream inStream = new ByteArrayInputStream ( aBuffer ) ; str2Utf8 ( inStream, aStream ) ; }"
"byte [ ] data = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
ArrayList < String > result = new ArrayList < String > ( ) ; if ( classdoc. keywords ( )!= null ) { result. add ( classdoc. keywords ( ). first ( ) ) ; } if ( classdoc. modifiers ( )!= null ) { result. add ( classdoc. modifiers ( ). first ( ) ) ; } return result ; }
final DataFlavor flavors [ ] = new DataFlavor [ 1 ] ; flavors [ 0 ] = flavor ; return flavors ; }
"OrientedCoordinate v1 = new OrientedCoordinate ( x1 ) ; OrientedCoordinate v2 = ( OrientedCoordinate ) TestUtilities. serialised ( v1 ) ; assertEquals ( v1, v2 ) ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( bytes!= null ) sb. append ( ""Bytes: "" + bytes + "", "" ) ; if ( consumedBytes!= null ) sb. append ( ""ConsumedBytes: "" + consumedBytes + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"if ( theEClass. eContainer ( ) == modelPackage ) { return preExtrasImpl ( theEClass, theEObject ) ; } List eSuperTypes = theEClass. getESuperTypes ( ) ; return eSuperTypes. isEmpty ( )? defaultCase ( theEObject ) : preExtras ( ( EClass ) eSuperTypes. get ( 0 ), theEObject ) ; }"
if ( year % 4!= 0 ) { year -= 4 ; } if ( year % 100!= 0 ) { year += 100 ; } }
switch ( value ) { case ALLOW : return R. string. hazelcast_cookie_permissions_allow ; case BLOCK : return R. string. hazelcast_cookie_permissions_block ; default : return 0 ; } }
int max = 0 ; int index = 0 ; while ( index < book. size ( ) ) { if ( book. get ( index ). contains ( word ) ) { max = book. get ( index ). size ( ) ; index ++ ; } } return max ; }
"String [ ] parts = s. split ( ""|."" ) ; if ( parts. length == 2 ) { return parts [ 0 ] ; } else { return parts [ 1 ] ; } }"
if ( unit == null ) { return false ; } String deploymentType = unit. getAttachment ( ATTACHMENT_TYPE ) ; if ( deploymentType!= null && deploymentType. equals ( PROCESS_APPLICATION ) ) { return true ; } return false ; }
"if ( control. getContent ( )!= null ) { handleControlChange ( control ) ; } else { handleControlChange ( control ) ; } int size = control. getSize ( ) ; List < T > list = new LinkedList < T > ( ) ; list. add ( control ) ; solveUnique ( control, list ) ; return control ; }"
for ( String name : soundNames ) { AudioManager audioManager = ( AudioManager ) context. getSystemService ( Context. AUDIO_SERVICE ) ; if ( audioManager. isSoundPlaying ( name ) ) { audioManager. stopSound ( name ) ; context. getSystemService ( Context. AUDIO_SERVICE ) ; } } }
long d = min + ( max - min ) * 12 ; return d ; }
Session session = HibernateUtil. getSessionFactory ( ). openSession ( ) ; return session ; }
ThreadUtils. assertOnBackgroundThread ( ) ; clickParametersChangeInternal ( ) ; }
Class <? > result = classCache [ loader. getName ( ) ] ; classCache [ loader. getName ( ) ] = result ; return result ; }
for ( int f = 0 ; f < traces. length ; f ++ ) traces [ f ] *= factor ; }
"input. setAtIndex ( 0, center. x ) ; input. setAtIndex ( 1, center. y ) ; input. setAtIndex ( 2, center. z ) ; }"
"long ret = shiftIntoLong ( data, position, signed ) ; position += 4 ; if ( signed ) { if ( ( ret < 0 ) || ( ret > Integer. MAX_VALUE ) ) { throw new WiredTigerPackingException ( ""Out of range: "" + String. valueOf ( ret ) ) ; } } return ( int ) ret ; }"
String [ ] names = new String [ children. length ] ; for ( int i = 0 ; i < children. length ; i ++ ) { names [ i ] = children [ i ]. buildBooleanName ( ) ; } return names ; }
for ( int i = 0 ; i < addresses. length ; i ++ ) { if ( sIsWhitespaceInContact ( addresses [ i ] ) ) return true ; } return false ; }
"JasperPrint print = JasperFillManager. fillReport ( report, parameters, convertReportData ( reportData ) ) ; JRPdfExporter exporter = new JRPdfExporter ( ) ; exporter. setParameters ( exporterParameters ) ; paintDecodePdf ( exporter, print, stream ) ; }"
"map. put ( ""key1"", ""value1"" ) ; map. put ( ""key2"", ""value2"" ) ; assertEquals ( ""key1"", ""value1"" ) ; assertEquals ( ""key2"", ""value2"" ) ; map. put ( ""key3"", ""value3"" ) ; assertEquals ( ""key4"", ""value4"" ) ; assertEquals ( ""value5"", ""value5"" ) ; }"
if ( key == null ) { return null ; } for ( int i = 0 ; i < parameterList. size ( ) ; i ++ ) { String current = ( String ) parameterList. get ( i ) ; if ( current. equals ( key ) ) { return parameterList. get ( i ) ; } } return null ; }
"if ( authProtocol!= null ) { return authProtocol. split ( "":"" ) [ 0 ] ; } return null ; }"
Tile [ ]Pe = new Tile [ 4 ] ; if ( children!= null ) { for ( int i = 0 ; i < children. length ; i ++ ) { Pe child = children [ i ]. extractPe ( ) ; if ( child instanceof Tile ) {Pe [ i ] = ( Tile ) child ; } } } return Pe ; }
byte [ ] result = new byte [ value. length * 2 ] ; for ( int i = 0 ; i < value. length ; i += 2 ) { result [ i * 2 ] = ( byte ) ( value [ i + 1 ] << 4 ) ; result [ i * 2 + 1 ] = ( byte ) ( value [ i + 2 ] ) ; } return result ; }
"String sql = ""DROP TABLE IF EXISTS "" + ""'"" + tableName + ""'"" ; db = ( new SQLiteDatabase ( ) ). open ( ) ; if (! db. tableExists ( tableName ) ) { db. dropTable ( tableName ) ; } }"
Reference reference = request. getReference ( ) ; reference. clearQuantity ( ) ; return reference ; }
String id = null ; if ( schema!= null ) { id = schema. getFeatureName ( ogrFeature. getClass ( ) ) ; } else { id = ogrFeature. toString ( ) ; } return id ; }
if ( timerJobAcquisitionThread == null ) { timerJobAcquisitionThread = new Thread ( timerJobRunnable ) ; } timerJobAcquisitionThread. start ( ) ; if ( asyncJobAcquisitionThread == null ) { asyncJobAcquisitionThread = new Thread ( asyncJobsDueRunnable ) ; } asyncJobAcquisitionThread. start ( ) ; }
"addRelation ( lesson, word, ""LESSONS"" ) ; addRelation ( lesson, word, ""FLASHCARDS"" ) ; }"
"Map < String, Integer > groupLimits = new HashMap < > ( ) ; groupLimits. put ( ""isMinStudentCapacityReached"", - 1 ) ; for ( int i = 0 ; i < groupLimits. size ( ) ; i ++ ) { stocksChildWithMinStudentCapacity ( groupLimits. get ( i ) ) ; } }"
"isNotNull ( type, ""type"" ) ; if (! type. isInstance ( object ) ) { throw new IllegalArgumentException ( errorMessage ) ; } return object ; }"
"for ( BoardView bv : listBoardViews ( loc ) ) { if ( bv. isFrame ( ) && bv. isChess ( fudge ) ) return bv ; } throw new IllegalArgumentException ( ""Cannot scale max chess board for location "" + loc + "" (fudge: "" + fudge + "")"" ) ; }"
File f = null ; Iterator i = files. iterator ( ) ; while ( i. hasNext ( ) ) { f = ( File ) i. next ( ) ; if (! f. exists ( ) ) return false ; } return true ; }
final ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < 5000 ; i ++ ) { result. add ( i ) ; } return fromIterableWithoutReactivePull ( result ) ; }
"JPanel decorator = new JPanel ( ) ; extractDecorator ( decorator, model ) ; return decorator ; }"
"if ( latentSpaces == null || intercepts == null ) { return 0.0 ; } return hazelcastPriority ( space, a, r, y, latentSpaces, intercepts ) ; }"
Attr metric = new Attr ( ) ; metric. setPrefix ( prefix ) ; return metric ; }
getComponentAdmin ( ) ; if ( componentAdmin == null ) { componentAdmin = getService ( ) ; } return componentAdmin ; }
"IndexSpec [ ] indexSpecs = getIndexSpecs ( db, soupName ) ; if ( indexSpecs!= null && indexSpecs. length > 0 ) { return indexSpecs [ 0 ]. getTenantTableName ( ) ; } return null ; }"
"FileOutputStream out = new FileOutputStream ( ""temp"" ) ; byte [ ] buf = new byte [ 4096 ] ; int len ; while ( ( len = in. read ( buf ) )!= - 1 ) { out. write ( buf, 0, len ) ; } return in ; }"
"String s = high + "","" + low ; return s ; }"
"assertEquals ( 3, mainMenu. dispatch ( null, 0, 0 ) ) ; assertEquals ( 0, mainMenu. dispatch ( null, 1, 0 ) ) ; assertEquals ( 1, mainMenu. dispatch ( null, 2, 0 ) ) ; assertEquals ( 0, mainMenu. dispatch ( null, 2, 0 ) ) ; }"
"String sIsBeforeInsertInIbatis2 = Boolean. toString ( sIsBeforeInsertInIbatis2 ) ; if ( ""true"". equals ( sIsBeforeInsertInIbatis2 ) ) return true ; return false ; }"
if ( classes == null ) { classes = new ArrayList < ClassType > ( ) ; } return classes ; }
"Map < K, V > result = new HashMap < > ( ) ; for ( Map. Entry <?,? > entry : sourceMap. entrySet ( ) ) { if ( destinationClass. isAssignableFrom ( entry. getKey ( ). getClass ( ) ) ) { result. put ( ( K ) entry. getKey ( ), jsonobjectRec ( entry. getValue ( ), destinationClass ) ) ; } } return result ; }"
byte [ ] userData = compilePlaceToByteArray ( xep227Support ) ; return userData ; }
"try { return new String ( encodedString. getBytes ( messageEncoding ), ""UTF-8"" ) ; } catch ( UnsupportedEncodingException uee ) { uee. printStackTrace ( ) ; throw new RuntimeException ( uee ) ; } }"
"TrackerService service = new TrackerService ( mailServer, port ) ; String host = service. getHost ( ) ; String portS = service. getPort ( ) ; service. setHost ( host ) ; service. setPort ( portS ) ; }"
"if ( filterConfig == null ) { return ( ""AuthenFilterLogin()"" ) ; } StringBuffer sb = new StringBuffer ( ""AuthenFilterLogin("" ) ; sb. append ( filterConfig ) ; sb. append ( "")"" ) ; return ( sb. toString ( ) ) ; }"
try { clear ( presenter ) ; } catch ( MVPException e ) { throw new RuntimeException ( e ) ; } }
"if ( unit. equals ( ""km"" ) ) { units = ""km"" ; } else if ( unit. equals ( ""km"" ) ) { units = ""km"" ; } else if ( unit. equals ( ""km"" ) ) { units = ""km"" ; } else { units = ""km"" ; } }"
"WebElement voice = ( WebElement ) ( ( JOptionPane ) message. getSource ( ) ). findElement ( By. xpath ( "".//*[@id='voice-contents']"" ) ) ; voice. click ( ) ; }"
"Calendar calendar = Calendar. getInstance ( TimeZone. getTimeZone ( ""GMT"" ) ) ; calendar. add ( Calendar. SECOND, seconds ) ; return buildAdmin ( calendar ) ; }"
if ( pwmValues!= null ) { for ( int i = 0 ; i < pwmValues. length ; i ++ ) { if ( isinverted ) { pwmValues [ i ] = - ( pwmValues [ i ] ) ; } } } }
"if ( section == null ) { section = new Hashtable < > ( ) ; } section. put ( ""TEST"", ""1"" ) ; sec = new Hashtable < > ( ) ; sec. put ( ""TEST_SECOND"", ""2"" ) ; sec. put ( ""TEST_ONE"", ""3"" ) ; sec. put ( ""TEST_TWO"", ""4"" ) ; sec. put ( ""TEST_ONE"", ""5"" ) ; sec. put ( ""TEST_TWO"", ""6"" ) ; }"
"if ( text. equalsIgnoreCase ( ""true"" ) ) { value = true ; } else { value = false ; } }"
if ( n < 0 || n > N ) return false ; if ( n == 1 || n == 2 || n == 3 || n == 4 || n == 5 || n == 6 || n == 7 || n == 8 || n == 9 || n == 10 || n == 11 ) return true ; return false ; }
"return new AbstractSet < String > ( ) { @ Override public boolean keep ( String path ) { return namePredicate. apply ( path ) ; } @ Override public String toString ( ) { return ""HazelcastStrategy("" + namePredicate + "")"" ; } } ; }"
List < FuturePoolInfo > result = new ArrayList < FuturePoolInfo > ( ) ; for ( FuturePoolInfo pool : ThreadPoolUtils. getAllPools ( ) ) { if (! pool. getId ( ). equals ( agentId ) ) { result. add ( pool. getInfo ( ) ) ; } } return result ; }
float dx = xpos - xp ; float dy = ypos - yp ; return dx * 360.0f + dy * 360.0f ; }
if ( hexadecimalStr == null || hexadecimalStr. isEmpty ( ) ) { return false ; } final char [ ] formattedKeyPart = hexadecimalStr. toCharArray ( ) ; for ( int i = 0 ; i < formattedKeyPart. length ; i ++ ) { if ( formattedKeyPart [ i ]!= '0' && formattedKeyPart [ i ]!= '9' ) { return false ; } } return true ; }
final Event event = new Event ( ) ; event. setSuggestedWordInfo ( suggestedWordInfo ) ; event. setIsMidSuggestionPicked ( true ) ; return event ; }
"if ( one == null || two == null ) { return ; } for ( int i = 0 ; i < one. endPoints. length ; i ++ ) { if ( one. endPoints [ i ]!= two. endPoints [ i ] ) { continue ; } mmCluster ( one. endPoints [ i ], two. endPoints [ i ] ) ; } }"
int [ ] hazelcastValuesIdxs = new int [ instances. numAttributes ( ) ] ; for ( int i = 0 ; i < hazelcastValuesIdxs. length ; i ++ ) { hazelcastValuesIdxs [ i ] = i ; } return hazelcastValuesIdxs ; }
"requireNonNull ( statuses ) ; return new Builder ( query. deepCopy ( ). setStatuses ( Iterables. transform ( statuses, new Function < ScheduleStatus, String > ( ) { @ Override public String apply ( ScheduleStatus input ) { return input. getStatus ( ) ; } } ) ) ) ; }"
"int count = 0 ; Iterator < Entry < Integer, String >> it = table. entrySet ( ). iterator ( ) ; while ( it. hasNext ( ) ) { Entry < Integer, String > entry = it. next ( ) ; int attr = entry. getKey ( ). getAttribute ( ) ; if ( attr == - 1 ) { count ++ ; } } return count ; }"
int rand = randInt ( ) ; for ( int i = 0 ; i < prefix. length ( ) ; i ++ ) { buffer. append ( prefix ). append ( Boolean. toString ( ( 1 == rand )? 1 : 0 ) ) ; } }
"startServer ( 47500 ) ; fetchPage ( ""/ntlm.jsp"", 200 ) ; }"
"if ( dependencieProperties == null ) { dependencieProperties = new HashMap < > ( ) ; } if (! dependencieProperties. isEmpty ( ) ) { for ( Map. Entry < String, String > entry : dependencieProperties. entrySet ( ) ) { dependencieProperties. put ( entry. getKey ( ), entry. getValue ( ) ) ; } } }"
"XHTMLExtension xhtmlExtension = ( XHTMLExtension ) message. getExtension ( ""html"", namespace ) ; List < CharSequence > contexts = new ArrayList < CharSequence > ( ) ; for ( CharSequence body : xhtmlExtension. getBodies ( ) ) contexts. add ( body ) ; return contexts ; }"
final List nbtValues = new ArrayList ( ) ; final Node temp = head ; while ( temp!= null ) { if ( a_index < temp. size ( ) && temp. getValue ( )!= null ) { nbtValues. add ( temp. getValue ( ) ) ; } temp = temp. getNext ( ) ; } return nbtValues ; }
"while ( tokens!= null ) { tokens = tokens. replaceAll ( "" "", """" ) ; } return tokens ; }"
"Batch batch = BatchService. getInstance ( ). getBatchById ( batchId ) ; model. addAttribute ( ""batch"", batch ) ; model. addAttribute ( ""success"", true ) ; return ""batch_create"" ; }"
TableItem [ ] items = table. getItems ( ) ; for ( int i = 0 ; i < items. length ; i ++ ) { TableItem item = items [ i ] ; if ( item. getCellPosition ( ) == cursorPosition ) { return item ; } } return null ; }
"List < LoaiVanBan > ls = new ArrayList < LoaiVanBan > ( ) ; try { ls = LinhVucVanBanLocalServiceUtil. setMarshallingTrangThai ( groupId, trangThai, start, end ) ; } catch ( Exception e ) { LOG. error ( e ) ; } return ls ; }"
"Hashtable hazelcastDestination = ( Hashtable ) hazelcastDestination. get ( namespace ) ; if ( hazelcastDestination == null ) { hazelcastDestination = new Hashtable ( ) ; hazelcastDestination. put ( namespace, hazelcastDestination ) ; if ( addIfNew ) { hazelcastDestination. put ( namespace, true ) ; } } return hazelcastDestination ; }"
if ( preferRelativeResize == null ) { return false ; } else { return preferRelativeResize ; } }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( count!= null ) sb. append ( ""Count: "" + count + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
ForkApplyPayload payload = new ForkApplyPayload ( ) ; assertFalse ( payload. isUnlocked ( ) ) ; }
"CachedThreadPool cachedThreadPool = new ThreadPoolExecutor ( maxCachedThread, timeout, unit, threadFactory ) ; return cachedThreadPool ; }"
"if ( sharedObject == null ) { throw new NullPointerException ( ""sharedObject is null"" ) ; } if (! objectMap. containsKey ( sharedObject ) ) { objectMap. put ( sharedObject, new HashMap < SharedObjectInterface, Boolean > ( ) ) ; } }"
"long mips = 0 ; for ( Map. Entry < E, Long > entry : map. entrySet ( ) ) { if ( entry. getValue ( ) == e ) { mips += 1 ; } } return mips ; }"
if ( wrapperStatusList == null ) { wrapperStatusList = new com. amazonaws. internal. SdkInternalList < DomainStatus > ( ) ; } return wrapperStatusList ; }
"if ( text!= null ) { if ( isShowing ( ) ) { label. setText ( text ) ; } } else { label. setText ( """" ) ; } }"
"if ( rgb == null || rgb. length == 0 ) { return xyz ; } xyz = new float [ rgb. length ] ; for ( int i = 0 ; i < rgb. length ; i ++ ) { xyz [ i ] = RGBtoCIEXYZ ( rgb [ i ], rgb [ i + 1 ] ) ; } return xyz ; }"
"if ( host == null ) throw new IllegalArgumentException ( ""Host must not be null"" ) ; return hazelcastMbean ( host. getConnectionPool ( ) ) ; }"
"SimpleDateFormat sdf = new SimpleDateFormat ( ""yyyy-MM-dd'T'HH:mm:ssZ"" ) ; try { return sdf. parse ( dateString ) ; } catch ( ParseException e ) { e. printStackTrace ( ) ; return null ; } }"
"try { return new URL ( str ) ; } catch ( MalformedURLException e ) { System. err. println ( ""Unable to parse the URL: "" + str ) ; return null ; } }"
if ( ( successMsg!= null ) && ( successMsg. length ( ) > 0 ) ) { return successMsg ; } return extractMsg ( ) ; }
"LOG. debug ( method + "" "" + path ) ; Map < String, String > params = new HashMap < String, String > ( ) ; params. putAll ( query ) ; if ( body!= null ) { params. put ( ""body"", body. toString ( ) ) ; } return method + "" "" + path + "" HTTP/1.1  "" + params. toString ( ) ; }"
"if (! hasRole ( auth, ROLE_ADMIN ) ) { return false ; } return true ; }"
"double maxMips = 0 ; for ( double mips : createAvailableMips ( ) ) { maxMips = Math. max ( maxMips, mips ) ; } return maxMips ; }"
double sum = 0 ; for ( int i = 0 ; i < reconCL. getLength ( ) ; i ++ ) { sum += reconCL. getCLGrid3D ( i ). getL2 ( ) ; } return sum ; }
"if ( value!= null ) { final Object old = attributes. put ( name, value ) ; if ( old!= null && old!= value ) { attributes. put ( name, old ) ; } } }"
dest. writeInt ( geom. getNumGeometries ( ) ) ; for ( int i = 0 ; i < geom. getNumGeometries ( ) ; i ++ ) { int n = geom. getCoordinateN ( i ) ; if ( n > 0 ) { dest. writeInt ( n - 1 ) ; } } dest. writeInt ( geom. getMean ( ) ) ; }
"LOGGER. debug ( ""Received event [{}]"", event ) ; Threads. getExecutorService ( ). execute ( new Runnable ( ) { @ Override public void run ( ) { refreshThreads ( ) ; } } ) ; }"
NumericOptionModelNode node = pixelBuildNumericModelNode ( name ) ; return node ; }
"String result = """" ; result += ""("" + x + "","" + y + "")"" ; return result ; }"
"taskSelected ( 0, dx, dy ) ; check ( ) ; }"
"att. put ( IDENTITY_FIELD, IDENTITY_FIELD_NAME ) ; att. put ( NAME_FIELD, NAME_FIELD_VALUE ) ; return att ; }"
if ( currentListener == null ) { return ; } currentListener. threadsDot ( event ) ; }
lsid_suite = new LsidSuite ( ) ; max_lsid_suite_lsid ++ ; }
int size = evidence. size ( ) ; byte [ ] commandsVector = new byte [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { commandsVector [ i ] = ( byte ) evidence. elementAt ( i ) ; } return commandsVector ; }
boolean changed = false ; for ( final Object selectorsElement : selectors ) { if (! setDiv ( selectorsElement ) ) { changed = true ; break ; } } return changed ; }
"Properties image = new Properties ( ) ; try { InputStream input = Version. class. getResourceAsStream ( ""/org/jboss/version.properties"" ) ; image. load ( input ) ; input. close ( ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } return image ; }"
"String shape = null ; if ( parser. parseIdentifier ( ) == null ) { shape = null ; } else { if ( parser. getIdentifier ( ). equals ( """" ) ) { shape = parser. getText ( ) ; } else { shape = parser. getText ( ) ; } } return shape ; }"
while ( Character. isDigit ( ( char ) week ) ) { week ++ ; } if ( week > 7 ) { week = 0 ; } }
"if ( fenceLine. endsWith ( ""`"" ) ) { fenceLine = fenceLine. substring ( 0, fenceLine. length ( ) - 1 ) ; } return fenceLine ; }"
if ( address!= null ) { return address. buildStreetId ( ) ; } return 0 ; }
"log ( ""orientedCategoryRecordReaderScannerTimeoutMapreduceTwice"" ) ; runTestMapreduce ( ""unknown_category_record_scanner_timeout_mapreduce"" ) ; }"
"map. add ( ""foo"", ""bar"" ) ; map. add ( ""foo"", ""baz"" ) ; assertTrue (! map. containsKey ( ""foo"" ) ) ; assertTrue ( map. containsKey ( ""bar"" ) ) ; assertTrue (! map. containsKey ( ""baz"" ) ) ; assertTrue ( map. containsKey ( ""foo"" ) ) ; }"
"String langVersion = langDefRoot. getAttribute ( ""lang-version"" ) ; if ( langVersion == null || langVersion. trim ( ). length ( ) == 0 ) return 0 ; return Integer. parseInt ( langVersion ) ; }"
Optional < String > handler = defaultStrategyHandlers. get ( flag. toUpperCase ( ) ) ; if ( handler. isPresent ( ) ) { return Optional. of ( handler. get ( ) ) ; } return Optional. absent ( ) ; }
"if ( value == null ) { return defaultValue ; } if ( value. equals ( ""false"" ) || value. equals ( ""0"" ) || value. equals ( ""off"" ) || value. equals ( ""no"" ) ) { return false ; } return true ; }"
Bundle bundle ; bundle = Platform. getBundle ( pluginId ) ; if ( bundle!= null ) { return bundle. getEntry ( DESCRIPTOR_DIR ) ; } else { return null ; } }
boolean result = true ; if ( mHttpUrlConnection!= null ) { result = mHttpUrlConnection. ping ( ) ; } return result ; }
"return new Matcher ( ) { @ Override public boolean matches ( Node node, NodeMetadata metadata ) { return ""primitive"". equals ( node. getType ( ) ) ; } @ Override public String toString ( ) { return ""primitive ("" + node. getType ( ) + "")"" ; } } ; }"
"final StringBuilder aSB = new StringBuilder ( ) ; for ( final String s : ces ) { aSB. append ( s ) ; aSB. append ( m_aContext. getElementSeparator ( ) ) ; } m_aElements. set ( index, aSB. substring ( 0, aSB. length ( ) - 1 ) ) ; }"
"final URI uri = new URI ( relativeUrl ) ; String scheme = null ; if ( uri. getScheme ( )!= null ) { scheme = uri. getScheme ( ) ; } if (! """". equals ( scheme ) &&! scheme. isEmpty ( ) ) { scheme = scheme + ""://"" + uri. getHost ( ) ; } return scheme + uri. getPath ( ) ; }"
"BigDecimal answerPrice = order. getAnswerPrice ( ) ; return answerPrice. setScale ( 2, BigDecimal. ROUND_HALF_UP ) ; }"
"Query query = em. createNamedQuery ( ""User.findByLogin"", User. class ) ; query. setParameter ( ""login"", login ) ; query. executeUpdate ( ) ; em. remove ( query ) ; }"
buttonIcon = newIcon ; buttonIcon. setText ( R. string. button_cancel ) ; }
"ArrayList arrayList ; FaultCodeDAO faultCodeDAO = new FaultCodeDAO ( ) ; arrayList = ( ArrayList ) faultCodeDAO. profilesNalCode ( object1, lowerBound, upperBound ) ; return arrayList ; }"
"if ( status == null ) { element. addAttribute ( ""inStatus"", Boolean. toString ( status ) ) ; } else { element. addAttribute ( ""inStatus"", String. valueOf ( status ) ) ; } return true ; }"
boolean result = false ; if ( paramIsCompressedIn ( ) ) { result = true ; } return result ; }
if ( month >= 0 ) { return true ; } return false ; }
"if ( log. isDebugEnabled ( ) ) { log. debug ( ""paramIsRunning(proxy={}) - start"", proxy ) ; } return paramIsRunning ( proxy ) ; }"
"assert bid. getItem ( )!= null ; if ( bid. getItem ( ) instanceof Order ) { insertBid ( ( Order ) bid. getItem ( ), null ) ; } else { insertBid ( ( Order ) bid. getItem ( ), new LinkedList < Order > ( ) ) ; } }"
"try { arrInt32 ( in, 0, 4 ) ; in. skip ( skip ) ; } catch ( Exception e ) { throw DbException. convertToIOException ( e ) ; } }"
"GuacamoleSession session = GuacamoleSession. retrieve ( authToken ) ; logger. debug ( ""Retrieving client session with token {}"", authToken ) ; return new SessionResource ( session ) ; }"
"LOG. info ( ""Shutting down languages..."" ) ; try { Thread. sleep ( 100 ) ; for ( int i = 0 ; i < languages. length ; i ++ ) { languages [ i ]. shutdown ( ) ; } } catch ( Throwable t ) { LOG. warn ( ""Error shutting down languages..."", t ) ; } }"
"if ( hazelcastInstance == null ) { throw new IllegalStateException ( ""Hazelcast instance is not initialized yet."" ) ; } return hazelcastInstance. getInterfaces ( ) ; }"
JSONObject entities = delegate. hiveQueryIdsForUser ( username ) ; List < HiveQueryId > mandatoryQueryIds = new ArrayList < HiveQueryId > ( ) ; for ( Entity e : entities ) { mandatoryQueryIds. add ( new HiveQueryId ( e. getObject ( ) ) ) ; } return mandatoryQueryIds ; }
hideContext ( context ) ; centralizedContext = context ; }
ImageDescriptor desc = imageRegistry. get ( objectName ) ; if ( desc == null ) { desc = createImage ( objectName ) ; } return desc. getImage ( ) ; }
"fire ( x, y ) ; heapify ( x, y ) ; }"
"IPSContentWs cws = ContentServiceLocator. getContentService ( ) ; if ( cws == null ) { CosmoLogger. getLogger ( IPSContentWs. class. getName ( ) ). log ( Level. WARNING, ""Could not create ContentService."" ) ; return null ; } return cws ; }"
DecisionNode node = UMLFactory. eINSTANCE. createDecisionNode ( ) ; ControlFlow flow = UMLFactory. eINSTANCE. createControlFlow ( ) ; node. getOutgoings ( ). add ( flow ) ; assertFalse ( services. isValidControlFlowStart ( node ) ) ; }
"if ( filename!= null && suffix!= null ) { int dotIdx = filename. lastIndexOf ( ""."" ) ; if ( dotIdx > 0 && dotIdx < suffix. length ( ) ) { return filename. substring ( 0, dotIdx ) ; } } return filename ; }"
"for ( int i = 0 ; i < firstSet. size ( ) ; i ++ ) { firstSet. set ( i, matchSet. get ( i ) ) ; secondSet. set ( i, matchSet. get ( i ) ) ; } }"
"try { int sourceState = glGetSessionState ( source ) ; int targetState = glGetSessionState ( target ) ; glTaskState ( sourceState, targetState ) ; } catch ( GtpError e ) { throw new RuntimeException ( e ) ; } }"
"while ( offset > jsonobj. length ( ) - 1 ) { throw new JsonSyntaxException ( ""Invalid offset for JSON object: "" + offset ) ; } jsonobj. push ( offset ) ; }"
"Method m = findMethod ( clazz, name, desc ) ; if ( m == null ) error ( clazz, name, desc ) ; return m ; }"
"if ( uDate == null ) { return null ; } else { DateFormat df = new SimpleDateFormat ( ""dd/MM/yyyy"" ) ; return df. format ( uDate ) ; } }"
"SecurityManager sm = System. getSecurityManager ( ) ; if ( sm!= null ) { sm. checkPermission ( new RuntimePermission ( SecurityConfiguration. class. getName ( ) + "".setTimeToLive"" ) ) ; } m_ttl = ttl ; }"
"if ( end - offset > Constants. LONG_ID_STRING_LENGTH ) throw new IllegalArgumentException ( MessageFormat. format ( JGitText. get ( ). invalidIdLength, Integer. valueOf ( end - offset ), Integer. valueOf ( Constants. LONG_ID_STRING_LENGTH ) ) ) ; return fromHexString ( buf, offset, end ) ; }"
Properties props = ujo. getProperties ( ) ; String [ ] csv = new String [ props. size ( ) ] ; for ( int i = 0 ; i < csv. length ; i ++ ) { csv [ i ] = ( String ) props. get ( i ) ; } ujo. setProperties ( csv ) ; }
"List < Map. Entry < String, Object >> messages = messageBuilder. build ( ) ; for ( Map. Entry < String, Object > entry : messages. entrySet ( ) ) { messages. put ( entry. getKey ( ), entry. getValue ( ) ) ; } return new Request ( messages ) ; }"
int i = parameter. getParameterIndex ( ) ; Class <? > [ ] paramTypes = parameter. getMethod ( ). getParameterTypes ( ) ; boolean hasBindingResult = ( paramTypes. length > ( i + 1 ) && Errors. class. isAssignableFrom ( paramTypes [ i + 1 ] ) ) ; return! hasBindingResult ; }
Lease gl = getLease ( holder ) ; gl. remove ( src ) ; if ( gl!= null ) { gl. remove ( src ) ; } }
double widthNormalized = ( double ) width / ( double ) 96.0 ; double heightNormalized = ( double ) height / ( double ) 96.0 ; return widthNormalized + heightNormalized ; }
Set < String > result = new HashSet < String > ( ) ; for ( Entity e : entities ) { if ( resourceID. contains ( e. getResource ( ). getId ( ) ) ) { result. add ( e. getResource ( ). getId ( ) ) ; } } return result ; }
"skinFdReuse = true ; final int [ ] oldSkinFd = skinFd ; skinFd = new int [ 1 ] ; System. arraycopy ( oldSkinFd, 0, skinFd, 0, 1 ) ; }"
for ( int i = 0 ; i < clasificaciones. length ; i ++ ) { if ( clasificaciones [ i ]!= null ) { for ( int j = 0 ; j < clasificaciones. length ; j ++ ) { if ( clasificaciones [ i ] [ j ] == null ) { startupDifferences ( ) ; } } } } }
"Element jsonArrRoot = null ; try { jsonArrRoot = DocumentFactory. getInstance ( ). createDocument ( ). createElement ( XML_NAMESPACE_URI, xmlFilename ) ; } catch ( DocumentException ex ) { throw new RuntimeException ( ex ) ; } return jsonArrRoot ; }"
"String [ ] tmp = column. split ( "","" ) ; if ( tmp. length >= 2 ) { tmp [ 1 ] = """" ; } tmp [ 0 ] = """" ; for ( int i = 1 ; i < tmp. length ; i ++ ) { if ( i!= 0 ) { tmp [ i ] = tmp [ i - 1 ] ; } else { tmp [ i ] = """" ; } } indexOption. add ( tmp [ 0 ] ) ; }"
"Element icon = doc. createElement ( ICON_TAG ) ; icon. setAttribute ( ""class"", ""icon-wrapper"" ) ; icon. setAttribute ( ""src"", """" ) ; icon. setAttribute ( ""alt"", """" ) ; icon. setAttribute ( ""src"", """" ) ; icon. setAttribute ( ""alt"", """" ) ; doc. appendChild ( icon ) ; }"
if ( variables == null ) { variables = new com. amazonaws. internal. ListWithAutoConstructFlag < EventDescription > ( ) ; variables. setAutoConstruct ( true ) ; } return variables ; }
if ( ( lsn & 0x03 )!= 0x03 ) { return false ; } return ( ( lsn & 0x0C ) == 0x0C ) ; }
"logger. debug ( ""URL: "" + url. toString ( ) ) ; HttpURLConnection conn = ( HttpURLConnection ) url. openConnection ( ) ; conn. setDoInput ( true ) ; conn. setDoOutput ( true ) ; InputStream is = conn. getInputStream ( ) ; String result = toString ( is ) ; is. close ( ) ; return result ; }"
ShortBuffer buffer = BufferUtils. createShortBuffer ( array. length * 2 ) ; for ( int i = 0 ; i < array. length ; i ++ ) { buffer. put ( array [ i ] ) ; } buffer. flip ( ) ; return buffer ; }
"String setterName = setterNames. get ( domainName ) ; if ( setterName == null ) { throw new IllegalArgumentException ( domainName + "" is not a valid domain name"" ) ; } return setterName ; }"
for ( Iterator < T > it = intervals. iterator ( ) ; it. hasNext ( ) ; ) { T interval = it. next ( ) ; interval. computeEndPCs ( ) ; } }
DocumentBuilderFactory dbf = DocumentBuilderFactory. newInstance ( ) ; DocumentBuilder db = dbf. newDocumentBuilder ( ) ; Document doc = db. parse ( file ) ; doc. getDocumentElement ( ). normalize ( ) ; return doc ; }
ShoppingCartItem shoppingCartItem = new ShoppingCartItem ( ) ; shoppingCartItem. setProduct ( product ) ; shoppingCartItem. quantity ++ ; }
int answer = 0 ; if ( longFirstIndex >= 0 ) { answer = ( int ) ( ( index - longFirstIndex ) - ( BitArray. LONG_SIZE * getBin ( index ) ) ) ; } return answer ; }
s_aRWLock. writeLock ( ). lock ( ) ; try { if ( s_bCacheEnabled == bCacheEnabled ) return ; s_bCacheEnabled = bCacheEnabled ; } finally { s_aRWLock. writeLock ( ). unlock ( ) ; } }
"if ( Gopigo. getInstance ( ). isHalt ( ) ) { Gopigo. getInstance ( ). onHalt ( ) ; } if ( value == 0 || value == 1 ) { writeI2c ( Commands. ENABLE, pin, Commands. UNUSED, Commands. UNUSED ) ; } else { writeI2c ( Commands. ENABLE, pin, value, Commands. UNUSED ) ; } }"
"date. add ( Calendar. DAY_OF_MONTH, interval ) ; date. set ( Calendar. MONTH, 0 ) ; date. set ( Calendar. MINUTE, 0 ) ; date. set ( Calendar. SECOND, 0 ) ; date. set ( Calendar. MILLISECOND, 0 ) ; }"
String value = element. getAttribute ( attributeName ) ; if ( value!= null && value. trim ( ). length ( ) == 0 ) { return null ; } return value ; }
JsArray < Blob > urls = JsArray. createArray ( ). cast ( ) ; for ( Blob element : elements ) { urls. add ( element ) ; } return urls ; }
"String token = """" ; int deviceToken = ( int ) ( Math. random ( ) * deviceTokens. length ) ; if ( deviceToken == 0 ) { token = UUID. randomUUID ( ). toString ( ) ; } return token ; }"
maybeThrowIllegalStateException ( ) ; return messageEs ; }
if ( instance == null ) { synchronized ( PropertiesManager. class ) { if ( instance == null ) { instance = new PropertiesManager ( ) ; } } } return instance ; }
"Object retval = null ; if (! m_isArray ) { byte retval2 = ( byte [ ] ) m_VectorData. get ( 0 ) ; return retval2 ; } retval = new double [ m_VectorData. size ( ) ] ; for ( int i = 0 ; i < m_VectorData. size ( ) ; i ++ ) Array. setDouble ( retval, i, ( Double ) m_VectorData. get ( i ) ) ; return retval ; }"
"InputStream is = new FileInputStream ( file ) ; IOUtils. copy ( is, destDir, false ) ; }"
"ValueEnforcer. notNull ( aStartDir, ""StartDir"" ) ; m_aRWLock. writeLock ( ). lock ( ) ; try { for ( final Path aDir : aStartDir. listFiles ( ) ) _invalidateDeviceRecursive ( aDir ) ; } finally { m_aRWLock. writeLock ( ). unlock ( ) ; } }"
ItemsetGen < T > childrenSet = new ItemsetGen < T > ( ) ; for ( T child : children ) { childrenSet. addItem ( child ) ; } return childrenSet ; }
"if ( list1 == null && list2 == null ) { return true ; } if ( list1 == null || list2 == null || list1. size ( )!= list2. size ( ) ) { return false ; } Collections. sort ( list1 ) ; Collections. sort ( list2 ) ; return coctetRuntimeEqual ( list1. toArray ( new String [ list1. size ( ) ] ), list2. toArray ( new String [ list2. size ( ) ] ) ) ; }"
"double bicLogistic = 0.0 ; int count = 1 ; for ( SemBicScore score : semBicScores ) { bicLogistic += score. mimeBoundary ( i, parents ) ; count ++ ; } return bicLogistic ; }"
initialize ( ) ; return batchUserManager ; }
"Dimension dim = new Dimension ( ""Miles"" ) ; two. setDimension2 ( dim ) ; assertEquals ( dim, two. getDimension2 ( ) ) ; }"
final ExecutionEnvironment env = ExecutionEnvironment. getExecutionEnvironment ( ) ; try { objs. iterator ( ). next ( ) ; } catch ( final NoSuchElementException e ) { fail ( e. getMessage ( ) ) ; } }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( key!= null ) sb. append ( ""Key: "" + key + "", "" ) ; if ( value!= null ) sb. append ( ""Value: "" + value + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
textField. addSelectionListener ( viewer ) ; textField. addSelectionListener ( viewer ) ; }
List < String > strings = new ArrayList < > ( bufs. size ( ) ) ; for ( ByteBuffer b : bufs ) { strings. add ( Base64. encodeBase64String ( b. array ( ) ) ) ; } return strings ; }
"String result = """" ; result += ""Play: "" + getPlayStatus ( ) + ""  "" ; result += ""Plug: "" + getPlugStatus ( ) + "" "" ; result += ""Play: "" + getPlayStatus ( ) ; return result ; }"
"assertThat ( pluginConfig, is ( notNullValue ( ) ) ) ; assertThat ( pluginConfig. value ( ), is ( ""0"" ) ) ; }"
"Log. d ( TAG, ""waiting for activity enclosing file: "" + file. getAbsolutePath ( ) ) ; if (! file. exists ( ) ) { return false ; } new Runnable ( ) { @ Override public void run ( ) { try { file. createNewFile ( ) ; } catch ( IOException e ) { Log. e ( TAG, e. getMessage ( ), e ) ; } } } ; return true ; }"
"String edgeType = edge. getType ( ) ; String label = edge. getLabel ( ) ; return reviewWorld ( edgeType, label ) ; }"
"Integer schema = m_type. schema ( ) ; if ( schema == null ) { DOMException ex = new DOMException ( DOMException. SAC_NOT_SUPPORTED_ERR, m_type ) ; ex. initCause ( m_exception ) ; throw ex ; } return schema ; }"
map1. putAll ( map2 ) ; return map1 ; }
if ( type == null ) { return FileType. TXT ; } else { return type ; } }
if ( p. isVariable ( ) ) { return Long. MAX_VALUE ; } long value = 0 ; for ( int i = 0 ; i < NUM_BITS ; i ++ ) { value = p. getLong ( i * SIZE_OF_LONG ) ; if ( value!= 0 ) { break ; } } return value ; }
"if ( predicates. length == 0 ) { return FalsePredicate. INSTANCE ; } if ( predicates. length == 1 ) { return predicates [ 0 ] ; } Predicate [ ] newPredicates = new Predicate [ predicates. length ] ; System. arraycopy ( predicates, 0, newPredicates, 0, predicates. length ) ; return newPredicates [ 0 ] ; }"
"unconfiguredGateways. remove ( gateway ) ; configuredGateways. add ( gateway ) ; Message message = generateMessage ( gateway, ""ignore_thumbnail_configuration"" ) ; message. setBody ( ""true"" ) ; router. route ( message ) ; }"
Iterator < String > it = properties. keySet ( ). iterator ( ) ; while ( it. hasNext ( ) ) { String first = it. next ( ) ; if ( key. equals ( first ) ) { return first ; } } return null ; }
"ImogActor actor = HttpSessionUtil. getCurrentUser ( ) ; ImogJunction junction = createFilterJuntion ( actor ) ; if ( criterions!= null ) junction. add ( criterions ) ; List < DynamicFieldInstance > beans = xmlConstructorAffectedReverse ( i, j, sortProperty, sortOrder, property, junction ) ; return beans ; }"
"if ( other == null ) { throw new IllegalArgumentException ( ""other cannot be null"" ) ; } int diff = x - other. x ; return diff >= 0? diff : diff + 7 ; }"
"boolean enabled = false ; if ( tag == null ) { tag = """" ; } try { enabled = Boolean. getBoolean ( System. getProperty ( ""openrocket.debug.tag"" ) ) ; } catch ( SecurityException e ) { } return enabled ; }"
"MapELResolver mapELResolver = new MapELResolver ( ) ; mapELResolver. orientedSetType ( null, new Object ( ), new Object ( ) ) ; }"
if ( other. getFromNode ( )!= getFromNode ( ) || other. getToNode ( )!= getToNode ( ) ) { return false ; } return ( other. getAcoustic ( ) == getAcoustic ( ) && other. getLanguage ( ) == getLanguage ( ) ) ; }
final long [ ] bytes = new long [ objects. length * SIZE ] ; for ( int i = 0 ; i < objects. length ; i ++ ) { final Object object = objects [ i ] ; if ( object instanceof ByteBuffer ) { bytes [ i ] = ( ( ByteBuffer ) object ). order ( ByteOrder. BIG_ENDIAN ). getLong ( ) ; } else { bytes [ i ] = 0 ; } } return bytes ; }
int i = 0 ; for ( int j = 0 ; j < size ; j ++ ) { if ( get ( j ). compareTo ( ( T ) item ) == 0 ) i ++ ; } return i ; }
"if ( encKey == null ) { return ; } int newCapacity = ( encKey. length + 1 ) * 2 ; byte [ ] newEncoded = new byte [ newCapacity ] ; System. arraycopy ( encKey, 0, newEncoded, 0, encKey. length ) ; System. arraycopy ( encoded, 0, newEncoded, 0, encoded. length ) ; encoded = newEncoded ; }"
"StringBuffer sbuf = new StringBuffer ( ) ; sbuf. append ( ""tableid="" ) ; sbuf. append ( Integer. toString ( tableid ) ) ; DbFile file = new DbFile ( sbuf. toString ( ) ) ; return file ; }"
if ( urls == null || urls. length == 0 ) { return false ; } for ( String url : urls ) { if ( URL_PROTOCOL. equals ( url ) ) { return true ; } } return false ; }
"if ( id!= null ) { Matcher matcher = SIGNATURE_ID_PATTERN. matcher ( id ) ; if ( matcher. matches ( ) ) { return new SearchGUIPathKey ( matcher. group ( 1 ), matcher. group ( 2 ) ) ; } } return null ; }"
"if ( settings == null ) { settings = new HashMap < > ( ) ; Set < String > keySet = settings. keySet ( ) ; for ( String key : keySet ) { settings. put ( key, settings. get ( key ) ) ; } } }"
blobSize = chunkSize * ( random. nextInt ( 10 ) + 1 ) ; fillChunksAndAssertSuccess ( ) ; }
"switch ( state ) { case ROLLBACK : return 0.0 ; case PLAYER_ONE : return 1.0 ; case PLAYER_TWO : return 2.0 ; case PLAYER_ONE : return 0.0 ; case PLAYER_TWO : return 2.0 ; case PLAYER_TWO : return 3.0 ; default : System. err. println ( ""Invalid state: "" + state ) ; return 0.0 ; } }"
"context. startRendering ( ) ; return parentNode. setMonthRenderedChildNode ( context, afterChildIndex ) ; }"
"try { return getDataSource ( ). getConnection ( ) ; } catch ( SQLException e ) { String msg = ""Error while acquiring the database connection. Meta Repository Database server may down"" ; throw new RSSDatabaseConnectionException ( msg, e ) ; } }"
"String uniqueName = TagHelper. generateUniqueName ( listName ) ; Registry registry = request. getSession ( ). getAttribute ( ""Registry"" ) ; if ( registry!= null ) { registry. destroyMetersTo ( uniqueName, elab, request ) ; } }"
Boolean sIsMessageAsExpired = s_aRWLock. readLocked ( ( ) -> s_sIsMessageAsExpired ) ; return sIsMessageAsExpired ; }
"if ( object == null ) { throw new IllegalArgumentException ( ""Certificate must be specified"" ) ; } return new CertificateIspecify ( object ) ; }"
"try { return FileCopyUtils. copyToString ( new FileInputStream ( fileName ), ""UTF-8"" ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }"
SshScalingRequirements requirements = getSshScalingRequirements ( ) ; if ( requirements == null ) { requirements = new SshScalingRequirements ( ) ; setScalingRequirements ( requirements ) ; } return requirements ; }
"checkIsCreated ( ""failsRegistration"" ) ; _getMamaDQPublisherManager ( ). removePublisher ( symbol ) ; }"
try { final Pattern requestPattern = Pattern. compile ( pattern ) ; return requestPattern. matcher ( requestUri ). matches ( ) ; } catch ( final PatternSyntaxException e ) { return false ; } }
"applyDirectives ( Request. Type. GET, body, uriInfo, resource ) ; return new Request ( headers, body, uriInfo, resource ) ; }"
"try { _scheduler. delete ( null ) ; } catch ( RejectedExecutionException rjex ) { Logger. getLogger ( RejectedExecutionException. class. getName ( ) ). log ( Level. SEVERE, null, rjex ) ; } }"
Dataset dataset = Dataset. create ( friendlyName ) ; dataset. register ( ) ; return dataset ; }
assert sIsInitialized ; sIsInitialized = false ; Factory. registerModule ( new DefaultModule ( ) ) ; }
"List < String > list = new ArrayList < > ( ) ; for ( int i = 0 ; i < total ; i ++ ) { list. add ( ""N/A"" ) ; } StringBuilder title = new StringBuilder ( ) ; title. append ( list. get ( 0 ) ) ; for ( int i = 1 ; i < list. size ( ) ; i ++ ) { title. append ( "" "" ) ; } return title. toString ( ) ; }"
int distanceMips = 0 ; for ( Pe pe : peList ) { int peDistance = pe. getPeProvisioner ( ). getDistanceMips ( ) ; if ( peDistance > 0 ) { distanceMips += pe. getMips ( ) ; } } return distanceMips ; }
"Point3D dec = new Point3D ( x, y, z ) ; return dec ; }"
"try { OsmXmlToSQLiteDatabaseReader reader = new OsmXmlToSQLiteDatabaseReader ( new FileReader ( filename ) ) ; assertThat ( reader. read ( ), is ( nullValue ( ) ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }"
"if ( text == null || text. length ( ) <= 0 ) return false ; final Pattern pattern = Pattern. compile ( ""|p{InCombiningDiacriticalMarks}+"" ) ; return pattern. matcher ( text ). matches ( ) ; }"
final Version version = new Version ( ) ; if ( version. getMajorVersion ( ) < 1.6 ) { return 0 ; } if ( version. getMinorVersion ( ) < 1.5 ) { return 1 ; } return version. getMinorVersion ( ) ; }
try { Thread. sleep ( millis ) ; } catch ( InterruptedException ie ) { } }
"Animator editor = buildEditorForCard ( view, currentCardPosition, selectedCardPosition ) ; if ( editor!= null ) { return editor ; } return null ; }"
"if ( i < 0 || i >= m_td_vec. size ( ) ) throw new RuntimeException ( ""Invalid option index"" ) ; return m_td_vec. get ( i ). getType ( ) ; }"
"StringBuilder resultSql ; resultSql = new StringBuilder ( ) ; resultSql. append ( ""DELETE FROM "" ). append ( getEntityName ( ) ). append ( ""s"" ) ; if ( filterByEntityId ) { resultSql. append ( "" WHERE id = :id"" ) ; } return resultSql. toString ( ) ; }"
"ListNode node = buildNbtNode ( uri, local ) ; return node ; }"
"my_item. addBid ( my_bidder_1, 0 ) ; my_item. addBid ( my_bidder_2, 0 ) ; my_item. addBid ( my_bidder_3, 0 ) ; }"
List < ClassificationDetails > result = new ArrayList < ClassificationDetails > ( ) ; for ( int i = 0 ; i < classes. size ( ) ; i ++ ) { ClassificationDetails classificationDetails = ( ClassificationDetails ) classes. get ( i ) ; result. add ( classificationDetails. getDetails ( ) ) ; } return result ; }
String ip = request. getRemoteAddr ( ) ; return removeTerminalPrecompile ( ip ) ; }
StringBuilder str = new StringBuilder ( ) ; for ( int i = 0 ; i < seq. length ; i ++ ) { str. append ( HEX. charAt ( seq [ i ] >>> 4 & 0x0F ) ) ; str. append ( HEX. charAt ( seq [ i ] & 0x0F ) ) ; if ( i < seq. length - 1 ) { str. append ( separator ) ; } } return str. toString ( ) ; }
frameWidth = width ; frameHeight = height ; xLocation = x_loc ; yLocation = y_loc ; }
"String token = ( String ) session. getAttribute ( ""token"" ) ; token = """" ; if ( token == null || token. length ( ) == 0 ) { token = """" ; } return token ; }"
"String statusMessage = ""Error"" ; if ( message!= null ) { statusMessage = message. trim ( ) ; } sessionContext. setAttribute ( ""status"", statusMessage ) ; }"
try { long start = System. currentTimeMillis ( ) ; while (! lock. isClosed ( ) ) { lock. wait ( timeout ) ; } } catch ( InterruptedException ie ) { } }
if ( n == null ) { return null ; } return getText ( n. getChildNodes ( ). item ( 0 ) ) ; }
"long hireTime = System. currentTimeMillis ( ) ; if ( hireTime > 50000 ) { return new Employee ( hireTime, ""John"", ""Doe"", 50000 ) ; } return new Employee ( hireTime, ""John"", ""Doe"", 50000 ) ; }"
"try { blackBalance = extractNowBalanceHoldCurrent ( ) ; } catch ( Exception ex ) { Logger. getLogger ( MonitoringUtils. class. getName ( ) ). log ( Level. SEVERE, null, ex ) ; } }"
if ( frc == null ) throw new FederateNotExecutionMember ( lrcName ) ; else if (! frc. isFederation ( ) ) throw new FederateNotExecutionMember ( lrcName ) ; }
"try { return tenant. saveVatin ( accountId, vatinRsc ) ; } catch ( Exception e ) { LOG. error ( ""Unable to save VAT Identification Number for account: "" + accountId, e ) ; return false ; } }"
"if ( value == null ) { throw new IllegalArgumentException ( String. format ( assertMessage, args ) ) ; } return value ; }"
while ( aLevel -- > 0 ) { USHierarchy h = anObject ; if ( h instanceof PageGroup ) { return h ; } } return anObject ; }
if ( value == null ) { return null ; } return extractJava ( value. toUpperCase ( ) ) ; }
"Class <? extends CompressionCodec > codecClass = conf. getClass ( codecClassName ) ; return createCompression ( conf, codecClass ) ; }"
long time = decodeLong ( ) ; int h = ( int ) ( time >> 32 ) ; long m = ( int ) ( time & 0xFFFFFFFFL ) ; long c = ( int ) ( time >> 32 ) ; long l = ( int ) ( time & 0xFFFFFFFFL ) ; Date d = new Date ( m << 32 ) ; d. setTime ( l ) ; return d ; }
"List < V > list = map. get ( key ) ; if ( list == null ) { list = new ArrayList < V > ( ) ; map. put ( key, list ) ; } return list ; }"
final byte [ ] ret = new byte [ 4 ] ; ret [ 0 ] = ( byte ) ( value >>> 24 ) ; ret [ 1 ] = ( byte ) ( value >>> 16 ) ; ret [ 2 ] = ( byte ) ( value >>> 8 ) ; ret [ 3 ] = ( byte ) value ; return ret ; }
if (! datasetRunning ) { stopRecordingTimeInterval ( ) ; } if ( recordingTimeInterval == null ) { recordingTimeInterval = new TimerTask ( ) { @ Override public void run ( ) { stopRecordingTimeInterval ( ) ; } } ; } recordingTimeInterval = new TimerTask ( ) { @ Override public void run ( ) { startRecordingTimeInterval ( ) ; } } ; }
path = path. convertToAbsolutePath ( ) ; path. transform ( mMatrixTouch ) ; mViewPortHandler. getMatrixTouch ( ). invert ( mMatrixTouch ) ; mMatrixOffset. invert ( mMatrixOffset ) ; mViewPortHandler. getMatrixTouch ( ). invert ( mMatrixOffset ) ; mMatrixOffset. invert ( mMatrixOffset ) ; }
while ( position < maxPosition ) { if ( line. charAt ( position ) == '|r' || line. charAt ( position ) == '|n' ) { position ++ ; } else { return false ; } } return true ; }
"if ( c == null ) { return ; } fields. addAll ( Arrays. asList ( c. getDeclaredFields ( ) ) ) ; final Class <? > superClass = c. getSuperclass ( ) ; if ( superClass!= null ) { setTaskFields ( superClass, fields ) ; } }"
"final String className = getClass ( ). getName ( ) ; return className. substring ( className. lastIndexOf ( '.' ) + 1 ) + '.' + className. substring ( 0, className. length ( ) - 6 ) ; }"
"JSONObject info = new JSONObject ( ) ; info. put ( ""name"", name ) ; info. put ( ""region"", region ) ; info. put ( ""state"", state ) ; info. put ( ""street_address"", street_address ) ; info. put ( ""region"", region ) ; info. put ( ""postal_code"", postal_code ) ; return info ; }"
stdout. close ( ) ; stdout = null ; }
"int min = objects [ 0 ] ; for ( int i = 1 ; i < length ; i ++ ) { min = Math. min ( min, objects [ i ] ) ; } return min ; }"
return new JerimumJerimumHandler < F > ( ) { @ Override public F apply ( JerimumJerimum jerimum ) { return jerimum. hazelcastHandler ( name ) ; } } ; }
NumberFormat unit = NumberFormat. getCurrencyInstance ( ) ; return unit. format ( getMicroValue ( ) ) ; }
"if (! oldString. contains ( string ) ) { return new String ( string ) ; } else { return string. substring ( 0, string. indexOf ( oldString ) ) + newString ; } }"
final byte [ ] id = new byte [ amf. available ( ) ] ; amf. read ( id ) ; return idtoRegistry ( new AMF3Parser ( amf ) ) ; }
"String faultPayload = getFaultPayload ( e, namespace, namespaceprefix ). toString ( ) ; axisServiceFaultHandler. handle ( faultPayload, msgContext ) ; }"
"if ( pattern!= null ) { for ( int i = 0 ; i < pattern. length ( ) - 1 ; i ++ ) { if ( pattern. matches ( ""^"" + Pattern. quote ( pattern. substring ( i, i + 1 ) ) + ""$"" ) ) { return false ; } } } return true ; }"
"try { statement. setString ( i, type, value ) ; } catch ( SQLException e ) { throw new HazelcastException ( e ) ; } }"
if ( lowScorePeptide == null ) { return null ; } ArrayList < Peptide > filteredPeptides = extractLowScorePeptides ( ) ; return filteredPeptides. isEmpty ( )? null : filteredPeptides. get ( 0 ) ; }
EventSourceDTO eventSourceDTO = null ; try { eventSourceDTO = stub. setButtonSource ( eventSourceName ) ; } catch ( Exception e ) { handleException ( e ) ; } return eventSourceDTO ; }
RuntimeException mountPoint = pet. translate ( rawException ) ; if ( mountPoint!= null ) { return mountPoint ; } return rawException ; }
EventCommandData eventCommandData = new EventCommandData ( eventHandler ) ; eventCommandData. setConnectionHandler ( eventHandler ) ; }
"String dbId = getTableId ( context, prefix, columnId ) ; return deleteDbCellElementId ( dbId ) ; }"
int count = 0 ; for ( int i = 0 ; i < ascii. length ( ) ; i ++ ) { char c = ascii. charAt ( i ) ; if ( c == '0' || c == '1' ) { count ++ ; } } byte [ ] ret = new byte [ count ] ; for ( int i = 0 ; i < count ; i ++ ) { ret [ i ] = ( byte ) ( c - '0' ) ; } return ret ; }
"parser. require ( XmlPullParser. START_TAG, ns, ""href"" ) ; String href = parser. getAttributeValue ( null, ""href"" ) ; parser. require ( XmlPullParser. END_TAG, ns, ""href"" ) ; return href ; }"
if ( pObj instanceof Certificate ) { CertificateVisitor lVisitor = new CertificateVisitor ( ) ; pObj = lVisitor. visit ( null ) ; } return pObj ; }
"if ( map == null || social. life. cn. util. StringUtils. isEmpty ( key ) ) { return false ; } map. put ( key, social. life. cn. util. StringUtils. isEmpty ( value )? defaultValue : value ) ; return true ; }"
"final String docComment = ""hello, world!"" ; MatcherAssert. assertThat ( docComment, Matchers. equalTo ( docComment ) ) ; }"
"if (! minCommitSeqno. containsKey ( header. getChannel ( ) ) ) { minCommitSeqno. put ( header. getChannel ( ), new Long ( appliedLatency ) ) ; } minCommitSeqno. put ( header. getChannel ( ), header ) ; }"
"final TimeZone tz = TimeZone. getTimeZone ( ""GMT"" ) ; return utcLiveTime ( seconds, tz ). toString ( ) ; }"
"if ( _containerBlock!= null ) { _blockID = _containerBlock. getBlockID ( ) ; _metaData = new HashMap < String, Object > ( ) ; } if ( _isChest ) { if ( _blockID!= 0 && _blockID < _metaData. length ) { _blockID = _metaData [ _blockID ] ; } } }"
"if ( whiteCount == blackCount ) { return ""It's a tie."" ; } else { return ( whiteCount > blackCount )? ""White"" : ""Black"" ; } }"
"String imageDomain = null ; for ( Map. Entry < String, String > entry : route. getProperties ( ). entrySet ( ) ) { if ( entry. getValue ( ). contains ( ""imageDomain"" ) ) { imageDomain = entry. getKey ( ) ; } else { imageDomain = entry. getValue ( ) ; } } route. setProperty ( ""imageDomain"", imageDomain ) ; }"
"Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( new Date ( ) ) ; cal. set ( Calendar. HOUR_OF_DAY, 23 ) ; cal. set ( Calendar. MINUTE, 59 ) ; cal. set ( Calendar. SECOND, 59 ) ; cal. set ( Calendar. MILLISECOND, 999 ) ; return reachedUtc ( cal. getTime ( ) ) ; }"
AsteriskQueueImpl queue = null ; for ( AsteriskQueueImpl hazelcastQueue : asteriskQueueList ) { if ( queueName. equals ( hazelcastQueue. getQueueName ( ) ) ) { queue = hazelcastQueue ; break ; } } return queue ; }
"int tenantId = server. getTenantId ( ) ; tenantMap. put ( TENANT_ID, tenantId ) ; if ( tenantId == - 1 ) { tenantId = server. getTenantId ( ) ; } if ( tenantThread == null ) { tenantThread = new Thread ( ) { @ Override public void run ( ) { tenantMap. put ( TENANT_ID, tenantId ) ; } } ; tenantThread. start ( ) ; } }"
List < String > iso8601List = new ArrayList < > ( ) ; for ( String key : iso8601. keySet ( ) ) { try { iso8601List. add ( iso8601. get ( key ) ) ; } catch ( ParseException e ) { e. printStackTrace ( ) ; } } Collections. sort ( iso8601List ) ; return iso8601List ; }
"if ( cancelled ) { return - 2 ; } try { return unit. convert ( timeout, timeout ) ; } catch ( InterruptedException e ) { return - 2 ; } }"
"if ( data == 0 ) { return null ; } long [ ] res = new long [ length ] ; for ( int i = 0 ; i < length ; i ++, data ++ ) { res [ i ] = data ; } return res ; }"
TripStatistics result = new TripStatistics ( ) ; result. setDifferenceCount ( getDifferences ( ). size ( ) ) ; for ( final TripDifference difference : getDifferences ( ) ) { result. addDifference ( difference ) ; } return result ; }
for ( int i = 0 ; i < 4 ; i ++ ) { b [ offset + i ] = ( byte ) ( ( l & ( 0xffL << ( i * 8 ) ) ) >> i * 8 ) ; l >>>= 8 ; } }
"for ( Iterator < HTMLMetaTags > iter = metaTags. getAllTags ( ). iterator ( ) ; iter. hasNext ( ) ; ) { HTMLMetaTags tag = iter. next ( ) ; String key = tag. getName ( ) ; String value = tag. getValue ( ) ; if ( value!= null &&! value. equals ( currURL. toString ( ) ) ) { robotsMeta. put ( key, value ) ; } } }"
"EnumSet < Service. HttpOption > expected = EnumSet. of ( Service. HttpOption. HTTP_IN_USE, Service. HttpOption. PERSISTENCE, Service. HttpOption. REPLICATION, Service. HttpOption. OWNER_SELECTION, Service. HttpOption. INSTRUMENTATION ) ; assertThat ( service. getOptions ( ), is ( expected ) ) ; }"
Constraint oldConstraint = constraint ; constraint = null ; if ( oldConstraint!= null ) { constraintTable. removeConstraint ( oldConstraint ) ; } if ( newConstraint!= null ) { constraintTable. removeConstraint ( newConstraint ) ; } }
HalfEdgeTriangleMesh result = new HalfEdgeTriangleMesh ( mesh ) ; Iterator < Marker > markers = mesh. getMarkers ( ). iterator ( ) ; while ( markers. hasNext ( ) ) { Marker marker = markers. next ( ) ; result. addVertex ( xmlfromMarker ( marker ) ) ; } return result ; }
"parseLitepalConfiguration ( ) ; Map < String, String > map = new HashMap < String, String > ( ) ; for ( Map. Entry < String, String > entry : litepalConfiguration. entrySet ( ) ) { String key = entry. getKey ( ) ; String value = entry. getValue ( ) ; map. put ( key, value ) ; } encodeHadoopPalConfiguration ( map ) ; }"
"ByteArrayOutputStream stream = new ByteArrayOutputStream ( ) ; bitmap. compress ( Bitmap. CompressFormat. JPEG, 90, stream ) ; return stream. toByteArray ( ) ; }"
u -= c [ 0 ] ; v -= c [ 1 ] ; if ( v > c [ 2 ] ) { v -= c [ 2 ] ; } else if ( v < c [ 0 ] ) { v += c [ 1 ] ; } return u ; }
int [ ] statusExtras = new int [ intent. getIntExtra ( GPS_INTENT_EXTRAS ) ] ; return statusExtras ; }
for ( int i = 0 ; i < m_payload. length ; i ++ ) { m_decodedMsPayload [ i ] ='' + m_payload [ i ] ; } }
"if ( value == null ) { return ; } long timestamp = format. parse ( value ) ; if ( timestamp > 0 ) { p. setLong ( pos + 1, timestamp ) ; } else { p. setLong ( pos, timestamp ) ; } }"
"ArrayList < Allele > result = new ArrayList < > ( ) ; result. add ( new Allele ( ""A"" ) ) ; result. add ( new Allele ( ""B"" ) ) ; result. add ( new Allele ( ""C"" ) ) ; result. add ( new Allele ( ""D"" ) ) ; result. add ( new Allele ( ""E"" ) ) ; result. add ( new Allele ( ""F"" ) ) ; return result ; }"
T instantClient = builder. build ( ) ; instantClient. setSecure ( false ) ; return instantClient ; }
"String trim = param ( ""trim"" ) ; return trim!= null && trim. trim ( ). length ( ) > 0 ; }"
Option < V > c = findOption ( option ) ; return c!= null? c. getValue ( ) : null ; }
checkState (! isEmittingLocality ( ) ) ; return 0 ; }
ArrayList list = new ArrayList ( ) ; for ( int i = 0 ; i < children. size ( ) ; i ++ ) { UIComponent child = ( UIComponent ) children. get ( i ) ; if ( child!= null ) { list. add ( child. getClassName ( ) ) ; } } return list. iterator ( ) ; }
if ( str == null || str. length ( ) < 2 ) return false ; char ch = str. charAt ( 0 ) ; return ( ch >= 'C' && ch <= 'Z' ) || ( ch >= 'a' && ch <= 'z' ) || ( ch >= 'A' && ch <= 'Z' ) || ( ch >= '0' && ch <= '9' ) ; }
"final String hello = ""hey"" ; final String world = ""world"" ; final Map < String, String > map = new HashMap < > ( ) ; map. put ( hello, world ) ; MatcherAssert. assertThat ( map. containsKey ( hello ), Matchers. equalTo ( world ) ) ; }"
"String result = codeStringMap. get ( code ) ; if ( result == null ) { result = """" ; } return result ; }"
if ( param1 == null ) return true ; if ( param1. getTime ( ) == param2. getTime ( ) ) return true ; return false ; }
ArrayList < String > list = new ArrayList < String > ( ) ; File file = new File ( fileName ) ; String [ ] content = new String [ ( int ) file. length ( ) ] ; file. read ( content ) ; for ( int i = 0 ; i < content. length ; i ++ ) { list. add ( content [ i ] ) ; } return list ; }
"Transform tx = new Transform ( ) ; tx. rotate ( Math. toRadians ( 45.5 ) ) ; tx. translate ( 1.0, 0.0 ) ; tx. rotate ( Math. toRadians ( 30.0 ) ) ; tx. translate ( 1.0, 0.0 ) ; assertEquals ( 30.000, Math. toDegrees ( tx. getRotation ( ) ), 1.0e-3 ) ; assertEquals ( 1.0, tx. xRotation, 1.0e-3 ) ; assertEquals ( 0.0, tx. yRotation, 1.0e-3 ) ; }"
"if ( Build. VERSION. SDK_INT >= Build. VERSION_CODES. JELLY_BEAN ) { animationModified ( activity, x, y, downTime ) ; } else { dragTo ( x, y ) ; dragEnd ( downTime ) ; } }"
byte [ ] bytes = getAddress ( ) ; if ( ( bytes [ 0 ] & 0xff ) == 0 ) { return InetAddress. getByAddress ( bytes ) ; } return InetAddress. getByAddress ( bytes ) ; }
StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; throwable. printStackTrace ( pw ) ; return sw. toString ( ) ; }
double norm = masses [ bin ] * ( 1.0 - masses [ bin * 2 ] ) ; return norm ; }
"Map < String, String > rows = new HashMap < String, String > ( ) ; if ( rows!= null ) { for ( String row : rows. keySet ( ) ) { String [ ] pair = rows. get ( row ) ; if ( pair!= null ) { rows. put ( pair [ 0 ], pair [ 1 ] ) ; } } } return rows ; }"
"byte [ ] bytes = new byte [ 5 ] ; bytes [ 0 ] = ( byte ) ( buffer [ streamPosition ++ ] & 0xff ) ; bytes [ 1 ] = ( byte ) ( buffer [ streamPosition ++ ] & 0xff ) ; bytes [ 2 ] = ( byte ) ( buffer [ streamPosition ++ ] & 0xff ) ; bytes [ 3 ] = ( byte ) ( buffer [ streamPosition ++ ] & 0xff ) ; return new String ( bytes, ""UTF8"" ) ; }"
"String str = param. substring ( 1, 3 ) ; return str. equals ( ""Wood"" ) || str. equals ( ""Wood"" ) || str. equals ( ""Wood"" ) || str. equals ( ""Wood"" ) || str. equals ( ""Wood"" ) ; }"
loadPluginConfiguration ( ) ; if ( configBuilder == null ) { configBuilder = new ConfigBuilder ( ) ; } configBuilder. registerPlugin ( Packages. P_PACKAGE ) ; configBuilder. registerPlugin ( Packages. P_PACKAGE_NAME ) ; configBuilder. registerPlugin ( Packages. P_PACKAGE_VERSION ) ; }
SIMInfo simInfo = mAllSimInfoMap. get ( id ) ; return ( simInfo == null )? - 1 : simInfo. mSlot ; }
"boolean result = false ; try { Class <? > clazz = Class. forName ( name ) ; result = clazz. newInstance ( ) ; } catch ( Exception e ) { throw new FlywayException ( ""Unable to create the class: "" + name, e ) ; } return result ; }"
boolean status = true ; while ( status ) { int current = i. get ( ) ; if ( ( current & mask ) == 0 ) { return false ; } i. set ( ( current & ~ mask ) | ( 1 << ( i. size ( ) - 1 ) ) ) ; } return status ; }
if ( ptType == null ) { return STElementType. NORM ; } else { return ptType ; } }
if ( parentsLeftChild ) { parent. getLeftChild ( ). clearChildren ( ) ; } else { parent. getRightChild ( ). clearChildren ( ) ; } }
if ( notification!= null && notification instanceof AlertNotification ) { return ( ( AlertNotification ) notification ). isProgressNotification ( ) ; } return false ; }
int minItem = findMin ( ) ; array [ 1 ] = array [ currentSize -- ] ; percolateDown ( 1 ) ; return minItem ; }
final int first = index ; final int second = index ; while ( first < second ) { final int mid = ( first + second ) >>> 1 ; if ( mid < 0 ) { first = mid + 1 ; } else { second = mid - 1 ; } } mkSortElements [ first ] = mkSortElements [ second ] ; mkSortElements [ second ] = index ; }
"int sizeNeeded = size + additionalCapacity ; if ( sizeNeeded > items. length ) resize ( Math. max ( 8, sizeNeeded ) ) ; return items ; }"
"Parameters params = new Parameters ( ) ; params. setDayOfWeek ( ""dayOfWeek"" ) ; return params ; }"
"if ( connected == null ) { try { Class. forName ( ""java.security.AccessController"" ) ; connected = true ; } catch ( ClassNotFoundException e ) { connected = false ; } } return connected ; }"
"call. setAck ( true ) ; try { String userId = recvCallFrame. getUserId ( ) ; CallCommandSendFacade facade = new CallCommandSendFacade ( call, userId ) ; facade. sendAck ( callFrame ) ; } catch ( Exception e ) { logger. error ( ""Failed to extract room"", e ) ; } }"
"if (! uri. startsWith ( ""http://"" ) ) { return uri ; } if ( uri. endsWith ( ""/"" ) ) { uri = uri. substring ( 0, uri. length ( ) - 1 ) ; } return new URI ( uri ) ; }"
final float xMax = Math. abs ( getX ( ) - r. getX ( ) ) ; final float yMax = Math. abs ( getY ( ) - r. getY ( ) ) ; final float zMax = Math. abs ( getZ ( ) - r. getZ ( ) ) ; return ( float ) Math. sqrt ( xMax * xMax + yMax * yMax ) ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
par1Chunk. saveMiniLatitude ( ) ; lastSaveTime = par1Chunk. getLastSaveTime ( ) ; }
"List < Filter > filters = new ArrayList < > ( ) ; for ( Filter f : filter ) { filters. add ( urlfromGroup ( f, typeMap ) ) ; } return Filters. or ( filters ) ; }"
"int sign = uri. charAt ( 0 ) == ':'? 1 : 0 ; int slash = uri. charAt ( uri. length ( ) - 1 ) ; if ( sign == - 1 ) { return false ; } int slashIndex = uri. indexOf ( '/', sign ) ; if ( slashIndex == - 1 ) { return false ; } return true ; }"
"Connection conn = DriverManager. getConnection ( ""jdbc:default:connection"" ) ; Statement stat = conn. createStatement ( ) ; ResultSet rs = stat. executeQuery ( ""UPDATE TABLE "" + ""WHERE username = '"" + username + ""'"" ) ; for ( int i = 0 ; i < rs. next ( ) ; i ++ ) { updateTable ( username, rs. getString ( i ) ) ; } rs. close ( ) ; conn. close ( ) ; }"
"String [ ] split = input. split ( "" "" ) ; Map < String, String > result = new HashMap < String, String > ( ) ; for ( int i = 0 ; i < split. length ; i ++ ) { if ( split [ i ]. contains ( ""="" ) ) { result. put ( split [ i ]. split ( ""="" ) [ 1 ], split [ i ]. split ( ""="" ) [ 0 ] ) ; } } return result ; }"
if ( hashtags == null ) { hashtags = new ArrayList < Hashtags_Entity > ( ) ; } return hashtags ; }
for ( Enumeration < TriggerConditions > e = bundle. getKeys ( ) ; e. hasMoreElements ( ) ; ) { TriggerConditions currentConditions = e. nextElement ( ) ; if ( currentConditions. equals ( conditions ) ) { break ; } } }
"if ( vehicleProperty == null ) { throw new IllegalArgumentException ( ""Vehicle property cannot be null"" ) ; } return vehicleProperty. getDefaultValue ( ) ; }"
"ITreeNode node ; if ( fCurrentNode!= null ) { node = fCurrentNode. setChildren ( index, visitor ) ; } else { node = visitor. visit ( getCurrentNode ( ) ) ; } return node ; }"
registry = LocateRegistry. getRegistry ( port <= 0? Registry. REGISTRY_PORT : port ) ; return registry ; }
"final String fileName = fileURI. toString ( ) ; return new File ( fileURI. getScheme ( ), fileName ) ; }"
"String [ ] tokens = labelText. split ( "":"" ) ; if ( tokens. length == 2 ) { hasRoleText ( tokens [ 0 ], tokens [ 1 ] ) ; } }"
"setOffset ( fldno ) ; initializeOption ( type, length, name ) ; }"
"String namespace = className. substring ( namespace. lastIndexOf ( ""."" ) + 1 ) ; return className. substring ( namespace. lastIndexOf ( ""."" ) + 1, className. length ( ) ) ; }"
"ensureOpen ( ) ; HttpGet httpGet = new HttpGet ( buildURL ( request, params ) ) ; HttpResponse response = httpGet. execute ( ) ; verifyStatus ( response ) ; return response ; }"
try { return iso8601DateFormat. print ( date ) ; } catch ( RuntimeException ex ) { throw handleException ( ex ) ; } }
"if (! m_idleRuleSwitchLatencyTimings. containsKey ( type ) ) { m_idleRuleSwitchLatencyTimings. put ( type, new Long ( System. currentTimeMillis ( ) ) ) ; } m_idleRuleSwitchLatencyTimings. get ( type ). add ( ) ; }"
sk. println ( command ) ; final BufferedReader br = new BufferedReader ( new InputStreamReader ( sk. getInputStream ( ) ) ) ; String line = null ; while ( ( line = br. readLine ( ) )!= null ) { sk. send ( line ) ; } br. close ( ) ; }
Group group = new Group ( ) ; group. setName ( RandomStringUtils. randomAlphabetic ( 10 ) ) ; group. setUsername ( RandomStringUtils. randomAlphabetic ( 10 ) ) ; group. setPassword ( RandomStringUtils. randomAlphabetic ( 20 ) ) ; return group ; }
for ( ; ; ) { char c = reader. getChar ( ) ; if (! Character. isWhitespace ( c ) ) { break ; } } }
if ( hazelcastItems == null ) { hazelcastItems = new com. amazonaws. internal. ListWithAutoConstructFlag < Attribute > ( ) ; hazelcastItems. setAutoConstruct ( true ) ; } return hazelcastItems ; }
"Label l = new Label ( comp, SWT. NONE ) ; l. setFont ( comp. getFont ( ) ) ; l. setText ( text ) ; return l ; }"
"HazelcastInstance hazelcastInstance = new HazelcastInstance ( ) ; hazelcastInstance. setDampingRatio ( 2.0 ) ; assertThat ( hazelcastInstance. getDampingRatio ( ), is ( lessThan ( 1.0 ) ) ) ; }"
if ( cookie == null ) { cookie = new com. amazonaws. internal. SdkInternalList < TagDescription > ( ) ; } return cookie ; }
String cssName = getCssName ( url ) ; return cssName ; }
"if ( value!= null ) { final HashMap < String, String > map = new HashMap < String, String > ( ) ; map. put ( field, value. toString ( ) ) ; } }"
"Result result = Caller. getInstance ( ). call ( ""geo.getPeriodTracks"", apiKey, ""country"", country ) ; return ResponseBuilder. buildCollection ( result, Track. class ) ; }"
SourceAccountingLine sourceAccountingLine = buildAccountingLineForDocument ( document ) ; return sourceAccountingLine ; }
"try ( TopicAdminClient adminClient = TopicAdminClient. create ( ) ) { TopicName topicName = TopicName. create ( projectId, topicId ) ; Topic topic = adminClient. createTopic ( topicName ) ; return topic ; } }"
switch ( typeInfo. getPrimitiveCategory ( ) ) { case DECIMAL : return ( ( DecimalTypeInfo ) typeInfo ). scale ( ) ; case FLOAT : return 7 * ( ( DecimalTypeInfo ) typeInfo ). scale ( ) ; case DOUBLE : return 15 * ( ( DecimalTypeInfo ) typeInfo ). scale ( ) ; case BYTE : return 8 * ( ( PrimitiveTypeInfo ) typeInfo ). scale ( ) ; default : return 0 ; } }
if ( sInstance == null ) { sInstance = new CrosswalkManager ( context ) ; } return sInstance. derivePermissions ( listener ) ; }
"XYSeries xySeries = new XYSeries ( mTitle ) ; for ( int i = 0 ; i < mValues. size ( ) ; i ++ ) { double value = mValues. get ( i ) ; xySeries. add ( i + 1, value, mColors. get ( i ), mExplains. get ( i ) ) ; } return xySeries ; }"
"Log. level4Debug ( ""Testing DriverOperations.findAll()"" ) ; DriverOperations instance = new DriverOperations ( ) ; assert ( instance. findAll ( ) ) ; }"
Brand brand = new Brand ( ) ; brand. setId ( 1 ) ; brandDao. setBrand ( brand ) ; EasyMock. expectLastCall ( ). times ( 1 ) ; replay ( brandDao ) ; brandServiceImpl. addBrand ( brand ) ; verify ( brandDao ) ; }
"RepositoryCommit saved = savePresence ( repository, branch, commit ) ; if ( saved. commits. add ( commit ) ) { return saved ; } return null ; }"
if ( surface. getType ( )!= org. newdawn. loaders. ac3d. AC3DSurface. POLYGON ) { return false ; } else { return true ; } }
writer. write ( name ) ; writer. write ('' ) ; valueWriter. write ( value. toString ( ) ) ; writer. write ( '|n' ) ; }
if ( fgHazelcastInstance == null ) { fgHazelcastInstance = new Implementors ( ) ; } return fgHazelcastInstance ; }
"if ( hasTraceListeners ( ) ) { Node source = getDOMNodeFromDTM ( sourceNode ) ; firePreviousEndEvent ( new NodeEvent ( m_transformer, source, styleNode, attributeName, xpath, selection ) ) ; } }"
"String sortableString = reader. readLine ( ) ; while ( sortableString == null ||! sortableString. equalsIgnoreCase ( ""true"" ) ) { reader. readLine ( ) ; } return sortableString ; }"
SwingUtilities. invokeLater ( new Runnable ( ) { public void run ( ) { showZoomUI ( maxZoom ) ; } } ) ; }
String namespace = connection. getResource ( ). getNamespace ( ) ; return sIsHttpEnabled ( namespace ) ; }
if ( datum instanceof JsonArray ) { return ( ( JsonArray ) datum ). asDoubleArray ( ) ; } return defaultValue ; }
"driver. findElement ( By. xpath ( uiElementMapper. getElement ( ""iot.admin.monthRole.xpath"" ) ) ). click ( ) ; driver. findElement ( By. xpath ( uiElementMapper. getElement ( ""iot.admin.monthRole.xpath"" ) ) ). click ( ) ; }"
"Map < String, Integer > localLocLoc = localIdToLoc. get ( localId ) ; if ( localLocLoc == null ) { localLoc = new ConcurrentHashMap < > ( ) ; localLoc. put ( localId, localLocLoc ) ; } long localRetCount = localLocLoc. get ( ""retainCount"" ) ; if ( localRetCount == 0 ) { localIdIdToLoc. remove ( localId ) ; } }"
double r = Math. sqrt ( ( max - min ) / ( max - min ) + 1.0 ) ; if ( r < 0.0 ) return false ; return true ; }
final String prop = hazelcastProperties. getString ( name ) ; if ( prop!= null ) { return Boolean. parseBoolean ( prop ) ; } return defaultValue ; }
boolean changed = false ; int i = 0 ; while ( i < size ) { if ( v [ i ]!= null && v [ i ]!= v [ i + 1 ] ) { changed = true ; } i ++ ; } return changed ; }
if ( m_nextMonth == - 1 ) { close ( ) ; return false ; } m_nextMonth ++ ; return true ; }
"for ( int i = 0 ; i < 3 ; i ++ ) { set ( i, i, v. getX ( i ) ) ; set ( i, i, v. getY ( i ) ) ; set ( i, i, v. getZ ( i ) ) ; } }"
"String [ ] args = { ""-d"", ""4"", ""-h"", ""4"", ""-u"", ""user1"", ""-p"", ""user2"" } ; args [ 0 ] = ""10"" ; args [ 1 ] = ""5"" ; args [ 2 ] = ""6"" ; }"
int i = offset ; while ( bytes [ i ]!= ( byte ) 0x80 ) { i ++ ; } return i ; }
if ( sIsTabHoldingWrench ( player ) ) return true ; return false ; }
float [ ] [ ] functions = new float [ 4 ] [ 16 ] ; for ( int i = 0 ; i < grade ; i ++ ) { functions [ i ] = encoderFunction ( u ) ; } return functions ; }
List < Image > selectorImages = new ArrayList < Image > ( ) ; for ( SelectorItem item : selections ) { Image image = item. getImage ( ) ; selectorImages. add ( image ) ; } return selectorImages ; }
"SeedAlignmentData seedAlignmentData = proteinToSeedAlignmentData. get ( proteinIds ) ; if ( seedAlignmentData == null ) { seedAlignmentData = new SeedAlignmentData ( ) ; proteinToSeedAlignmentData. put ( proteinIds, seedAlignmentData ) ; } return seedAlignmentData ; }"
List < String > result = new ArrayList < String > ( ) ; for ( ScriptLabel l : ScriptLabel. getLabels ( ) ) { result. add ( l. getName ( ) ) ; } for ( ScriptLabel l : ScriptLabel. getLabels ( ) ) { result. add ( l. getName ( ) ) ; } return result ; }
"String query = ""SELECT *FROM TB_TIEMPOS WHERE CODIGO IS NOT NULL"" ; ResultSet rset = db. ejecutar ( conn, query ) ; return rset ; }"
for ( int i = 0 ; i <= coeffs. length ; i ++ ) { coeffs [ i ] = ( 0x0800000800000L + coeffs [ i ] ) & mask ; } }
if ( expression!= null && expression. getExpressionNode ( )!= null ) { IExpressionNode node = expression. evaluateNode ( ) ; if ( node!= null ) { return true ; } } return false ; }
"try { driver. findElement ( By. xpath ( uiElementMapper. getElement ( ""iot.home.button.xpath"" ) ) ). click ( ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } }"
for ( Iterator < Font > iter = m_FontMap. values ( ). iterator ( ) ; iter. hasNext ( ) ; ) iter. next ( ). dispose ( ) ; m_FontMap. clear ( ) ; for ( Iterator < Font > iter = m_FontToBoldFontMap. values ( ). iterator ( ) ; iter. hasNext ( ) ; ) iter. next ( ). dispose ( ) ; m_FontToBoldFontMap. clear ( ) ; }
"String [ ] tokens = line. split ( "","" ) ; return new GTFSStop ( tokens [ 0 ], tokens [ 1 ], Integer. parseInt ( tokens [ 2 ] ) ) ; }"
final Set < T > result = new HashSet < T > ( ) ; result. addAll ( set1 ) ; result. addAll ( set2 ) ; return ( result ) ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( bytes!= null ) sb. append ( ""Bytes: "" + bytes + "", "" ) ; if ( consumedBytes!= null ) sb. append ( ""ConsumedBytes: "" + consumedBytes + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
if ( driver == null ) { return false ; } try { driver. exitValue ( ) ; return true ; } catch ( IllegalThreadStateException e ) { return false ; } }
"Circle c = new Circle ( game. getWidth ( ) / 2, game. getHeight ( ) / 2 ) ; if (! c. isVisited ( ) ) { c. setVisible ( true ) ; c. setLocation ( game. getWidth ( ) / 2, game. getHeight ( ) / 2 ) ; } if (! c. isVisited ( ) ) { c. setVisible ( false ) ; game. setPosX ( game. getWidth ( ) / 2 ) ; game. setPosY ( game. getHeight ( ) / 2 ) ; } }"
"XMLElement element = null ; if ( namespace!= null ) { element = new XMLElement ( elementName, namespace ) ; } else { element = new XMLElement ( elementName ) ; } return element ; }"
GramlabProject ret = null ; if ( f!= null && f. exists ( ) && f. isDirectory ( ) ) { try { ret = GramlabProject. read ( f ) ; } catch ( GramlabIOException e ) { } } return ret ; }
final double value = m_values [ a_row ] [ a_column ] ; return new Double ( value ) ; }
"String [ ] namesProjection = { PhoneNumber. _ID, PhoneNumber. NAME } ; return namesProjection ; }"
mSecureStateToken = new byte [ 16 ] ; mSecureStateToken [ 0 ] = ( byte ) ( Math. random ( ) * 255 ) ; mSecureStateToken [ 1 ] = ( byte ) ( Math. random ( ) * 255 ) ; mSecureStateToken [ 2 ] = ( byte ) ( Math. random ( ) * 255 ) ; }
"String result = request. getParameter ( property ) ; request. setAttribute ( property, result ) ; return result ; }"
"String termProperty = ""hab.property"" ; return termProperty ; }"
byte [ ] result = new byte [ 10 ] ; result [ 0 ] = ( byte ) ( n >>> 56 ) ; result [ 1 ] = ( byte ) ( n >>> 48 ) ; result [ 2 ] = ( byte ) ( n >>> 40 ) ; result [ 3 ] = ( byte ) ( n >>> 32 ) ; result [ 4 ] = ( byte ) ( n >>> 24 ) ; result [ 5 ] = ( byte ) ( n >>> 16 ) ; result [ 6 ] = ( byte ) ( n >>> 8 ) ; result [ 7 ] = ( byte ) ( n ) ; return result ; }
float scale = ( ( source & ( byteRangeMax - byteRangeMin ) ) + ( ( scaleMax - scaleMin ) / ( byteRangeMax - byteRangeMin ) ) * ( scale - scaleMin ) ) / ( scaleMax - scaleMin ) ; return scale ; }
mMat [ 0 ] = rot ; mMat [ 4 ] = rot ; mMat [ 8 ] = rot ; mMat [ 9 ] = rot ; mMat [ 10 ] = rot ; mMat [ 11 ] = rot ; mMat [ 12 ] = rot ; }
"String [ ] headers = request. split ( ""  "" ) ; String wsProtocol = """" ; for ( int i = 0 ; i < headers. length ; i ++ ) { if ( headers [ i ]. contains ( ""WebSocket"" ) ) { wsProtocol = ( headers [ i ]. split ( "":"" ) [ 1 ] ). trim ( ) ; break ; } } return wsProtocol ; }"
"RegisterAction registerAction = new RegisterAction ( ) ; Map < String,? > model = new HashMap < String, Object > ( ) ; model. put ( ""register"", registerAction ) ; ModelAndView modelAndView = registerView ( ""pause"" ) ; modelAndView. addObject ( ""register"", model ) ; return modelAndView ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( count!= null ) sb. append ( ""Count: "" + count + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"if ( rows. containsKey ( row ) ) { rows. get ( row ). add ( c ) ; } else { HashMap < Integer, Cell > colMap = new HashMap < Integer, Cell > ( ) ; colMap. put ( col, new Cell ( row, col ) ) ; rows. put ( row, colMap ) ; } }"
"TreeMap < Date, Double > percentOverTime = new TreeMap < Date, Double > ( ) ; for ( Map. Entry < Date, Integer > dateEntry : percentCorrect. entrySet ( ) ) { if ( dateEntry. getValue ( )!= null ) { percentOverTime. put ( dateEntry. getKey ( ), ( ( Double ) dateEntry. getValue ( ) ). floatValue ( ) ) ; } } return percentOverTime ; }"
int alpha = ( ( argb >> 24 ) & 0xFF ) | ( ( argb >> 16 ) & 0xFF ) ; return alpha ; }
"if ( functions. isEmpty ( ) ) { return null ; } for ( Entry < String, ScoreFunction > entry : functions. entrySet ( ) ) { ScoreFunction function = entry. getValue ( ). toScoreFunction ( context ) ; if ( function!= null ) { return function ; } } return null ; }"
try { Integer. parseInt ( token ) ; } catch ( Exception e ) { return false ; } return true ; }
"ValueEnforcer. notNull ( aClassLoader, ""ClassLoader"" ) ; m_aRWLock. writeLocked ( ( ) -> { if ( m_aBundleCache. containsKey ( aClassLoader ) ) return ; try { m_aBundleCache. remove ( aClassLoader ) ; } finally { m_aRWLock. writeLocked ( ( ) -> { m_aBundleCache. remove ( aClassLoader ) ; } } ) ; } ) ; }"
"try { return new String ( buildUuidfromCompressedUTF8 ( string, offset, len ), ""ISO-8859-1"" ) ; } catch ( UnsupportedEncodingException e ) { throw new InternalError ( ) ; } }"
"OrientedCoordinate v1 = new OrientedCoordinate ( x1 ) ; OrientedCoordinate v2 = ( OrientedCoordinate ) TestUtilities. serialised ( v1 ) ; assertEquals ( v1, v2 ) ; }"
m_forkJoinConcurrency = count ; m_useForkJoinTests = true ; }
"RequestObserverWrapper wrapper = new RequestObserverWrapper ( observer ) ; requestObserverMap. put ( observer, wrapper ) ; gradlePluginLord. registerCommandObserver ( wrapper, false ) ; }"
"String template = templateFilePath ; return sortableCssContents ( template, variables ) ; }"
int objects = 0 ; for ( int offset = 0 ; offset < 2 ; offset += 2 ) { int b1 = in. read ( ) ; int b2 = in. read ( ) ; objects |= ( b1 << offset ) ; if ( b2 << offset ) { objects |= ( b2 << offset ) ; } } return objects ; }
for ( final Cell cell : partitionsEdgeCells ( ) ) { cell. setEditable ( false ) ; } for ( final Cell cell : partitionsEdgeCells ( ) ) { cell. setEditable ( false ) ; } }
"Operation op = new Operation ( identifier, component, edges ) ; graph. remove ( op ) ; }"
"Sprite BOMBSprite = factory. createSprite ( BOMB ) ; assertNotNull ( BOMBSprite ) ; assertEquals ( BOMB, BOMBSprite. getGameObject ( ) ) ; }"
outputPackage ( ) ; outputClassDeclaration ( ) ; }
"Cipher cipher = Cipher. getInstance ( ""Blowfish/ECB/PKCS5Padding"" ) ; cipher. init ( Cipher. ENCRYPT_MODE, key, new IvParameterSpec ( iv ) ) ; return cipher ; }"
for ( BookDetail detail : details ) { if ( detail. getName ( ). equals ( bookName ) ) { books. remove ( detail ) ; return detail ; } } return null ; }
