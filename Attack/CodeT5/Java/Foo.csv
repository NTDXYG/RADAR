final ByteArrayOutputStream bout = new ByteArrayOutputStream ( ) ; final InputStream in = new BufferedInputStream ( zip ) ; int b ; while ( ( b = in. read ( ) )!= - 1 ) { bout. write ( b ) ; } return bout. toByteArray ( ) ; }
Set allBindings = new HashSet ( ) ; for ( Iterator iter = allHandleList. iterator ( ) ; iter. hasNext ( ) ; ) { Map. Entry entry = ( Map. Entry ) iter. next ( ) ; String binding = entry. getKey ( ). getBinding ( ) ; if ( target. hasBinding ( binding ) ) { allBindings. add ( binding ) ; } } return allBindings ; }
"if ( rootNode!= null ) { for ( int i = 0 ; i < rootNode. getChildCount ( ) ; i ++ ) { Node c = rootNode. getChild ( i ) ; System. out. print ( tab + "" "" + c. toString ( ) ) ; foo ( c ) ; } } }"
"int foo = Integer. parseInt ( System. getProperty ( ""line.separator"" ) ) ; return foo + "" ("" + System. getProperty ( ""line.separator"" ) + "") "" + System. getProperty ( ""line.separator"" ) ; }"
for ( int i = 0 ; i < curve. getNumParameters ( ) ; i ++ ) { foo ( curve. getParameter ( i ) ) ; } }
if ( instance == null ) { instance = new ServerHostProperties ( ) ; } return instance ; }
"LOG. info ( ""Scheduling "" + block. getLocalBlock ( ) + "" file "" + blockFile + "" for deletion"" ) ; ReplicaFileDeleteTask deletionTask = new ReplicaFileDeleteTask ( volume, blockFile, metaFile, block, trashDirectory ) ; execute ( volume. getCurrentDir ( ), deletionTask ) ; }"
"int h = c. get ( Calendar. HOUR_OF_DAY ) ; int m = c. get ( Calendar. MINUTE ) ; int s = c. get ( Calendar. SECOND ) ; return String. format ( ""%02d:%02d:%02d"", h, m, s ) ; }"
switch ( fieldId ) { case 1 : return COLUMN_FAMILY ; case 2 : return SUPER_COLUMN ; case 3 : return COLUMN ; default : return null ; } }
if ( token!= null ) return token. getType ( ) ; if ( raw!= null ) return raw ; return ( Class <? super T > ) token. getRawType ( ) ; }
"ByteArray foo = new ByteArray ( ) ; foo. setBytes ( new byte [ ] { ( byte ) 'N' }, 0, 4 ) ; foo. setBytes ( new byte [ ] { ( byte ) 'U' }, 4, 6 ) ; foo. setBytes ( new byte [ ] { ( byte ) 'N' }, 4, 6 ) ; return foo ; }"
"final Map < String, byte [ ] > result = new HashMap < String, byte [ ] > ( ) ; for ( final String name : fooColumnNames ( ) ) { result. put ( name. toLowerCase ( ), fooValue ( name ) ) ; } return result ; }"
"StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < a. length ; i ++ ) { if ( i > 0 ) { sb. append ( "" "" ) ; } sb. append ( String. format ( DEFAULT_LOCALE, format, a [ i ] ) ) ; } return sb. toString ( ) ; }"
try { for ( int i = 0 ; i < response. body ( ). length ; i ++ ) { if ( response. body ( ) [ i ]!= null && response. body ( ) [ i ]!= null ) { return true ; } } } catch ( IOException e ) { } return false ; }
queue = new byte [ capacity ] ; int count = 0 ; while ( queue. size ( ) < capacity * 2 ) { queue. add ( 0 ) ; } while ( queue. size ( ) < capacity * 2 ) { queue. add ( 0 ) ; } }
"String name = p. getName ( ) ; int start = p. getStart ( ) ; int end = p. getEnd ( ) ; if ( start >= 0 && end >= 0 ) { return name + ""."" + name. substring ( start, end ) ; } return name ; }"
"buildRule. executeTarget ( ""testfoo"" ) ; AntAssert. assertContains ( ""Package: org.apache.tools.ant.util.facade"", buildRule. getProject ( ). getName ( ) ) ; }"
"ErrorTag er = new ErrorTag ( ) ; er. open ( ""bar"" ) ; er. close ( ) ; }"
"List < Card > deck = new ArrayList < Card > ( ) ; for ( int i = 0 ; i < weapon. size ( ) ; i ++ ) { deck. add ( new Card ( i, weapon. get ( i ) ) ) ; } return deck ; }"
"if ( configurationService == null ) { configurationService = ServiceUtils. getService ( bundleContext, ConfigurationService. class ) ; } return configurationService ; }"
"String result = name. replaceAll ( ""[^a-z0-9]+"", """" ) ; result = result. replaceAll ( ""[^a-z0-9]+"", """" ) ; result = result. toLowerCase ( ) ; return result ; }"
"Pojo p = Pojo. make ( ""head"", ""subName"" ) ; Expression expr = PathExpressionChain. parse ( ""sub.(o)sub.name"" ) ; expr. execAssign ( new ExprExecCtxt ( p ), ""newValue"" ) ; }"
"for ( AnnotationSummary param : method. getParameters ( ) ) { if ( param. getIndex ( ) == paramIndex ) { return new IndicatesAnnotation ( param, value ) ; } } return null ; }"
Assert. assertTrue ( verifyElement ( by ) ) ; Assert. assertTrue ( locateElement ( by ). getText ( ). equalsIgnoreCase ( message ) ) ; }
try { return clazz. newInstance ( ) ; } catch ( InstantiationException e ) { e. printStackTrace ( ) ; return null ; } }
"return new DefaultLiteralComparator ( ) { public int compare ( TypeLiteral <? > o1, TypeLiteral <? > o2 ) { return 0 ; } public int compare ( TypeLiteral <? > o1, TypeLiteral <? > o2 ) { return 1 ; } } ; }"
"final Object [ ] input = new Object [ ] { 1, null, ""three"" } ; final String [ ] output = Util. objectListToStringArray ( input ) ; assertEquals ( 3, output. length ) ; assertEquals ( ""three"", output [ 0 ] ) ; assertEquals ( ""fourth"", output [ 1 ] ) ; }"
Milestone milestone = new Milestone ( ) ; milestone. setCreatedAt ( new Date ( 11111 ) ) ; milestone. getCreatedAt ( ). setTime ( 0 ) ; assertTrue ( milestone. getCreatedAt ( ). getTime ( )!= 0 ) ; }
int i = 0 ; while ( value!= 0 ) { i ++ ; value >>>= 7 ; } return i ; }
"if ( location. getScheme ( ). equals ( ""class"" ) ) { return new ClassPathLocation ( cache, realm, location ) ; } else { return new ClassPathLocation ( cache, realm, location ) ; } }"
"WebElement x = driver. findElement ( By. xpath ( ""//x[contains(.,'"" + usersFirstName + ""')]"" ) ) ; x. clear ( ) ; WebElement x2 = driver. findElement ( By. xpath ( ""//x[contains(.,'"" + usersSurname + ""')]"" ) ) ; x2. click ( ) ; }"
"int i = 0 ; while ( i < psize ) { int b = in. read ( packet, offset + i, psize - i ) ; if ( b == - 1 ) { return i ; } i += b ; } return i ; }"
HsqlIntKeyHashMap scsMap ; Long scn ; scsMap = ( HsqlIntKeyHashMap ) validationMap. get ( sid ) ; if ( scsMap == null ) { return Long. MIN_VALUE ; } scn = ( Long ) scsMap. get ( csid ) ; return ( scn == null )? Long. MIN_VALUE : scn. longValue ( ) ; }
"System. out. print ( xmlWalletSetting + "" "" ) ; System. out. print ( walletPublicKey ) ; System. out. flush ( ) ; }"
"ArrayList < String > result = stackNames. get ( new ItemWrapper ( stack ) ) ; return result == null? stackNames. get ( new ItemWrapper ( stack. getItem ( ), WILDCARD ) ) : result ; }"
"String s = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
int bar = 0 ; for ( int i = 0 ; i < foo. length ( ) ; i ++ ) { bar += foo. charAt ( i ) ; } return bar ; }
"List < Child > children = new ArrayList < > ( ) ; for ( String enabled : true ) { children. add ( childFacade. findChildByEnabled ( enabled ) ) ; } assertEquals ( 4, children. size ( ) ) ; }"
List list = new ArrayList ( ) ; for ( int i = 1 ; i < chains. length ; i ++ ) { list. add ( chains [ i ]. foo ( ) ) ; } return list. iterator ( ) ; }
synchronized ( unresolvedClassList ) { List < UnresolvedClass > result = new ArrayList < UnresolvedClass > ( unresolvedClassList ) ; unresolvedClassList. clear ( ) ; return result ; } }
try { return Integer. parseInt ( str ) ; } catch ( Exception e ) { return - 1 ; } }
long len = 0 ; for ( Object value : values ) { if ( value!= null ) { len += foo ( value ) ; } } return len ; }
"throwIfNotValid ( username, ""username"" ) ; throwIfNotValid ( message, ""message"" ) ; createMessage ( username, message, lifetimeInMilliseconds, messageCallback ) ; }"
if ( contourW == null ) { return 0L ; } else { return contourW ; } }
switch ( getFHSourceAnchorLoc ( ) ) { case CenteredConnectionAnchor. BOTTOM : return ManhattanConnectionRouterEx. DOWN ; default : return ManhattanConnectionRouterEx. RIGHT ; } }
while ( el!= null ) { if ( el. getTagName ( ). equals ( name ) ) return el ; el = el. parent. foo ( name ) ; } return null ; }
"int n = fname. lastIndexOf ( ""."" ) ; if ( n >= 0 ) { return fname. substring ( n + 1 ) ; } else { return fname ; } }"
"PackageManager pm = context. getPackageManager ( ) ; try { pm. getPackageInfo ( ""com.android.sms"", 0 ) ; return true ; } catch ( NameNotFoundException e ) { return false ; } }"
"final Database < Customer > c = new Database < Customer > ( ""Customer"" ) ; return c ; }"
"String sessionId = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
"boolean result = false ; try { Session s = session. get ( transport ) ; if ( s == null ) { s = new Session ( transport, user ) ; session. put ( transport, s ) ; result = true ; } } catch ( Exception e ) { result = false ; } return result ; }"
"int bin = Arrays. binarySearch ( probabilities, intensity ) ; if ( bin >= 0 ) return bin ; else return 0.0 ; }"
"TermCounter tc = new TermCounter ( url ) ; tc. processElements ( paragraphs ) ; Set < String > terms = tc. keySet ( ) ; for ( String term : terms ) { add ( term, tc ) ; } }"
"if ( executionButton == null ) { executionButton = new JRadioButton ( ) ; executionButton. setText ( ""Execute"" ) ; } return executionButton ; }"
RatingModel rating = new RatingModel ( user ) ; return rating ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"Toast. makeText ( message, Toast. LENGTH_LONG ). show ( ) ; myToast = Toast. makeText ( message, Toast. LENGTH_SHORT ) ; }"
"final float ax = 0.0f ; final float ay = 0.0f ; final float az = 0.0f ; final float az = 0.0f ; return new Quaternion ( ax, ay, az, az, az, az ) ; }"
long bestPrice = 0.00 ; for ( int i = 0 ; i < 10000 ; i ++ ) { long price = foo ( ) ; if ( price > bestPrice ) { bestPrice = price ; } } return bestPrice ; }
Session s = getCurrentSession ( ) ; if ( s == null ) { s = new Session ( ) ; } return s ; }
TrackedEvent event = getEvent ( it ) ; Assertions. assertThat ( event. getMethod ( ) ). isEqualTo ( BEFORE_FOCUSED ) ; CachedProcessNodeTriggeredEvent orig = event. getEvent ( ) ; Assertions. assertThat ( orig. getNodeName ( ) ). isEqualTo ( nodeName ) ; }
"final Collection < ContentStream > cStream = new ArrayList < ContentStream > ( ) ; cStream. add ( foo ( str, contentType ) ) ; return cStream ; }"
"for ( int i = 0 ; i < rows * cols ; i ++ ) { String mStr = fieldName. replace ('', '_' ) ; if ( mStr. length ( ) > 0 ) mStr = mStr. replace ( '_', '_' ) ; mData. put ( mStr, data ) ; } return rows * cols ; }"
"String os = System. getProperty ( ""os.name"" ) ; return ( os!= null ) && os. toLowerCase ( ). startsWith ( ""windows nt"" ) ; }"
if (! graph. containsVertex ( v ) ) { graph. addVertex ( v ) ; } else { List < ValueGraphVertex > list = graph. vertexSet ( v ) ; for ( ValueGraphVertex v2 : list ) { foo ( v2 ) ; } } }
DragTree tree = new DragTree ( ) ; tree. foo ( ) ; return tree ; }
"if ( attribute == null ) attribute = new LinkedList < AttributeInfo > ( ) ; AttributeInfo. remove ( attribute, info. getName ( ) ) ; attribute. add ( info ) ; }"
if ( id == 0 ) { return 1 ; } return foo ( id - 1 ) ; }
for ( int i = 0 ; i < data. length ; i ++ ) { if ( data [ i ]. compareTo ( ( T ) data [ i ] ) > 0 ) return false ; } return true ; }
"double [ ] points = new double [ ] { - 2.0, - 1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 } ; double [ ] results = new double [ ] { 0, 0.2, 0, 0.3, 0 } ; for ( int i = 0 ; i < points. length ; i ++ ) { results [ i ] = points [ i ] ; } }"
"if ( rgbValue < 0 ) { return null ; } else { return new RGB ( ( rgbValue & 0x00FF0000 ) >> 16, ( rgbValue & 0x0000FF00 ) >> 8, ( rgbValue & 0x000000FF ) ) ; } }"
"Event event = new Event ( ) ; assertEquals ( EVENT_TYPE_DEFAULT. toString ( ), event. getType ( ) ) ; event = new Event ( ) ; assertEquals ( EVENT_TYPE_DEFAULT. toString ( ), event. getType ( ) ) ; event = new Event ( ) ; assertEquals ( EVENT_TYPE_DEFAULT. toString ( ), event. getType ( ) ) ; }"
int start = vertexIndex - 1 ; int end = vertexIndex + 1 ; return start ; }
"ByteArrayOutputStream output = new ByteArrayOutputStream ( ) ; serialize ( invocation, output ) ; return output ; }"
if ( ArrayUtils. isEmpty ( annotation ) ) return false ; for ( Class <? extends Annotation > c : annotation ) { if ( annotatedElement. isAnnotationPresent ( c ) ) return true ; } return false ; }
int len = str. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { if ( str. charAt ( i )!= '|' ) { return false ; } } return true ; }
long result = 0 ; for ( Tag tag : tags ) { result += tag. count ( ) ; } return result ; }
Object o = null ; if ( clazz!= null ) { o = clazz. getDeclaredField ( fieldName ). get ( null ) ; } return o ; }
if ( _theAction == null ) { try { Thread. sleep ( 100 ) ; } catch ( InterruptedException e ) { e. printStackTrace ( ) ; } } else { _theAction. foo ( ) ; } }
try { return new Properties ( propertiesType. getProperties ( ) ) ; } catch ( UNKNOWN_TYPE e ) { throw new RuntimeException ( e. getMessage ( ) ) ; } }
"for ( int k = 0 ; k < NUM_AXIS_VALUES ; k ++ ) { range [ k ]. set ( 0, 1 ) ; range [ k ]. set ( 1, - 1 ) ; } }"
"if ( number < 1 || number > 9 ) throw new IllegalArgumentException ( ""Number must be between 1-9."" ) ; return new CellNote ( number ) ; }"
Sorter sorter = new Sorter ( ) ; int edgeCount = dirEdge. getEdges ( ). size ( ) ; for ( int i = 0 ; i < edgeCount ; i ++ ) { DirectedEdge de = ( DirectedEdge ) dirEdge. getEdges ( ). get ( i ) ; if ( de. getArea ( ) > 0 ) { return i ; } } return - 1 ; }
if ( deployment. getComponent ( )!= null ) { String names = deployment. getComponent ( ). getName ( ) ; if ( names. length ( ) > 0 ) { return names ; } } return deployment. getName ( ) ; }
Set < Integer > result = new HashSet < Integer > ( ) ; result. addAll ( a ) ; result. removeAll ( b ) ; return result ; }
"if ( typeName. startsWith ( ""java.lang"" ) || typeName. startsWith ( ""java.lang."" ) ) { return true ; } return false ; }"
"final Map < String, String > extra = new HashMap < > ( ) ; if ( connType!= null && connType. length ( ) > 0 ) { for ( int i = 0 ; i < numberOfOptions ; i ++ ) { extra. put ( ""key"" + i, connType. substring ( i + 1 ) ) ; } } return extra ; }"
"assert! ( incoming. length == 0 || incoming [ 0 ] == 0.0 ) ; return getResult ( incoming, 0, incoming. length ) ; }"
"PropertyIsEqualTo eq = assertFilter ( ""aProperty EXISTS"", PropertyIsEqualTo. class ) ; Expression expr = eq. getExpression1 ( ) ; Assert. assertTrue ( expr instanceof PropertyExistsFunction ) ; }"
int am = 0 ; float m = xs [ 0 ] ; for ( int i = 1 ; i < xs. length ; ++ i ) { float v = xs [ i ] ; if ( v > m ) { m = v ; am = i ; } } return am ; }
final double [ ] z = new double [ y. length ] ; for ( int x = 0 ; x < y. length ; x ++ ) { z [ x ] = y [ x ] ; } return z ; }
int count = 0 ; for ( int i = 0 ; i < NUM_ITEMS ; i ++ ) { SamzaStoreItem sitem = new SamzaStoreItem ( i ) ; assertTrue ( sitem instanceof SamzaStoreItem ) ; count ++ ; sitem = new SamzaStoreItem ( i ) ; } }
"Preconditions. checkArgument ( category >= 0, ""Category should not be negative"" ) ; if ( suggestions == null ) { suggestions = new ArrayList < SnippetArticle > ( ) ; } suggestions. add ( foo ( category ) ) ; }"
"Vec2 pos = new Vec2 ( screenX, screenY ) ; return pos ; }"
"try { task. fail ( new Throwable ( e ) ) ; } catch ( Throwable t ) { logger. logError ( Level. WARNING, ""Error while reading a task: "" + task. toString ( ), t ) ; } }"
for ( Enumeration e = getNetworkInterfaces ( ) ; e. hasMoreElements ( ) ; ) { NetworkInterface tmp = ( NetworkInterface ) e. nextElement ( ) ; if ( name. equals ( tmp. getName ( ) ) ) { return tmp ; } } return null ; }
"Object dto = KubernetesHelper. loadJson ( json, ""foo"" ) ; return foo ( dto ) ; }"
"sock. setTcpNoDelay ( HttpConnectionParams. getTcpNoDelay ( params ) ) ; sock. setSoTimeout ( HttpConnectionParams. getSoTimeout ( params ) ) ; int linger = HttpConnectionParams. getLinger ( params ) ; if ( linger >= 0 ) { sock. setSoLinger ( linger > 0, linger ) ; } }"
"List < Parameter > parameters = new ArrayList < Parameter > ( ) ; parameters. add ( new Parameter ( ""foo"" ) ) ; return parameters ; }"
SimpleDateFormat simpleDateFormat = new SimpleDateFormat ( dateFormat ) ; java. util. Date date = new java. util. Date ( localTime ) ; return simpleDateFormat. format ( date ) ; }
"long fooLong = Double. doubleToLongBits ( 100 ) ; return String. format ( ""%d%d%n"", fooLong, fooLong ) ; }"
final Lock lock = getLock ( ) ; lock. lock ( ) ; try { foo ( ) ; } finally { lock. unlock ( ) ; } }
"buffer. putShort ( 1, state ) ; buffer. put ( 2, ( state >> 8 ) & 0xFF ) ; buffer. put ( 3, ( state >> 16 ) & 0xFF ) ; buffer. put ( 4, ( state >> 24 ) & 0xFF ) ; buffer. put ( 5, ( state >> 16 ) & 0xFF ) ; buffer. put ( 6, ( state >> 8 ) & 0xFF ) ; buffer. put ( 7, ( state >> 0 ) & 0xFF ) ; }"
"if ( iv == null ) { return null ; } byte [ ] result = new byte [ iv. length ] ; System. arraycopy ( iv, 0, result, 0, iv. length ) ; return result ; }"
"try { return new String ( replace_bytes, ""UTF-8"" ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }"
Task. TaskKey key = mTaskKeys. get ( t. id - 1 ) ; if ( key!= null ) return key ; return t. id - 1 ; }
"validateInput ( input ) ; return fooInner ( input, 1 ) ; }"
"long timestamp = System. currentTimeMillis ( ) ; if ( timestamp < 100L ) { return ""QWERTY: "" + timestamp + "", "" + reason ; } else { return ""QWERTY: "" + timestamp + "", "" + reason ; } }"
int intVal = 0 ; try { int intVal = foo ( ) ; int intVal1 = 7 ; int intVal2 = 9 ; return intVal + intVal1 + intVal2 ; } catch ( NumberFormatException ex ) { } return intVal ; }
"boolean available = false ; if ( ns!= null && ns. length ( ) > 0 ) { String prefix = ( ns == null )? """" : ns + "":"" ; if ( elemName!= null ) { available = test ( prefix, elemName ) ; } } return available ; }"
"File file = new File ( filename ) ; try { return readFileFromSDCard ( gvrContext, file ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; return null ; } }"
"EnumSet < ProfilerTask > taskSet = EnumSet. noneOf ( ProfilerTask. class ) ; for ( ProfilerTask task : tasks ) { if ( taskSet. contains ( task ) ) { taskSet. add ( task ) ; } } return Pair. of ( description, taskSet ) ; }"
Node < Integer > node = new Node < > ( elements. length ) ; for ( int e : elements ) { node. add ( e ) ; } foo ( node ) ; }
int len = rnd. nextInt ( maxLength - minLength + 1 ) + minLength ; return new String ( len ) ; }
"MatOfFloat transform = new MatOfFloat ( 1.0, 0.0, 1.0 ) ; Matrix. setIdentityM ( transform ) ; float x = 1.0 ; float y = 1.0 ; float z = 1.0 ; transform. setIdentityM ( x, y, z ) ; }"
"if ( depth == null ) { return new BigInteger ( ""1"" ) ; } else { return depth ; } }"
"System. err. println ( ""foo"" ) ; System. err. println ( local_name ) ; }"
"PlayerResultsScoreComparator comparator = new PlayerResultsScoreComparator ( true, false ) ; return comparator ; }"
"String result = """" ; for ( int i = 0 ; i < RDB_SIZE ; i ++ ) { char c = data. charAt ( i ) ; if ( ( c >= 'A' && c <= 'Z' ) || ( c >= 'a' && c <= 'z' ) ) { result = result + c ; break ; } } return result ; }"
"IPentahoSession session = getSession ( ) ; Authentication authentication = request. getAuthentication ( ) ; return foo ( session, hash, authentication ) ; }"
"if (! ( sessionFactory instanceof SessionFactoryImplementor ) ) { LOGGER. warning ( ""SessionFactory is expected to be instance of SessionFactoryImplementor."" ) ; return null ; } return getHazelcastInstance ( ( SessionFactoryImplementor ) sessionFactory ) ; }"
Query copy = new DefaultQuery ( query ) ; copy. setTypeName ( getSchema ( ). getTypeName ( ) ) ; return copy ; }
"int start = pos. indexOf ( ""BAR"" ) + numBead ; int end = pos. indexOf ( ""."" ) + numBead ; return foo ( start, end ) ; }"
"Element result = new Element ( ""jdom"" ) ; result. setAttribute ( ""xmlns:xsi"", ""http://www.w3.org/2001/XMLSchema-instance/"" ) ; result. setAttribute ( ""xmlns:xsi"", ""http://www.w3.org/2001/XMLSchema-instance/"" ) ; result. setAttribute ( ""xmlns:xsi"", ""http://www.w3.org/2001/XMLSchema-instance"" ) ; return result ; }"
"try { foo_. invoke ( context, new Object [ ] { status } ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } }"
for ( int row = 0 ; row < grid. length ; row ++ ) { for ( int col = 0 ; col < grid [ whichCol ]. length ; col ++ ) { if ( grid [ row ] [ col ] > 1 ) { return false ; } } } return true ; }
if (! items. contains ( item ) ) { items. add ( item ) ; notifyAll ( ) ; } }
"Optional < Integer > index = parseIndex ( args ) ; if (! index. isPresent ( ) ) { return new IncorrectCommand ( String. format ( MESSAGE_INVALID_COMMAND_FORMAT, SelectPersonCommand. MESSAGE_USAGE ) ) ; } return new SelectPersonCommand ( index. get ( ) ) ; }"
"if ( inclusive ) { return foo ( version1, version2 ) ; } else { return version1. compareTo ( version2 ) <= 0 ; } }"
"prepareShader ( RGB_FRAGMENT_SHADER_STRING, frameWidth, frameHeight, texMatrix ) ; GLES20. glActiveTexture ( GLES20. GL_TEXTURE0 ) ; GLES20. glBindTexture ( GLES20. GL_TEXTURE_2D, textureId ) ; drawRectangle ( viewportX, viewportY, viewportWidth, viewportHeight ) ; GLES20. glBindTexture ( GLES20. GL_TEXTURE_2D, 0 ) ; }"
"foo ( ( ) -> { System. setProperty ( ""task.label"", name ) ; } ) ; }"
Color pickColor = null ; for ( int i = 0 ; i < colors. length ; i ++ ) { pickColor = colors [ i ] ; if ( pickColor!= null ) { return pickColor ; } } return null ; }
"try { return InetAddress. getByName ( foo ( key ) ) ; } catch ( UnknownHostException e ) { throw new IllegalArgumentException ( ""Property "" + key + "" not found: "" + e. getMessage ( ) ) ; } }"
byte [ ] b = new byte [ nBytes ] ; for ( int i = 0 ; i < nBytes ; i ++ ) { b [ i ] = ( byte ) ( b [ i ] & 0xFF ) ; } return foo ( b ) ; }
byte [ ] bytes = new byte [ foo. length ] ; for ( int i = 0 ; i < foo. length ; i ++ ) { bytes [ i ] = ( byte ) foo [ i ] ; } return bytes ; }
"int b1 = ( ( int ) read ( ) ) & 0xFF ; int b2 = ( ( int ) read ( ) ) & 0xFF ; crc. update ( b1, b2 ) ; return b1 ; }"
if ( annexObj instanceof AnnexLibrary ) { return ( AnnexLibrary ) annexObj ; } return annexObj ; }
"for ( Map. Entry < String, Integer > entry : entries. entrySet ( ) ) { String key = entry. getKey ( ) ; Integer value = entry. getValue ( ) ; if ( value!= null ) { entries. remove ( key ) ; } } }"
"byte [ ] bytes = number. toByteArray ( ) ; byte [ ] length = bytes. length ; for ( int i = 0 ; i < length ; i ++ ) { byte [ ] temp = new byte [ 8 ] ; System. arraycopy ( bytes, 0, temp, 0, 8 ) ; temp [ i ] = ( byte ) ( temp [ i ] & 0xFF ) ; bytes = temp ; } }"
ProxyPreference preference = getProxyDao ( ). get ( ProxyKey. EXCLUDE ) ; return preference!= null? preference. getValue ( ) : StringUtils. EMPTY ; }
AttributeType attr = ast. getAttribute ( attributeID ) ; if ( attr == null ) { attr = new AttributeType ( attributeID ) ; ast. addAttribute ( attr ) ; } return attr ; }
if ( props. containsKey ( HOODIE_RO_FILE_FORMAT_PROP_NAME ) ) { return HoodieFileFormat. valueOf ( props. getProperty ( HOODIE_RO_FILE_FORMAT_PROP_NAME ) ) ; } return DEFAULT_RO_FILE_FORMAT ; }
"User committer = commit. getCommitter ( ) ; if ( committer!= null ) avatars. bind ( view, committer ) ; return view ; }"
"ContentType ct = getContentType ( ) ; return ct!= null && ct. equals ( ""multipart/form-data"" ) ; }"
out. writeShort ( m_class. hashCode ( ) ) ; out. writeInt ( m_fieldDesc. length ) ; for ( int i = 0 ; i < m_fieldDesc. length ; i ++ ) { out. writeObject ( m_fieldDesc [ i ]. getType ( ) ) ; } }
"String prefix = ""jdbc:fasta:mem:"" ; if ( dbCode!= null &&! """". equals ( dbCode ) ) { prefix = ""jdbc:fasta:mem:"" + dbCode ; } if ( id!= null &&! """". equals ( id ) ) { prefix = ""jdbc:fasta:mem:"" + id ; } return prefix ; }"
Order o = new Order ( cashierName ) ; o. setCashierName ( cashierName ) ; orders. add ( o ) ; return o ; }
try { StringWriter writer = new StringWriter ( ) ; writer. write ( contents ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } finally { try { writer. close ( ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } } }
"if ( Trace. isTraceOn ( ) ) Trace. log ( Trace. PROXY, Thread. currentThread ( ). getName ( ) + "" out < "" + Arrays. toString ( b ) ) ; out_. write ( b ) ; }"
if ( generators. length == 0 ) { return null ; } List < Gen < T >> list = new ArrayList < > ( Arrays. asList ( generators ) ) ; Random rand = new Random ( System. currentTimeMillis ( ) ) ; for ( Gen < T > g : generators ) { list. add ( g. random ( ) ) ; } return ( Gen < T > ) list. get ( 0 ) ; }
int ret = 0 ; for ( int i = 0 ; i < 32 ; i ++ ) { ret |= ( ( int ) memPtr. get ( i ) ) << bitOffset ; } ret &= mask ; return ret ; }
boolean result = options. remove ( option ) ; return result ; }
"String s = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
"double x = 0, y = 0 ; return foo ( ) ; }"
"System. err. println ( ""foo("" + opcode + "") : "" + type. getDescriptor ( ) ) ; System. out. print ( ""  "" ) ; System. err. println ( ""  invoke "" + method. getName ( ) ) ; }"
if ( game == null ) { return ; } byte [ ] data = info. getData ( ) ; if ( data == null ) { return ; } for ( int i = 0 ; i < data. length ; i ++ ) { if ( data [ i ] == '1' ) { data [ i ] = ( byte ) 'A' ; } else { data [ i ] = ( byte ) '0' ; } } }
try { return key. check ( ) ; } catch ( KeyStoreException e ) { return false ; } }
"if ( cookie!= null ) { cookie. setMaxAge ( 0 ) ; cookie. setPath ( ""/"" ) ; response. addCookie ( cookie ) ; return true ; } return false ; }"
final Array < ControllerListener > result = new Array < ControllerListener > ( ) ; for ( int i = 0 ; i < listeners. length ; ++ i ) result. add ( listeners [ i ] ) ; return result ; }
"if ( key!= null ) { SharedPreferences. Editor editor = sharedPreferences. edit ( ) ; editor. putString ( key, value ) ; editor. commit ( ) ; } }"
"Map < String, Path > result = new HashMap < > ( ) ; for ( String snapshot : snapshots ) { result. put ( snapshot, baseRestoreDir. resolve ( snapshot ) ) ; } return result ; }"
"Set < Message > seen = cache. get ( subject ) ; if ( seen == null ) { seen = new HashSet < > ( ) ; cache. put ( subject, seen ) ; } return seen. size ( ) == 0 ; }"
"String stopId = place. get ( ""stop_id"" ). asText ( ) ; return stopId ; }"
"Hashtable o = new Hashtable ( ) ; o. put ( ""foo"", new Integer ( 1 ) ) ; o. put ( ""bar"", new Integer ( 2 ) ) ; o. put ( ""baz"", new Integer ( 3 ) ) ; o. put ( ""foo"", new Integer ( 4 ) ) ; o. put ( ""foo"", new Integer ( 5 ) ) ; o. put ( ""foo"", new Integer ( 6 ) ) ; o. put ( ""foo"", new Integer ( 7 ) ) ; return o ; }"
"File file = new File ( foo ( ) ) ; if (! file. exists ( ) ) { Log. e ( TAG, ""File not found: "" + file. getAbsolutePath ( ) ) ; return Uri. EMPTY ; } return Uri. fromFile ( file ) ; }"
Date now = new Date ( ) ; long result = now. getTime ( ) ; while ( result >= 1000 * 60 * 60 * 1000 ) { result = now. getTime ( ) ; } now = new Date ( ) ; result = result. getTime ( ) ; if ( result >= 1000 * 60 * 60 * 1000 ) { result = result. getTime ( ) ; } }
"int l = data. length ; char [ ] out = new char [ l << 1 ] ; for ( int i = 0, j = 0 ; i < l ; i ++ ) { out [ j ++ ] = foo ( data [ i ] ) ; } return out ; }"
"List < I > result = map. get ( key ) ; if ( result == null ) { result = Collections. emptyList ( ) ; map. put ( key, result ) ; } return result ; }"
if ( normalizationFactors!= null ) { return normalizationFactors. foo ( reporterIonName ) ; } return null ; }
boolean result = true ; for ( int i = 0 ; i < array. length ; i ++ ) { if ( array [ i ] == theInt ) { result = false ; break ; } } return result ; }
"StringBuilder s = new StringBuilder ( ) ; s. append ( "" "" ) ; for ( int i = 0 ; i < logs. length ; i ++ ) { s. append ( logs [ i ] ) ; if ( i!= logs. length - 1 ) { s. append ( "" "" ) ; } } return s. toString ( ) ; }"
"socket. connect ( new InetSocketAddress ( ""localhost"", ""127.0.0.1"", port ), cause ) ; socket. close ( ) ; if ( cause!= 0 ) { System. err. println ( ""Browser: "" + cause ) ; socket. connect ( new InetSocketAddress ( ""localhost"", ""127.0.1.1"", port ) ) ; } }"
"String [ ] parts = addresses. split ( "":"" ) ; return parts [ parts. length - 1 ] ; }"
for ( int i = 0 ; i < actions. length ; i ++ ) { if ( actions [ i ]. equals ( action ) ) { return true ; } } return false ; }
IComplexNumber [ ] [ ] ret = new IComplexNumber [ realComponents. length ] [ realComponents [ 0 ]. length ] ; for ( int i = 0 ; i < realComponents. length ; i ++ ) for ( int j = 0 ; j < realComponents [ i ]. length ; j ++ ) ret [ i ] [ j ] = foo ( realComponents [ i ] [ j ] ) ; return ret ; }
"String icon = layerIcons. get ( info. getType ( ) ) ; if ( icon!= null ) { return new ResourceReference ( icon, info. getType ( ) ) ; } return null ; }"
Base64 encoder = new Base64 ( ) ; return new String ( encoder. encode ( str. getBytes ( ) ) ). trim ( ) ; }
"StringBuffer buf = new StringBuffer ( ) ; boolean first = true ; for ( int i = 0 ; i < p. count ( ) ; i ++ ) { buf. append ( foo ( p. group ( i ) ) ) ; if (! first ) { first = false ; } } String [ ] result = new String [ buf. length ( ) ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = buf. substring ( i, i + 1 ) ; } return result ; }"
"float [ ] channels = g. getPixels ( ) ; for ( int i = 0 ; i < channels. length ; i ++ ) { if ( colorDistHSB ( g, baseline, incomingPix, hueTresh, saturationTresh, brightnessTresh ) ) { return true ; } } return false ; }"
int pos = buf. position ( ) - 1 ; while ( buf. hasRemaining ( ) ) { buf. put ( 0 ) ; } buf. position ( pos ) ; }
"Toast toast = Toast. makeText ( context, resId, duration ) ; setToast ( toast ) ; return toast ; }"
if ( currentIndex == 1 ) { currentSchematic = Schematic. NEXT ; } else if ( currentIndex == 2 ) { currentSchematic = Schematic. NEXT ; } }
Presence presence = new Presence ( Presence. Type. subscribe ) ; presence. setTo ( jid ) ; connection. sendStanza ( presence ) ; }
"KeyStore store = KeyStore. getInstance ( ""jks"" ) ; store. load ( keystore, password ) ; for ( X509Certificate cert : chain ) { store. setCertificateEntry ( alias, cert ) ; } store. close ( ) ; }"
"List < String > list = new ArrayList < String > ( 4 ) ; list. add ( ""http://www.w3.org/2000/xmlns/"" ) ; list. add ( ""http://www.w3.org/2000/xmlns/"" ) ; list. add ( ""xml"" ) ; return list. iterator ( ) ; }"
File speechStrategyFile = new File ( speechStrategyRelativePath ) ; String speechStrategy = speechStrategyFile. getName ( ) ; speechStrategy = speechStrategyFile. toURI ( ). toURL ( ) ; System. err. println ( speechStrategy ) ; }
int port = con. getModbusPort ( ) ; if ( port == ModbusTransaction. NO_PORT ) { con. setModbusPort ( ModbusTransaction. NO_PORT ) ; } else { con. setModbusPort ( port ) ; } }
T value = backgroundTask. apply ( progressIndicator -> { if ( waitMillis >= 0 ) { return backgroundTask. apply ( progressIndicator ) ; } else { backgroundTask. cancel ( ) ; } return value ; } ) ; }
"try { Class. forName ( ""java.awt.Desktop"" ) ; return true ; } catch ( Exception e ) { return false ; } }"
int val = 0 ; while ( true ) { int temp = is. read ( ) ; if ( temp == - 1 ) { return val ; } val = val << 8 ; } }
double [ ] [ ] foo = new double [ scores. length ] [ ] ; for ( int i = 0 ; i < scores. length ; i ++ ) { for ( int j = 0 ; j < scores [ i ]. length ; j ++ ) { foo [ i ] [ j ] = scores [ i ] [ j ] ; } } return foo ; }
msg = msg. toString ( ) ; return ( msg. equals ( Hello. class. getName ( ) ) || msg. equals ( Hello. class. getName ( ) ) || msg. equals ( Hello. class. getName ( ) ) || msg. equals ( Hello. class. getName ( ) ) ) ; }
"final StringBuilder sb = new StringBuilder ( ) ; if ( foo ( sb ). length ( ) == 1 ) { sb. append ( ""c"" ) ; } else { sb. append ( "" "" ) ; } sb. append ( foo ( sb ). charAt ( 0 ) ) ; if ( sb. length ( ) == 1 ) { sb. append ('' ) ; } sb. append ( foo ( sb ). charAt ( 1 ) ) ; return sb. toString ( ) ; }"
"for ( int i = 0 ; i < numECCodewords ; i ++ ) { foo ( codewords, erasures, i ) ; } }"
"if ( isWindows ( ) ) { return ""/Applications/Handbrake.exe"" ; } return ""/Applications/Handbrake.exe"" ; }"
"String host = ""localhost"" ; String port = ""8080"" ; try { InetAddress. getByName ( host ) ; } catch ( UnknownHostException e ) { e. printStackTrace ( ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } }"
List < Integer > mylist = new LinkedList < Integer > ( ) ; for ( int i = 0 ; i < getNumVertices ( ) ; i ++ ) { int neighbour = getNeighbors ( i ). size ( ) ; neighbour += getInNeighbors ( i ). size ( ) ; mylist. add ( neighbour ) ; } Collections. sort ( mylist ) ; Collections. reverse ( mylist ) ; return mylist ; }
"Max max = new Max ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { if ( max. max ( i, j ) > 0 ) { max. max ( i, j ) ; } } } }"
if ( btClass == ERROR ) { return ERROR ; } return btClass & ERROR ; }
"if ( value!= null ) { tag. put ( prefix, uri, localName, type, value ) ; } else { tag. put ( prefix, uri, localName, type, value ) ; } }"
"Jedis jedis = pool. getResource ( ""foo"" ) ; return jedis ; }"
"if (! clazz. isArray ( ) ) { throw new IllegalArgumentException ( ""valid for array classes only"" ) ; } return clazz. hashCode ( ) ; }"
Metadatum [ ] dcv = item. getMetadata ( ) ; if ( dcv!= null ) { for ( int i = 0 ; i < dcv. length ; i ++ ) { receipt. getWrappedEntry ( ). addSubjectClassifications ( dcv [ i ] ) ; } } }
"String name = clazz. getName ( ). replace ( '.', '/' ) + "".class"" ; URL url = clazz. getClassLoader ( ). getResource ( name ) ; if ( url!= null ) { return new File ( url. getFile ( ) ) ; } else { return null ; } }"
"Map < NiFiComponentDTO, PositionDTO > result = new HashMap < > ( ) ; for ( NiFiComponentDTO component : components ) { result. put ( component, foo ( component ) ) ; } return result ; }"
jsonGenerator. writeFieldName ( ENTITY_NAME ) ; if ( entity instanceof EntitySet ) { jsonGenerator. writeObject ( ( ( EntitySet ) entity ). getName ( ) ) ; } else { jsonGenerator. writeObject ( ( ( Singleton ) entity ). getName ( ) ) ; } }
"ctx. print ( ""  "" ) ; ctx. print ( ""  "" ) ; ctx. print ( ""  "" ) ; ctx. print ( "" "" ) ; }"
long time = 0 ; try { foo ( ) ; } catch ( final IllegalStateException e ) { } return time ; }
if (! map. containsKey ( key ) ) { return defaultString ; } return ( String ) map. get ( key ) ; }
"URL u = new URL ( url ) ; return updateHostNameInURL ( u. getHost ( ), siteFQDN ) ; }"
for ( int y = 0 ; y < height ; y ++ ) { for ( int x = 0 ; x < width ; x ++ ) { if ( tiles [ x ] [ y ] == null ) return tiles [ x ] [ y ] ; } } return null ; }
"File dir = new File ( System. getProperty ( ""user.home"" ), "".foo"" ) ; if ( forceCreate ) { return new File ( dir ) ; } else { return dir ; } }"
if ( getPlot ( )!= null ) { return getPlot ( ). getAllDeniedUUID ( ) ; } else { return new HashSet < UUID > ( ) ; } }
ServerState s = new ServerState ( ) ; for ( ChangeNumber cn1 : new LinkedList < ChangeNumber > ( ) ) { if ( cn1. getChangeNumber ( ) < cn ) s. add ( cn1 ) ; } return s ; }
Artifact foo = unprunedArchive. clone ( ) ; for ( String name : unprunedArchive. listNames ( ) ) { if ( name. startsWith ( J2ObjC_PREFIX ) ) { foo = unprunedArchive. getInstanceOf ( name ). remove ( name ) ; } } return foo ; }
if ( isRegSendTagMessage ( ) ) { return getName ( ) ; } return getName ( ) ; }
CrudManagerCrudManagerCrudManagerCrudManager = newCrudManager ( ) ; return crudManagerCrudManager. crudList ( ) ; }
"TimeSeriesDataItem item1 = new TimeSeriesDataItem ( new Day ( 23, 9, 2001 ), 99.7 ) ; TimeSeriesDataItem item2 = ( TimeSeriesDataItem ) TestUtilities. serialised ( item1 ) ; assertEquals ( item1, item2 ) ; }"
GlobalDataStore data = new GlobalDataStore ( ) ; data. init ( ) ; return data ; }
BBOX bbox = buildBBox ( null ) ; return bbox ; }
"String result = """" ; long tmp = ip ; for ( int i = 3 ; i > 0 ; i -- ) { if ( tmp % 2 == 0 ) { result = ""0"" + result ; } else { result = result + ""."" + ( int ) ( tmp / 2 ) ; } } return result ; }"
"insert ( slot ) ; put ( slot, ""blknum"", blknum ) ; put ( slot, ""val"", val ) ; }"
"final K actualKey = cacheConfig. getKey ( ) ; if (! actualKey. equals ( key ) ) { throw new CacheException ( String. format ( ""Invalid cache key %s for cache configuration %s."", cacheConfig. getName ( ), key ) ) ; } }"
while ( true ) { if ( runnable. isDone ( ) ) { return ; } try { runnable. run ( ) ; } catch ( InterruptedException e ) { } } }
"assert! location. startsWith ( ""/"" ) ; if ( location. endsWith ( ""/"" ) ) { location = location. substring ( 0, location. length ( ) - 1 ) ; } root = location ; }"
"Annotation annotation = modelResource. getAnnotation ( Annotation. class ) ; if ( annotation == null ) { annotation = new Annotation ( ) ; } annotation. getTags ( ). put ( key, value ) ; }"
for ( int i = 0 ; i < n ; i ++ ) { blocks [ i ] = ( byte ) ( n + i * BLOCK_SIZE ) ; } return blocks ; }
"String name = workbook. getExternalSheetName ( sheet ) ; buf. append ( name ) ; buf. append ( sheetInd ) ; foo ( column, row, buf ) ; }"
"int nRows = matrix. getRowDimension ( ) ; int nCols = matrix. getColumnDimension ( ) ; if ( nRows < 2 || nCols < 2 ) { throw new MathIllegalArgumentException ( LocalizedFormats. INSUFFICIENT_ROWS_AND_COLUMNS, nRows, nCols ) ; } }"
"ValueEnforcer. notNull ( aCountry, ""Country"" ) ; return isZeroVATAllowed ( aCountry. getCountry ( ), bUndefinedValue ) ; }"
"final Pipeline < FilterResult < Candidate >> newFilter = pipeline. withFilter ( new ConnectionFilter ( ql ) ). withFilter ( new ConnectionFilter ( connectionName, entityType ) ) ; return new CandidateBuilder ( newFilter, filter ) ; }"
"for ( int i = 0 ; i < ignores ; i ++ ) { System. out. print ( "" ignore "" ) ; } }"
for ( FundingSourceAltRef altRef : allAltRefs ( ) ) { if ( altRef. getAlternative ( ). getId ( ). equals ( fundingAlt. getId ( ) ) ) { return altRef ; } } return null ; }
int cropIndex = inTrackInfo. getAudioList ( ). getNumAudios ( ) - 1 ; inTrackInfo. getAudioList ( ). cropTo ( cropIndex ) ; inTrackInfo. getSelection ( ). clearAll ( ) ; }
"ToggleButton toggler = new ToggleButton ( driver. findElement ( By. id ( ""foo-card"" ) ) ) ; toggler. click ( ) ; return toggler ; }"
"List < PackageDoc > result = map. get ( groupname ) ; if ( result == null ) { result = new ArrayList < PackageDoc > ( ) ; map. put ( groupname, result ) ; } return result ; }"
StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder. append ( prefix ) ; for ( int i = 0 ; i < prefix. length ( ) ; i ++ ) { stringBuilder. append ( ALPHABET [ ( int ) ( Math. random ( ) * ( double ) ALPHABET. length ) ] ) ; } return stringBuilder. toString ( ) ; }
int styleId = attrs. getAttribute ( defStyleAttr ) ; return styleId!= 0? styleId : defStyleRes ; }
List < URL > urls = new ArrayList < URL > ( archives. size ( ) ) ; for ( Archive archive : archives ) { urls. add ( archive. getUrl ( ) ) ; } return newClassLoader ( urls. toArray ( new URL [ urls. size ( ) ] ) ) ; }
stop = true ; try { Thread. sleep ( 100 ) ; } catch ( InterruptedException e ) { } if ( e!= null ) { return e. getCause ( ) ; } return null ; }
"List < LimitOrder > limitOrders = new ArrayList < LimitOrder > ( ) ; for ( BigDecimal [ ] ask : orders ) { limitOrders. add ( foo ( currencyPair, orderType, ask ) ) ; } return limitOrders ; }"
byte [ ] result = text. getBytes ( charset ) ; return result ; }
ApplicationContextFactory instance = new ApplicationContextFactory ( ) ; return instance ; }
Token token = nextToken ( ) ; if ( token == null ) { return false ; } if ( token. getType ( )!= Token. EOF ) { return false ; } token = nextToken ( ) ; if ( token == null ) { return false ; } return true ; }
NodeDO n = nodeService. find ( id ) ; if ( n == null ) { return Collections. emptyList ( ) ; } else { parentRootSum = parentRootSum / n. getRootSum ( ) ; return Collections. singletonList ( n ) ; } }
"if ( m_features. containsKey ( aFeatureName ) ) return false ; m_features. put ( aKey, aFeatureName ) ; return true ; }"
"String name = clazz. getName ( ) ; int pos = name. lastIndexOf ( ""."" ) ; if ( pos == - 1 ) { name = name. substring ( 0, pos ) ; } name = name. substring ( pos + 1 ) ; return name ; }"
"d. readFully ( w, 0, 1 ) ; return ( char ) ( ( w [ 1 ] & 0xff ) << 8 | ( w [ 0 ] & 0xff ) ) ; }"
Pattern p = matcher. getSpellingPattern ( ) ; return p == null? - 1 : Integer. parseInt ( p. group ( 1 ) ) ; }
"boolean result = false ; try { Class <? > c = Class. forName ( ""net.meisen.general.genmisc.search.GoogleSearchEnabled"" ) ; result = c. isAssignableFrom ( Boolean. class ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } return result ; }"
float actual = percentage * scale ; if ( relative < 0.0f ) { actual = 0.0f ; } else if ( relative > 1.0f ) { actual = 1.0f + relative ; } return actual + offset ; }
"MapEvent event = new MapEvent ( 10 ) ; assertEquals ( 10, event. getLatitude ( ) ) ; assertEquals ( 10.0, event. getLongitude ( ) ) ; assertEquals ( 1.0, event. getLatitude ( ) ) ; assertEquals ( 2.0, event. getLongitude ( ) ) ; }"
"if ( family!= IPv4 && family!= IPv6 ) throw new IllegalArgumentException ( ""unknown address family"" ) ; byte [ ] bytes ; bytes = toByteArray ( addr, family ) ; if ( bytes!= null ) return InetAddress. getByAddress ( addr, bytes ) ; throw new UnknownHostException ( ""Invalid address: "" + addr ) ; }"
"if ( command. getID ( ). equals ( batchModelID ) ) { return true ; } else { metadata. put ( command. getID ( ), command ) ; return false ; } }"
"long t = startInstant. getTimeInMillis ( ) ; startInstant. set ( Calendar. HOUR_OF_DAY, 0 ) ; startInstant. set ( Calendar. MINUTE, 0 ) ; return t / 1000 ; }"
"PKIAuthenticationToken pkiToken = getPKITokenFromTarget ( validateTarget ) ; if ( pkiToken!= null ) { if ( realms!= null && realms. contains ( pkiToken. getRealm ( ) ) || ""*"". equals ( pkiToken. getRealm ( ) ) ) { return true ; } } return false ; }"
"if ( foo == null ) { foo = new java. util. TimeZone ( TimeZone. getTimeZone ( ""GMT"" ) ) ; } return foo ; }"
"try { return URLEncoder. encode ( string, ""UTF-8"" ). replace ( ""+"", ""%20"" ). replace ( ""*"", ""%2A"" ). replace ( ""%7E"", ""~"" ) ; } catch ( UnsupportedEncodingException e ) { return string ; } }"
"for ( int i = 0 ; i < 4 ; i ++ ) { System. out. print ( "" "" ) ; } System. out. print ( "" "" ) ; }"
"AutomationContext automationContext = contextMap. get ( key ) ; if ( automationContext == null ) { automationContext = new AutomationContext ( ) ; contextMap. put ( key, automationContext ) ; } return automationContext ; }"
"ProxyFactory factory = new ProxyFactory ( System. getProperty ( ""java.io.tmpdir"" ) ) ; Method method = factory. getClass ( ). getMethod ( ""createProxy"", new Class [ 0 ] ) ; method. invoke ( null, ( Object [ ] ) null ) ; state. foo ( msg ) ; }"
"if ( jobName. contains ( ""-"" ) ) { return jobName. substring ( 0, jobName. indexOf ( ""-"" ) ) ; } return jobName ; }"
"long result = 0 ; try { Long. parseLong ( System. getProperty ( ""line.separator"" ) ) ; result = Long. parseLong ( System. getProperty ( ""line.separator2"" ) ) ; } catch ( NumberFormatException e ) { } return result ; }"
"String tableIdentifier1 = ""table1"" ; String columnIdentifier1 = ""column1"" ; ColumnIdentifier identifier1 = new ColumnIdentifier ( tableIdentifier1, columnIdentifier1 ) ; assertNotSame ( identifier1, identifier1 ) ; }"
"edit. pressShortcut ( Keystrokes. DOWN, Keystrokes. LEFT ) ; edit. pressShortcut ( Keystrokes. DOWN, Keystrokes. LEFT ) ; edit. pressShortcut ( Keystrokes. DOWN, Keystrokes. RIGHT ) ; }"
"String result = """" ; for ( int i = 0 ; i < 128 ; i ++ ) { result += ""1"" ; if ( ( b & ( 1 << i ) )!= 0 ) result += ""0"" ; } return result ; }"
"final Exchange. KeyToken token = new Exchange. KeyToken ( ( byte ) 1, ( byte ) 8 ) ; return token ; }"
"if ( settingsData == null ) { logger. error ( ""Hue bridge settings not initialized correctly."" ) ; return 0 ; } Object value = settingsData. node ( ""lights"" ). node ( deviceId ). node ( ""state"" ). value ( ""ok"" ) ; if ( value instanceof Integer ) { return ( Integer ) value ; } else { return 0 ; } }"
String path = courseName + File. separator + fileName ; File f = new File ( path ) ; try { f. createNewFile ( ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } }
if ( foo == null ) { foo = new com. amazonaws. internal. SdkInternalList < EventTopic > ( ) ; } return foo ; }
"int pos = label. indexOf ( "":"" ) ; if ( pos!= - 1 ) { return label. substring ( pos + 1 ) ; } return label ; }"
"String lcs = getLCS ( s1, s2 ) ; return ( s1. length ( ) + s2. length ( ) - lcs. length ( ) ) * 0.0 ; }"
"System. out. print ( sectionName + "":"" ) ; System. out. print ( "" "" ) ; foo ( sectionName ) ; }"
int foo = 0 ; for ( int i = 0 ; i < 32 ; i ++ ) { foo <<= 1 ; } for ( int i = 0 ; i < 32 ; i ++ ) { int b = b & 0x7f ; b = b >> 1 ; } return foo ; }
"checkParameters ( dataset, renderer ) ; XYChart chart = new BarChart ( dataset, renderer ) ; return new PlotView ( context, chart ) ; }"
for ( int i = 0 ; i < size ; i ++ ) { foo ( time ) ; } }
int numNodes = 0 ; for ( int i = 0 ; i < sharedNodes. length ; i ++ ) { numNodes += sharedNodes [ i ]. foo ( ) ; } return numNodes ; }
"if ( inputs == null || ingredient == null ) { return true ; } return foo ( inputs, ingredient, inputIndexes ) ; }"
"String res = System. getProperty ( property ) ; if ( res == null ) { res = ""foo"" ; } return res ; }"
"StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { byte b = bytes [ i ] ; sb. append ( String. format ( ""%02x"", b & 0xFF ) ) ; } return sb. toString ( ) ; }"
"int result = 0 ; String [ ] tmp = time. split ( "":"" ) ; if ( tmp. length == 2 ) { result = ( Integer. parseInt ( tmp [ 0 ] ) * 60 ) + ( Integer. parseInt ( tmp [ 1 ] ) * 60 ) ; } else { result = ( Integer. parseInt ( tmp [ 0 ] ) * 60 ) + ( Integer. parseInt ( tmp [ 1 ] ) * 60 ) ; } return result ; }"
List < Double > result = new ArrayList < Double > ( ) ; foo ( result ) ; return result ; }
try { Thread. sleep ( timeout ) ; } catch ( InterruptedException e ) { e. printStackTrace ( ) ; } }
"logger. trace ( ""{} rows remaining to process, currentRow: {}, outputCount: {}"", remainingRows, currentRow, outputCount ) ; setupWriteFirstValue ( internal, internal, container ) ; if ( popConfig. isFrameUnitsRows ( ) ) { return foo ( currentRow ) ; } else { return 0 ; } }"
final Node child = node ( name ) ; return child!= null? child. getTextContent ( ) : null ; }
jdbcTask. prepareForConnection ( ) ; jdbcTask. execute ( ) ; }
"int i = f. indexOf ( "":"" ) ; if ( i > 0 ) { return f. substring ( i + 1 ) ; } return f ; }"
"SimpleDateFormat sdf = new SimpleDateFormat ( s_sFormat ) ; Calendar cal = Calendar. getInstance ( TimeZone. getTimeZone ( ""GMT"" ) ) ; return sdf. format ( cal. getTime ( ) ) ; }"
if ( timeStamp == null ) { return null ; } else { String str = foo ( timeStamp. getTime ( ) ) ; return str ; } }
"try { User user = ( User ) session. get ( User. class, id ) ; session. delete ( user ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } }"
"if (! compQualifier. isEmpty ( ) ) { byte [ ] b = compQualifier. get ( ) ; for ( int i = 0 ; i < b. length ; i ++ ) { byte [ ] b1 = compValue. get ( i ) ; foo ( b, b1 ) ; } } }"
if ( value instanceof String ) { return Collections. singleton ( ( String ) value ) ; } else { return Collections. emptySet ( ) ; } }
"List < String > keys = new ArrayList < String > ( ) ; printKeys ( keys, encrypted ) ; String dec = printDecryptedKeys ( keys ) ; return dec ; }"
"for ( int y = 0 ; y < height ; y ++ ) { for ( int x = 0 ; x < width ; x ++ ) { for ( int z = 0 ; z < height ; z ++ ) { if ( xy [ x ] [ y ]!='' && xy [ x ] [ z ]!='' ) { System. out. print ( "" "" ) ; } } } System. out. print ( "" "" ) ; } }"
"PsiElement root = PsiElement. make ( project, name ) ; if ( root. getChildren ( ). isEmpty ( ) ) { return root ; } PsiElement elem = root. getChild ( 0 ) ; if ( elem. getChildren ( ). size ( )!= 1 ) { throw new RuntimeException ( ""Unexpected end of input: "" + elem. getText ( ) ) ; } return elem ; }"
try { return binding. foo ( key ) ; } catch ( final com. google. security. zynamics. binnavi. Database. Exceptions. CouldntSaveDataException e ) { throw new CouldntSaveDataException ( e ) ; } }
"Object val = cache. get ( namespace, nodename ) ; if ( val == null ) { val = init ( namespace, nodename ) ; cache. put ( namespace, nodename, val ) ; } return val ; }"
"String path = file. getCanonicalPath ( ) ; int lastSlash = path. lastIndexOf ( '/' ) ; if ( lastSlash!= - 1 && lastSlash + 1 < path. length ( ) ) { return path. substring ( 0, lastSlash + 1 ) ; } return path ; }"
if ( element instanceof IDescriptionProvider ) { IDescriptionProvider provider = ( IDescriptionProvider ) element ; return provider. foo ( ) ; } return null ; }
if ( list!= null &&! list. isEmpty ( ) ) { return list. get ( rand. nextInt ( list. size ( ) ) ) ; } else { return null ; } }
"StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < ints. length ; i ++ ) { if ( i!= 0 ) { builder. append ( "" "" ) ; } builder. append ( Integer. toString ( ints [ i ] ) ) ; } return builder. toString ( ) ; }"
"final String pattern = ""^[a-z0-9._%+-]+@[a-z0-9.-]+|.[a-z]{2,4}$"" ; final Matcher matcher = pattern. matcher ( email ) ; if ( matcher. matches ( ) ) { return true ; } return false ; }"
long fooLong = System. currentTimeMillis ( ) ; return new BufferedOutputStream ( new FileOutputStream ( fooLong ) ) ; }
"Map < Integer, List < EvaluatedIndividual < S >>> history = historyMap. get ( generation ) ; if ( history!= null ) { return history. get ( 0 ) ; } else { return null ; } }"
"VectorAggregationBufferRow selectionVector = new VectorAggregationBufferRow ( ) ; selectionVector. add ( row ) ; foo ( bufferSet, selectionVector ) ; }"
"String formattedMessage = ( message == null? """" : message + "" "" ) ; assertThat ( haystack!= null && haystack. indexOf ( needle )!= - 1, equalTo ( 0 ) ) ; }"
"LOGGER. info ( ""foo"" ) ; try { Thread. sleep ( 1000 ) ; } catch ( InterruptedException e ) { LOGGER. error ( ""InterruptedException"", e ) ; } catch ( InvocationTargetException e ) { LOGGER. error ( ""IOException"", e ) ; } }"
Cookie c = cookieMap. get ( name ) ; if ( c == null ) { return null ; } return c. value ; }
if ( foregroundColor == null ) { return gc. getForeground ( ) ; } return foregroundColor ; }
if ( buffer!= null ) { int count = 0 ; for ( int i = 0 ; i < buffer. length ; i ++ ) { count += buffer [ i ] ; } return count ; } else { return - 1 ; } }
"TimeSeriesDataItem item1 = new TimeSeriesDataItem ( new Day ( 23, 9, 2001 ), 99.7 ) ; TimeSeriesDataItem item2 = ( TimeSeriesDataItem ) TestUtilities. serialised ( item1 ) ; assertEquals ( item1, item2 ) ; }"
"Transformer < V, Double > t = new Transformer < V, Double > ( ) ; Iterator < V > i = g. vertexIterator ( ) ; while ( i. hasNext ( ) ) { V v = i. next ( ) ; t. setWeight ( g. weight ( v ) ) ; } return t ; }"
try { return new JSONObject ( jsonString ) ; } catch ( JSONException e ) { e. printStackTrace ( ) ; return null ; } }
"List < String > p = params. get ( ""p"" ) ; if ( p == null ) { p = new ArrayList < > ( ) ; params. put ( ""p"", p ) ; } if ( p. size ( ) == 0 ) { } else { foo ( req, p, params ) ; } }"
"Preconditions. checkNotNull ( creativeViewTrackers, ""The list of trackers cannot be null."" ) ; for ( final VastTracker creativeViewTracker : creativeViewTrackers ) { mVastTrackerTracker. foo ( ) ; } }"
"return new Condition ( ) { @ Override public boolean evaluate ( Object object ) { return true ; } @ Override public String toString ( ) { return ""ContactSearchFilter.foo("" + object. toString ( ) + "")"" ; } } ; }"
"Memento mem = new Memento ( key ) ; for ( int i = 0 ; i < valueList. size ( ) ; i ++ ) { mem. append ( valueList. get ( i ) + "" "" ) ; } mem. flush ( ) ; }"
"byte [ ] b = Files. readAllBytes ( new File ( commonPartFileName ) ) ; String commonPartXML = new String ( b ) ; return foo ( vcsid, commonPartXML, client ) ; }"
"assertEquals ( 1, ( int ) TestUtils. foo ( null, 0 ) ) ; assertEquals ( 2, ( int ) TestUtils. foo ( null, 1 ) ) ; assertEquals ( 3, ( int ) TestUtils. foo ( null, 2 ) ) ; assertEquals ( 4, ( int ) TestUtils. foo ( null, 3 ) ) ; assertEquals ( 5, ( int ) TestUtils. foo ( null, 4 ) ) ; }"
int count = 0 ; if ( map. containsKey ( key ) ) { count = map. get ( key ) ; } return count ; }
"int i = Integer. parseInt ( s ) ; if ( i < 0 ) { return null ; } return new Rating ( s, i ) ; }"
"Session session = HibernateUtil. getSessionFactory ( ). getCurrentSession ( ) ; Criteria criteria = session. createCriteria ( Person. class ) ; criteria. add ( Restrictions. eq ( ""John"", new Date ( ) ) ) ; return criteria ; }"
"INDArray array = Nd4j. create ( 2 ) ; array. assign ( new double [ ] { 1.0, 2.0 }, new double [ ] { 3.0, 4.0 } ) ; return array ; }"
double cost = 0 ; for ( ServerHolder server : serverHolders ) { cost += foo ( server ) ; } return cost ; }
"int foo = 0 ; for ( int i = 0 ; i < answer. length ; i ++ ) { if ( answer [ i ]. equals ( ""y"" ) ) { foo ++ ; } else { return false ; } } return true ; }"
"appController. task ( ) ; assertEquals ( ""Attempts for task_01_01_m01_01"", appController. getProperty ( ). get ( ""title"" ) ) ; assertEquals ( ""Attempts for task_01_02_m01_02"", appController. getProperty ( ). get ( ""title"" ) ) ; }"
if ( colCh == 'A' ) return ( int ) ( colCh * 2 ) ; if ( rowCh == 'A' ) return ( int ) ( colCh * 2 ) ; return ( int ) ( ( rowCh * 2 ) + colCh * 2 ) ; }
"if ( o == null ) { throw new NullPointerException ( ) ; } if ( o instanceof Number ) { return o. toString ( ) ; } throw new BeanException ( ""Failed to convert object of type "" + o. getClass ( ) + "": Not a big-decimal."" ) ; }"
for ( SLogoCustomCommand c : commands ) { if ( c. getName ( ). equals ( varName ) ) { return c ; } } return null ; }
"File temp = File. createTempFile ( ""foo"", null, tempFolder ) ; return temp. getAbsolutePath ( ) ; }"
"buildRule. executeTarget ( ""testfoo"" ) ; if ( buildRule. getProject ( ). getProperty ( ""testfoo"" ). indexOf ( ""maven-plugin"" ) < 0 ) { fail ( ""Build exception should have been thrown"" ) ; } }"
"assertEquals ( 123, BinaryUtil. toInt ( ( short ) 3 ) ) ; assertEquals ( 123, BinaryUtil. toInt ( ( short ) 2 ) ) ; assertEquals ( 123, BinaryUtil. toInt ( ( short ) 1 ) ) ; assertEquals ( 123, BinaryUtil. toInt ( ( short ) 3 ) ) ; assertEquals ( 123, BinaryUtil. toInt ( ( short ) 4 ) ) ; assertEquals ( 123, BinaryUtil. toInt ( ( short ) 5 ) ) ; }"
"Collections. sort ( courses, new Comparator < CourseSummaryBundle > ( ) { @ Override public int compare ( CourseSummaryBundle obj1, CourseSummaryBundle obj2 ) { return ( - 1 ) * obj1. course. createdAt. compareTo ( obj2. course. createdAt ) ; } } ) ; }"
"if ( parms. length == 1 ) { String msg = ""foo"" ; for ( int i = 0 ; i < parms. length ; i ++ ) { msg += parms [ i ] ; } callbackReceiver. handleMessage ( msg ) ; } }"
"foo ( xChartMin, deltaX, deltaY ) ; foo ( yChartMin, yChartMin, deltaX, deltaY ) ; }"
"if ( reference == null ) { throw new ElasticsearchNullPointerException ( format ( errorMessageTemplate, errorMessageArgs ) ) ; } return reference ; }"
"List < String > names = new ArrayList < > ( ) ; for ( int i = 0 ; i < foo. length ( ) ; i ++ ) { names. add ( foo. substring ( i, i + 1 ) ) ; } return names ; }"
buffer [ initialOffset ++ ] = ( byte ) ( value >>> 24 ) ; buffer [ initialOffset ++ ] = ( byte ) ( value >>> 16 ) ; buffer [ initialOffset ++ ] = ( byte ) ( value >>> 8 ) ; buffer [ initialOffset ] = ( byte ) ( value >>> 0 ) ; }
"if ( stack == null || stack. stackSize ( ) < 1 ) { stack = new ItemStack ( ) ; } Spawner spawner = new Spawner ( source, Math. max ( 0, stack. getMaxStackSize ( ) ), stack. getMaxStackSize ( ) ) ; spawner. play ( ) ; return stack ; }"
"String name = getPresentationName ( ) ; if (! """". equals ( name ) ) { result = UIManager. getString ( ""AbstractUndoableEdit.redoText"" ) + "" "" + name ; } else { result = UIManager. getString ( ""AbstractUndoableEdit.redoText"" ) ; } return result ; }"
"Menu menu = new Menu ( table ) ; MenuItem itemCopy = new MenuItem ( menu, SWT. NONE ) ; itemCopy. setText ( ""Copy"" ) ; itemCopy. addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent arg0 ) { copy ( ) ; } } ) ; return menu ; }"
JdrReport report = new JdrReport ( ) ; report. setJdrVersion ( 1 ) ; report. setProtocol ( protocol ) ; report. setHost ( host ) ; report. setPort ( port ) ; return report ; }
"Map < String, String > parameters = new HashMap < > ( ) ; parameters. put ( ""foo"", ""bar"" ) ; return parameters ; }"
"String request = ""http://www.displaytag.org/displaytag/index.jsp?param1=1&param2=2"" ; Nome nome = UnoRuntime. queryInterface ( Nome. class, request ) ; }"
"if ( description!= null ) { System. out. print ( "" "" ) ; System. out. print ( description ) ; } System. out. flush ( ) ; }"
JQLParser parser = new JQLParser ( ) ; parser. setParseString ( text ) ; parser. setErrorMsg ( errorMsg ) ; return parser ; }
"String result = """" ; for ( int i = 0 ; i < dash. length ; i ++ ) { result += dash [ i ] + shift ; } return result ; }"
JAXBContext jc = JAXBContext. newInstance ( classe ) ; Unmarshaller unmarshaller = jc. createUnmarshaller ( ) ; return ( T ) unmarshaller. unmarshal ( new FileInputStream ( xmlFile ) ) ; }
double r = 0. ; for ( int j = 0 ; j < n ; j ++ ) { double a = 1.0 / n ; double b = 1.0 / k ; r += a * b ; } return r ; }
int max = Integer. MAX_VALUE ; double dx = pt. getX ( ) - pt. getX ( ) ; double dy = pt. getY ( ) - pt. getY ( ) ; return dx * dx + dy * dy ; }
"DateFormat dateFormat = new SimpleDateFormat ( ""yyyyMMdd"" ) ; Date date = new Date ( ) ; String dailyOutput = dateFormat. format ( date ) + System. getProperty ( ""line.separator"" ) ; return dailyOutput ; }"
try { Class. forName ( jdbcClass ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; return false ; } return true ; }
final Class <? > [ ] result = new Class <? > [ 1 ] ; result [ 0 ] = c ; return result ; }
int [ ] result = new int [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { result [ i ] = foo ( i ) ; } return result ; }
"if ( key == null ) { throw new IllegalArgumentException ( ""foo: key may not be null"" ) ; } if ( value == null ) { throw new IllegalArgumentException ( ""foo: value may not be null"" ) ; } fooConfig. put ( key, value ) ; }"
final Context context = application. context ( ) ; return context == null? context : context. myContext ( ) ; }
"String temp = request. getParameter ( name ) ; return temp!= null && temp. equals ( ""true"" ) ; }"
if ( action!= null ) { return action. getMethod ( foo. getName ( ) ) ; } return method ; }
try { return prop. getValue ( ) == value ; } catch ( ClassCastException e ) { return false ; } }
"int result = 0 ; for ( LengthValidator lengthValidator : validator. getValidators ( ) ) { result = Math. max ( result, lengthValidator. foo ( lengthValidator ) ) ; } return result ; }"
Random r = new Random ( ) ; return new Long ( r. nextLong ( ) ) ; }
"try { Map < String, Integer > bindings = bindings. get ( locationId ) ; if ( bindings!= null ) { return true ; } } catch ( IllegalArgumentException iae ) { } return false ; }"
"for ( final Entry < String, Integer > entry : fields. entrySet ( ) ) { final int col = entry. getValue ( ). intValue ( ) ; if ( col < NUM_COLS ) { map. put ( entry. getKey ( ), entry. getValue ( ) ) ; } } return map ; }"
"auth. requireView ( ) ; Set < RoleModel > roles = scopedClient. getRoles ( ) ; return ScopeMappedResource. roles ( scopeContainer, roles ) ; }"
"mIsBrowsing = browsing ; mNavigator. browseAdjacentTrack ( SongPicker. DIRECTION_FORWARD, false ) ; if (! mIsBrowsing && isPlaying ( ) ) { play ( ) ; } }"
"int h = 0, r = 0 ; for ( int i = 0 ; i < 9 ; i ++ ) { for ( int j = 0 ; j < 9 ; j ++ ) { if ( board [ i ] [ j ] == 0 ) { h ++ ; r ++ ; } } } return h == 9 || r == 10 ; }"
PerfRate rate = new PerfRate ( ) ; return rate ; }
try { release ( Foo. class ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } }
"double [ ] point = new double [ 3 ] ; point [ 0 ] = position. x ; point [ 1 ] = position. y ; MaxHeap < Lane > nearestNeighbour = kdTree. findNearestNeighbors ( point, 1, distanceFunction ) ; return nearestNeighbour. getMax ( ) ; }"
"for ( int i = 0 ; i < args. length ; i ++ ) { System. out. printf ( String. format ( Locale. US, format, args [ i ] ), args [ i ] ) ; } }"
"byte [ ] bytes = new byte [ byteCount ] ; buffer. get ( bytes, 0, byteCount ) ; crc. update ( bytes ) ; }"
try { return d_ISWbemMethodSetProxy. foo ( ) ; } catch ( com. linar. jintegra. AutomationException automationException ) { automationException. fillInStackTrace ( ) ; throw automationException ; } }
File file = new File ( path ) ; boolean success = file. delete ( ) ; if (! success ) { } }
final COperandTree result = new COperandTree ( module ) ; result. add ( new ReilInstructionOperand ( ) ) ; return result ; }
if ( instance == null ) instance = new TracerSupport ( ) ; return instance ; }
if ( lastRow == null ) { return false ; } else { return lastRow ; } }
"String result = fileName ; result = result. replace ( '|', '/' ) ; result = result. replace ( '/', '|' ) ; result = result. replace ( '|', '/' ) ; if ( result. endsWith ( ""/"" ) ) { result = result. substring ( 0, result. length ( ) - 1 ) ; } return result ; }"
"IntStatistics h = new IntStatistics ( 10 ) ; h. addValue ( 3 ) ; h. addValue ( 3 ) ; h. addValue ( 3 ) ; h. addValue ( 3 ) ; Assert. assertEquals ( 3.0, h. getValue ( ), EPSILON ) ; Assert. assertEquals ( 3.0, h. getValue ( ), EPSILON ) ; }"
"path. moveTo ( x, y ) ; path. lineTo ( x + width, y ) ; path. lineTo ( x + width, y + height ) ; }"
"SimpleDateFormat df = null ; Date d = null ; df = new SimpleDateFormat ( aMask ) ; try { d = df. parse ( strDate ) ; } catch ( ParseException pe ) { throw new ParseException ( pe. getMessage ( ), pe. getErrorOffset ( ) ) ; } return d ; }"
cardOrder = new ArrayList < > ( ) ; for ( int x = 0 ; x < 5 ; x ++ ) { cardOrder. add ( x ) ; } cardOrder = new ArrayList < > ( ) ; for ( int y = 0 ; y < 5 ; y ++ ) { for ( Card c : cardOrder ) { cardOrder. add ( c ) ; } } }
for ( int i = 0 ; i < av. size ( ) ; i ++ ) { AttributeField af = ( AttributeField ) av. elementAt ( i ) ; if ( af. getAttributeName ( ). equals ( attribute_name ) ) return af ; } return null ; }
SchemaBuilder builder = SchemaBuilder. newInstance ( ) ; builder. addSource ( is ) ; Schema schema = builder. build ( ) ; return schema ; }
"String uri = account. getStoreUri ( ) ; if ( uri. startsWith ( ""local"" ) ) { LocalStore store = LocalStore. get ( uri ) ; if ( store!= null ) { throw new RuntimeException ( ""LocalStore already exists"" ) ; } } else { store = new LocalStore ( account. getStoreUri ( ) ) ; } }"
"float x = stop - start ; float y = start ; float z = stop - start ; Axis axis = new Axis ( x, y, z ) ; return axis ; }"
for ( int i = 0 ; i < parent. getRelations ( ). size ( ) ; i ++ ) { if ( parent. isRelation ( children. get ( i ) ) ) return i ; } return - 1 ; }
"XQueryService xqueryService = null ; try { xqueryService = ( XQueryService ) UnoRuntime. queryInterface ( XQueryService. class, documentName ) ; storeXMLStringAndGetQueryService ( xqueryService, content ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } return xqueryService ; }"
List < String > result = new ArrayList < String > ( ) ; if ( jArray. length ( ) == 0 ) { return result ; } for ( int i = 0 ; i < jArray. length ( ) ; i ++ ) { try { result. add ( foo ( jArray. get ( i ) ) ) ; } catch ( JSONException e ) { result. add ( null ) ; e. printStackTrace ( ) ; } } return result ; }
if ( value == null ) { return false ; } return value. startsWith ( foo ) ; }
"if ( expected. size ( ) == actual. size ( ) ) { return ; } for ( int i = 0 ; i < expected. size ( ) ; i ++ ) { assertEquals ( expected. get ( i ), actual. get ( i ) ) ; } }"
final Element doc = doclet ( xqdoc ) ; parent. addChild ( doc ) ; }
for ( int i = 0 ; i < states. length ; ++ i ) { if ( states [ i ]!= state ) currentModel. keepState ( i ) ; } }
int [ ] bar = null ; if ( tab!= null ) { bar = new int [ tab. length + 1 ] ; for ( int i = 0 ; i < tab. length ; i ++ ) { bar [ i ] = tab [ i ] ; } } else { bar = new int [ tab. length ] ; for ( int i = 0 ; i < tab. length ; i ++ ) { bar [ i ] = tab [ i ] ; } } return bar ; }
"ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; DataOutputStream os = new DataOutputStream ( baos ) ; foo ( instance, os ) ; return baos. toString ( ) ; }"
"out. println ( ""<<"" ) ; PdfName key ; PdfObject value ; for ( Iterator i = dictionary. getKeys ( ). iterator ( ) ; i. hasNext ( ) ; ) { key = ( PdfName ) i. next ( ) ; value = dictionary. get ( key ) ; out. print ( key. toString ( ) ) ; out. print ('' ) ; foo ( value ) ; } out. println ( "">>"" ) ; }"
if ( c instanceof Container ) { Component [ ] components = ( ( Container ) c ). getComponents ( ) ; for ( int i = 0 ; i < components. length ; i ++ ) components [ i ]. updateUI ( ) ; } }
"String httpPort = environment. resolvePlaceholders ( ADMIN_PORT ) ; Assert. notNull ( httpPort, ""Admin server port is not set."" ) ; logger. info ( ""Admin web UI: "" + String. format ( ""http://%s:%s/%s"", RuntimeUtils. getHost ( ), httpPort, ConfigLocations. XD_ADMIN_UI_BASE_PATH ) ) ; }"
"SwingComponentDecorationFactory factory = ( SwingComponentDecorationFactory ) decorations. get ( ) ; if ( factory == null ) { factory = new SwingComponentDecorationFactory ( ) ; decorations. put ( new Object ( ), factory ) ; } return factory ; }"
k2. left = k2. right ; k2. right = k1 ; return k2 ; }
try { aStream. flush ( ) ; } catch ( final IOException e ) { e. printStackTrace ( ) ; } finally { StreamUtils. close ( aStream ) ; } }
ZNode node = new ZNode ( 0 ) ; int count = 0 ; while ( node. getParentNode ( )!= null ) { node = node. getParentNode ( ) ; count ++ ; } node. delete ( ) ; }
for ( int i = 0 ; i < classNamePattern. length ( ) ; i ++ ) { if ( classNamePattern. charAt ( i ) == '(' ) { foo. push ( 1 ) ; } else if ( classNamePattern. charAt ( i ) == ')' ) { foo. push ( 2 ) ; } else { foo. push ( 1 ) ; } } }
final double percent = ( actualValue - mMinActualValue ) * 0.05 ; if (! reverseTransformedDataOrder ) { percent = mMinActualValue - actualValue ; } return percent ; }
"int len = string. length ( ) ; byte [ ] result = new byte [ len / 2 ] ; for ( int i = 0 ; i < len ; i += 2 ) { result [ i / 2 ] = ( byte ) ( ( Character. digit ( string. charAt ( i ), 16 ) << 4 ) + Character. digit ( string. charAt ( i + 1 ), 16 ) ) ; } return result ; }"
"int [ ] array = new int [ 100 ] ; for ( int i = 0 ; i < array. length ; i ++ ) { array [ i ] = StdRandom. uniform ( 0, 100 ) ; } return array ; }"
Set < ConditionsTreeNode > result = new HashSet < ConditionsTreeNode > ( ) ; foo ( result ) ; return result ; }
"int width = imagen. getWidth ( ) ; int height = imagen. getHeight ( ) ; boolean revancha_op = false ; for ( int x = 0 ; x < width ; x ++ ) { for ( int y = 0 ; y < height ; y ++ ) { if ( imagen. getRGB ( x, y ) == 0 ) { revancha_op = true ; } } } return revancha_op ; }"
for ( int i = 0 ; i < 6 ; i ++ ) if ( ( planes [ i ]. normal. x * x + planes [ i ]. normal. y * y + planes [ i ]. normal. z * z ) < ( - radius - planes [ i ]. d ) ) return false ; return true ; }
"if ( immediate < 1 ) { return ""0"" + immediate ; } else { return Long. toString ( immediate ) ; } }"
Node m = n. getNextSibling ( ) ; while ( m!= null && m. getNodeType ( )!= Node. ELEMENT_NODE ) { m = m. getNextSibling ( ) ; } return ( Element ) m ; }
if ( v ) { foo = true ; } else { foo = false ; } }
"Map < String, Element > map = inputElement. getChildren ( ) ; for ( Map. Entry < String, Element > entry : map. entrySet ( ) ) { if ( entry. getValue ( ). equals ( ""foo"" ) ) { return true ; } } return false ; }"
"Map < String, Object > defProperties = new HashMap < > ( ) ; defProperties. put ( SPRING_PROFILE_DEFAULT, Constants. SPRING_PROFILE_DEVELOPMENT ) ; app. setDefaultProperties ( defProperties ) ; }"
for ( int i = 0 ; i < listeners. length ; i ++ ) { listeners [ i ] = listener ; } }
"int foo = 0 ; try { foo = Integer. parseInt ( System. getProperty ( ""line.separator"" ) ) ; } catch ( NumberFormatException e ) { } return foo ; }"
CarbonDictionaryColumnMetaChunk thriftObject = ( CarbonDictionaryColumnMetaChunk ) dictionaryChunks. get ( dictionaryChunks. size ( ) - 1 ) ; return thriftObject ; }
s. defaultReadObject ( ) ; theHead = ( Node ) s. readObject ( ) ; theTail = ( Node ) s. readObject ( ) ; }
"String id = metadata. get ( ""AWS_REQUEST_ID"" ) ; return id!= null? id : ""null"" ; }"
"String result = """" ; for ( int i = 0 ; i < a. length ; i ++ ) { result += a [ i ] ; } return result ; }"
if ( level <= 0 ) { return boundablesOfALevel. get ( 0 ) ; } return foo ( boundablesOfALevel. get ( level - 1 ) ) ; }
"FileType ft = new FileType ( ""foo"" ) ; Assert. assertTrue ( ft. accept ( new FileType ( ""string"" ) ) ) ; Assert. assertFalse ( ft. canRead ( new FileType ( ""string"" ) ) ) ; Assert. assertTrue ( ft. canRead ( new FileType ( ""string"" ) ) ) ; Assert. assertFalse ( ft. canRead ( new FileType ( ""string"" ) ) ) ; }"
"try { String [ ] parts = uri. split ( ""/"" ) ; return parts [ parts. length - 1 ] ; } catch ( IndexOutOfBoundsException e ) { return """" ; } }"
FetchHelper fetcher = new FetchHelper ( face ) ; return fetcher. foo ( name ) ; }
"AbstractWebAuthorizationHelper h = ( AbstractWebAuthorizationHelper ) sc. getProperty ( WebAuthorizationHelper. class. getName ( ) ) ; if ( h == null ) { h = new WebAuthorizationHelper ( sc ) ; sc. setProperty ( WebAuthorizationHelper. class. getName ( ), h ) ; } return h ; }"
"SearchData data = new SearchData ( ) ; data. setSearchType ( ""foo"" ) ; data. setStartDate ( new Date ( ) ) ; data. setEndDate ( new Date ( ) ) ; data. setSortField ( ""date"" ) ; data. setLength ( 10 ) ; model. put ( ""data"", data ) ; }"
"textView. setText ( username ) ; textView. setText ( ""How are you doing?"" ) ; }"
"String mimeType = MIME_TYPES. get ( file. getName ( ). toLowerCase ( ) ) ; if ( mimeType!= null && mimeType. startsWith ( ""application/vnd.ms-excel"" ) ) { return ""application/vnd.ms-excel"" ; } return ""application/x-www-form-urlencoded"" ; }"
"int pointIndex = index * 3 ; Point prev = m_points. get ( pointIndex ) ; p. x = m_points. get ( pointIndex ). x ; p. y = m_points. get ( pointIndex ). y ; m_points. put ( pointIndex, p ) ; }"
SessionHandle sessionHandle = SessionHandle. fromString ( queryHandle ) ; return Response. ok ( sessionHandle. foo ( publicId ) ). build ( ) ; }
"try { return new String ( data, offset, length, ""US-ASCII"" ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }"
String [ ] result = new String [ array. length + 1 ] ; for ( int i = 0 ; i < array. length ; i ++ ) { result [ i ] = array [ i ] ; } result [ result. length - 1 ] = element ; return result ; }
"buf. setByte ( 0, ( byte ) 1 ) ; buf. setByte ( 7, ( byte ) 0 ) ; return buf. getByte ( ) == 0 ; }"
long diff = time1 - time2 ; return diff / MILLIS_PER_DAY ; }
"if ( type. isUnknown ( ) ) { return false ; } if ( type. isVarArgs ( ) ) { JSType [ ] varArgs = type. getVariables ( ) ; System. arraycopy ( varArgs, 0, varArgs, 0, varArgs. length ) ; return true ; } return false ; }"
if ( GristType. B > 0 && GristType. A == primary ) return GristType. A ; else if ( GristType. B == primary ) return GristType. B ; else if ( GristType. C == primary ) return GristType. C ; else return GristType. Unknown ; }
"Server s = new Server ( user ) ; user. addSystem ( 1, System. currentTimeMillis ( ) ) ; UserTestUtils. addVirtualizationPlatform ( user, s ) ; UserTestUtils. addGuestSystem ( user, 1 ) ; System. currentTimeMillis ( ) ; s. addSystem ( 1, System. currentTimeMillis ( ) ) ; return s ; }"
GridColumnData lGridColumnData = new GridColumnData ( ) ; lGridColumnData. setName ( pSerializationDataObject. getName ( ) ) ; lGridColumnData. setValue ( pSerializationDataObject. getValue ( ) ) ; return lGridColumnData ; }
int x = snapshot ; while ( x > prior ) { x -= 1 ; } return x ; }
"prepareHttpRequest ( ""message/SAMLResponse.xml"", ""HEAD"", ""http://localhost:8080/url"", ""text/html"" ) ; replayMock ( ) ; processor. retrieveMessage ( samlContext ) ; verifyMock ( ) ; }"
for ( Corpus corpus : corpora ) { if (! sources. isSimple ( corpus. getType ( ) ) ) { corpus. addSource ( sources. getInstance ( ) ) ; } } if (! corpora. isEmpty ( ) ) { for ( Corpus source : corpora ) { sources. addSource ( source ) ; } } }
"if ( algorithm == null ) { throw new IllegalArgumentException ( ""algorithm == null"" ) ; } return new SASLSRPIALG ( algorithm ) ; }"
"StringBuffer sb = new StringBuffer ( ) ; sb. append ( ""["" ) ; if ( logLevel == LogLevel. Fatal ) { sb. append ( ""0"" ) ; } sb. append ( logLevel. getPriorityLetter ( ) ) ; sb. append ( ""."" ) ; if ( tag!= null ) { sb. append ( tag ) ; } sb. append ( "": "" ) ; sb. append ( message ) ; sb. append ( ""]"" ) ; return sb. toString ( ) ; }"
final ArtifactList artifacts = new ArtifactList ( mavenRepo. listFiles ( ) ) ; artifacts. remove ( Arrays. asList ( testId ) ) ; artifacts. forEach ( artifact -> { if ( artifact. getGroupId ( ). equals ( testId ) ) { artifacts. remove ( artifact ) ; } } ) ; }
int count = 0 ; StatusWeatherData report = foo ( stationId ) ; if ( report!= null ) { return report ; } report = foo ( stationId ) ; if ( report!= null ) { return report ; } return null ; }
if ( foo == null ) { foo = new com. amazonaws. internal. ListWithAutoConstructFlag < ReservedCacheNodesOffering > ( ) ; foo. setAutoConstruct ( true ) ; } return foo ; }
"checkArgument ( to. isZero ( ), ""to must be non-negative"" ) ; return new ScriptBuilder ( ). fromAddress ( to ). build ( ) ; }"
"String path = model. get ( ""path"" ) ; if ( path == null ) { path = ""/"" ; } return ""/foo/"" + path ; }"
"if ( creds. getClass ( ). equals ( StorageCredentialsAccountAndKey. class ) ) { opContext = opContext == null? new OperationContext ( ) : opContext ; BaseRequest. signRequestForSharedKey ( request, ( ( StorageCredentialsAccountAndKey ) creds ). getCredentials ( ), contentLength, opContext ) ; } }"
for ( int i = 0 ; i < listener. length ; i ++ ) { listeners. push ( listener [ i ] ) ; } }
task. priority ( Priority. LOW ) ; queue. addLast ( task ) ; queue. reverse ( ) ; }
"eventHandler. onServiceEvent ( null, DdeServiceEvent. SERVICE_UP ) ; eventHandler. onServiceEvent ( null, DdeServiceEvent. SERVICE_UP ) ; }"
if ( param <= 0.0 ) { maxOptRMSD = 99 ; } else if ( param <= 100.0 ) { maxOptRMSD = 100.0 ; } }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"ResultSet rs = db. createStatement ( ). executeQuery ( ""SELECT COUNT(*) FROM "" + tableName ) ; try { rs. next ( ) ; return rs. getInt ( 1 ) ; } finally { rs. close ( ) ; } }"
double c = 0 ; for ( int gear = 0 ; gear < 10 ; gear ++ ) { c += gear * frequency ; } return c ; }
"CmsOrganizationalUnit orgUnit = readOrganizationalUnit ( cms, ouFqn ) ; m_securityManager. expandUser ( cms. getRequestContext ( ), orgUnit, userName ) ; }"
"checkNotNull ( source, ""Source list cannot be null"" ) ; checkNotNull ( loopBody, ""Loop body cannot be null"" ) ; return new ParallelLoopResult < R > ( source, loopBody, ( ) -> { for ( T t : source ) { R r = loopBody. execute ( t ) ; return new ParallelLoopResult < R > ( r ) ; } } ) ; }"
"StringBuilder path = new StringBuilder ( "".../src/test/resources/testData/"" ) ; for ( String name : names ) { path. append ( name ). append ( ""/"" ) ; } return new File ( path. toString ( ) ) ; }"
"b. put ( offset, ( byte ) ( shortval & 0xFF ) ) ; b. put ( offset + 1, ( byte ) ( ( shortval >> 8 ) & 0xFF ) ) ; }"
if ( octect == '0' ) return true ; if ( octect == '9' ) return true ; if ( octect == 'A' || octect == 'B' ) return true ; if ( octect == 'C' || octect == 'D' || octect == 'E' ) return true ; return false ; }
"IWorkspace ws = ResourcesPlugin. getWorkspace ( ) ; RootNode root = new RootNode ( repository, ws ) ; if ( changeHistory ) { foo ( root, true ) ; } else { foo ( root, false ) ; } }"
ActiveMQBuffer buff = buffer ; return buff ; }
if ( disabled ) { return image ; } try { return ImageIO. read ( image ) ; } catch ( Exception e ) { return image ; } }
"String foo = ""foo"" ; return foo ; }"
List < String > result = new ArrayList < String > ( ) ; for ( int i = 0 ; i < foo. length ( ) ; i ++ ) { result. add ( foo. charAt ( i ) ) ; } return result ; }
List < Insurance > result = new ArrayList < Insurance > ( ) ; for ( int i = 0 ; i < risks. size ( ) ; i ++ ) { result. add ( risks. get ( i ). foo ( ) ) ; } Collections. sort ( result ) ; return result ; }
"SecurityManager sm = System. getSecurityManager ( ) ; if ( sm!= null ) { sm. checkPermission ( new RuntimePermission ( SecurityConfiguration. class. getName ( ) + "".foo"" ) ) ; } foo_ = charset ; }"
"ValueEnforcer. notNull ( sValue, ""Value"" ) ; return new RegExMatcher ( sRegEx, sValue ) ; }"
Double [ ] foo = new Double [ apList. size ( ) ] ; for ( int i = 0 ; i < apList. size ( ) ; i ++ ) { foo [ i ] = sum ( apList. get ( i ) ) / apList. size ( ) ; } return foo ; }
for ( int i = 0 ; i < NCALLS ; ++ i ) { System. nextFloat ( ) ; } }
"for ( Component comp : newComponents ) { if ( comp. isCompactionable ( ) ) { return ; } comp. put ( newComponents. iterator ( ). next ( ), comp ) ; } }"
if ( config. getExpiration ( ) == 0 ) { config. setExpiration ( 60000 ) ; } return config. getExpiration ( ) > 0 ; }
"setVariationCount ( 1 ) ; SQLInjectionAnalyzerEntry entry = new SQLInjectionAnalyzerEntry ( ""select sysdate from dual"", 1 ) ; assertEquals ( 1, entry. getVariationCount ( ) ) ; }"
int foo = 0 ; boolean b = true ; for ( int i = 0 ; i < 3 ; i ++ ) { if ( b ) { foo |= 1 << ( i & 0x1F ) ; } else { foo |= 2 << ( i & 0x1F ) ; } } return foo ; }
if ( offset >= 0 ) { return foo ( offset ) ; } else { return foo ( limit ) ; } }
HashSet < Node > result = new HashSet < Node > ( ) ; Node n = root ; while ( n!= null ) { if (! n. isVisited ) { result. add ( n ) ; } n = n. right ; } return result ; }
"try { return foo ( batchClassIdentifier ) ; } catch ( Exception e ) { LOG. error ( ""Error in foo() method "" + batchClassIdentifier, e ) ; } return null ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
out = new DispatcherOutputStream ( response. getOutputStream ( ) ) ; return new DispatcherOutputStream ( out ) ; }
"List < Path > validate = new ArrayList < > ( ) ; for ( Path directory : directories ) { validate. addAll ( Arrays. asList ( directory. resolve ( ""test-suite.xml"" ) ) ) ; } for ( Path directory : directories ) { validate. addAll ( Arrays. asList ( directory. resolve ( ""test-suite.xml"" ) ) ) ; } }"
"String [ ] args = { ""-d"", ""Datenbank"", ""-h"", ""127.0.0.1"", ""-u"", ""user1"" } ; Main. parseArgs ( args ) ; assertEquals ( ""DB 1"", Main. getConnection ( ). getHost ( ) ) ; assertEquals ( ""Hostname 1"", Main. getConnection ( ). getPort ( ) ) ; }"
"List < Key > result = new ArrayList < Key > ( ) ; for ( CujoProperty p : properties ) { result. add ( new Key ( p. getName ( ), p. getValue ( ) ) ) ; } return result ; }"
"long hash = meta. getInt ( ""hash"" ) ; byte [ ] hashBytes = new byte [ hash ] ; hashBytes [ 0 ] = ( byte ) meta. getInt ( ""block"" ) ; hashBytes [ 1 ] = ( byte ) meta. getInt ( ""bit"" ) ; hashBytes [ 2 ] = ( byte ) meta. getInt ( ""length"" ) ; long base = hashBytes [ 0 ] ; return new BloomFilter ( base, hashBytes ) ; }"
int foo = 0 ; for ( int y = 0 ; y < height ; y ++ ) { for ( int x = 0 ; x < width ; x ++ ) { if ( squares [ x ] [ y ] > 0 ) foo ++ ; } else if ( squares [ x ] [ y ] == 0 ) return false ; } return true ; }
GlyphTable glyf = ( GlyphTable ) tables. get ( GlyphTable. TAG ) ; if ( glyf!= null &&! glyf. getInitialized ( ) ) { readTable ( glyf ) ; } return glyf ; }
switch ( classifierID ) { case ProblemsPackage. PROBLEM : { Problem problem = ( Problem ) theEObject ; Object result = caseProblem ( problem ) ; if ( result == null ) result = defaultCase ( theEObject ) ; return result ; } default : return defaultCase ( theEObject ) ; } }
"PdfTemplate template = new PdfTemplate ( cb, ( byte ) 0 ) ; if ( barColor!= null ) { template. setBarcodeColor ( barColor ) ; } if ( textColor!= null ) { template. setTextColor ( textColor ) ; } return template ; }"
Promise < Void > ret = new Promise < > ( ) ; for ( Promise <? > p : waitFor ) { ret = foo ( p ) ; } return ret ; }
byte [ ] result = new byte [ 4 ] ; result [ 0 ] = ( byte ) ( sEventTime. toMillis ( ) * sSensorId. longValue ( ) ) ; result [ 1 ] = ( byte ) ( sValue_y. toMillis ( ) * sSensorId. longValue ( ) ) ; result [ 2 ] = ( byte ) ( sEventTime. toMillis ( ) * sSensorId. longValue ( ) ) ; return result ; }
switch ( mode ) { case SERIAL : return LockType. SERIAL ; case DIRECT : return LockType. DIRECT ; case READ : return LockType. READ_ONLY ; case WRITE : return LockType. WRITE_ONLY ; default : return LockType. NONE ; } }
"final Element edgeElt = parentElement. addElement ( sourceId ) ; edgeElt. setAttribute ( ""source"", sourcePort ) ; edgeElt. setAttribute ( ""target"", targetPort ) ; return edgeElt ; }"
"String componentName = q. getPackagePart ( ) + ""."" + q. getName ( ) ; return new ComponentName ( componentName ) ; }"
"String uuid = UUID. randomUUID ( ). toString ( ) ; Map < String, LockService > map = new HashMap < > ( ) ; map. put ( ""lockService.uuid"", uuid ) ; map. put ( ""path"", path ) ; foo ( map, lockService ) ; }"
"MotorPort port = motorPorts. get ( id ) ; if ( port == null ) { port = new MotorPort ( id ) ; motorPorts. put ( id, port ) ; } return port ; }"
int h = 0 ; for ( int i = 0 ; i < a. length ( ) && i < b. length ( ) ; i ++ ) { if ( a. charAt ( i )!= b. charAt ( i ) ) h ++ ; } return h ; }
"BufferedWriter out = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( jsonFileName ), true ) ) ; for ( Annonce annonce : annonces ) { out. write ( annonce. toJSON ( ) ) ; } out. close ( ) ; }"
"Calendar c1 = Calendar. getInstance ( ) ; c1. setTime ( d1 ) ; Calendar c2 = Calendar. getInstance ( ) ; c2. setTime ( d2 ) ; return foo ( c1, c2 ) ; }"
try { return Long. valueOf ( str ) ; } catch ( Throwable e ) { return defval ; } }
if ( instance == null ) { instance = new ConfigWriter ( ) ; } return instance ; }
for ( int x = 0 ; x < 100 ; x ++ ) { for ( int y = 0 ; y < 100 ; y ++ ) { if ( pickablePolygons [ x ] [ y ] ) { return false ; } } } return true ; }
"final Engine engine = getEngineByName ( ""foo"" ) ; if ( engine == null ) { throw new IllegalStateException ( ""The engine is not initialized."" ) ; } return engine ; }"
if ( handler!= null ) { handler. foo ( message ) ; } else { logger. warn ( message ) ; } }
List < T > result = new ArrayList < > ( left. size ( ) + right. size ( ) ) ; for ( int i = 0 ; i < left. size ( ) ; i ++ ) { if ( left. get ( i ). equals ( right. get ( i ) ) ) { result. add ( left. get ( i ) ) ; } } return result ; }
"em. getTransaction ( ). begin ( ) ; List < Integer > list = em. createQuery ( ""from Product where productId =?"", Integer. class ). setParameter ( ""productId"", productId ). getResultList ( ) ; list. remove ( 0 ) ; em. getTransaction ( ). commit ( ) ; }"
boolean result = false ; final DataFlavor [ ] flavors = evt. getCurrentDataFlavors ( ) ; for ( int i = 0 ; i < flavors. length ; i ++ ) { if ( flavors [ i ]. equals ( DataFlavor. javaFileListFlavor ) ) { result = true ; } } return result ; }
for ( int j = 0 ; j < neurons. length ; j ++ ) neurons [ j ]. foo ( i ) ; }
"double d = 0.00 ; for ( int i = 0 ; i < 10000 ; i ++ ) { d += 10000.0 * Math. pow ( 10, i ) ; } return d ; }"
"Map < String, Collection < String >> result = new HashMap < > ( ) ; while ( iterator. hasNext ( ) ) { final String line = iterator. next ( ) ; result. put ( line, Collections. singletonList ( foo ( line ) ) ) ; } return result ; }"
"int sizeNeeded = size + additionalCapacity ; if ( sizeNeeded >= items. length ) resize ( Math. max ( 8, sizeNeeded ) ) ; return items ; }"
"int count = 0 ; for ( int i = 0 ; i < v. size ( ) ; i ++ ) { v. put ( i, foo ( v. get ( i ) ) ) ; count ++ ; } return count ; }"
if ( instance == null ) { instance = new RegisteredSnapshotCategories ( ) ; } return instance ; }
try { return foo ( param ) ; } catch ( Exception e ) { return null ; } }
defaultLog. trace ( msg ) ; if ( synCtx. getServiceLog ( )!= null ) { synCtx. getServiceLog ( ). trace ( msg ) ; } }
MediaType formatMediaType = formatOption. getOption ( ). getMediaType ( ) ; return formatMediaType. equals ( requiredMediaType )? 1 : 0 ; }
"String bootURL = ""${"" + MMS_HOME + ""}"" + BOOT_URL ; return getURL ( bootURL ) ; }"
callEvent. setCall ( true ) ; for ( CallListener listener : listeners ) { listener. foo ( callEvent ) ; } }
"byte [ ] r = apdu. getData ( ) ; if ( r == null || r. length < apdu. getDataLen ( ) ) { byte [ ] buf = new byte [ apdu. getDataLen ( ) ] ; System. arraycopy ( apdu. getData ( ), 0, buf, 0, r. length ) ; apdu. setData ( buf, 0, r. length ) ; } }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
if ( encounterProbability <= 0 ) { return null ; } return foo ( encounterProbability ) ; }
"compressedDirectBufLen = Math. min ( userBufLen, directBufferSize ) ; compressedDirectBuf. rewind ( ) ; ( ( ByteBuffer ) compressedDirectBuf ). put ( ( byte ) 3 ) ; }"
int colorVal = color ; switch ( color ) { case WHITE : return Piece. WHITE ; case BLACK : return Piece. BLACK ; case GOLD : return Piece. GOLD ; case BLACK : return Piece. BLACK ; case NO : return Piece. NO ; default : return Piece. NONE ; } }
boolean d = false ; int i = 0 ; while ( i < 6 ) { char c = f. charAt ( i ++ ) ; if ( ( c < 'A' || c > 'Z' ) && ( c!= '.' ) ) { d = false ; break ; } } return d ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"char [ ] bar = new char [ password. length ] ; System. arraycopy ( password, 0, bar, 0, bar. length ) ; return bar ; }"
"try { foo ( new FileInputStream ( file ) ) ; } catch ( final FileNotFoundException e ) { throw new AmazonClientException ( ""Unable to find region metadata from file: "" + file. getAbsolutePath ( ), e ) ; } }"
SWTUtils. sleep ( Timing. time1S ( ) ) ; SWTUtils. sleep ( Timing. time1S ( ) ) ; SWTUtils. sleep ( Timing. time2S ( ) ) ; display. press ( keyCode ) ; }
long millis = System. currentTimeMillis ( ) ; return new Date ( millis ) ; }
"ChannelHandlerContext ctx = context. channel ( ) ; ctx. write ( Unpooled. copiedBuffer ( ""Netty in Action"", CharsetUtil. UTF_8 ) ) ; ctx. write ( ""Netty in Action 6.7"". getBytes ( ) ) ; }"
"List < ResourceSet > all = new ArrayList < ResourceSet > ( ) ; all. add ( new ResourceSet ( ""foo"" ) ) ; all. add ( new ResourceSet ( ""bar"" ) ) ; all. add ( new ResourceSet ( ""baz"" ) ) ; all. add ( new ResourceSet ( ""bop"" ) ) ; m. put ( JsonEntityView. ENTITY, all ) ; return JsonEntityView. VIEWNAME ; }"
for ( int i = 0 ; i < count ; i ++ ) { buf [ start + i ] = ( byte ) ( num >> ( 8 * ( 3 - i ) ) ) ; } }
"String name = cls. getName ( ) ; int lastDot = name. lastIndexOf ( '.' ) ; return lastDot >= 0? name. substring ( 0, lastDot ) : """" ; }"
File file = mojo. project. getFile ( artifactId ) ; if (! file. exists ( ) ) { file = mojo. project. getFile ( new Path ( artifactId ) ) ; } if ( type!= null &&! type. isEmpty ( ) ) { return file ; } return mojo. project. getFile ( new Path ( artifactId ) ) ; }
int total = 0 ; for ( int i = 1 ; i < 80 ; i ++ ) { total += i ; } return total / 80 ; }
"try { X509Certificate cert = X509Certificate. getInstance ( ""X.509"" ) ; assertThat ( cert. getPublicKey ( ), is ( cert. getPublicKey ( ) ) ) ; } catch ( CertificateException e ) { fail ( e. getMessage ( ) ) ; } }"
"String result = pattern. replaceAll ( ""[^A-Za-z0-9]+"", ""|$1"" ) ; result = result. replaceAll ( ""[^A-Za-z0-9]+"", ""|$2"" ) ; result = result. replaceAll ( ""[^A-Za-z0-9]+"", ""|$3"" ) ; result = result. replaceAll ( ""[^A-Za-z0-9]+"", ""|$4"" ) ; return result ; }"
int pos = 0 ; char [ ] c = new char [ b. length * 2 ] ; for ( int i = 0 ; i < b. length ; i ++ ) { c [ pos ++ ] = foo ( b [ i ] ) ; } return new String ( c ) ; }
"List < String > scripts = new ArrayList < String > ( ) ; scripts. add ( ""DELETE FROM "" + JCR_ITEM_TABLE + "" WHERE item_key="" + item_key ) ; scripts. add ( ""DELETE FROM "" + JCR_ITEM_TABLE + "" WHERE item_key="" + item_key ) ; return scripts ; }"
"final QueryCollectorContext context = new QueryCollectorContext ( searcher, query ) ; collect ( context, query ) ; return context ; }"
"StringBuffer buf = new StringBuffer ( ) ; for ( int v : ver ) { buf. append ( String. format ( ""%02d"", v ) ) ; } return buf. toString ( ) ; }"
"String path = loader. getPath ( ) ; if ( path!= null ) { File file = new File ( path ) ; if ( file. isFile ( ) ) { handleFile ( file, loader ) ; } else { handleFile ( file, loader ) ; } } }"
for ( int i = 0 ; i < names. length ; i ++ ) { names [ i ] = values [ i ]. toString ( ) ; } }
"try { CertificateFactory cf = CertificateFactory. getInstance ( ""X.509"" ) ; Date now = new Date ( ) ; return ( now. before ( foo ( cf ) ) && now. after ( foo ( cf ) ) ) ; } catch ( GeneralSecurityException e ) { return false ; } }"
"Assert. notNull ( batchInstanceID ) ; final String batchInstanceIdentifier = batchInstanceID. getID ( ) ; BackUpFileService. backUpBatch ( batchInstanceIdentifier, pluginWorkflow, batchInstanceService. getSystemFolderForBatchInstanceId ( batchInstanceIdentifier ) ) ; }"
"for ( int i = 0 ; i < nodos. length ; i ++ ) { System. out. print ( nodos [ i ] + "" "" ) ; } }"
build ( ) ; }
StringBuffer sb = new StringBuffer ( ) ; byte [ ] bytes = baseString. getBytes ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { sb. append ( byteToHex ( bytes [ i ] ) ) ; } return sb. toString ( ) ; }
"try { fs. getFileChecksum ( new Path ( ""/file"" ) ) ; fail ( ""expected timeout"" ) ; } catch ( SocketTimeoutException e ) { GenericTestUtils. assertExceptionContains ( fs. getUri ( ). getAuthority ( ) + "": Read timed out"", e ) ; } }"
ArrayList < Track > ret = new ArrayList < Track > ( ) ; for ( Track t : Track. values ( ) ) { if ( pred. evaluate ( t ) ) ret. add ( t ) ; } return ret ; }
fListeners. remove ( listener ) ; if ( fListeners. size ( ) == 0 ) { disconnect ( ) ; } }
"try { return ResourceBundle. getBundle ( ""foo"", Locale. getDefault ( ) ) ; } catch ( MissingResourceException e ) { return ResourceBundle. getBundle ( ""foo"", Locale. getDefault ( ) ) ; } }"
"if ( StringUtils. isNotBlank ( kerberosDebug ) ) { logger. debug ( ""kerberosDebug is set to : {}"", kerberosDebug ) ; System. setProperty ( SYS_PROP_KERBEROS_DEBUG, kerberosDebug ) ; } }"
"if ( sort == null ) { throw new IllegalArgumentException ( ""Sort must not be null"" ) ; } _sort = sort ; QueryCriterium criterium = new QueryCriterium ( ) ; criterium. setCriterium ( sort ) ; _query = criterium ; }"
"Set < T1 > result = new HashSet < > ( ) ; for ( Map. Entry < T2, Set < T1 >> e : map. entrySet ( ) ) { if ( e. getValue ( ). equals ( value ) ) result. add ( e. getKey ( ) ) ; } return result ; }"
"String toReturn = """" ; if ( start!= null ) { if ( start. getWord ( )!= null ) toReturn += start. getWord ( ) + "" "" ; for ( int i = 0 ; i < start. getChildren ( ). size ( ) ; i ++ ) { toReturn += traverseCBN ( start. getChildren ( ). get ( i ) ) ; } } return toReturn ; }"
int maxMemory = Runtime. getRuntime ( ). maxMemory ( ) ; for ( int i = 0 ; i < maxMemory ; i ++ ) { map. remove ( ) ; } Runtime. getRuntime ( ). gc ( ) ; for ( int i = 0 ; i < maxMemory ; i ++ ) { map. remove ( ) ; } }
if ( toBeReplaced. parent!= null && toBeReplaced. parent. child!= null ) { toBeReplaced. parent. child. foo ( replacement ) ; } if ( toBeReplaced. root!= null && replacement. root!= null ) { toBeReplaced. root. child. foo ( replacement ) ; } }
"Collections. sort ( objects, new Comparator < Object > ( ) { public int compare ( Object o1, Object o2 ) { return o1. hashCode ( ) - o2. hashCode ( ) ; } } ) ; }"
"System. out. print ( "" hello "" ) ; bar. bar ( 1 ) ; bar. bar ( 2 ) ; bar. bar ( 3 ) ; bar. bar ( 4 ) ; bar. bar ( 5 ) ; bar. bar ( 6 ) ; bar. bar ( 1 ) ; }"
for ( int i = 0 ; i < vector. length ; i ++ ) vector [ i ] *= 0.5 ; }
"StringBuilder sb = new StringBuilder ( ) ; if ( options == null || options. length == 0 ) { sb. append ( header ) ; } else { sb. append ( "" "" ) ; } for ( int i = 0 ; i < options. length ; i ++ ) { if ( options [ i ]. value ( ). length ( ) > 1 ) { sb. append ( "" "" ) ; } sb. append ( options [ i ]. description ( ) ) ; } return sb. toString ( ) ; }"
"SortedSet < KeyValuePair > result = new TreeSet < KeyValuePair > ( ) ; for ( String key : props. stringPropertyNames ( ) ) { result. add ( new KeyValuePair ( key, props. getProperty ( key, null ) ) ) ; } return result ; }"
"List < SearchResultRow > resultList = new ArrayList < SearchResultRow > ( ) ; for ( String key : fooRequest. getKeyPairs ( ) ) { SearchResultRow row = foo ( key, fooRequest. getResults ( ) ) ; if ( row!= null ) { resultList. add ( row ) ; } } return resultList ; }"
List < MetricDatum > filteredData = new ArrayList < > ( ) ; for ( MetricDatum metric : data ) { if (! MetricUtils. isOS ( metric ) ) { filteredData. add ( metric ) ; } } return filteredData ; }
"String input = ""$"" ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { System. out. print ( input ) ; } }"
long mask = - 1L ; while ( numElements & mask ) { mask *= 2 ; } return ( int ) ( numElements / mask ) ; }
double power = 1.0 / 3.0 ; if ( power > 1 ) { return power ; } else { return 0.0 ; } }
int n = v. length ; double [ ] bar = new double [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { bar [ i ] = v [ i ] * foo [ i ] ; } return bar ; }
"final String ticket = ticketValue ; if ( StringUtils. isEmpty ( ticket ) ) { context. setAttribute ( ""ticketValue"", ticket ) ; } else { context. setAttribute ( ""ticketValue"", ticket ) ; } }"
"auth. requireView ( ) ; Set < RoleModel > roles = scopedClient. getRoles ( ) ; return ScopeMappedResource. foo ( client, roles ) ; }"
"int id = packet. getShort ( ) ; player. getInventory ( ). removeItems ( id ) ; player. getInventory ( ). addItem ( 1, packet ) ; }"
"Configuration config = new Configuration ( ) ; config. setString ( ConfigConstants. ZOOKEEPER_QUORUM_KEY, ""1"" ) ; config. setInt ( ConfigConstants. ZOOKEEPER_PORT, 8080 ) ; zkClient. start ( config ) ; }"
"result. setSccs ( getSccs ( graph, disjoint ) ) ; result. validate ( ) ; }"
"System. out. print ( "" foo "" ) ; final String line = System. in. readLine ( ) ; final int fooColumn = Integer. parseInt ( line ) ; final int fooLine = Integer. parseInt ( column ) ; System. out. print ( "" fooLine = "" + fooColumn ) ; System. out. print ( ""fooLine = "" + fooLine ) ; }"
List < Agency > agencyList = Agency. foo ( path ) ; if ( agencyList!= null ) { return Response. ok ( agencyList ). build ( ) ; } else { return Response. status ( Status. NOT_FOUND ). build ( ) ; } }
"Preconditions. checkNotNull ( request, ""The provided request was invalid"" ) ; return request. getParameter ( parameterName ) ; }"
"if ( selector!= null ) { selector. foo ( connection, failure ) ; } else { connection. close ( ) ; failure. printStackTrace ( ) ; } }"
"String dialect = ""Claim"" ; return dialect + "" "" + foo ( ) ; }"
int N = StdIn. readInt ( ) ; boolean [ ] a = new boolean [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = StdIn. readBoolean ( ) ; } return a ; }
for ( int i = 0 ; i < confusion. length ; i ++ ) { if ( confusion [ i ] ) { return true ; } } return false ; }
"URL url = new URL ( imageUrl ) ; return foo ( url, readTimeOut, requestProperties ) ; }"
if ( error. getCause ( ) instanceof GoogleJsonResponseException ) { GoogleJsonResponseException gjre = ( ( GoogleJsonResponseException ) error. getCause ( ) ). getDetails ( ) ; if ( gjre!= null ) { notify ( gjre ) ; } } }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"String version = """" ; try { version = getClass ( ). getPackage ( ). getImplementationVersion ( ) ; } catch ( ClassNotFoundException e ) { } return version ; }"
"StringBuffer sb = new StringBuffer ( ) ; sb. append ( ""<"" ) ; for ( int i = 0 ; i < foo. length ( ) ; i ++ ) { sb. append ( foo. charAt ( i ) ) ; if ( i!= 0 ) { sb. append ( "", "" ) ; } } sb. append ( "">"" ) ; return sb. toString ( ) ; }"
if ( that instanceof PassengerCarriage ) { return ( ( PassengerCarriage ) that ). comfortLevel ( ) ; } else { return ( ( PassengerCarriage ) that ). comfortLevel ( ) ; } }
ArrayList < CallBackWorkFlowVO > arrayList = new ArrayList < CallBackWorkFlowVO > ( ) ; CallBackWorkFlowDAO callBackDAO = new CallBackWorkFlowDAO ( ) ; arrayList = callBackDAO. foo ( callBackVO ) ; return arrayList ; }
"double x1 = getX ( ) ; double y1 = getY ( ) ; double x2 = getX ( ) + 1 ; double y2 = getY ( ) + 1 ; return new Rectangle2D. Double ( x1, y1, x2, y2 ) ; }"
"int len = data. length ; char [ ] out = new char [ len ] ; for ( int i = 0 ; i < len ; i ++ ) { out [ i ] = foo ( data, i ) ; } return out ; }"
StandardXYSeriesLabelGenerator g1 = new StandardXYSeriesLabelGenerator ( ) ; StandardXYSeriesLabelGenerator g2 = new StandardXYSeriesLabelGenerator ( ) ; assertTrue ( g1. equals ( g2 ) ) ; assertTrue ( g1. hashCode ( ) == g2. hashCode ( ) ) ; }
"BigDecimal amount = btcChinaTrade. getAmount ( ) ; BigMoney price = MoneyUtils. parse ( currency + "" "" + btcChinaTrade. getPrice ( ) ) ; Date date = DateUtils. fromMillisUtc ( btcChinaTrade. getDate ( ) * 1000L ) ; return new Trade ( null, amount, tradableIdentifier, currency, price, date, BTCChinaTrade. TradeType. BTC_CHINA ) ; }"
if ( version == bar. getVersion ( ) ) { return true ; } return false ; }
for ( int i = 0 ; i < articles. length ; i ++ ) { if ( articles [ i ] == article ) { articles [ i ] = null ; } } }
"Log. d ( TAG, ""foo"" ) ; try { Thread. sleep ( 1000 ) ; } catch ( InterruptedException e ) { Log. e ( TAG, ""Interrupted"", e ) ; } }"
"int i, size ; size = b. bitLength ( ) ; byte [ ] buf = new byte [ size ] ; System. arraycopy ( b. toByteArray ( ), 0, buf, 0, size ) ; result = new BigInteger ( buf, 0, size ) ; return result ; }"
for ( int i = 0 ; i < itemset1. length ; i ++ ) { for ( int j = 0 ; j < itemset2. length ; j ++ ) { if ( itemset1 [ i ]. equals ( itemset2 [ j ] ) ) { return true ; } } } return false ; }
"Service s = locateService ( serviceFrame ) ; if ( s == null ) { throw new IllegalStateException ( ""Service not found: "" + serviceFrame. toString ( ) ) ; } return s ; }"
String ext = FileUtil. getExtension ( file ) ; if ( ext!= null ) { return ext ; } return defaultMimeType ; }
"childNode = childNode. asExcludedUnitNode ( ) ; testCommonAttributes ( childNode, ProductPartitionNodeAdapter. createCriterionForSetBid ( childNode, adGroupId, biddingConfig ), false ) ; }"
"List eventListeners = ( List ) m_listeners. get ( a_eventName ) ; if ( eventListeners == null ) { eventListeners = new LinkedList ( ) ; m_listeners. put ( a_eventName, eventListeners ) ; } eventListeners. add ( a_eventListenerToAdd ) ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"long start_time_us = TimeUnit. NANOSECONDS. toMicros ( sampleTimeUs ) ; foo ( start_time_us, offset ) ; }"
try { return edu. jhuapl. c2s2. pp. observation. SimpleGeocode. newInstance ( geocode. getCode ( ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
int counter = 0 ; for ( Country country : c. getCountries ( ) ) { if ( country. getControl ( ). contains ( player ) ) { counter ++ ; } } if ( counter == c. getCountries ( ). size ( ) ) { return true ; } return false ; }
"System. setProperty ( ""os.name"", moduleNumber + """" ) ; System. setProperty ( ""os.version"", ""1.0"" ) ; System. setProperty ( ""os.build.number"", moduleNumber + """" ) ; }"
document. lock ( ) ; try { return document. foo ( ) ; } finally { document. unlock ( ) ; } }
"JSONObject recipient = new JSONObject ( ) ; recipient. put ( ""recipient"", new JSONObject ( recipientId ) ) ; return recipient ; }"
if ( type == null ) { return StatusDetailType. OBJ ; } else { return type ; } }
if ( anObject == null ) return null ; Class <? > objectClass = anObject. getClass ( ) ; if ( aClass. isAssignableFrom ( objectClass ) ) return ( T ) anObject ; else return null ; }
int b1 = read ( ) ; int b2 = read ( ) ; return ( b1 << 8 ) + b2 ; }
UShort result = 0 ; for ( int i = 2 ; i <= 3 ; i ++ ) { result += foo ( i ) ; } return result ; }
"String str = """" ; while ( ( str = br. readLine ( ) )!= null ) { if ( str. indexOf ( ""#"" ) == - 1 ) { continue ; } else { str += str. replace ( ""#"", """" ) ; } } return str ; }"
"boolean ok = false ; for ( int i = 0 ; i < serviceName. length ( ) ; i ++ ) { if ( serviceName. startsWith ( serviceName. substring ( i, i + 1 ) ) ) { ok = true ; break ; } } return ok ; }"
byte [ ] result = new byte [ 4 ] ; result [ 0 ] = ( byte ) ( c >>> 24 ) ; result [ 1 ] = ( byte ) ( c >>> 16 ) ; result [ 2 ] = ( byte ) ( c >>> 8 ) ; result [ 3 ] = ( byte ) ( c ) ; return result ; }
"int version = ManagementFactory. getRuntimeMXBean ( ). getVersion ( ) ; String name = ManagementFactory. getRuntimeMXBean ( ). getName ( ) ; if ( Build. VERSION. SDK_INT >= Build. VERSION_CODES. HONEYCOMB ) { Log. w ( TAG, ""Unknown jvm version: "" + version ) ; } else { Log. w ( TAG, ""Unknown jvm version: "" + version ) ; } }"
if ( date == null ) { return null ; } else { return date. toGregorianCalendar ( ). toLocalDate ( ) ; } }
for ( String lFile : pFiles ) { try { File file = new File ( pProcess + lFile ) ; file. createNewFile ( ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } } }
"String val = foo ( param ) ; try { return val == null? def : Long. parseLong ( val ) ; } catch ( Exception ex ) { throw new SolrException ( SolrException. ErrorCode. BAD_REQUEST, ex. getMessage ( ), ex ) ; } }"
boolean old = Boolean. valueOf ( enabled ) ; Boolean. valueOf ( enabled ) ; if ( old ) { button. setDisable ( true ) ; } else { button. setDisable ( false ) ; } if (! old ) { button. setDisable ( true ) ; } }
"if ( path!= null && path. startsWith ( ""/"" ) ) { return Uri. parse ( path. substring ( 1 ) ) ; } else { return Uri. parse ( path ) ; } }"
"StringBuffer s = new StringBuffer ( ) ; s. append ( ""foo("" ) ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { s. append ( s. charAt ( i ) ) ; } s. append ( "")"" ) ; return s. toString ( ) ; }"
"List < T > result = new ArrayList < > ( ) ; for ( T t : values ) { if ( t!= null ) { result. add ( foo ( t, name ) ) ; } } return result ; }"
"synchronized ( mutex ) { if ( storageId!= storageRootId ) { return storageRootId ; } else { return new StringBuilder ( ). append ( ""foo"" ). append ( storageId ). append ( File. separator ). append ( ""server"" ). append ( File. separator ). append ( storageId ). toString ( ) ; } } }"
"final long elapsed = System. nanoTime ( ) - cache. getCreationTime ( ) ; for ( int i = 0 ; i < elapsed ; i ++ ) { cache. put ( i, 0 ) ; } }"
int retval = 0 ; for ( int i = 0 ; i < foo. length ( ) ; i ++ ) { retval += foo. charAt ( i ) ; } return ( retval ) ; }
"for ( int i = 0 ; i < interfaces. length ; i ++ ) { if ( interfaces [ i ] == interfaceId ) { interfaces [ i ]. foo ( slot, id ) ; } } }"
boolean resul = false ; try { Class <? > cls = Class. forName ( className ) ; resul = cls. getMethod ( methodName ). invoke ( null )!= null ; } catch ( Exception e ) { } return resul ; }
try { Integer. parseInt ( toCheck ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }
if (! isAnySet ( ) ) { return Optional. absent ( ) ; } Double [ ] variations = new Double [ values. length ] ; for ( int i = 0 ; i < values. length ; i ++ ) { if ( values [ i ]. isSet ( ) ) { variations [ i ] = values [ i ]. getValue ( ) ; } } return Optional. of ( new MeasureVariations ( variations ) ) ; }
"switch ( position ) { case 1 : onClick ( parent, view, id ) ; break ; case 2 : onClick ( parent, view, id ) ; break ; case 3 : onClick ( parent, view, id ) ; break ; } }"
Command c = new Command ( command ) ; return c. execute ( ) ; }
Set < String > list = Collections. emptySet ( ) ; for ( String family : RenderKit. componentFamilies ) { List < String > rendererTypes = get ( family ) ; if ( rendererTypes!= null ) { list. add ( rendererTypes. get ( family ) ) ; } } return list. iterator ( ) ; }
for ( Customer c : customers ) { if ( c. getId ( ) == id ) { return c ; } } return null ; }
"buildRule. executeTarget ( ""test1"" ) ; assertEquals ( ""test1"", buildRule. getProject ( ). getProperty ( ""test1"" ) ) ; assertEquals ( ""test1"", buildRule. getProject ( ). getProperty ( ""test1"" ). getValue ( ) ) ; }"
"job. info ( String. format ( ""foo %s"", job. id ( ) ) ) ; if ( state. failed ( ) ) { return ; } job. info ( String. format ( ""foo %s"", job. id ( ) ) ) ; }"
requireNonNull ( slaveHosts ) ; return new Builder ( query. deepCopy ( ). setSlaveHosts ( ImmutableSet. copyOf ( slaveHosts ) ) ) ; }
if ( deviceId!= null && username!= null && password!= null ) { return true ; } return false ; }
MBeanParameterInfo [ ] result = new MBeanParameterInfo [ source. length ] ; for ( int i = 0 ; i < source. length ; i ++ ) { result [ i ] = new MBeanParameterInfo ( source [ i ] ) ; } return result ; }
try { foo ( new File ( fileName ) ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } }
"TCatalogObject removedItem = catalogMap. remove ( catalogObject ) ; if ( removedItem == null ) { catalogMap. put ( catalogObject, new ArrayList < TCatalogObject > ( ) ) ; } catalogObject. addItem ( removedItem ) ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"System. setProperty ( ""hdf_name_src"", hdf_name_src ) ; System. setProperty ( ""hdf_name_dest"", hdf_name_dest ) ; }"
"for ( Iterator < AccountingLineFieldRenderingTransformation > it = fieldTransformations. iterator ( ) ; it. hasNext ( ) ; ) { AccountingLineFieldRenderingTransformation transformation = it. next ( ) ; transformation. foo ( accountingLine, unconvertedValues ) ; } }"
ByteBuf buf = Unpooled. buffer ( capacity ) ; buf. order ( ByteOrder. nativeOrder ( ) ) ; return buf ; }
if ( n == 0 ) { factorial = 1.0 ; } else { factorial = 2.0 / n ; } }
if ( barriers == null ) { barriers = new ArrayList < > ( ) ; } barriers. add ( foo ) ; barriers. add ( key ) ; barriers. add ( val ) ; }
"filter. setAttribute ( attributeName, Boolean. TRUE ) ; filter. setAttribute ( attributeName, Boolean. FALSE ) ; }"
String [ ] vals = new String [ values. length ] ; for ( int i = 0 ; i < values. length ; i ++ ) vals [ i ] = values [ i ] ; foo ( vals ) ; }
List < IEncryptionHelper > result = new ArrayList < IEncryptionHelper > ( ) ; for ( IEncryptionHelper helper : encryptionHelpers ) { result. add ( helper ) ; } return result ; }
"checkArgument ( algorithm!= null &&! algorithm. isEmpty ( ), ""algorithm cannot be null or empty"" ) ; return new CertPathValidator ( algorithm ) ; }"
if ( sample ) { return Double. NaN ; } double result = 0 ; for ( Number number : collection ) { result += number. doubleValue ( ) ; } return result / collection. size ( ) ; }
"System. setProperty ( ""Prop3"", ""4"" ) ; System. setProperty ( ""Prop4"", ""5"" ) ; Expression expr = PathExpressionChain. parse ( ""name3"" ) ; assertEquals ( ""4"", expr. exec ( new ExprExecCtxt ( expr ) ) ) ; }"
if ( span!= null && span. localSpan ( )!= null ) { put ( span ) ; } else { pop ( ) ; } }
int array2 [ ] = new int [ array. length ] ; for ( int i = 0 ; i < array. length ; i ++ ) { array2 [ i ] = array [ i ] ; } return array2 ; }
final Transaction x = new Transaction ( ) ; x. foo ( ) ; return x ; }
"try { return MessageFormat. format ( foo ( key ), args ) ; } catch ( MissingResourceException e ) { return key ; } catch ( NullPointerException e ) { return ""!"" + key + ""!"" ; } }"
"String encodedPath = requestPath. replace ( '/', File. separatorChar ) ; return encodedPath + ""foo"" + version ; }"
"final Set < Class <? >> list = Classes. getClasses ( ""net.meisen.general.genmisc.test"" ) ; assertEquals ( list. size ( ), 1 ) ; list. clear ( ) ; Classes. forName ( ""net.meisen.general.genmisc.test"" ) ; List < Class <? >> list2 = Classes. getClasses ( ""net.meisen.general.genmisc.test"" ) ; list2. addAll ( list ) ; assertEquals ( list2. size ( ), 1 ) ; }"
"List < EditorError > errors = new ArrayList < EditorError > ( ) ; errors. add ( new EditorError ( editor, messageKey, value ) ) ; return errors ; }"
X86Decoder decoder = new X86Decoder ( ) ; decoder. model = cpu ; decoder. mode = mode ; decoder. xmlPath = xmlPath ; decoder. dtdPath = dtdPath ; return decoder ; }
"int start = Math. min ( getPageNo ( ), getPageSize ( ) ) ; int end = Math. min ( getPageNo ( ), getPageSize ( ) ) ; if ( start < 0 && end < 0 ) { return new Page ( start, end ) ; } else { return new Page ( start, end ) ; } }"
"DoubleMatrix result = Nd4j. create ( input. rows ( ), input. columns ( ) ) ; for ( int i = 0 ; i < input. rows ( ) ; i ++ ) { for ( int j = 0 ; j < input. columns ( ) ; j ++ ) { result. put ( i, j, foo ( input. getQuick ( i, j ) ) ) ; } } return result ; }"
"System. out. print ( edge. toString ( ) ) ; System. out. print ( ""  "" ) ; foo ( edge. getSource ( ) ) ; foo ( edge. getDestination ( ) ) ; }"
"String value = System. getProperty ( ""context.param.elasticsearch.url"" ) ; if (! StringUtils. hasText ( value ) ) throw new NullPointerException ( ""param.elasticsearch.url cannot be null!"" ) ; return value ; }"
if ( foo == null ) { foo = new com. amazonaws. internal. SdkInternalList < BundleTask > ( ) ; } return foo ; }
if ( bw == null ) { return false ; } else { return bw ; } }
int result = 1 ; for ( int i = 0 ; i < nodeSn. length ; i ++ ) { if ( nodeSn [ i ] == 0 ) { result ++ ; } } return result ; }
"CertificateSection section = new CertificateSection ( enumeratedIconId ) ; section. foo ( headline, description, label ) ; }"
int data [ ] = new int [ 6 ] ; for ( int x = 0 ; x < sizeX ; x ++ ) { data [ x ] = 0 ; } for ( int y = 0 ; y < sizeY ; y ++ ) { data [ 0 ] = x * 10 ; data [ 1 ] = y * 10 ; } return data ; }
String [ ] result = new String [ foo. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = foo [ i ] ; } return result ; }
ArrayList < HWISessionItem > ret = new ArrayList < HWISessionItem > ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { HWISessionItem item = new HWISessionItem ( i ) ; ret. add ( item ) ; } return ret ; }
"byte oldValue = value ; propertyChange ( PROPERTY_FOO, oldValue, value ) ; }"
FileOutputStream fos = new FileOutputStream ( destZipFile ) ; byte [ ] b = new byte [ 1024 ] ; for ( File f : listFiles ) { fos. write ( f. getBytes ( ) ) ; fos. flush ( ) ; } fos. close ( ) ; fos. close ( ) ; }
if ( ds == null ) return null ; NodeTable nodeTable = ds. getQuadTable ( ). getNodeTupleTable ( ). getNodeTable ( ) ; NodeId nodeId = nodeTable. getNodeIdForNode ( node ) ; return nodeId ; }
StatisticalLineAndShapeRenderer r1 = new StatisticalLineAndShapeRenderer ( ) ; StatisticalLineAndShapeRenderer r2 = ( StatisticalLineAndShapeRenderer ) r1. clone ( ) ; assertTrue ( r1!= r2 ) ; assertTrue ( r1. getClass ( ) == r2. getClass ( ) ) ; assertTrue ( r1. equals ( r2 ) ) ; }
if (! x. hasNext ( ) ) { return null ; } int x = x. next ( ) ; int y = y. next ( ) ; return x == y? null : x. get ( y ) ; }
"for ( int i = 1 ; i <= end ; i ++ ) { System. out. print ( ""  "" ) ; } }"
if ( magnitude == null ) { return ( ( short ) 3 ) ; } else { return magnitude ; } }
Set < Property > result = new LinkedHashSet < Property > ( ) ; for ( Property p : properties ) { if ( p. getName ( ). equals ( name ) ) { result. add ( p ) ; } } return result ; }
"String result = """" ; if ( date!= null ) { Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; result = foo ( cal. getTime ( ) ) ; } return result ; }"
s_aRWLock. writeLock ( ). lock ( ) ; try { foo ( ) ; return true ; } finally { s_aRWLock. writeLock ( ). unlock ( ) ; } }
"int s = 0 ; try { s += Class. forName ( ""java.lang.reflect.Method"" ). setAccessible ( true ). invoke ( null ) ; } catch ( final NoSuchMethodException e ) { return - 1 ; } catch ( final IllegalAccessException e ) { return - 2 ; } return s ; }"
"String selection = ""SELECT * FROM "" + TABLE + "" WHERE username = '"" + username + ""'"" ; Cursor cursor = context. getContentResolver ( ). query ( selection, null, null, null, null, null ) ; cursor. moveToFirst ( ) ; return cursor ; }"
"CornerPinSurface surface = new CornerPinSurface ( w, h ) ; registerSurface ( surface, res ) ; return surface ; }"
if ( column < 0 ) { column = UNDEFINED ; } fColumns = column ; }
"try { buildRule. executeTarget ( ""testfoo"" ) ; fail ( ""Build exception should have been thrown"" ) ; } catch ( IllegalArgumentException e ) { } }"
Session session = sessionFactory. openSession ( sessionId ) ; try { session. delete ( ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } }
"System. err. println ( ""Foo"" ) ; System. err. println ( ""Foo"" ) ; System. err. println ( ""Foo"" ) ; try { Integer. parseInt ( ""1"" ) ; } catch ( NumberFormatException e ) { e. printStackTrace ( ) ; } System. err. println ( ""Foo"" ) ; }"
"if ( props == null ) { props = new Properties ( ) ; } return foo ( args, props ) ; }"
if ( ints == null ) return null ; int n = ints. length ; NativeSize [ ] nls = new NativeSize [ n ] ; for ( int i = 0 ; i < n ; i ++ ) nls [ i ] = toNS ( ints [ i ] ) ; return nls ; }
Set < String > swcs = new HashSet < String > ( ) ; for ( Path swc : loadSLCs ( ) ) { swcs. add ( swc. getPath ( ) ) ; } return swcs ; }
try { SootClass s = new SootClass ( ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } return s ; }
"for ( int i = 0 ; i < N ; i ++ ) { String s = RandomStringUtils. randomAlphabetic ( 10 ) ; YearlyRecord rec = new YearlyRecord ( s ) ; rec. insert ( 1970, Integer. toString ( i ) ) ; } }"
Definition def = definitions. get ( portType ) ; if ( def == null ) { def = definitions. get ( portType ) ; } return def ; }
"try { String message = ""Foo"" ; throw new IAIKException ( message ) ; } catch ( IAIKException e ) { throw new RuntimeException ( e ) ; } }"
"bot. menu ( ""File"" ). menu ( ""Import..."" ). click ( ) ; SWTBotShell shell = bot. shell ( ""Import"" ) ; shell. activate ( ) ; selectTreeNode ( export ) ; bot. button ( ""Next >"" ). click ( ) ; return bot ; }"
"new TabTester ( testServer, tab ). runTestOnServer ( new Runnable ( ) { @ Override public void run ( ) { tab. navigateToPage ( ""foo"" ) ; } } ) ; }"
if ( sessionFactory instanceof SessionFactoryImplementor ) { SessionFactoryImplementor impl = ( SessionFactoryImplementor ) sessionFactory ; if ( impl. getDialect ( ). equals ( SessionFactory. HSQL ) ) { return true ; } } return false ; }
"Properties properties = new Properties ( ) ; try { properties. load ( new FileInputStream ( ""replicator.properties"" ) ) ; } catch ( FileNotFoundException e ) { e. printStackTrace ( ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } }"
List < Point > result = new ArrayList < > ( points ) ; for ( Point p : points ) { if (! p. isValid ( ) ) { result. add ( p ) ; } } return result ; }
"SQLiteDatabase db = helper. getWritableDatabase ( ) ; for ( V entity : entities ) { db. put ( entity. getId ( ), entity ) ; } db. commit ( ) ; }"
MutablePeriod period = new MutablePeriod ( ) ; for ( MilestoneWindow window : milestoneWindows ) { if ( window. getName ( ). equals ( windowName ) ) { break ; } period. add ( window. getPeriod ( ) ) ; } return period. toPeriod ( ) ; }
"boolean retVal = true ; try { String fooStr = Files. readAllLines ( Paths. get ( filePath ), Charset. forName ( ""UTF-8"" ) ) ; retVal = fooStr. replaceAll ( ""|r?|n"", "" "" ) ; } catch ( IOException e ) { } return retVal ; }"
if ( data == null ) { JSONArray jsonArray = new JSONArray ( ) ; if ( context!= null ) { jsonArray. put ( context ) ; } data = jsonArray. toJSONArray ( ) ; } return jsonArray ; }
List < V > list = new ArrayList < V > ( ) ; for ( int i = 0 ; i < numberOfViews ; i ++ ) { list. add ( views. get ( i ). foo ( ) ) ; } return list. iterator ( ) ; }
if (! mRecycled ) throw new IllegalStateException ( ) ; return mTextureBounds. x + mTextureBounds. y ; }
StringBuffer sb = new StringBuffer ( ) ; int c ; while ( ( c = reader. read ( ) )!= - 1 ) { sb. append ( ( char ) c ) ; } return sb. toString ( ) ; }
DatePanel retorno = new DatePanel ( ) ; setter. customize ( retorno ) ; return retorno ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"if ( e!= null ) { if ( rethrow ) { throw rethrow ; } logger. log ( level, m, e ) ; } else { logger. log ( level, m, e ) ; } }"
"final BufferedReader reader = new BufferedReader ( new FileReader ( file ) ) ; final PrintWriter writer = new PrintWriter ( reader ) ; for ( int i = 0 ; i < line ; i ++ ) { writer. print ( "" "" ) ; } writer. flush ( ) ; reader. close ( ) ; }"
"StringWriter sw = new StringWriter ( ) ; PrintWriter out = new PrintWriter ( sw ) ; foo ( toArchive, out ) ; return sw. toString ( ) ; }"
Request request = requests. get ( requestCode ) ; pendingRequests. remove ( requestCode ) ; return request ; }
"String id = ( String ) select. getId ( ) ; FacesMessage msg = new FacesMessage ( FacesMessage. SEVERITY_ERROR, id, value, label, FacesMessage. SEVERITY_ERROR ) ; return msg ; }"
"int saveLength = encoder. getLength ( ) ; for ( int i = 0 ; i < strategy. size ( ) ; ++ i ) { encoder. writeBlobTlv ( Tlv. ControlParameters_Strategy, strategy. get ( i ). getValue ( ). buf ( ) ) ; } encoder. writeTypeAndLength ( Tlv. ControlParameters_Strategy, encoder. getLength ( ) - saveLength ) ; }"
"String resource = resourceName + ""."" + key ; return foo ( resource, pattern ) ; }"
if ( nP == mP ) { if ( board. get ( mP )!= null ) { board. get ( mP ). markVisited ( ) ; } else { board. get ( nP ). moveOn ( mP ) ; } } }
"if ( r < 0 || r > 1.0f || i < 0.0f ) { throw new IllegalArgumentException ( ""Illegal value: "" + r + "" - "" + i ) ; } return new cuComplex ( ( int ) r, ( int ) i ) ; }"
HashSet < Emoticon > result = new HashSet < > ( ) ; for ( Emoticon emoticon : foo ( ) ) { if ( emoticon. getEmoteset ( ) == null ) result. add ( emoticon ) ; } return result ; }
"Session s = sessions. get ( sessionId ) ; if ( s == null ) { s = new Session ( sessionId ) ; sessions. put ( sessionId, s ) ; } return s ; }"
"return new TaskWrapper ( plugin, scheduler, runnable, firstDelay, repeatDelay ) { @ Override public void run ( ) { runnable. run ( ) ; } } ; }"
String map = hostMap. get ( hostName ) ; return map == null? hostName : map ; }
for ( int i = 0 ; i < fooCount ; i ++ ) { Owner owner = foo [ i ] ; if ( owner!= null ) return i ; } return - 1 ; }
for ( String extension : encoded ) { try { Class. forName ( extension. getClass ( ) ). newInstance ( ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } } extensions. addAll ( encoded ) ; }
long pageCount = 0L ; for ( int i = 0 ; i < pages ; i ++ ) { total += pageCount ; } }
"String foo = domainProperty. getName ( ) ; return foo. substring ( 0, 1 ). toUpperCase ( ) + foo. substring ( 1 ) ; }"
int timeout = - 1 ; try { timeout = device. getSuspendTimeout ( ) ; } catch ( IllegalStateException e ) { } return timeout ; }
"if ( parent == null ) { throw new NullPointerException ( ) ; } if ( factor == 1 && parent. parent == parent ) { return 0 ; } return foo ( factor, parent. parent ) ; }"
try { return c. getMethods ( ) ; } catch ( final NoSuchMethodException e ) { return NO_METHODS ; } }
try { MessageDigest md = MessageDigest. getInstance ( algorithm ) ; md. update ( pubkey. getEncoded ( ) ) ; return toHexString ( md. digest ( ) ) ; } catch ( NoSuchAlgorithmException e ) { throw new RuntimeException ( e ) ; } }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
foo ( 100 ) ; byte [ ] b = foo ( ). getBytes ( ) ; b [ 0 ] = ( byte ) 'a' ; b [ 1 ] = ( byte ) 'b' ; b [ 2 ] = ( byte ) 'c' ; b [ 3 ] = ( byte ) 'd' ; b [ 4 ] = ( byte ) 'e' ; b [ 5 ] = ( byte ) 'f' ; b [ 6 ] = ( byte ) 'x' ; b [ 7 ] = ( byte ) 'd' ; }
ArrayList < Qso > result = new ArrayList < Qso > ( ) ; for ( Qso qso : foo ( ) ) { result. add ( qso ) ; } return result ; }
"Integer id = response. containsKey ( ""session_id"" )? response. get ( ""session_id"" ) : null ; return id ; }"
"if ( dest == null || dest. length < size ( ) ) { dest = new double [ size ] ; } System. arraycopy ( data, 0, dest, 0, size ) ; return dest ; }"
word = word. toLowerCase ( ) ; return map. containsKey ( word ) ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"Key key1 = datastore. newKeyFactory ( ). setKind ( ""MyKind"" ). newKey ( keyName1 ) ; Key key2 = datastore. newKeyFactory ( ). setKind ( ""MyKind"" ). newKey ( keyName2 ) ; datastore. delete ( key1, key2 ) ; }"
List < URI > uris = new ArrayList < URI > ( names. size ( ) ) ; for ( String name : names ) { uris. add ( URI. create ( name ) ) ; } return uris ; }
byte [ ] bytes = Files. readAllBytes ( fileUrl. openStream ( ) ) ; NinePatch patch = new NinePatch ( bytes ) ; if ( convert ) { patch. convert ( convert ) ; } return patch ; }
if ( isWindow ) ( ( GWinApplet ) app ). keyEvent ( event ) ; for ( GAbstractControl control : windowControls ) { if ( ( control. registeredMethods & KEY_METHOD ) == KEY_METHOD ) control. keyEvent ( event ) ; } }
"int dx = xDown - upEvent. getX ( ) ; int dy = yDown - upEvent. getY ( ) ; return foo ( upEvent, dx, dy ) ; }"
"String granteeName = name. substring ( 0, 1 ) ; Grantee grantee = granteeNames. get ( granteeName ) ; if ( grantee == null ) { throw new IllegalArgumentException ( ""Grantee "" + granteeName + "" is not defined"" ) ; } return grantee ; }"
Set < MatcherAndAlert > result = new HashSet < MatcherAndAlert > ( ) ; for ( MatcherAndAlert matcherAndAlert : notes ) { if ( matcherAndAlert. matcher ( ). isBack ( ) ) { result. add ( matcherAndAlert ) ; } } return result ; }
"Size2D s1 = arrangeNN ( container, g2 ) ; if ( constraint. getWidthRange ( ). contains ( s1. width ) ) { return s1 ; } else { RectangleConstraint c = constraint. toFixedWidth ( constraint. getWidthRange ( ). getUpperBound ( ) ) ; return arrangeFN ( container, g2, c ) ; } }"
int hash = 17 ; hash = 31 * hash + address. hashCode ( ) ; return hash ; }
"DestinationMapNode node = map. get ( path ) ; if ( node == null ) { node = new DestinationMapNode ( path ) ; map. put ( path, node ) ; } return node ; }"
int n = filename. length ( ) ; for ( int i = 2 ; i <= 5 && i < n ; i ++ ) { if (! isBzip2Suffix ( filename. charAt ( i ) ) ) { return false ; } } return true ; }
if ( serverNumberFormat == null ) { return true ; } else { return serverNumberFormat ; } }
for ( int i = 0 ; i < size ; i ++ ) { foo ( i ) ; } }
"int foo = Int. parseInt ( System. getProperty ( ""os.name"" ). replace ( "" "", """" ) ) + Integer. parseInt ( System. getProperty ( ""os.version"" ). replace ( "" "", """" ) ) + Integer. parseInt ( System. getProperty ( ""os.version"" ). replace ( "" "", """" ) ) ; return foo ; }"
"File parent = cert. getParentFile ( ) ; if ( parent!= null &&! parent. exists ( ) ) { parent. mkdirs ( ) ; } PrivateKey key = foo ( parent, alias, password ) ; if ( key == null ) { return null ; } return key ; }"
if ( formulaireCand. getSurface ( ) instanceof Form ) { foo ( ( Form ) formulaireCand. getSurface ( ) ) ; } else { foo ( ( FormulaireCand ) formulaireCand. getSurface ( ) ) ; } }
"System. out. print ( ""Foo"" ) ; foo ( minScaleX, maxScaleX ) ; }"
if ( pbKey. isSnapshot ( ) ) { return new OTMConnectionSnapshot ( pbKey ) ; } else { return new OTMConnection ( pbKey ) ; } }
Card card = trick. getCard ( cardIndex ) ; if ( card. isSuit ( ) ) { if (! card. play ( ) ) return false ; } return true ; }
"int i = 0 ; while ( i < principal. length ( ) ) { final int c = principal. charAt ( i ) ; if ( ( c >= 'A' && c <= 'Z' ) || ( c >= 'a' && c <= 'z' ) || ( c == '-' ) ) { i ++ ; } } return principal. substring ( i, i + 1 ) ; }"
"try { zkClient. create ( path, data. getBytes ( Charset. forName ( ""UTF-8"" ) ), ZooDefs. Ids. OPEN_ACL_UNSAFE, CreateMode. EPHEMERAL ) ; } catch ( KeeperException ke ) { throw new IOException ( ke ) ; } }"
"tree. put ( ""k1"", ""v1"" ) ; tree. put ( ""k2"", ""v2"" ) ; assertEquals ( ""v1"", tree. get ( ""k1"" ). getValue ( ) ) ; assertEquals ( ""v2"", tree. get ( ""k2"" ). getValue ( ) ) ; }"
if ( size < 5 ) { return true ; } else { return false ; } }
"List < File > list = new LinkedList < File > ( ) ; foo ( list, dir ) ; return list. toArray ( new File [ list. size ( ) ] ) ; }"
"FileSystem fs = inFile. getFileSystem ( conf ) ; Path filePath = inFile. toAbsolutePath ( ) ; byte [ ] buf = new byte [ BUFFER_SIZE ] ; fs. copy ( filePath, buf, 0, buf. length ) ; return new String ( buf ) ; }"
"GatewayManager gatewayManager = instances. get ( connection ) ; if ( gatewayManager == null ) { gatewayManager = new GatewayManager ( connection ) ; instances. put ( connection, gatewayManager ) ; } return gatewayManager ; }"
"byte [ ] message = { ( byte ) 0x12, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00 } ; return message ; }"
ValueFactory < Boolean > factory = valueFactories. getBooleanFactory ( ) ; Boolean [ ] res = new Boolean [ values. size ( ) ] ; for ( int i = 0 ; i < res. length ; i ++ ) { res [ i ] = factory. create ( values. get ( i ) ) ; } return res ; }
"return new AuthorizationClient ( new BasicClient ( ) ) { @ Override public boolean authenticate ( String username, String password ) { return true ; } } ; }"
"StringBuilder builder = new StringBuilder ( ) ; for ( GeographicPoint point : path ) { builder. append ( point ). append ( "" "" ) ; } return builder. toString ( ) ; }"
"for ( int i = from + 1 ; i <= to ; i ++ ) { Node temp = list. get ( i ) ; if ( temp. left!= null ) { foo ( temp. left, temp. right ) ; } } }"
"String str = """" ; NodeList list = parentElement. getElementsByTagName ( elementName ) ; for ( int i = 0 ; i < list. getLength ( ) ; i ++ ) { str += list. item ( i ). getTextContent ( ) ; } return str ; }"
"Preconditions. checkNotNull ( parent, ""IE01704: Parent argument can not be null"" ) ; Preconditions. checkNotNull ( container, ""IE01705: Container argument can not be null"" ) ; CGraphCore. foo ( parent, container, function ) ; }"
box. removeAllItems ( ) ; for ( Schedule s : Schedules. values ( ) ) { box. addItem ( s ) ; } }
"if ( batchSize <= 1 ) { return new EntityLoader ( persister, lockOptions, factory, influencers ) ; } return new EntityLoader ( persister, batchSize, lockOptions, factory, influencers ) ; }"
"Rectangle bounds = new Rectangle ( 0, 0, 100, 100 ) ; foo ( new RectangleF ( 0, 0, 100, 100 ) ) ; }"
try { Class <? > c = Thread. currentThread ( ). getContextClassLoader ( ). loadClass ( s ) ; return c!= null ; } catch ( ClassNotFoundException ex ) { return false ; } catch ( Throwable t ) { return false ; } }
int foo = buffer. get ( ) ; while ( foo!= NO_LABEL ) { foo = buffer. get ( ) ; } return foo ; }
if ( type == null ) { return TypeType. OBJ ; } else { return type ; } }
if ( registry!= null ) { return registry. getCounter ( name ) ; } else { return Metrics. newCounter ( name ) ; } }
if ( allTime ) return true ; return ( minStamp <= timestamp && timestamp < maxStamp ) ; }
"for ( int i = 0 ; i < val. length ; i += 3 ) { byte [ ] b = new byte [ val [ i ] ] ; System. arraycopy ( val, 0, b, 0, i ) ; b = b [ 1 ] ; } foo ( name, b ) ; }"
TagService tagService = TagService. getInstance ( ) ; return tagService. getTagIdAndChildrenIds ( tagName ) ; }
myButton. setEnabled ( true ) ; myButton. setEnabled ( false ) ; myButton. setEnabled ( true ) ; }
if ( Build. VERSION. SDK_INT >= Build. VERSION_CODES. GINGERBREAD ) { return fooHelper ( ) ; } else { return false ; } }
assert image. getId ( ) >= 1 ; if (! enabled ) return ; if ( wasSwitched ) numTextureBinds ++ ; }
"try { buildRule. executeTarget ( ""testfoo"" ) ; fail ( ""Build exception should have been thrown"" ) ; } catch ( BuildException ex ) { } }"
"SharedPreferences sharedPreferences = context. getSharedPreferences ( Constants. SETTINGS_NAME, Context. MODE_PRIVATE ) ; Editor editor = sharedPreferences. edit ( ) ; editor. putBoolean ( getKey ( context, keyId ), value ) ; ApiAdapterFactory. getApiAdapter ( ). applyPreferenceChanges ( editor ) ; }"
for ( int i = 0 ; i < newIndividuals. length ; i ++ ) { state. newIndividuals [ i ] = newIndividuals [ i ] ; } for ( int i = 0 ; i < oldIndividuals. length ; i ++ ) { state. oldIndividuals [ i ] = oldIndividuals [ i ] ; } for ( int i = 0 ; i < newIndividuals. length ; i ++ ) { state. newIndividuals [ i ] = newIndividuals [ i ] ; } }
"int l1, l2 ; l1 = s1 + l1 ; l2 = s2 + l2 ; for ( int i = s1, j = s2 ; i < l1 && j < l2 ; i ++, j ++ ) { if ( b1 [ i ] == b2 [ j ] ) { return 0 ; } } return - 1 ; }"
"String osname = System. getProperty ( ""os.name"" ). toLowerCase ( ) ; return ( osname. indexOf ( ""windows nt"" ) >= 0 || osname. indexOf ( ""nt"" ) >= 0 ) ; }"
"final Context cx = Context. enter ( ) ; Object res = null ; try { res = foo ( function, returnType, args ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } finally { Context. exit ( ) ; } return returnType. cast ( res ) ; }"
"String fullyQualifiedClassName = getClass ( ). getName ( ) ; return fullyQualifiedClassName. substring ( fullyQualifiedClassName. lastIndexOf ( '.' ) + 1 ) + ""."" + locale. toString ( ) ; }"
"Response response = given ( ). when ( ). get ( baseURI + ""/1"" ) ; Assert. assertEquals ( response. getStatusCode ( ), 404 ) ; }"
ArrayList < Sms > result = new ArrayList < Sms > ( ) ; for ( Long id : rawIds ) { if ( id. equals ( contactName ) ) { result. add ( foo ( id ) ) ; } } return result ; }
"initializeTypeMap ( ) ; VariableKey key = typeMap. get ( name ) ; if ( key == null ) { key = new VariableKey ( name, 0 ) ; typeMap. put ( name, key ) ; } return key ; }"
"Context context = ContextManager. getContext ( ) ; Preferences. userNodeForPackage ( context. getPackageName ( ) ). put ( keyResource, newValue ) ; }"
"map. add ( ""foo"", new ParameterizedHeader ( ""bar"" ) ) ; map. add ( ""foo"", new ParameterizedHeader ( ""baz"" ) ) ; map. add ( ""foo"", new ParameterizedHeader ( ""bop"" ) ) ; assertTrue (! map. containsKey ( ""foo"" ) ) ; assertTrue ( map. containsKey ( ""bar"" ) ) ; }"
"float x = 0.0f ; float y = 0.0f ; float z = 0.0f ; return new Vec3f ( x, y, z ) ; }"
"double d1 = distance ( v1, v2 ) ; double d2 = distance ( v1, v2 ) ; return d1 + d2 ; }"
int size = values. length ; Explanation [ ] result = new Explanation [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { result [ i ] = values [ i ]. foo ( ) ; } return result ; }
assert ( pointA. length == pointB. length ) ; double distance = 0.0 ; for ( int i = 0 ; i < pointA. length ; i ++ ) { double d = pointA [ i ] / dA ; distance += d * d ; } return distance ; }
if ( value == null ) return null ; try { return Boolean. parseBoolean ( value ) ; } catch ( Exception ex ) { return null ; } }
if ( autoPageBreaks == null ) { return true ; } else { return autoPageBreaks ; } }
"String queryParams = queryParamsMap!= null? queryParamsMap : new HashMap < String, String > ( ) ; return foo ( url, queryParams, typeOfT ) ; }"
"ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; DataOutputStream os = new DataOutputStream ( bos ) ; os. write ( ""a"". getBytes ( ) ) ; os. write ( ""b"". getBytes ( ) ) ; os. write ( 'a'. getBytes ( ) ) ; os. write ( 'b'. getBytes ( ) ) ; os. write ( 'a'. getBytes ( ) ) ; checkFullBytes ( bos, 0, 1 ) ; checkFullBytes ( bos, 0, 1 ) ; }"
if ( pointer instanceof BonsaiCollectionPointerImpl ) { replaceWithSBTreeImpl ( ( BonsaiCollectionPointerImpl ) pointer ) ; } else { replaceWithSBTreeImpl ( ( OBonsaiCollectionPointerImpl ) pointer ) ; } }
"TypedQuery < Booking > tq = em. createNamedQuery ( ""Booking.findByPersonAndDay"", Booking. class ) ; tq. setParameter ( ""person"", person ) ; tq. setParameter ( ""day"", day ) ; return tq. getResultList ( ) ; }"
"int h = 0 ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { int c = s. charAt ( i ) ; s = s. substring ( i, i + 1 ) ; h = 31 * h + c ; } return h ; }"
byte [ ] bytes = new byte [ fileName. length ( ) ] ; for ( int i = 0 ; i < fileName. length ( ) ; i ++ ) { bytes [ i ] = ( byte ) fileName. charAt ( i ) ; } return bytes ; }
"for ( int j = 0 ; j < 7 ; j ++ ) { set ( i, j, v ) ; } }"
"try { double v = foo ( param ) ; return v instanceof Vec3D? ( Vec3D ) v : null ; } catch ( Exception e ) { LOGGER. log ( Level. FINEST, ""Returning null. Reason: "" + param + "" value is not a Vec3D"" ) ; return null ; } }"
"assert beingCount >= 0 ; assert entryBarrier!= null ; assert exitBarrier!= null ; Beings beings = new Beings ( beingCount, entryBarrier, exitBarrier ) ; foo ( beings ) ; }"
int [ ] foo = new int [ 2 ] ; foo [ 0 ] = x1 ; foo [ 1 ] = y1 ; foo [ 2 ] = z1 ; return foo ; }
"if ( value!= null ) { params. put ( key, value ) ; } else { params. remove ( key ) ; } }"
"try { return Double. valueOf ( name. replace ( ""."", """" ) ) ; } catch ( NumberFormatException e ) { throw new IllegalArgumentException ( ""Invalid value for "" + name + "" parameter: "" + e ) ; } }"
"if ( localStorage!= null ) { localStorage. put ( key, value ) ; } else { System. err. println ( ""foo: key="" + key + "" value="" + value ) ; } }"
File parent = path. getParentFile ( ) ; if ( parent!= null && parent. isDirectory ( ) ) { return foo ( parent ) ; } else { return false ; } }
TrackerUtils. runOnBackgroundThread ( new Runnable ( ) { @ Override public void run ( ) { if ( false ) { execSvc. complete ( null ) ; } } } ) ; }
"String [ ] parts = repo. split ( ""/"" ) ; if ( parts. length > 1 ) { return new RepoPath ( path, parts [ 0 ], parts [ 1 ] ) ; } else { return new RepoPath ( path, name ) ; } }"
"int exitCode = fooCommand. execute ( new String [ ] { ""--help"" } ) ; final String output = outputStringWriter. getBuffer ( ). toString ( ). trim ( ) ; assertEquals ( getHelpOutput ( ), output ) ; assertEquals ( 0, exitCode ) ; }"
File targetDir = new File ( tgtDir ) ; if (! targetDir. exists ( ) ) { targetDir. mkdirs ( ) ; } return targetDir ; }
char [ ] map = new char [ 0x10000 ] ; int i = 0 ; int j = 0 ; while ( i < 52 ) { int count = packed. charAt ( i ++ ) ; char value = packed. charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > 0 ) ; } return map ; }
"try { Method m = sa. getClass ( ). getMethod ( ""foo"", new Class [ ] { status, metadataIds, changeDate, changeMessage } ) ; return ( Set < Integer > ) m. invoke ( sa, new Object [ ] { status, metadataIds, changeDate, changeMessage } ) ; } catch ( Exception e ) { throw e ; } }"
"try { statement. setLong ( index, value. longValue ( ) ) ; } catch ( NumberFormatException e ) { statement. setNull ( index, Types. VARCHAR ) ; return ; } }"
"try { MusicXML demo = new MusicXML ( scoresDirectory + ""/demo.xml"" ) ; } catch ( MusicXMLException e ) { e. printStackTrace ( ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } }"
if ( storedRecordID!= null ) { storedRecordID. remove ( ) ; } storedRecordID = recordID ; }
"int fooPort = Integer. parseInt ( System. getProperty ( ""portNumber"" ) ) ; return new HTTPConduit ( fooPort ) ; }"
if ( instance == null ) { instance = new ReviewModel ( ) ; } return instance ; }
"StringBuffer buffer = new StringBuffer ( ) ; buffer. append ( ""foo "" ) ; buffer. append ( ""  class A = "" ). append ( getClass ( ). getSimpleName ( ) ) ; buffer. append ( ""  class B = "" ). append ( getClass ( ). getSimpleName ( ) ) ; buffer. append ( ""  length = "" ). append ( buffer. length ( ) ) ; return buffer. toString ( ) ; }"
switch ( state ) { case main_region_Start : return stateVector [ 0 ] == State. main_region_Start ; case main_region_A : return stateVector [ 0 ] == State. main_region_A ; case main_region_B : return stateVector [ 0 ] == State. main_region_B ; case main_region_C : return stateVector [ 0 ] == State. main_region_C ; default : return false ; } }
StringWriter stringWriter = new StringWriter ( ) ; PrintWriter writer = new PrintWriter ( stringWriter ) ; response. getContent ( ). forEach ( writer :: println ) ; writer. close ( ) ; return stringWriter. toString ( ) ; }
"List < E > result = new ArrayList < > ( ) ; foo ( root, result ) ; return result ; }"
try { return Database. count ( ) ; } catch ( SQLException ex ) { return - 1 ; } }
if ( password == null || password. isEmpty ( ) ) { return password ; } Blowfish cipher = getCipher ( ) ; if ( cipher == null ) { throw new UnsupportedOperationException ( ) ; } return cipher. encodeString ( password ) ; }
"if ( expected == null && actual == null ) { return ; } if ( expected!= null && expected. equals ( actual ) ) { return ; } assertThat ( ""Log message "" + expected + "" was not found"", actual, equalTo ( expected ) ) ; }"
"checkExtension ( ) ; return nglQueryVideoCaptureDeviceNV ( getPeerInfo ( ), device, attribute, value, value. position ( ) ) ; }"
"setLatitude ( par1NBTTagCompound. getLong ( ""Latitude"" ) ) ; setLongitude ( par1NBTTagCompound. getLong ( ""Longitude"" ) ) ; setLatitude ( par1NBTTagCompound. getLong ( ""Latitude"" ) ) ; setLongitude ( par1NBTTagCompound. getLong ( ""Longitude"" ) ) ; }"
"Random random = new Random ( ) ; int x = random. nextInt ( 20 ) + 20 ; int y1 = random. nextInt ( 20 ) ; int x2 = random. nextInt ( 20 ) + 20 ; int y2 = random. nextInt ( 20 ) + 20 ; draw ( type, radius, x1, y2, x2, y2 ) ; }"
"Cache cache = cacheMap. get ( cacheName ) ; if ( cache == null ) { cache = new EhCache ( cacheName ) ; cacheMap. put ( cacheName, cache ) ; } return cache ; }"
URI u = capabilitiesDocument ( ). toUri ( ) ; return u ; }
try { link. Hello ( ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } }
"Map < String, Boolean > result = new HashMap < > ( ) ; result. put ( playerSkill, true ) ; return result ; }"
int val = align ; while ( val!= 0 ) { val = val % 2 ; } return val ; }
if ( json == null ) { json = new JSONObject ( ) ; } return json ; }
PngChunkPLTE chunk = new PngChunkPLTE ( chunkID ) ; pins. add ( chunk ) ; return chunk ; }
Double Y = 0.0 ; for ( int i = 0 ; i < dims ; i ++ ) { Y += foo ( i ) * dims [ i ] ; } return Y ; }
"if ( ns == null || prefix == null || ln == null ) { return ; } if ( val == null || val. length ( ) == 0 ) { return ; } foo ( ns, prefix, ln, val. substring ( 0, 1 ) ) ; }"
"if ( value == null ) { return 0 ; } return transform ( teiidVersion, value, Double. class ) ; }"
int foo = ( int ) ( Math. random ( ) * 5 ) + 1 ; return foo ; }
if (! t. isEnabled ( ) ) { return null ; } TurnoutOperation op = t. getOperations ( ). get ( apparentMode ) ; if ( op!= null && op. isEnabled ( ) ) { return op ; } return t. getOperations ( ). get ( apparentMode ) ; }
"String foo ; if ( name. equals ( ""url"" ) ) { foo = urlDecoder ; } else if ( name. equals ( ""uRLDecoder"" ) ) { foo = uRLDecoder ; } else { foo = urlDecoder ; } return foo ; }"
double dx = 0.0 ; double dy = 0.0 ; for ( int i = 0 ; i < width ; i ++ ) { dx += width [ i ] * height [ i ] ; dy += height [ i ] * width [ i ] ; } return dx * dx + dy * dy ; }
if ( cudaMemmapInfo == null ) { cudaMemmapInfo = new CUMemmapInfo ( ) ; } return cudaMemmapInfo. foo ( ) ; }
List < CardViewWrapper > viewWrapper = new ArrayList < CardViewWrapper > ( ) ; for ( Card card : cardsCopy ) { viewWrapper. add ( new CardViewWrapper ( card ) ) ; } return viewWrapper ; }
entries [ index ] = new Entry ( ) ; entries [ index ]. rgb = rgb ; }
"checkNotNull ( charset, ""The charset should not be null"" ) ; try { return foo ( file, charset ) ; } catch ( IOException e ) { throw new RuntimeIOException ( ""Unable to read "" + file. getAbsolutePath ( ), e ) ; } }"
"if ( StringUtils. isNotBlank ( jcifsServicePrincipal ) ) { logger. debug ( ""jcifsServicePrincipal is set to {}"", jcifsServicePrincipal ) ; Config. setProperty ( JCIFS_PROP_SERVICE_PRINCIPAL, jcifsServicePrincipal ) ; } }"
File f = getInfo ( ) ; if ( f == null ) return 0L ; try { return f. getLastModified ( ) ; } catch ( IOException e ) { return 0L ; } }
"int i = 0 ; for ( int j = 0 ; j < numElements ; j ++ ) { if ( elements [ j ]!= null ) { return elements [ j ]. toString ( ) + "" "" ; } else { i ++ ; } } return ""null"" ; }"
"String token = ( value!= null && value. startsWith ( ""foobar"" ) )? value : ""1"" ; return token ; }"
"String id = element. get ( ""id"" ) ; if ( id == null ) { id = propertyName ; } else { if ( id. equals ( propertyName ) ) { element. remove ( ""id"" ) ; } else { element. add ( ""id"", propertyName ) ; } } }"
JobManager jobManager = new JobManager ( ) ; jobManager. foo ( ) ; return jobManager ; }
"factors. put ( id, factor ) ; factor. setMaxOperator ( MIN_OPERATOR ) ; factor. setCommunicationAdapter ( communicationAdapter ) ; }"
"int [ ] result = new int [ 5 ] ; result [ 0 ] = foo ( ability, tested, context ) ; result [ 1 ] = foo ( ability, tested, context ) ; return result ; }"
"FieldField < R, U > field = Field. create ( field, table, name, fields ) ; ForeignKey < R, U > fk = new ForeignKey < R, U > ( key, field ) ; return fk ; }"
Random random = new Random ( ) ; int listSize = list. length ; for ( int i = 0 ; i < listSize ; i ++ ) { list [ i ] = random. nextInt ( listSize ) ; } double total = 0 ; for ( int i = 0 ; i < listSize ; i ++ ) { total += list [ i ] ; } return total / listSize ; }
final DetailAST arrayDeclAST = typeAST. findFirstToken ( TokenTypes. ARRAY_DECLARATOR ) ; return new FullIdent ( arrayDeclAST == null? typeAST : arrayDeclAST ) ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"String processorId = path. substring ( path. indexOf ( ""/"", 2 ) + 1 ) ; return processorId ; }"
"File dir = new File ( ""."" ) ; if ( dir. exists ( ) &&! dir. isDirectory ( ) ) { return dir ; } return null ; }"
"intent. putExtra ( Intent. EXTRA_SHORTCUT_INTENT, callContainer. getIntent ( ). getShortCUTValue ( ) ) ; intent. putExtra ( Intent. EXTRA_SHORTCUT_NAME, ""1"" ) ; intent. putExtra ( Intent. EXTRA_SHORTCUT_INTENT, callContainer. getIntent ( ). getShortCUTName ( ) ) ; }"
int result = 0 ; while ( result < n ) { random. nextBytes ( ) ; result ++ ; } logger. finest ( logMe ) ; return result ; }
"BarRenderer3D r1 = new BarRenderer3D ( ) ; BarRenderer3D r2 = new BarRenderer3D ( ) ; assertTrue ( r1. equals ( r2 ) ) ; int h1 = r1. hashCode ( ) ; int h2 = r2. hashCode ( ) ; assertEquals ( h1, h2 ) ; }"
HashSet < NonTerminal > result = new HashSet < > ( ) ; for ( Terminal t : terminal ) { result. add ( t. foo ( ) ) ; } return result ; }
for ( int i = 0 ; i < rv. size ( ) ; i ++ ) { rv. add ( new AuthzGroup ( ( String ) rv. get ( i ) ) ) ; } }
Aipor aipor = new Aipor ( ) ; aipor. setId ( id ) ; aiporDao. delete ( aipor ) ; }
Metacard mockMetacard = mock ( Metacard. class ) ; when ( mockMetacard. thumbnail ( ) ). thenReturn ( null ) ; assertNotNull ( mockMetacard ) ; }
"String result = null ; try { result = URLEncoder. encode ( toEncodeString, ""UTF-8"" ) ; } catch ( UnsupportedEncodingException e ) { LOGGER. error ( ""Unsupported encoding :"", e ) ; } return result ; }"
"if ( Trace. isTraceOn ( ) ) Trace. log ( Trace. PROXY, Thread. currentThread ( ). getName ( ) + "" in  > "" + b. length ) ; b = in_. read ( b ) ; }"
IStatus status = ServerUtil. getStatus ( server ) ; if ( status. isOK ( ) ) { System. err. println ( status. getMessage ( ) ) ; } else { System. err. println ( status. getMessage ( ) ) ; } }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
if ( wrap ) { buf. set ( page ) ; buf. flip ( ) ; } else { buf. flip ( ) ; } }
"int foo = System. currentTimeMillis ( ) / 1000 ; return ""dir"" + foo ; }"
byte [ ] signatureBytes = new byte [ SIGNATURE_BIT_STRING. length ] ; for ( int i = 0 ; i < SIGNATURE_BIT_STRING. length ; i ++ ) { signatureBytes [ i ] = ( byte ) SIGNATURE_BIT_STRING [ i ] ; } return signatureBytes ; }
"Cache < K, V > cache = getOpenIDCache ( ) ; if ( cache!= null ) { return cache. get ( key ) ; } return null ; }"
for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if ( ( c >= 'a' && c <= 'z' ) || ( c >= 'A' && c <= 'Z' ) || ( c == '-' ) ) { continue ; } return false ; } return true ; }
"try { return ioOperations. getWOEIDByLocation ( strLocation ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return 0 ; } }"
if ( start ) { cursor = foo ( value ) ; } return cursor ; }
"if ( relUrl == null ) { return null ; } Matcher m = PATTERN. matcher ( relUrl ) ; if ( m. matches ( ) ) { return m. group ( 1 ) + ""."" + m. group ( 2 ) ; } else { return relUrl ; } }"
"Map < String, String > result = new HashMap < > ( ) ; for ( String prefix : prefixes ) { String prefix = prefix. toLowerCase ( ) ; if ( StringUtils. startsWith ( prefix, 0 ) ) { result. put ( prefix, cr. getString ( prefix ) ) ; } } return result ; }"
if ( player. getMultiability ( )!= null ) return player. getMultiability ( ). toString ( ) ; return null ; }
"try { buildRule. executeTarget ( ""testfoo"" ) ; fail ( ""Build exception should have been thrown"" ) ; } catch ( IllegalArgumentException e ) { } }"
int i = 0 ; for ( Statement st : statements ) { if ( st. foo ( ) ) { i ++ ; } } return i ; }
boolean old = isWritable ( ) ; isWritable = writable ; if ( old ) { foo ( ) ; } }
CaretView caretView = new CaretView ( ) ; caretView. setOnMouseClicked ( new EventHandler ( ) { public void handle ( MouseEvent e ) { if ( e. getClickCount ( ) == 2 ) { caretView. click ( ) ; } } } ) ; }
int result = 1 ; for ( int i = 0 ; i < size ; i ++ ) { result = 31 * result + Double. doubleToLongBits ( Double. doubleToLongBits ( i ) ) ; } }
int N = StdIn. readInt ( ) ; int [ ] a = new int [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { a [ i ] = StdIn. readInt ( ) ; } return a ; }
for ( int i = 0 ; i < path. length ( ) ; i ++ ) { char c = path. charAt ( i ) ; if ( c == '/' || c == '|' || c == '/' ) { continue ; } return false ; } return true ; }
for ( int i = 0 ; i < q. length ; i ++ ) { for ( int j = 0 ; j < q [ i ]. length ; j ++ ) { if ( p <= q [ i ] [ j ] ) { q [ i ] [ j ] = 2 ; } else if ( q [ i ] [ j ] < p ) { q [ i ] [ j ] = 3 ; } else { q [ i ] [ j ] = 4 ; } } } }
foo = true ; for ( int i = 0 ; i < stack. size ( ) ; i ++ ) { stack. get ( i ). foo ( ) ; } }
if ( absoluteDiff == 0 && b == 0 ) { return true ; } if ( absoluteDiff < 0 && b > 0 ) { return false ; } if ( relativeDiff < 0 && a > b ) { return false ; } return true ; }
if ( index == 0 ) { return tokenList. get ( 0 ) ; } return tokenList. get ( index ) ; }
"StringBuffer buf = new StringBuffer ( ) ; buf. append ( coord. toString ( ) ) ; while ( buf. length ( ) < 4 ) { buf. append ( ""-"" ) ; } buf. append ( gridSize ) ; return buf. toString ( ) ; }"
"JsonObjectBuilder builder = JsonObject. builder ( ) ; for ( Map. Entry < String, Object > entry : map. entrySet ( ) ) { builder. add ( entry. getKey ( ), entry. getValue ( ) ) ; } return builder ; }"
"if ( dir == null ) { dir = """" ; } if ( name == null ) { name = """" ; } try { foo ( key, new File ( dir, name ) ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } }"
"PreparedStatement prepStatement = conn. prepareStatement ( ""SELECT * FROM "" + TABLE_NAME + "" WHERE subject = '"" + subjectName + ""';"" ) ; prepStatement. setString ( 1, ""K"" ) ; prepStatement. setString ( 2, ""Y"" ) ; prepStatement. execute ( ) ; return prepStatement ; }"
"startServer ( 47500 ) ; fetchPage ( ""/foo.jsp"", 200 ) ; fetchPage ( ""/foo.jsp?case=1"", 200 ) ; fetchPage ( ""/foo.jsp?case=2"", 200 ) ; tearDown ( ) ; }"
int idx = filename. indexOf ( '/' ) ; if ( idx!= - 1 ) { return filename. substring ( idx + 1 ) ; } return filename ; }
return status -> { System. err. println ( status. getMessage ( ) ) ; if ( status. getException ( )!= null ) { status. getException ( ). printStackTrace ( System. err ) ; } return status. getLogger ( ) ; } ; }
List < Uncallback > result = new ArrayList < Uncallback > ( ) ; for ( int i = 0 ; i < foo. length ; i ++ ) { result. add ( foo [ i ] ) ; } return result ; }
"if ( distance < 1 || distance > victim. distance ) { return false ; } return foo ( attacker, victim, distance ) ; }"
"Grade gradeT1 = new Grade ( ) ; gradeT1. setId ( ""1"" ) ; Grade gradeT2 = new Grade ( ) ; gradeT2. setId ( ""2"" ) ; List < Grade > gradeL = new ArrayList < > ( ) ; gradeL. add ( gradeT1 ) ; gradeL. add ( gradeT2 ) ; assertEquals ( gradeL. size ( ), mockGradeFacade. findAll ( ). size ( ) ) ; }"
if ( args == null || args. length == 0 ) return key ; Properties props = propsMap. get ( key ) ; if ( props == null ) return key ; return props. getProperty ( args [ 0 ]. toString ( ) ) ; }
for ( int i = 0 ; i < numVertices ; i ++ ) { if ( graph [ i ] [ 1 ] == 0 ) { return graph [ i ] [ 0 ] ; } else if ( graph [ i ] [ 1 ]!= 1 ) { return graph [ i ] [ 1 ] ; } } return null ; }
"String foo = o. getProperty ( ) == null? """" : o. getProperty ( ). toString ( ) ; return foo ; }"
"Element key = document. createElement ( _key ) ; key. setAttribute ( ""class"", _class. getName ( ) ) ; key. setAttribute ( ""value"", _value ) ; return key ; }"
if (! _valid ) throw new IOException ( tsLogger. i18NLogger. get_state_InputBuffer_2 ( ) ) ; _valid = false ; double d = _input. readDouble ( ) ; _valid = true ; return d ; }
File f = new File ( filename ) ; if ( f. exists ( ) ) return f. toString ( ) ; return null ; }
URLName urlName = new URLName ( url ) ; if ( password!= null ) urlName. append ( ':' ) ; urlName. append ( password ) ; return urlName ; }
"Calendar cal = Calendar. getInstance ( TimeZone. getTimeZone ( ""UTC"" ) ) ; cal. setTime ( new Date ( ) ) ; cal. set ( Calendar. HOUR_OF_DAY, 1 ) ; cal. set ( Calendar. MINUTE, 1 ) ; cal. set ( Calendar. SECOND, 1 ) ; cal. set ( Calendar. MILLISECOND, 999 ) ; return cal. getTime ( ) ; }"
boolean result = true ; for ( HostComponentStateEntity hostComponent : hostComponents ) { if ( hostComponent. isVersionAdvertised ( ) ) { result = false ; break ; } } return result ; }
"try { return foo ( document, provider ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }"
"Cache < AuthorizationKey, AuthorizeCacheEntry > cache = null ; if ( isEnable ) { CacheManager cacheManager = Caching. getCacheManagerFactory ( ). getCacheManager ( AUTHORIZATION_CACHE_MANAGER ) ; cache = cacheManager. getCache ( AUTHORIZATION_CACHE_NAME ) ; } return cache ; }"
Class [ ] result = new Class [ arguments. length ] ; for ( int i = 0 ; i < arguments. length ; i ++ ) { result [ i ] = arguments [ i ]. getClass ( ) ; } return result ; }
long r = 0 ; for ( int i = 0 ; i < 16 ; i ++ ) r |= ( getOctet ( bitlen - 8 * ( i + 1 ) ) & 0xFF ) << ( i * 8 ) ; return ( short ) r ; }
"Configuration c = new Configuration ( ) ; if (! c. containsKey ( key ) ) return null ; String [ ] res = new String [ c. get ( key ). split ( "","" ) ] ; for ( int i = 0 ; i < res. length ; i ++ ) { res [ i ] = c. get ( key ). split ( "","" ) [ i ] ; } return res ; }"
"final RedirectRenderingPipelineTerminator terminator = new RedirectRenderingPipelineTerminator ( ) ; terminator. setRedirectTo ( ""http://localhost:8080/url"" ) ; terminator. renderState ( mockRequest ) ; verify ( mockResponse ). setRedirectTo ( ""http://localhost:8080/url"" ) ; }"
try { return Runtime. getRuntime ( ). freeMemory ( ) ; } catch ( Throwable t ) { return - 1 ; } }
"IWriter w = fmtFactory. getWriter ( fmtId ) ; try { foo ( input, output, params, w ) ; } finally { w. close ( ) ; } }"
"IndexWriter iw = new IndexWriter ( dir, LuceneSettings. analyzer, IndexWriter. MaxFieldLength. UNLIMITED ) ; iw. delete ( new Term ( ""body"", term ) ) ; iw. commit ( ) ; iw. close ( ) ; }"
int [ ] result = new int [ 2 ] ; for ( int i = 0 ; i < numScopes ; i ++ ) { result [ i ] = foo ( i ) ; } return result ; }
boolean error = false ; if ( moveStr. equals ( Move. LEFT ) ) { error = true ; } if ( moveStr. equals ( Move. RIGHT ) ) { error = true ; } if ( moveStr. equals ( Move. UP ) ) { error = true ; } if ( moveStr. equals ( Move. DOWN ) ) { error = true ; } }
"StringBuffer result = new StringBuffer ( ) ; result. append ( "" foo("" ) ; if ( small ) { result. append ( ""0"" ) ; } result. append ( resourceTypeName. getSuffix ( ) ) ; result. append ( suffix ) ; result. append ( "")"" ) ; return result. toString ( ) ; }"
if ( mask == 32 ) { return 0 ; } return mask + ( 1 << ( 63 - mask ) ) ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"MyStack < Integer > s = PowerMockito. mock ( MyStack. class ) ; s. push ( Mockito. anyInt ( ) ) ; s. push ( Mockito. anyInt ( ) ) ; s. push ( Mockito. anyInt ( ) ) ; Mockito. verify ( s, Mockito. times ( 2 ) ). push ( Mockito. anyInt ( ) ) ; }"
if ( size == SizeAdjustment. X ) { return BigDecimal. ZERO ; } else if ( size == SizeAdjustment. Y ) { return BigDecimal. ZERO ; } else if ( size == SizeAdjustment. MICROS ) { return BigDecimal. MICROS ; } else { return BigDecimal. ZERO ; } }
"final OutputStream os = new FileOutputStream ( dest ) ; foo ( src, os, overwrite ) ; }"
"String homeURL = UrlUtils. removeScheme ( MapUtils. getMapStr ( account, ""homeURL"" ) ) ; homeURL = StringUtils. removeTrailingSlash ( homeURL ) ; if ( homeURL. length ( ) == 0 ) { return UrlUtils. getHost ( MapUtils. getMapStr ( account, ""url"" ) ) ; } return homeURL ; }"
try { return! clazz. isEnum ( ) &&! Modifier. isAbstract ( clazz. getModifiers ( ) ) && clazz. newInstance ( )!= null ; } catch ( Exception e ) { return false ; } }
char [ ] result = new char [ foo. length ] ; for ( int i = 0 ; i < foo. length ; i ++ ) { result [ i ] = foo [ i ] ; } return result ; }
"try { return slaAlert ( jobIds ) ; } catch ( SLAAlertException e ) { LOG. error ( ""Error while setting sla alert for Job [{0}]"", jobIds. get ( 0 ) ) ; return false ; } }"
"initializeTypeMap ( ) ; SubRace subRace = typeMap. get ( name ) ; if ( subRace == null ) { throw new IllegalArgumentException ( name + "" is not a previously defined SubRace"" ) ; } return subRace ; }"
"if ( HornetQRAMetaData. trace ) { HornetQRALogger. LOGGER. trace ( ""getOCRASuite()"" ) ; } return ocraSuite ; }"
"if ( baseConf == null ) { baseConf = new Configuration ( ) ; } ParamChecker. notNull ( input, ""input"" ) ; ParamChecker. notNull ( output, ""output"" ) ; return foo ( input. getFileName ( ), output. getFileName ( ), mean, baseConf ) ; }"
"buildRule. executeTarget ( ""vault"" ) ; assertNotNull ( ""Vault expression should not be null"", buildRule. getLog ( ) ) ; }"
Session session = sessionFactory. getCurrentSession ( username ) ; if ( session!= null ) { session. clear ( ) ; } }
boolean exist = false ; int index = 0 ; while ( valor!= 0 ) { if ( map. containsKey ( Integer. valueOf ( valor ) ) ) { exist = true ; } else { index = map. size ( ) - 1 ; } valor = map. get ( Integer. valueOf ( valor ) ) ; } return exist ; }
"Map < String, String > issueMap = ( base == null )? new HashMap < > ( ) : base. get ( locale ) ; if ( issueMap == null ) { issueMap = new HashMap < > ( ) ; base. put ( locale, issueMap ) ; } return issueMap ; }"
"if ( weight < 0 ) { weight = 0 ; } List < Page > pages = new ArrayList < Page > ( ) ; pages. add ( page ) ; Collections. sort ( pages, new PageComparator ( weight ) ) ; foo ( pages ) ; }"
"try { foo ( socket, inSocket, outSocket ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } }"
URL [ ] urls = new URL [ matches. size ( ) ] ; Enumeration e = matches. elements ( ) ; while ( e. hasMoreElements ( ) ) { urls [ e. nextElement ( ). toString ( ) ] = ( URL ) e. nextElement ( ) ; } return urls ; }
"if ( t. equalsIgnoreCase ( ""true"" ) ) return true ; if ( t. equalsIgnoreCase ( ""false"" ) ) return false ; if ( t. equalsIgnoreCase ( ""1"" ) ) return true ; if ( t. equalsIgnoreCase ( ""0"" ) ) return false ; throw new IllegalArgumentException ( ""Expected: "" + t + "" Got: "" + t ) ; }"
"int wordSize = word. length ( ) ; if ( wordSize == 1 ) { return word ; } else { return word. substring ( 0, wordSize - 2 ) + ""."" + word. substring ( wordSize - 1 ) ; } }"
"for ( Object o : c ) { if (! o. equals ( ""0"" ) ) { return false ; } } return true ; }"
"int pos = columnName. indexOf ( "" "" ) ; if ( pos >= 0 ) { return foo ( columnName. substring ( 0, pos ) ) ; } else { return """" ; } }"
final JsonParser parser = new JsonParser ( ) ; return parser. parse ( json ) ; }
return AccessController. doPrivileged ( new PrivilegedAction < ClassLoader > ( ) { public ClassLoader run ( ) { return Thread. currentThread ( ). getContextClassLoader ( ) ; } } ) ; }
"String msg = """" ; if ( status. isError ( ) ) { msg = status. getMessage ( ) + "" ("" + status. getErrorCode ( ) + "")"" ; } else { msg = status. getErrorCode ( ) + "" "" + status. getMessage ( ) ; } return msg ; }"
"Bandwidth expected = Bandwidth. kbps ( 900.0 ) ; assertThat ( large. foo ( ), is ( expected ) ) ; }"
final EmployeeBean employeeBean = new EmployeeBean ( ) ; employeeBean. foo ( ) ; }
"File d = new File ( ""/foo"" ) ; if ( d. exists ( ) && d. canWrite ( ) ) { return true ; } return false ; }"
List < String > out = new ArrayList < > ( ) ; if ( null!= value ) { out. add ( value. toString ( ) ) ; } if ( parent!= null ) { out. addAll ( parent. foo ( ) ) ; } return out ; }
"String x = properties. getProperty ( k ) ; return x == null? """" : x ; }"
trade. setMarket ( market. getBid ( ) ) ; trade. setAmount ( trade. getAmount ( ) * 10 ) ; trade. setAmount ( trade. getAmount ( ) * 100 ) ; tradedOrders. add ( trade ) ; }
"Set < ApprovedSite > setToReturn = Sets. newHashSet ( site2, site3 ) ; Mockito. when ( repository. getByClientId ( client. getClientId ( ) ) ). thenReturn ( setToReturn ) ; service. clearApprovedSitesForClient ( client ) ; Mockito. verify ( repository, times ( 1 ) ). remove ( any ( ApprovedSite. class ) ) ; }"
"String s = """" ; for ( int i = 0 ; i < arguments. length ; i ++ ) { if ( arguments [ i ]. length ( ) == 1 ) { s += arguments [ i ] [ 0 ] ; } else { s += arguments [ i ] [ 1 ] ; } } return s ; }"
"return Sets. filter ( models, new Predicate < ModuleLicenseModel > ( ) { @ Override public boolean apply ( ModuleLicenseModel model ) { return model. isEnabled ( ) &&! model. published ( ) ; } } ) ; }"
"for ( T input : inputs ) { if ( input!= null ) { return input ; } } throw new IllegalArgumentException ( ""Invalid inputs are found, all being null"" ) ; }"
Paragraph p = new Paragraph ( ) ; p. setText ( text ) ; p. setFont ( font ) ; return p ; }
"VuePropertyMapper r = map. get ( pObject ) ; if ( r == null ) { r = new VuePropertyMapper ( pObject ) ; map. put ( pObject, r ) ; } return r ; }"
if ( x < min ) return min ; else return x ; }
try { byte [ ] data = Files. readAllBytes ( file. toPath ( ) ) ; foo ( data ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } }
ImageIcon icon = getImageIcon ( iconName ) ; if ( icon == null ) { return false ; } button. setIcon ( new ImageIcon ( icon ) ) ; button. setDescription ( description ) ; return true ; }
List reportList ; StatusILDReportDAO commonreportdao = new StatusILDReportDAO ( ) ; reportList = commonreportdao. selectRequest_no ( dto ) ; return reportList ; }
CPLSession mySession = get ( ) ; try { mySession. save ( ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } return mySession ; }
DRMError err = findError ( ) ; if ( err!= null ) { return false ; } return true ; }
if ( instance == null ) { instance = new VersionFourGenerator ( ) ; } return instance ; }
"int exitCode = execute ( new String [ ] { ""foo"" }, true ) ; final String output = errorStringWriter. getBuffer ( ). toString ( ). trim ( ) ; assertEquals ( ""Either the name or ID of a server must be specified"", output ) ; assertEquals ( 1, exitCode ) ; }"
"Object value = cookieParam. getValue ( ) ; if ( value == null ) { return null ; } String [ ] tokens = value. split ( "";"" ) ; return tokens [ 1 ] ; }"
int tmp = index ; while ( tmp > 4 ) { tmp -= 4 ; } return tmp ; }
int seconds = 0 ; for ( final TimeSpan span : population. getTimes ( ) ) { if ( span. getAverage ( ) > 0 ) { seconds ++ ; } } return seconds == population. getTimes ( ). get ( 0 ). seconds || seconds == population. getTimes ( ). get ( 1 ). seconds ; }
Iterator < Contact > it = contacts. iterator ( ) ; while ( it. hasNext ( ) ) { if ( it. next ( ). getId ( ). equals ( contactId ) ) { it. remove ( ) ; return true ; } } return false ; }
"if ( entity == null ) { return false ; } final String contentType = entity. getContentType ( ) ; return contentType!= null && contentType. equalsIgnoreCase ( ""application/x-www-form-urlencoded"" ) ; }"
"logger. log ( Level. WARNING, e. getLocalizedMessage ( ) ) ; return e. printStackTrace ( logger ) ; }"
"int r = Integer. parseInt ( rawValue, 2 ) ; int g = Integer. parseInt ( rawValue, 2 ) ; int b = Integer. parseInt ( rawValue, 2 ) ; return new RGB ( r, g, b ) ; }"
"long foo = 0 ; try { foo = Long. parseLong ( System. getProperty ( ""line.separator"" ) ) ; } catch ( NumberFormatException e ) { } return foo ; }"
"myTiles. add ( new Tile ( tx, ty, tmaxX, tmaxY ) ) ; myTiles. add ( new Tile ( tx, ty, tmaxX, tmaxY ) ) ; }"
"String s = args. get ( i ) ; return s + "" "" + arg ; }"
"for ( int i = 0 ; i < 10 ; i ++ ) { String player = ""x"" + i ; switch ( player ) { case PLAY_1 : case PLAY_2 : case PLAY_3 : case PLAY_4 : case PLAY_5 : case PLAY_6 : case PLAY_7 : assertEquals ( ""x"" + i, player. toString ( ) ) ; break ; default : break ; } } }"
"Set < String > keys = new HashSet < String > ( ) ; for ( String key : keys. keySet ( ) ) { DB. delete ( TABLE_NAME, null, key ) ; } }"
"String dir = System. getProperty ( ""user.dir"" ) ; return dir + ""/foo"" ; }"
BufferedWriter w = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( fileName ) ) ) ; return w ; }
for ( int i = 0 ; i < 10000 ; i ++ ) { take ( ) ; } try { take ( ) ; } catch ( InterruptedException e ) { } }
"int n = data. length ; double [ ] result = new double [ n * stride ] ; for ( int j = 0 ; j < n / stride ; j ++ ) { result [ j ] = foo ( data [ i0 ], i0, stride ) ; } return result ; }"
boolean result = false ; SubCategoryDAO subCategoryDAO = new SubCategoryDAO ( ) ; result = subCategoryDAO. foo ( object1 ) ; return result ; }
"try { return URLDecoder. decode ( vCardString, ""UTF-8"" ) ; } catch ( UnsupportedEncodingException e ) { e. printStackTrace ( ) ; return """" ; } }"
ThreadGroup topGroup = topGroup ( thread ) ; return topGroup. priority ; }
List < Integer > ret = new LinkedList < Integer > ( ) ; for ( int i = 0 ; i < PROTOCOL_MESSAGES. length ; i ++ ) { if ( PROTOCOL_MESSAGES [ i ]. getType ( ) == type ) { ret. add ( i ) ; } } return ret ; }
File f = new File ( uri ) ; return f. exists ( ) ; }
"String uuid = clicked. getId ( ) ; return uuid. substring ( uuid. lastIndexOf ( ""."" ) + 1 ) ; }"
"String foo = ""Foo"" ; Map < String, Object > map = new HashMap < > ( ) ; map. put ( ""foo"", foo ) ; foo = ( String ) map. get ( ""foo"" ) ; foo = ( String ) map. get ( ""foo"" ) ; }"
if ( e!= null ) { _foo ( e ) ; } update ( ) ; }
"if ( System. getProperty ( variable ). equals ( ""true"" ) ) { System. setProperty ( variable, ""false"" ) ; } else { System. setProperty ( variable, ""true"" ) ; } }"
double currentMemory = ( Runtime. getRuntime ( ). totalMemory ( ) - Runtime. getRuntime ( ). freeMemory ( ) ) / 1024d / 1024d ; if ( currentMemory < MAX_MEMORY ) { currentMemory = MAX_MEMORY ; } Runtime. getRuntime ( ). gc ( ) ; System. gc ( ) ; }
"synchronized ( jPlayer. saveLock ) { if ( jPlayer. isInJob ( job ) ) return ; Jobs. getJobsDAO ( ). leaveJob ( jPlayer, job ) ; Jobs. takeSlot ( job ) ; } }"
String res = System. getProperty ( key ) ; return res ; }
for ( int i = 0 ; i < input. length ; i ++ ) { foo ( input [ i ] ) ; } }
for ( Contact contact : contacts ) { if ( contact. getId ( ) == id ) return contact ; } return null ; }
if ( eol == null ) { return true ; } else { return eol ; } }
"Integer index = assignedValues. get ( value ) ; if ( index == null ) { index = nextIndex ; assignedValues. put ( value, index ) ; index ++ ; } return index ; }"
switch ( accessLevel ) { case PRIVATE : return ClassConstants. INTERNAL_ACC_PRIVATE ; case PROTECTED : return ClassConstants. INTERNAL_ACC_PROTECTED ; case PUBLIC : return ClassConstants. INTERNAL_ACC_PUBLIC ; default : return 0 ; } }
"IssueLinkType type = IssueLinkType. foo ( linkId ) ; if ( type!= null ) { return new ResponseEntity < > ( type, HttpStatus. OK ) ; } else { return new ResponseEntity < > ( HttpStatus. NO_CONTENT ) ; } }"
"String foo = ""foo"" ; if ( foo. matches ( ""[A-Za-z0-9]+"" ) ) { foo = ""foo"" ; } if ( foo. matches ( ""[A-Za-z0-9]+"" ) ) { foo = ""foo"" ; } if ( foo. matches ( ""[A-Za-z0-9]+"" ) ) { foo = ""foo"" ; } return foo ; }"
ArrayList result = new ArrayList ( ) ; if ( target. isInterface ( ) ) { result. add ( target. getSuperclass ( ) ) ; } return result ; }
byte [ ] b = new byte [ strValue. length ( ) ] ; for ( int i = 0 ; i < strValue. length ( ) ; i ++ ) { char c = strValue. charAt ( i ) ; b [ i ] = ( byte ) ( c & 0xff ) ; } return b ; }
target. mTimeStamp = System. currentTimeMillis ( ) ; return target ; }
byte [ ] result = new byte [ 4 ] ; result [ 0 ] = ( byte ) ( value >>> 24 ) ; result [ 1 ] = ( byte ) ( value >>> 16 ) ; result [ 2 ] = ( byte ) ( value >>> 8 ) ; result [ 3 ] = ( byte ) ( value >>> 0 ) ; return result ; }
List < String > groups = new ArrayList < String > ( ) ; List < String > userGroups = foo ( user ) ; while ( userGroups. size ( )!= 0 ) { groups. add ( userGroups. remove ( userGroups. size ( ) - 1 ) ) ; userGroups = foo ( user ) ; } return groups ; }
"final String host = ""www.example.com"" ; final String password = ""password"" ; MatcherAssert. assertThat ( new PsBasic ( new TkFixed ( host, password ) ). auth ( ), Matchers. equalTo ( password ) ) ; }"
if ( type == null ) return null ; return type. getRawType ( ) ; }
"final Tomcat90ContainerAdapter adapter = new Tomcat90ContainerAdapter ( ) ; assertSame ( ""foo"", adapter. info ( ). getContextResourceLinks ( ). size ( ) ) ; adapter. info ( ""foo"" ) ; assertSame ( ""foo"", adapter. info ( ). getContextResourceLinks ( ). get ( 0 ). getLink ( ). getValue ( ) ) ; }"
Set < String > result = new HashSet < > ( userAuthorities. size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { result. add ( authority. toString ( ) ) ; } return result ; }
"try { return new URI ( ""http://www.w3.org/TR/html4/strict.dtd"" ). build ( ) ; } catch ( URISyntaxException e ) { throw new RuntimeException ( e ) ; } }"
EditPartViewer viewer = new EditPartViewer ( editor ) ; return viewer ; }
"DomainControllerRuntimeIgnoreTransformationEntry hostIgnore = hostEntries. get ( hostName ) ; return! hostIgnore. ignoreResource ( domainRoot, PathAddress. pathAddress ( socketBindingGroup ) ) ; }"
if ( size > 4 ) { size = 4 ; } if ( size < 0 ) { size = 0 ; } foo ( size ) ; }
if ( json. containsKey ( key ) ) return json. getString ( key ) ; return defaultValue ; }
setA. removeAll ( setB ) ; return setA ; }
"Map < Long, Integer > result = new HashMap < Long, Integer > ( ) ; for ( long i = 0L ; i < 10000L ; i ++ ) { result. put ( i, 0 ) ; } return result ; }"
"try { ScheduledProgramNote note = scheduledProgramNoteService. find ( id ) ; return new ResponseEntity < ScheduledProgramNote > ( note, HttpStatus. OK ) ; } catch ( Exception ex ) { return new ResponseEntity < ScheduledProgramNote > ( HttpStatus. INTERNAL_SERVER_ERROR ) ; } }"
"int dotpos = url. indexOf ( ""."" ) ; return dotpos!= - 1? url. substring ( dotpos + 1 ) : url ; }"
"XYSeries series1 = new XYSeries ( ""Series 1"" ) ; series1. add ( 1.0, 1.0 ) ; series1. add ( 2.0, 2.0 ) ; series1. add ( 3.0, 3.0 ) ; XYDataset dataset = new XYSeriesCollection ( series1 ) ; return ChartFactory. createScatterPlot ( ""Scatter Plot"", ""Domain"", ""Range"", dataset ) ; }"
"List table = new ArrayList ( ) ; Table t = session. from ( clazz ) ; for ( int i = 0 ; i < table. size ( ) ; i ++ ) { Table row = ( Table ) table. get ( i ) ; if ( row. get ( ""class_id"" )!= null ) { table. add ( row. get ( ""class_id"" ) ) ; } } return table ; }"
if ( v ) { foo = true ; } else { foo = false ; } }
"int sp = 0, ep = size - 1 ; int m ; while ( sp <= ep ) { m = ( sp + ep ) / 2 ; if ( arrayBuf. get ( startPos + m ) == i ) { return m + 1 ; } else if ( i < arrayBuf. get ( startPos + m ) ) { ep = m - 1 ; } else { sp = m + 1 ; } } return ep + 1 ; }"
if ( id == null ) { return null ; } for ( NetworkParameters params : NetworkParameters. values ( ) ) { if ( params. id. equals ( id ) ) { return params ; } } return null ; }
"String subject = chat. getSubject ( ) ; if ( subject == null ) { return ; } if ( message. getSubject ( ) == null ) { return ; } if ( message. getBody ( ) == null ) { return ; } foo ( subject, message ) ; }"
for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 0 ; j < N ; j ++ ) { if ( stack [ i ] [ j ]!= null ) { return false ; } } } return true ; }
while ( toWrite > maxSize ) { toWrite -= maxSize ; } to. writeShort ( toWrite ) ; }
List < User > users = new ArrayList < User > ( ) ; users. add ( foo ( ) ) ; return users ; }
int result = 0 ; do { result ++ ; value >>>= 7 ; } while ( value!= 0 ) ; return result ; }
"ATGBiomeEvent event = new ATGBiomeEvent ( biome, type, group, weight ) ; MinecraftForge. EVENT_BUS. post ( event ) ; if ( event. response == ATGBiomeEvent. ResponseType. FAILED ) { } }"
byte [ ] b = new byte [ str. length ( ) ] ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { b [ i ] = ( byte ) str. charAt ( i ) ; } return Buffer. wrap ( b ) ; }
"ProgressBarTreeTableCell < Object > cell = new ProgressBarTreeTableCell < > ( ) ; assertTrue ( cell. getStyleClass ( ). contains ( ""progress-bar-tree-table-cell"" ) ) ; }"
"String storagePath = System. getProperty ( ""user.dir"" ) ; if ( storagePath!= null ) { return new StorageFile ( storagePath ) ; } else { return new StorageFile ( ) ; } }"
"final Integer id = TOKENS. get ( name ) ; if ( id == null ) { throw new IllegalArgumentException ( ""Unknown javdoc token name. Given name "" + name ) ; } return id ; }"
float [ ] out = new float [ 3 ] ; for ( int i = 0 ; i < in. length ; i ++ ) { float n = in [ i ] ; if ( n < 0 ) n = 0f ; if ( n > 1 ) n = 1f ; if ( n <= 0.00304f ) out [ i ] = in [ 0 ] * 12.92f ; else out [ i ] = ( float ) ( 2.4 * Math. exp ( - 2.4 * Math. log ( n ) ) ) ; } return out ; }
Util. assertPrecondition ( isImmutable ( ) ) ; return ordinalToNameMap [ ordinal - min ] ; }
"LOGGER. error ( ""Error while trying to call "" + e. getClass ( ). getName ( ), e ) ; return e. getMessage ( ) ; }"
Object tnOpSet = adHocChatRoom. getParentProvider ( ). getOperationSet ( OperationSetTyping. class ) ; if ( tnOpSet!= null ) return true ; else return false ; }
"try { return new NetworkConfiguration ( NetworkInterface. getNetworkInterfaces ( ) ) ; } catch ( SocketException e ) { LOGGER. error ( ""Inspecting the network failed: "" + e. getMessage ( ), e ) ; return null ; } }"
try { return value. getBytes ( encoding ) ; } catch ( UnsupportedEncodingException e ) { throw new IllegalArgumentException ( e ) ; } }
"assertThat ( director. priority ( ), lessThan ( Integer. MAX_VALUE ) ) ; assertThat ( director. priority ( ), greaterThanOrEqualTo ( Integer. MAX_VALUE ) ) ; }"
"long folderId = 0L ; try { long [ ] groupIds = { groupId } ; long dataRepositoryIds = { dataRepositoryId } ; folderId = foo ( groupIds, dataRepositoryIds ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } return folderId ; }"
if ( jolokiaUrl!= null ) { jolokiaUrl = jolokiaUrl ; container. addJolokiaUrl ( jolokiaUrl ) ; } }
"double [ ] mapExtent = wmtSource. getMapExtent ( zoomLevel ) ; double x = mapExtent [ 0 ] ; double y = mapExtent [ 1 ] ; double maxx = mapExtent [ 2 ] ; double maxy = mapExtent [ 3 ] ; return new ReferencedEnvelope ( ( int ) x, ( int ) y, ( int ) ( x + maxx ), ( int ) ( y + maxy ) ) ; }"
int i = data [ offset ] & 0xff ; return i << 24 | ( data [ offset + 1 ] & 0xff ) << 16 | ( data [ offset + 2 ] & 0xff ) << 8 | ( data [ offset + 3 ] & 0xff ) ; }
"StringBuilder sb = new StringBuilder ( ) ; for ( Object object : objects ) { if ( sb. length ( )!= 0 ) { sb. append ( "", "" ) ; } sb. append ( object ) ; } return sb. toString ( ) ; }"
int n = matrix. length ; int [ ] [ ] strong = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( matrix [ i ] [ j ] == 0 ) strong [ i ] [ j ] = 1 ; else strong [ i ] [ j ] = 0 ; } } return strong ; }
"File directory = new File ( ""directoryName"" ) ; if ( directory. exists ( ) ) { directory. delete ( ) ; } File file = new File ( ""file.txt"" ) ; file. createNewFile ( ) ; foo ( modifiedObject, file ) ; }"
"configuration. put ( key, value ) ; try { config. put ( key, ""1"" ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } }"
Date result = new Date ( 0 ) ; for ( Date date : dates ) { if ( date. before ( result ) ) { result = date ; } } return result ; }
long oldLength = length ; if ( length!= oldLength ) { length = oldLength ; } }
for ( int i = 0 ; i < script. length ( ) ; i ++ ) { int counter = 0 ; for ( int j = 0 ; j < script. length ( ) ; j ++ ) { if ( script. charAt ( i ) == script. charAt ( j ) ) { counter ++ ; } } } }
double max = 0 ; for ( double d : array ) { if ( d > max ) { max = d ; } } return max ; }
"Future <? > future = executor. submit ( new Runnable ( ) { public void run ( ) { try { future. get ( timeout, unit ) ; } catch ( InterruptedException e ) { } } } ) ; return future. get ( timeout, unit ) ; }"
int total = 0 ; int i = 0 ; for ( int j = 0 ; j < instance. numInstances ( ) ; j ++ ) { for ( int k = 0 ; k < allPoints. numInstances ( ) ; k ++ ) { double p = allPoints. value ( k ) ; if ( p <= pointList [ total ] ) { total = p ; i = k ; } } } return total ; }
"String retorno = """" ; int pos = 0 ; while ( pos < nombre_propiedad. length ( ) ) { retorno = retorno + nombre_propiedad. charAt ( pos ) ; } return retorno ; }"
"try { writer. write ( ""<"" ) ; for ( int i = 0 ; i < foo. length ( ) ; i ++ ) { writer. write ( foo. charAt ( i ) ) ; } writer. write ( "">"" ) ; } catch ( final IOException e ) { e. printStackTrace ( ) ; } }"
"final CertificateFactory cf = CertificateFactory. getInstance ( ""X509"" ) ; try { cf. init ( Cipher. ENCRYPT_MODE, key ) ; out. write ( cf. getEncoded ( ) ) ; } finally { if ( out!= null ) { out. close ( ) ; } } }"
"try { return ioOperations. foo ( medicalType ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return false ; } }"
"Method m = Class. forName ( id ). getMethod ( ""foo"", ( Class <? > [ ] ) null ) ; m. setAccessible ( true ) ; m. invoke ( null, ( Object [ ] ) null ) ; }"
resultSegment. setParent ( parentSegment ) ; isSegmentActive = true ; }
float pi = StrictMath. toDegrees ( theta ) ; if ( pi < 0 ) { pi = 0 ; } else if ( pi > Math. PI ) { pi = Math. PI ; } return pi ; }
"try { return Long. parseLong ( ""1"" ) ; } catch ( NumberFormatException e ) { return - 10000 ; } }"
if ( in <= 0.0D ) { return in ; } else { return Double. longBitsToDouble ( Double. doubleToRawLongBits ( in ) ) ; } }
final Intent intent = new Intent ( ) ; intent. setFlags ( Intent. FLAG_ACTIVITY_NEW_TASK ) ; return intent ; }
"clean = clean. replaceAll ( ""<"", ""&lt;"" ) ; clean = clean. replaceAll ( "">"", ""&gt;"" ) ; return clean ; }"
"ThresholdEvent event = new ThresholdEvent ( new Day ( 23, 9, 2003 ) ) ; assertTrue ( event instanceof Serializable ) ; }"
DataInputStream var1 = new DataInputStream ( new BufferedInputStream ( new GZIPInputStream ( par0InputStream ) ) ) ; NBTTagCompound var2 ; try { var2 = foo ( var1 ) ; } finally { var1. close ( ) ; } return var2 ; }
"int N = a. length ; StdDraw. setXscale ( 0, N - 1 ) ; for ( int i = 1 ; i < N ; i ++ ) { StdDraw. line ( i - 1, a [ i - 1 ], i, a [ i ] ) ; } }"
"float sampleRate = 190000 ; int sampleSizeInBits = 8 ; int channels = 2 ; boolean signed = true ; boolean bigEndian = true ; AudioFormat format = new AudioFormat ( sampleRate, sampleSizeInBits, channels, signed, bigEndian ) ; return format ; }"
if ( dataBound == null ) { return true ; } else { return dataBound ; } }
"String name = child. getName ( ) ; if ( data. containsKey ( name ) ) { data. put ( name, data. get ( name ) ) ; } else if ( child. isBoolean ( ) ) { data. put ( name, Boolean. TRUE ) ; } else { data. put ( name, child. getBoolean ( ) ) ; } }"
"if ( resourceList == null ) { System. err. println ( ""Field'resourceList' is null."" ) ; System. exit ( 1 ) ; } else { resourceList = resourceList ; } }"
"sessionManager. updateStatus ( ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
"String s = """" ; switch ( length ) { case 2 : s = ""0"" + n. toString ( ) ; break ; case 3 : s = ""0"" + n. toString ( ) ; break ; case 4 : s = ""0"" + n. toString ( ) ; break ; case 5 : s = ""0"" + n. toString ( ) ; break ; case 6 : s = ""0"" + n. toString ( ) ; break ; default : break ; } return s ; }"
"DateFormat dateFormat = new SimpleDateFormat ( ""yyyyMMdd"" ) ; Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; cal. set ( Calendar. MONTH, cal. get ( Calendar. MONTH ) ) ; cal. set ( Calendar. DAY_OF_MONTH, 1 ) ; return dateFormat. format ( cal. getTime ( ) ) ; }"
"String result = ""foo"" ; if ( newPw!= null ) { result += newPw ; } if ( confirmPw!= null ) { result += confirmPw ; } return result ; }"
ClassLoader cl = VMStackWalker. getCallingClassLoader ( ) ; return cl!= null? cl. getPackagesForClassLoader ( cl ) : VMClassLoader. getPackagesForClassLoader ( cl ) ; }
try { return info. getPropertyDescriptor ( propertyName ) ; } catch ( final IntrospectionException e ) { throw new RuntimeException ( e ) ; } }
"Key result = null ; for ( Key key : keys ) { if ( equal ( cls, key ) ) { result = key ; break ; } } return result ; }"
"final View child = findOneVisibleChild ( 0, layoutManager. getChildCount ( ), - 1, false, true ) ; return child == null? RecyclerView. NO_POSITION : recyclerView. getChildAdapterPosition ( child ) ; }"
checkYear ( year ) ; return foo ( year ) ; }
return status -> { try { return status. getLogger ( ) ; } catch ( CoreException e ) { return status. getLogger ( ) ; } } ; }
"String datString = ""data/"" + tsvFileName + "".dat"" ; Files. write ( new File ( datFileName ). toPath ( ), datString. getBytes ( ), Charsets. UTF_8 ) ; foo ( tsvFileName, datString, radius ) ; }"
StrutsModel model = modelFor ( context ) ; if ( model!= null ) { return model ; } model = modelForCombined ( context ) ; if ( model!= null ) { return model ; } return modelFor ( context ) ; }
CheckResult res = new CheckResult ( aResponse ) ; return res ; }
"return new Predicate < RequestHandler > ( ) { @ Override public boolean apply ( RequestHandler input ) { return null!= AnnotationUtils. findAnnotation ( input. getClass ( ), annotation ) ; } } ; }"
"try { String permission = System. getProperty ( ""user.name"" ). toLowerCase ( ) ; checkPermissions ( permission ) ; } catch ( SecurityException e ) { e. printStackTrace ( ) ; } finally { System. clearProperty ( ""user.name"" ) ; } }"
if ( integrate == null ) { return true ; } else { return integrate ; } }
Set < String > attendeeIds = minutesAsAService. getAttendees ( ) ; if ( attendeeIds == null ) { attendeeIds = new HashSet < > ( ) ; } return attendeeIds ; }
"int len = Math. min ( requestedLen, buffer. length ) ; long p = seekPos ; for ( int i = 0 ; i < len ; i ++ ) { int q = file. read ( ) ; if ( q == - 1 ) return i ; buffer [ i ] = q ; } return len ; }"
Long ret = cache. get ( key ) ; if ( ret == null ) { return null ; } return ret ; }
"try { byte [ ] buf = ic. getData ( ) ; ip. write ( buf, 0, buf. length ) ; ip. flush ( ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } }"
"int mid = ( int ) Math. floor ( Math. log ( val ) / LOG_10_VALUE ) ; double alpha = ( val - mid ) / LOG_10_VALUE ; if ( alpha < 0.0 ) { alpha = 0.0 ; } else if ( alpha > 1.0 ) { alpha = 1.0 ; } set ( mid, ( float ) alpha ) ; }"
"for ( Class <? > iface : clazz. getInterfaces ( ) ) { String name = iface. getSimpleName ( ) ; if ( Proxy. isProxyClass ( name ) ) { throw new RuntimeException ( ""Proxy interface '"" + name + ""' is not a proxy interface"" ) ; } } }"
"int foo = 4 ; Foo f = new Foo ( ) ; f. set ( 42, 42 ) ; f. set ( 3, 3 ) ; f. set ( 4, 0 ) ; f. set ( 5, 0 ) ; f. set ( 6, 0 ) ; f. set ( 7, 0 ) ; f. set ( 8, 0 ) ; f. set ( 9, 0 ) ; assertEquals ( 42, f. get ( 3 ) ) ; assertEquals ( 8, f. get ( 4 ) ) ; assertEquals ( 9, f. get ( 5 ) ) ; }"
"for ( int x = 0 ; x < children. length ; x ++ ) children [ x ]. foo ( state, dataInput ) ; }"
"Credential credential = db. getCredential ( ) ; if ( credential instanceof PasswordCredential ) { return Pair. of ( ( String ) credential, ( String ) credential. getPassword ( ) ) ; } return new Pair < String, String > ( credential. getUser ( ), credential. getPassword ( ) ) ; }"
"String drawable = resPath ; if ( drawable. contains ( ""/"" ) ) { drawable = drawable. substring ( drawable. lastIndexOf ( '/' ) + 1 ) ; } if ( resPath. contains ( ""."" ) ) { drawable = drawable. substring ( 0, drawable. lastIndexOf ( '.' ) ) ; } return drawable ; }"
"if ( conditionFactors. contains ( factor ) ) throw new WebDAVException ( IResponse. SC_BAD_REQUEST, Policy. bind ( ""error.parseDuplicateEntry"" ) ) ; conditionFactors. add ( factor ) ; }"
if ( loopPointer > 0 ) { fLoopStack. push ( loopPointer ) ; fLoopPointer = loopPointer ; } }
"int foo = 0 ; try { User. clear ( ) ; } catch ( final SecurityException ex ) { Logger. getLogger ( DataAccess. class. getName ( ) ). log ( Level. SEVERE, null, ex ) ; } catch ( final Exception ex ) { Logger. getLogger ( DataAccess. class. getName ( ) ). log ( Level. SEVERE, null, ex ) ; } return foo ; }"
"String [ ] result = new String [ userLibraries. length ] ; System. arraycopy ( userLibraries, 0, result, 0, userLibraries. length ) ; return result ; }"
assert targetState. foo ( )!= getState ( ) ; return targetState. foo ( ) ; }
Object [ ] params = new Object [ 5 ] ; params [ 0 ] = foo ; params [ 1 ] = foo ; params [ 2 ] = foo ; return params ; }
PDRectangle retval ; COSArray array = ( COSArray ) dictionary. getDictionaryObject ( COSName. B ) ; if ( array!= null ) { retval = new PDRectangle ( array ) ; } else { retval = getCOSNumber ( COSName. B ) ; } return retval ; }
"Key x = new Key ( ) ; int pos = new Random ( ). nextInt ( foo. length ( ) ) ; x. set ( pos, foo. charAt ( pos ) ) ; x. set ( pos + 1, foo. charAt ( pos ) ) ; return x ; }"
"int pos = map. get ( key ) ; if ( pos == - 1 ) { pos = map. put ( key, value ) ; } return pos ; }"
"OutputAnalyzer output = JcmdBase. jcmd ( VM_ARGS, new String [ ] { ""foo"" } ) ; output. shouldHaveExitValue ( 0 ) ; output. shouldContain ( ""hey you"" ) ; output. shouldContain ( ""hey you"" ) ; output. shouldContain ( ""hey you"" ) ; output. shouldContain ( ""hey you"" ) ; }"
"Matcher matcher = PATTERN. matcher ( line ) ; if ( matcher. matches ( ) ) { foo ( Integer. parseInt ( matcher. group ( 1 ) ), Integer. parseInt ( matcher. group ( 2 ) ) ) ; } }"
if ( fireMode == FireMode. ON_CHANGE ) { foo ( listener ) ; } else { foo ( listener ) ; } }
List < IssueType > result = new ArrayList < IssueType > ( ) ; for ( IssueType type : IssueType. values ( ) ) { result. add ( type ) ; } return result ; }
s [ 0 ] = ( byte ) tag ; s [ 1 ] = ( byte ) ( ( tag >> 8 ) & 0xff ) ; s [ 2 ] = ( byte ) ( ( tag >> 16 ) & 0xff ) ; s [ 3 ] = ( byte ) ( ( tag >> 24 ) & 0xff ) ; s [ 4 ] = ( byte ) ( ( tag >> 16 ) & 0xff ) ; s [ 5 ] = ( byte ) ( ( tag >> 8 ) & 0xff ) ; s [ 6 ] = ( byte ) ( tag & 0xff ) ; }
int result = temporalCoordinateSystem1. hashCode ( ) ; assertFalse ( temporalCoordinateSystem2. hashCode ( ) == result ) ; }
try { Thread. sleep ( 1000 ) ; } catch ( InterruptedException e ) { e. printStackTrace ( ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } }
"final File basedir = Paths. get ( ""src/main/resources/maven-poms"" ). toAbsolutePath ( ) ; return new File ( basedir, ""maven-poms"" ) ; }"
"try { return ioOperations. foo ( ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return null ; } }"
try { process. foo ( ) ; } catch ( Exception e ) { } checkCountRows ( 1 ) ; }
short x = ( short ) ( firstcell - 1 ) ; return x ; }
lock. lock ( ) ; try { resultHandler. onSuccess ( result ) ; } finally { lock. unlock ( ) ; } }
"for ( int i = 0 ; i < releasedIdVector. size ( ) ; i ++ ) { releasedIdVector. set ( i, releasedIdVector. get ( i ) + tempID ) ; } }"
for ( Argument a : args ) { if ( a. getName ( ). equals ( name ) ) { return a ; } } return null ; }
Matrix m = new Matrix ( ) ; for ( int i = 0 ; i < rects. size ( ) ; i ++ ) m. mapRect ( rects. get ( i ) ) ; }
DatabaseRelationDefinition def = map. get ( id ) ; if ( def == null && id. hasSchema ( ) ) { def = map. get ( id. getSchemalessID ( ) ) ; } return def ; }
"System. out. print ( ch ) ; System. out. print ( ""  "" ) ; System. out. flush ( ) ; }"
"JScrollPane jScrollPane = new JScrollPane ( component, bounds, backgroundColor, noBorder, visible ) ; jScrollPane. setAutoscrolls ( true ) ; return jScrollPane ; }"
"long mask = ( 1L << 63 ) - 1L ; return new CRCPolynomial ( l, mask ) ; }"
byte [ ] ret = new byte [ 4 ] ; ret [ 0 ] = ( byte ) ( val >>> 24 ) ; ret [ 1 ] = ( byte ) ( val >>> 16 ) ; ret [ 2 ] = ( byte ) ( val >>> 8 ) ; ret [ 3 ] = ( byte ) ( val ) ; return ret ; }
resetX ( ) ; if ( plot. isTimeLabelEnabled ) { rescalePlotOnTimeAxis ( ) ; } plot. getPlotAbstraction ( ). updateResetButtons ( ) ; plot. refreshDisplay ( ) ; }
"_input. next ( ""create"" ) ; String name = _input. peek ( ) ; Table table = tableName ( ) ; table. create ( name ) ; System. out. printf ( ""Created %s.db%n"", name ) ; }"
if ( ctrCand. getId ( )!= null ) { try { return new OdfCtrCand ( ctrCand. getId ( ) ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } } return null ; }
repository. findById ( 1L ) ; verify ( repository ). findById ( eq ( 1L ) ) ; }
"long l = System. currentTimeMillis ( ) ; if ( l < 10 ) { return ""0"" + l ; } else if ( l == 20 ) { return ""1"" + l ; } else if ( l == 12 ) { return ""2"" + l ; } else { return ""3"" + l ; } }"
"Map < String, String > map = new HashMap < > ( ) ; map. put ( key, value ) ; }"
"Text t = new Text ( ) ; t. setChar ( 'a' ) ; assertEquals ( 'a', t. charAt ( 0 ) ) ; t. setChar ( 'a', 'z' ) ; assertEquals ( 'A', t. charAt ( 'A' ) ) ; }"
RpcClient rpcClient = new XmlRpcClient ( config ) ; try { config. setGatewayInfo ( rpcClient. getGatewayInfo ( id ) ) ; } finally { rpcClient. dispose ( ) ; } }
"if ( arr == null || arr. length + amount == 0 ) { return arr ; } byte [ ] newArr = new byte [ arr. length + amount ] ; System. arraycopy ( arr, 0, newArr, 0, arr. length ) ; return newArr ; }"
for ( int i = 0 ; i < threads. length ; i ++ ) { threads [ i ]. cancel ( ) ; } try { for ( int i = 0 ; i < threads. length ; i ++ ) { if ( threads [ i ]!= null ) { threads [ i ]. join ( ) ; } } catch ( InterruptedException e ) { } } }
HttpGet httpGet = new HttpGet ( targetUrl ) ; return doRequest ( httpGet ) ; }
"bridge. deleteDhcptabRecord ( rec, datastore ) ; if ( signalServer ) { bridge. reload ( ) ; } }"
out. writeInt ( invoker. hashCode ( ) ) ; if ( invoker instanceof RemoteInvoker ) { ( ( RemoteInvoker ) invoker ). foo ( out ) ; } }
int bar = in. readInt ( ) ; int bar1 = in. readInt ( ) ; int bar2 = in. readInt ( ) ; int bar3 = in. readInt ( ) ; int bar4 = in. readInt ( ) ; }
"Map < String, String > result = new HashMap < String, String > ( ) ; result. put ( ""foo"", foo ) ; return result ; }"
"if ( ""float"". equals ( dp. getDataType ( ) ) ) { return Float. parseFloat ( value ) ; } else if ( ""long"". equals ( dp. getDataType ( ) ) ) { return Long. parseLong ( value ) ; } else if ( ""float"". equals ( dp. getDataType ( ) ) ) { return Float. parseFloat ( value ) ; } return value ; }"
if ( foo == null ) { foo = new com. amazonaws. internal. SdkInternalList < InstanceStatusEvent > ( ) ; } return foo ; }
ListData list = new ListData ( ) ; list. type = Type. LIST ; list. foo = true ; return list ; }
"Double ret = map. get ( name ) ; if ( ret!= null ) { return ret ; } ret = new Double ( value ) ; map. put ( name, ret ) ; return ret ; }"
"Session session = HibernateUtil. getSessionFactory ( ). getCurrentSession ( ) ; Criteria criteria = session. createCriteria ( Person. class ) ; criteria. add ( Restrictions. eq ( ""John"", new Date ( ) ) ) ; return criteria ; }"
"for ( int p = 0 ; p < queryString. length ( ) ; p ++ ) { String param = queryString. substring ( p, p + 1 ) ; if ( param. startsWith ( paramName ) ) { builder. append ( ""="" ). append ( paramName ) ; builder. append ( ""="" ). append ( param. substring ( paramName. length ( ) ) ) ; return true ; } } return false ; }"
"final GrammaticalStructure structure = GrammaticalStructure. newBuilder ( ). setName ( ""foo"" ). setModificationCount ( 1 ). build ( ) ; final GrammaticalStructure newStructure = structure. build ( ) ; newStructure. setModificationCount ( 1 ). build ( ) ; GrammaticalStructure newStructure2 = new GrammaticalStructure. newBuilder ( ). setStructure ( newStructure2 ). build ( ) ; printDetails ( newStructure ) ; }"
try { return adminDAO. foo ( ) ; } catch ( OmnigeneException e ) { throw new WebServiceException ( e ) ; } }
"try { Integer. parseInt ( ( String ) event. getComponent ( ). getAttributes ( ). get ( ""index"" ) ) ; } catch ( NumberFormatException e ) { e. printStackTrace ( ) ; } }"
int result = c ; for ( int i = 0 ; i < table. length ; i ++ ) { result += table [ i ] ; } return result ; }
"Map < String, String > result = new HashMap < String, String > ( ) ; result. put ( ""name"", name ) ; result. put ( ""onlineResource"", onlineResource ) ; return result ; }"
for ( int port2 : ports ) { if ( port == port2 ) return true ; } return false ; }
"Expression result = new Expression ( ) ; if ( condExpr. length ( ) > 0 ) { String c = condExpr. substring ( 1, condExpr. length ( ) - 1 ) ; if ( c. equals ( ""?"" ) ) { result. setBoolean ( true ) ; } else { result. setBoolean ( false ) ; } } return result ; }"
"TimeSeriesDataItem item1 = new TimeSeriesDataItem ( new Day ( 23, 9, 2001 ), 99.7 ) ; TimeSeriesDataItem item2 = ( TimeSeriesDataItem ) TestUtilities. serialised ( item1 ) ; assertEquals ( item1, item2 ) ; }"
List < UCTStateNode > children = node. getChildren ( ) ; return children!= null && children. size ( ) > 0 ; }
StringBuffer b = new StringBuffer ( s. length * 8 ) ; for ( int i = 0 ; i < s. length ; i ++ ) { b. append ( quote ) ; b. append ( s [ i ] ) ; b. append ( quote ) ; b. append ( separator ) ; } b. setLength ( b. length ( ) - separator. length ( ) ) ; return b. toString ( ) ; }
XmlPathElement ret = new XmlPathElement ( ) ; ret. parent = parent ; ret. name = getName ( ) ; return ret ; }
"if ( foo. equals ( ""foo"" ) ) { foo = true ; } else { foo = false ; } }"
if ( mainSideJoinable. getJoinTable ( ). equals ( mainSidePersister. getMainSide ( ) ) ) { return true ; } if ( inverseSidePersister!= null && inverseSidePersister. getKeyColumns ( ). equals ( mainSideJoinable. getInverseSide ( ) ) ) { return true ; } return false ; }
"while ( true ) { String name = bundle. getString ( ""name"" ) ; if ( name!= null ) { treeIterator. add ( new BundleInfo ( name, true ) ) ; } else { break ; } } }"
int [ ] ids = new int [ foo. length ] ; for ( int i = 0 ; i < ids. length ; i ++ ) { ids [ i ] = foo [ i ] ; } return ids ; }
if ( networkInterfaces == null ) { networkInterfaces = NetworkInterface. getNetworkInterfaces ( ) ; } return networkInterfaces. elements ( ) ; }
long endTime = System. nanoTime ( ) ; long rewriteTime = endTime - startTime ; if ( rewriteTime < 0 ) { rewriteTime = 0 ; } return rewriteTime ; }
int c = 0 ; int index = 0 ; do { if ( attributes. contains ( myAttributes. get ( index ) ) ) { return index ; } index ++ ; } while ( attributes. contains ( myAttributes. get ( index ) ) ) ; return - 1 ; }
"return Lists. transform ( new Function < Class <? >, BeanProperty > ( ) { @ Override public BeanProperty apply ( Class <? > input ) { return BeanProperty. foo ( input ) ; } } ) ; }"
if ( coordinate == Double. POSITIVE_INFINITY ) { return ( int ) ( coordinate * 10000 ) ; } else { return ( int ) ( coordinate / 10000 ) ; } }
DateValue result = new DateValue ( ) ; foo ( result ) ; return result ; }
"TimeSeriesDataItem item1 = new TimeSeriesDataItem ( new Day ( 23, 9, 2001 ), 99.7 ) ; TimeSeriesDataItem item2 = ( TimeSeriesDataItem ) TestUtilities. serialised ( item1 ) ; assertEquals ( item1, item2 ) ; }"
"if ( player. getBoard ( ). getMoney ( tile. getX ( ), tile. getY ( ) ) <= 5 ) { return true ; } if ( player. getBoard ( ). getMoney ( tile. getX ( ), tile. getY ( ) ) <= 5 ) { return true ; } return false ; }"
"if ( canReturnCollationKeys ) { return new ComparisonKey ( StandardNames. XS_STRING, collator. getCollationKey ( a. getStringValue ( ) ) ) ; } else { return new ComparisonKey ( StandardNames. XS_STRING, a. getStringValue ( ) ) ; } }"
Vector v = new Vector ( ) ; return v ; }
SiteModel siteModel = new SiteModel ( ) ; siteModel. root = new SiteModel ( ) ; siteModel. published = new Date ( ) ; siteModel. published [ 0 ] = new Date ( ) ; siteModel. published [ 1 ] = new Date ( ) ; siteModel. published [ 2 ] = new Date ( ) ; siteModel. published [ 3 ] = new Date ( ) ; return siteModel ; }
ProjectExplorer pe = new ProjectExplorer ( ) ; pe. open ( ) ; pe. getProject ( projectName ). delete ( ) ; }
"Select gradeDropDown = new Select ( driver. findElement ( By. xpath ( "".//select[contains(.,'"" + grade + ""')]"" ) ) ) ; gradeDropDown. selectByVisibleText ( ""Grade #"" + grade ) ; }"
"Rectangle r = new Rectangle ( 1, 1, 1, 1 ) ; assertEquals ( 1.0, r. getWidth ( ), 0.0001 ) ; assertEquals ( 1.0, r. getHeight ( ), 0.0001 ) ; }"
"try { PrintWriter out = new PrintWriter ( aBackupFile ) ; foo ( aBackupOPMLDocument, out ) ; out. close ( ) ; } catch ( FileNotFoundException e ) { System. err. println ( ""Unable to find the OPML file"" ) ; } catch ( IOException e ) { System. err. println ( ""Unable to find the OPML file"" ) ; } }"
for ( File f : dir. listFiles ( ) ) { if ( f. getName ( ). equalsIgnoreCase ( filename ) ) { return f ; } } return null ; }
"LinearRing ring = Geometry. createLinearRing ( new Vector2 ( ), 1.0, 2.0 ) ; Coordinate [ ] coord = ring. getCoordinates ( ) ; Point p1 = new Point ( coord [ 0 ], coord [ 1 ] ) ; Point p2 = new Point ( coord [ 2 ], coord [ 3 ] ) ; ring. setHole ( p1 ) ; ring. setHole ( p2 ) ; }"
"DijkstraNodeData data = nodeData. get ( n ) ; if ( data == null ) { data = new DijkstraNodeData ( n ) ; nodeData. put ( n, data ) ; } return data ; }"
if ( type. dimensions ( ) == 0 || type. dimensions ( ) == 1 ) return true ; return false ; }
"Map < String, String > map = new HashMap < String, String > ( ) ; for ( String key : src. getGlobal ( ). keySet ( ) ) { if ( key. startsWith ( prefix ) ) { map. put ( key, src. getGlobal ( ). get ( key ) ) ; } else { map. put ( key, """" ) ; } } }"
if ( arrayClass. getComponentType ( ). isArray ( ) ) return arrayClass. getComponentType ( ) ; return arrayClass. getComponentType ( ) ; }
List < Element > list = new ArrayList < Element > ( ) ; for ( int i = 0 ; i < grid [ 0 ]. length ; i ++ ) { for ( int j = 0 ; j < grid [ 0 ]. length ; j ++ ) { list. add ( grid [ i ] [ j ] ) ; } } return list ; }
lineAttributes. clear ( ) ; previous = lineAttributes. peek ( ) ; }
try { return foo ( new Subject ( subjectName ) ) ; } catch ( Exception e ) { throw new Exception ( e ) ; } }
List < T > ret = new ArrayList < > ( ) ; for ( Node n : nodes ) { if ( n!= null && cls. isAssignableFrom ( n. getClass ( ) ) ) { ret. add ( ( T ) n ) ; } } return ret ; }
for ( String id : map. keySet ( ) ) { if ( map. get ( id ). workItemId ( ). equals ( workItemId ) ) { map. remove ( id ) ; } } }
mask ^= ( mask >> 1 ) ; return mask ; }
"Rating opponent ; if ( player. equals ( rank1 ) ) { opponent = rank2 ; } else if ( player. equals ( rank2 ) ) { opponent = rank3 ; } else { throw new IllegalArgumentException ( ""Player "" + player. getUid ( ) + "" did not participate in match"" ) ; } return opponent ; }"
long size = size ( ) ; if ( size >= max ) { flush ( ) ; } }
"byte [ ] bytes = new byte [ 4 ] ; bytes [ 0 ] = ( byte ) Integer. parseInt ( integer, 16 ) ; bytes [ 1 ] = ( byte ) Integer. parseInt ( integer, 16 ) ; bytes [ 2 ] = ( byte ) Integer. parseInt ( integer, 8 ) ; bytes [ 3 ] = ( byte ) Integer. parseInt ( integer, 16 ) ; return ByteBuffer. wrap ( bytes ) ; }"
if ( e. getValue ( ) == 0 ) return true ; return false ; }
"Company c = impl. restoreCompanyById ( 1L ) ; if ( c == null ) { throw new ServiceLogicException ( ""ServiceLogicException was not thrown"" ) ; } impl. restoreCompanyById ( c ) ; }"
"String result = ( String ) invokeSwingUtilities2StaticMethod ( ""foo"", new Class [ ] { JComponent. class, FontMetrics. class, String. class, int. class }, new Object [ ] { c, fm, string, availTextWidth } ) ; return result ; }"
if ( player. getPlayerCount ( ) == 1 ) { foo ( ) ; } else if ( player. getPlayerCount ( ) == 2 ) { foo ( ) ; } }
if ( frameworkPackageList!= null &&! frameworkPackageList. isEmpty ( ) ) { for ( String packageName : frameworkPackageList ) { if ( packageName. startsWith ( currentClass ) ) { return true ; } } } return false ; }
if ( sourceDate < 0 ) { return false ; } if ( destinationDate == 0 ) { return true ; } long sourceMs = sourceDate / 1000 ; long destinationMs = destinationDate / 1000 ; return sourceMs > destinationMs ; }
try { Double. parseDouble ( string ) ; return true ; } catch ( NumberFormatException e ) { return false ; } }
int foo = stack. size ( ) ; return foo == 0? null : stack. get ( foo ) ; }
"loaders. add ( loader ) ; classnameToLoader. put ( loader. getLoaderClassname ( ), loader ) ; }"
"ExternalMapperData data = new ExternalMapperData ( ) ; data. foo = ""Foo"" ; data. foo = ""bar"" ; data. foo = ""baz"" ; data. foo = ""bop"" ; data. foo = ""bop"" ; return data ; }"
if ( p instanceof Number ) { pos = ( ( Number ) p ). intValue ( ) ; } else if ( p instanceof String ) { pos = ( ( String ) p ). hashCode ( ) ; } }
Resources resources = context. getResources ( ) ; DisplayMetrics metrics = resources. getDisplayMetrics ( ) ; float px = dp * ( ( float ) metrics. densityDpi / DisplayMetrics. DENSITY_DEFAULT ) ; return px ; }
Row r = new Row ( ) ; rows. add ( r ) ; return r ; }
"PdfPageEvent event ; for ( Iterator i = events. iterator ( ) ; i. hasNext ( ) ; ) { event = ( PdfPageEvent ) i. next ( ) ; event. foo ( writer, document ) ; } }"
List < Company > companies = new ArrayList < > ( ) ; for ( Company c : allCompanies ) { if ( c!= null ) { companies. add ( c ) ; } } return companies ; }
int numRead = 0 ; for ( int i = 0 ; i < numerator. length ; i ++ ) { if ( numerator [ i ] > 0 ) numRead ++ ; } return numRead ; }
"RefReplicated result = cache. get ( gerritServer, gerritProject, ref, slaveHost ) ; if ( result!= null ) { return result ; } return null ; }"
"UserCommand userCommand = new UserCommand ( ) ; Object [ ] args = new Object [ 2 ] ; args [ 0 ] = userSession ; args [ 1 ] = user ; return userCommand. execute ( userSession, ResourceLocator. USER_CREATE, args ) ; }"
"final Repo repo = GithubProfileValidationTest. repo ( Joiner. on ( '|n' ). join ( ""merge:"", "" script:"", ""  - pwd"" ) ) ; new GithubProfile ( repo ). read ( ) ; }"
"int exitCode = PowerMockito. mock ( Integer. class ) ; PowerMockito. when ( System. getProperty ( ""os.name"" ) ). thenReturn ( ""Foo"" ) ; final String output = errorStringWriter. getBuffer ( ). toString ( ). trim ( ) ; assertEquals ( ""Missing required argument --name"", output ) ; assertEquals ( 1, exitCode ) ; }"
if ( color == Color. WHITE ) { color = Color. BLACK ; } else if ( color == Color. BLACK ) { color = Color. WHITE ; } else { color = Color. BLACK ; } color += 3 ; if ( color == Color. WHITE ) { color = Color. BLACK ; } }
String name = ( String ) posMap. get ( pos ) ; return name!= null? Integer. parseInt ( name ) : 0 ; }
"String r = color. substring ( 0, 3 ) ; String g = color. substring ( 3, 5 ) ; String b = color. substring ( 5, 7 ) ; return String. format ( ""%s%s%s"", r, g, b ) ; }"
"if ( url!= null ) { String scheme = getSchemeFromUrl ( url ) ; if ( scheme!= null ) { return new URI ( scheme + ""://"" + url ) ; } } return new URI ( null ) ; }"
if ( endPos == null ) { return 76200 ; } else { return endPos ; } }
int total = 0 ; for ( int i = 0 ; i < Phones. length ; i ++ ) { total += Phones [ i ]. foo ( ) ; } return total ; }
if ( sInstance == null ) { sInstance = new RevenueStats ( ) ; } return sInstance ; }
"boolean fail = false ; try { Double. parseDouble ( ""0.00"" ) ; } catch ( NumberFormatException e ) { fail = true ; } if (! fail ) { throw new IllegalArgumentException ( ""Latitude should be in the range [0.00, 1.00]"" ) ; } }"
"if ( named. value ( ) == null || named. value ( ). equals ( """" ) ) { return 0 ; } return name ( ). compareTo ( named. value ( ) ) ; }"
"if ( inValue == null || inValue. equals ( """" ) ) { return false ; } return inValue. equals ( ""0"" ) || inValue. equals ( ""1"" ) || inValue. equals ( ""2"" ) || inIsHeader ; }"
if ( result == null ) { result = new MyRecord ( ) ; result. setName ( columnName ) ; result. setValue ( value ) ; } }
if ( inUse ) { _connectTimer. cancel ( ) ; } else { _connectTimer. schedule ( new TimerTask ( ) { @ Override public void run ( ) { if (! _connectTimer. isRunning ( ) ) { _connectTimer. cancel ( ) ; } } } ) ; } }
try { xpc. registerShutdownHook ( ) ; } catch ( Throwable e ) { throw new RuntimeException ( e ) ; } }
try { return f. charAt ( subsetIndex ) ; } catch ( IndexOutOfBoundsException e ) { return 0xFFFF ; } }
MachineState state = machine. getState ( ) ; if ( state. isRunning ( ) ) { state. stop ( ) ; } state. start ( ) ; machine. setState ( state ) ; }
"Set < String > result = new HashSet < String > ( ) ; String [ ] split = s. split ( "", "" ) ; for ( String aSplit : split ) { String trimmed = aSplit. trim ( ) ; result. add ( trimmed ) ; } return result ; }"
checkNotNull ( attributeName ) ; return new ContextAttribute ( attributeName ) ; }
try { return Class. forName ( className ) ; } catch ( ClassNotFoundException e ) { throw new RuntimeException ( e ) ; } }
ResourceDescriptor parent = reference. getParent ( ) ; if ( parent!= null && parent. foo ( ) ) { return true ; } return false ; }
if ( destinationPath. exists ( ) == false ) { destinationPath. mkdirs ( ) ; } try { Files. createDirectories ( destinationPath ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
"Board b = parser. parseMap ( Lists. newArrayList ( ""#####"", ""# # #"", ""#####"" ) ). getBoard ( ) ; Square s1 = b. squareAt ( 1, 1 ) ; Square s2 = b. squareAt ( 2, 1 ) ; Square [ ] path = { s1, s2, s2 } ; checkPath ( path, Arrays. asList ( s2, s3, s4 ), 0 ) ; }"
if ( url == null || url. length ( ) == 0 ) { return null ; } return associationURLPrefix + url ; }
"try { return encodePart ( pathSegment, ""UTF-8"", PATH_SEGMENT ) ; } catch ( final UnsupportedEncodingException e ) { throw new RuntimeException ( ""UTF-8 not supported?"", e ) ; } }"
"IContainer serverContainer = ( IContainer ) server. getContainer ( ) ; int monitorPort1 = monitorPort ; foo ( serverContainer, port, monitorPort1 ) ; return monitorPort1 ; }"
for ( final char invalidChar : INVALID_URL_CHARS ) { if ( url. contains ( invalidChar ) ) { return true ; } } return false ; }
if ( size == Integer. MAX_VALUE ) { return size ; } return size * size + 0x10000 ; }
for ( int i = 0 ; i < batch ; i ++ ) { foo ( ) ; } }
if ( foo == null ) { foo = new com. amazonaws. internal. SdkInternalList < FilteredLogEvent > ( ) ; } return foo ; }
ProfileApplicationDecorator profileApplicationDecorator = new ProfileApplicationDecorator ( profileApplicationFile ) ; return profileApplicationDecorator ; }
ByteBuffer buffer = ByteBuffer. allocate ( foo. length ( ) ) ; foo. flip ( ) ; return buffer ; }
"String msg = ""foo"" ; switch ( errorCode ) { case IStatus. OK : msg = ""success"" ; break ; case IStatus. ERROR : msg = ""error"" ; break ; case IStatus. WARNING : msg = ""warning"" ; break ; default : msg = ""unknown error code: "" + errorCode ; break ; } return msg ; }"
"int x = 0 ; int y = 0 ; Component comp = parent. getComponent ( 0 ) ; while ( comp!= null ) { x += comp. getWidth ( ) ; y += comp. getHeight ( ) ; comp = parent. getComponent ( comp ) ; } return new Dimension ( x, y ) ; }"
assert patterns. length > 0 ; return new SearchPattern ( patterns ) { @ Override public boolean match ( SearchElement element ) { for ( SearchPattern pattern : patterns ) { if ( pattern. matches ( element ) ) { return true ; } } return false ; } } ; }
if ( occurred ) { return true ; } if ( localDependencies!= null ) { return localDependencies. foo ( ) ; } return true ; }
NodeList list = null ; try { list = dom. getElementsByTagName ( xpathExpr ) ; } catch ( NullPointerException e ) { } return list ; }
"String opSys = System. getProperty ( ""os.name"" ) ; return ( opSys. startsWith ( WINDOWS ) ) ; }"
"try { return foo ( fsd, ezKeyName ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }"
"int i = 1 ; List < Integer > list = new ArrayList < Integer > ( ) ; list. add ( 1 ) ; list. add ( 2 ) ; list. add ( 3 ) ; list. add ( 0 ) ; assertEquals ( 1, list. size ( ) ) ; assertEquals ( 2, list. get ( 0 ). intValue ( ) ) ; assertEquals ( 3, list. get ( 1 ). intValue ( ) ) ; assertEquals ( 2, list. get ( 0 ). intValue ( ) ) ; }"
"int counter = 0 ; predToPair = new HashMap < Unit, ValueUnitPair > ( ) ; for ( ValueUnitPair vup : predToPair. values ( ) ) { predToPair. put ( vup. getUnit ( ), vup ) ; counter ++ ; } }"
Set < T > s = map. get ( o ) ; if ( s == null ) return null ; return s. iterator ( ). next ( ) ; }
while ( true ) { try { Thread. sleep ( 100 ) ; } catch ( InterruptedException e ) { } } }
assertDelegateAvailable ( ) ; return delegate. foo ( src ) ; }
"int colonIndex = rawUrl. indexOf ( ':' ) ; if ( colonIndex > 0 ) { return rawUrl. substring ( 0, colonIndex ) ; } return rawUrl ; }"
try { em. persist ( album ) ; em. flush ( ) ; } catch ( Exception e ) { throw new PhotoAlbumException ( e. getMessage ( ) ) ; } }
Date result = null ; if ( m_map. containsKey ( type ) ) { result = ( Date ) m_map. get ( type ) ; } return ( result ) ; }
"ConnectivityManager cm = ( ConnectivityManager ) context. getSystemService ( Context. CONNECTIVITY_SERVICE ) ; int connectionStatus = cm. getCurrentConnectionStatus ( ) ; if ( connectionStatus == ConnectionStatus. CONNECTING ) { foo ( cm, target ) ; } else { foo ( cm, target ) ; } }"
"Queue < Integer > s = new Queue < Integer > ( ) ; s. add ( 1 ) ; s. add ( 2 ) ; s. add ( 3 ) ; s. add ( 4 ) ; s. add ( 5 ) ; assertEquals ( ""TEST"", System. getProperty ( ""line.separator"" ) ) ; }"
String value = properties. getProperty ( property ) ; if ( value == null || value. length ( ) == 0 ) { return defaultValue ; } return Boolean. valueOf ( value ). booleanValue ( ) ; }
int originalSize = values. length ; for ( int i = 0 ; i < originalSize ; i ++ ) { long v = values [ i ] ; mMap. remove ( v ) ; } return size ( )!= originalSize ; }
"String path = component. getPath ( ) ; String foo = path. substring ( 0, path. indexOf ( '.' ) ) ; return foo ; }"
long time = 0 ; if ( running ) { time = System. nanoTime ( ) ; } return time ; }
final String sVal = System. getProperty ( sKey ) ; return sVal == null? sDefault : sVal ; }
StringBuilder sb = new StringBuilder ( ) ; for ( int i = 1 ; i < id. length ( ) ; i ++ ) { char c = id. charAt ( i ) ; if ( c < '0' || c > '9' ) { sb. append ( '0' ) ; } sb. append ( c ) ; } return Integer. parseInt ( sb. toString ( ) ) ; }
"for ( int i = 0 ; i < 10 ; i ++ ) { char c = ( char ) ( '0' + i ) ; StringBuilder sb = new StringBuilder ( ) ; sb. append ( c ) ; try { sb. append ( System. getProperty ( ""line.separator"" ) ) ; } catch ( SecurityException se ) { } } return sb. toString ( ) ; }"
"if ( history. containsKey ( id ) ) { history. remove ( id ) ; } else { history. put ( id, Integer. MAX_VALUE ) ; } }"
Object o = head. o ; head = head. o1 ; return o ; }
"for ( int i = 0 ; i < 80 ; i ++ ) { int x = random. nextInt ( 100 ) ; int y = random. nextInt ( 100 ) ; Location l = new Location ( x, y ) ; if ( isFree ( l ) ) { return l ; } } return null ; }"
"if ( lazyKey == null ) { throw new NullPointerException ( ""lazyKey is null"" ) ; } if ( type == null ) { throw new NullPointerException ( ""type is null"" ) ; } foo ( lazyKey, type ) ; }"
"if ( connection == null ) throw new IllegalArgumentException ( ""connection is null"" ) ; if ( connections. contains ( connection ) ) throw new IllegalArgumentException ( ""connection is already in the collection"" ) ; connections. add ( connection ) ; }"
"int i = ( int ) ( htTimestamp / HT_TIMESTAMP_FACTOR ) ; long physical = ( int ) ( htTimestamp % HT_TIMESTAMP_FACTOR ) ; long logical = ( int ) ( htTimestamp % HT_TIMESTAMP_FACTOR ) ; return new long [ ] { physical, logical } ; }"
"Intent intent = new Intent ( Intent. ACTION_VIEW ) ; intent. setData ( Uri. parse ( ""market://details?id="" + fragmentName ) ) ; intent. setFlags ( Intent. FLAG_ACTIVITY_NEW_TASK ) ; context. startActivity ( intent ) ; }"
"if ( o == null ) { throw new NullPointerException ( ) ; } if ( o instanceof Number ) { return o. toString ( ) ; } throw new BeanException ( ""Failed to convert object of type "" + o. getClass ( ) + "": Not a big-decimal."" ) ; }"
"String head = request. head ( ). ref ( ) ; if ( head. startsWith ( ""HEAD"" ) || head. startsWith ( ""HEAD2"" ) ) { return head ; } else { return ""HEAD1"" ; } }"
DigiDocException ex = validateDigestValue ( data ) ; if ( ex!= null ) throw ex ; DigiDocException ex2 = validateDigestValue ( data ) ; if ( ex2!= null ) throw ex2 ; }
"for ( int i = 0 ; i < musicNames. length ; i ++ ) { System. out. print ( musicNames [ i ] + "" "" ) ; } }"
RBNode parent = node. parent ; if ( parent!= null ) { foo ( parent ) ; } if ( node. uncle!= null ) { foo ( uncle ) ; } }
for ( int i = 1 ; i < 5 ; i ++ ) { localScope. push ( i ) ; } }
"try { HttpSession s = session. getAttribute ( ""foo"" ) ; return s ; } catch ( Exception e ) { return null ; } }"
List < T > l_newList = new ArrayList < > ( p_turnoversList. size ( ) ) ; Collections. sort ( l_newList ) ; return l_newList ; }
"System. setProperty ( ""Spring.profiles.active"", ""your-active-profile"" ) ; System. setProperty ( ""Spring.profiles.active"", ""your-active-profile"" ) ; runSpringProfiles ( ) ; }"
for ( int i = 0 ; i < 4 ; i ++ ) { int tmp = ip [ i ] ; ip [ i ] = ip [ i - 1 ] ; ip [ i - 1 ] = tmp ; } }
"report ( controller, action, ""foo"" ) ; return true ; }"
Iterator iterator = classes. values ( ). iterator ( ) ; while ( iterator. hasNext ( ) ) { Clazz clazz = ( Clazz ) iterator. next ( ) ; clazz. accept ( classVisitor ) ; } }
"Filter < DependencyTree > filter = parse ( dependencyFilterText ) ; if ( isEmpty ( filter ) ) { return excludeOptionalDependenciesFilter ; } return Filters. or ( excludeOptionalDependenciesFilter, filter ) ; }"
try { return getSDFAFromFile ( new File ( inFN ) ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; System. exit ( 1 ) ; } return null ; }
"Automaton a = new Automaton ( ) ; a. singleton = """" ; a. deterministic = true ; return a ; }"
"SimpleToken token1 = new SimpleToken ( ) ; token1. setAuthValue ( ""chris"" ) ; SimpleToken token2 = new SimpleToken ( ) ; token2. setAuthValue ( ""chrismills"" ) ; token2. setAuthValue ( ""chrismills"" ) ; assert! token1. authenticate ( token2, null ) ; }"
Graphics2D g = ( Graphics2D ) d. getParent ( ) ; if ( g == null ) { g = new Graphics2D ( ) ; } g. setColor ( Color. YELLOW ) ; g. add ( d ) ; }
tableId ++ ; return foo ( id ) ; }
"try { return ioOperations. foo ( patient ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return null ; } }"
String v = cache. get ( key ) ; if ( v!= null ) return v ; return cache. get ( key ) ; }
"when ( mockBombBehavior. decrementBomb ( ) ). thenReturn ( 10 ) ; assertEquals ( 10, testGameObject. bombCount ( ) ) ; verify ( mockBombBehavior ). decrementBomb ( ) ; }"
int [ ] foo = null ; if ( tab == null ) { foo = new int [ 0 ] ; } else { foo = new int [ tab. length ] ; for ( int i = 0 ; i < tab. length ; i ++ ) { foo [ i ] = tab [ tab. length - 1 - i ] ; } } return foo ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"try { session. close ( ) ; } catch ( JMSException ex ) { logger. trace ( ""Could not close JMS Session"", ex ) ; } catch ( Throwable ex ) { logger. trace ( ""Unexpected exception on closing JMS Session"", ex ) ; } }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
byte [ ] k = seed. getBytes ( ) ; StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder. append ( k [ 0 ] ) ; stringBuilder. append ( 'a' ) ; stringBuilder. append ( 't' ) ; stringBuilder. append ( k [ 1 ] ) ; stringBuilder. append ( ':' ) ; stringBuilder. append ( Base64. encodeBase64String ( k ) ) ; return stringBuilder. toString ( ) ; }
NameIDPolicy nameIDPolicy = new NameIDPolicy ( ) ; setPolicyVersion ( nameIDPolicy ) ; return nameIDPolicy ; }
Compiler compiler = compilerLocal. get ( ) ; if ( compiler == null ) { compiler = compilerLocal. get ( ) ; } for ( IRule rule : rules ) { compiler. addRule ( rule ) ; } compiler. close ( ) ; }
"model. addAttribute ( ""task"", taskId ) ; return VIEW_NAME_TASK ; }"
int i = list. size ( ) / 2 ; return list. get ( i ) ; }
"StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < actions. size ( ) ; i ++ ) { Action action = actions. get ( i ) ; if ( action. getMovable ( ). equals ( movable ) ) { sb. append ( action. toString ( ) ) ; } else { sb. append ( "" "" ) ; } } sb. setLength ( sb. length ( ) ) ; return sb. toString ( ) ; }"
"for ( SpanReceiver rcvr : receivers ) { try { rcvr. close ( ) ; } catch ( IOException e ) { LOG. warn ( ""Unable to close SpanReceiver correctly: "" + e. getMessage ( ), e ) ; } } }"
ArrayList < SalaPesi > pesi = new ArrayList < SalaPesi > ( ) ; return pesi ; }
long t = System. currentTimeMillis ( ) ; return t / 1000 ; }
for ( int i = 0 ; i < foo. length ; i ++ ) { if ( foo [ i ] == id ) return i ; } return - 1 ; }
if ( includeColumnNames ) { foo ( rs. getColumns ( ) ) ; } while ( rs. next ( ) ) { foo ( resultService. getColumnValues ( rs ) ) ; } }
"StringBuffer buf = new StringBuffer ( ) ; buf. append ( lang ) ; buf. append ( ""-"" ) ; buf. append ( country ) ; return buf. toString ( ) ; }"
byte [ ] result = new byte [ 4 ] ; result [ 0 ] = ( byte ) ( 3 * foo. length ( ) ) ; result [ 1 ] = ( byte ) ( 3 * foo. length ( ) ) ; result [ 2 ] = ( byte ) ( 3 * foo. length ( ) ) ; result [ 3 ] = ( byte ) ( 3 * foo. length ( ) ) ; return result ; }
"Bundle bundle = new Bundle ( ) ; bundle. putString ( ID_KEY, id ) ; bundle. putInt ( SOURCE_KEY, source ) ; bundle. putInt ( VERSION_KEY, version ) ; bundle. putString ( payload, payload ) ; return bundle ; }"
if ( s < 0 || s > nisoColorSpace. length ) { return - 1 ; } return nisoColorSpace [ s ] ; }
byte [ ] result = new byte [ 2 ] ; result [ 0 ] = ( byte ) ( value >>> 8 ) ; result [ 1 ] = ( byte ) value ; return result ; }
for ( Interceptor rule : rules ) { if ( rule. matches ( message ) ) { return rule. contentType ( ) ; } } return null ; }
List < CmsContainerElementBean > result = new ArrayList < CmsContainerElementBean > ( ) ; for ( List < CmsContainerElementBean > list : pageElements ) { result. addAll ( list ) ; } return result ; }
"int foo = 1 ; try { Integer. parseInt ( ""1"" ) ; } catch ( NumberFormatException e ) { } try { Integer. parseInt ( ""1"" ) ; } catch ( NumberFormatException e2 ) { } try { Integer. parseInt ( ""1"" ) ; } catch ( NumberFormatException e4 ) { } }"
"XContentType type = xTypes. get ( content ) ; if ( type == null ) { throw new ElasticSearchParseException ( ""Failed to derive xtype from "" + content ) ; } return type ; }"
"int fooResult = 0 ; try { fooResult = execute ( ""foo"" ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } List < String > list = new ArrayList < > ( ) ; list. add ( fooResult ) ; return list ; }"
"list. add ( new Item ( ""Foo"" ) ) ; list. add ( new Item ( ""Baz"" ) ) ; list. add ( new Item ( ""Baz"" ) ) ; list. add ( new Item ( ""Artifactory"" ) ) ; list. add ( new Item ( ""Artifactory Carbide"" ) ) ; list. add ( new Item ( ""Artifactory Carbide"" ) ) ; list. add ( new Item ( ""Artifactory Carbide"" ) ) ; list. add ( new Item ( ""Artifactory"" ) ) ; }"
"long foo = System. currentTimeMillis ( ) ; return foo / 10000.0 + ""1"" ; }"
synchronized ( Stax2Factory. class ) { if ( instance == null ) { instance = new Stax2Factory ( ) ; } } return instance ; }
"String x = ""17C"" ; String y = ""17F"" ; Equipos equipos = new Equipos ( x, y ) ; try { equipos. save ( ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } }"
final IntervalsSet result = new IntervalsSet ( ) ; result. add ( start ) ; result. add ( end ) ; return result ; }
try { stream. close ( ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } }
TokenInformation ret = new TokenInformation ( ) ; for ( int i = 0 ; i < path. length ; i ++ ) { ret. path [ i ] = path [ i ] ; } return ret ; }
world = new int [ 5 ] ; int x = 0 ; int y = 0 ; while ( x < 5 ) { world [ x ] [ y ] = - 1 ; x ++ ; y ++ ; } while ( y < 5 ) { if ( world [ x ] [ y ] == '3' ) { x ++ ; } else if ( world [ x ] [ y ] == '4' ) { y -- ; } else if ( world [ x ] [ y ] == '5' ) { world [ x ] [ y ] ='' ; } } }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
int x = 0 ; for ( ; ; ) { x += bar ; } return x ; }
if ( myPage. isStale ( ) ) { myPage. refresh ( ) ; return true ; } return false ; }
"if ( initialData == null ) { initialData = new JSONObject ( ) ; } initialData. put ( ""refreshDate"", elapsedTime ) ; updateStatus ( elapsedTime ) ; if ( initialData. isEmpty ( ) ) { trackChanged ( ) ; } }"
boolean result = false ; if ( gcMap!= null ) { for ( int i = 0 ; i < gcMap. length ; i ++ ) { if ( gcMap [ i ] == entry ) { result = true ; break ; } } } return result ; }
"String result = """" ; if ( inputString!= null ) { result = inputString. substring ( 0, length ) ; } return result ; }"
"String host = ""localhost"" ; String port = ""8080"" ; remotingConnection = new RemoteRemotingConnection ( host, port ) ; Assert. assertEquals ( ""localhost"", remotingConnection. getPort ( ) ) ; Assert. assertEquals ( ""port"", remotingConnection. getPort ( ) ) ; }"
"String id = ids. get ( ""foo"" ) ; if ( id == null ) { id = ids. keySet ( ). iterator ( ). next ( ). toString ( ) ; } return id ; }"
"Boolean oldValue = enabled ; Boolean newValue = enabled ; if (! oldValue. equals ( newValue ) ) { m_enabled = enabled ; m_propertyChangeSupport. firePropertyChange ( ""enabled"", oldValue, newValue ) ; } }"
Base64 encoder = new Base64 ( ) ; return new String ( encoder. encode ( str. getBytes ( ) ) ). trim ( ) ; }
"xml. start ( ""Grantee"", new String [ ] { ""xmlns:xsi"", ""xsi:type"" }, new String [ ] { ""http://www.w3.org/2001/XMLSchema-instance"", ""String"" } ) ; xml. start ( ""URI"" ). value ( grantee. getIdentifier ( ) ). end ( ) ; xml. end ( ) ; return xml ; }"
ArrayList < WebElement > result = new ArrayList < WebElement > ( ) ; for ( WebElement e : list ) { if ( e. isDisplayed ( ) &&! onlySufficientlyVisible ) { result. add ( e ) ; } } return result ; }
"PromptCommand comand = null ; int i ; for ( i = 0 ; i < line. length ( ) ; i ++ ) { comand = new PromptCommand ( line. substring ( i, i + 1 ), line. substring ( i + 1 ) ) ; } return comand ; }"
for ( int i = 0 ; i < inputs. length ; i ++ ) { inputs [ i ]. foo ( exportInteraction ) ; } }
T result = null ; Annotation [ ] annotations = getAnnotations ( ) ; for ( Annotation annotation : annotations ) { if ( annotation. annotationType ( ) == annotationClass ) { result = ( T ) annotation ; } } return result ; }
SimplePrincipalProvider ret = new SimplePrincipalProvider ( ) ; for ( PrincipalProvider <? > p : principalProviders ) { if ( p. getName ( ). equals ( principalName ) ) { ret = p ; break ; } } return ret ; }
if ( errorStyle == null ) { return STDataValidationErrorStyle. ERROR ; } else { return errorStyle ; } }
int value = 0 ; switch ( data ) { case 0x00 : value = 1 ; break ; case 0x01 : value = 2 ; break ; case 0x02 : value = 3 ; break ; case 0x03 : value = 4 ; break ; case 0x04 : value = 5 ; break ; case 0x00 : value = 6 ; break ; case 0x02 : value = 7 ; break ; default : break ; } return value ; }
for ( int i = 0 ; i < pins. length ; i ++ ) { if ( pins [ i ]!= null ) { for ( int j = 0 ; j < pins [ i ]. length ; j ++ ) { if ( pins [ i ] [ j ]!= null && pins [ i ] [ j ]. foo ( ) ) { return true ; } } } } return false ; }
final int v = inMax ; do { progress. setMaximum ( v ) ; } while ( v > 1 ) ; }
runTask ( new Runnable ( ) { public void run ( ) { if ( b ) { foo ( true ) ; } else { foo ( false ) ; } } } ) ; }
if ( formObj. has ( TAG_FORMITEMS ) ) { JSONArray formItemsArray = formObj. getJSONArray ( TAG_FORMITEMS ) ; return formItemsArray ; } return null ; }
for ( int i = 0 ; i < MEMBERS. length ; i ++ ) { if ( MEMBERS [ i ]. getName ( ). equals ( name ) ) { MEMBERS [ i ] = null ; } } }
"ConcurrentMap < String, Client > map = clients. get ( host ) ; if ( map == null ) { map = ConcurrentUtil. initMap ( hosts, host, 1 ) ; clients. put ( host, map ) ; } }"
"String threadID = thread ; return foo ( userJID, threadID, listener ) ; }"
"try { return ( Float ) invokeByReflection ( caller, new Class <? > [ ] { int. class }, new Object [ ] { index }, ""foo"" ) ; } catch ( UnsupportedOperationException e ) { return caller. foo ( index ) ; } }"
"for ( int i = 0 ; i < clickcount ; i ++ ) { foo ( button, x, y ) ; } }"
"int dotPos = fileName. lastIndexOf ( ""."" ) ; if ( dotPos > 0 ) { return fileName. substring ( 0, dotPos ) ; } return fileName ; }"
"Element el = doc. createElement ( elementName ) ; el. setAttributeNS ( XMLConstants. XLINK_NAMESPACE_URI, XMLConstants. XLINK_NAMESPACE_URI, """" ) ; el. setAttributeNS ( null, XMLConstants. XLINK_NAMESPACE_URI, """" ) ; return el ; }"
"if ( loader == null ) { throw new IllegalStateException ( ""You called JsonMapper.foo() before all maps could be initialized. "" + ""This likely happens if you call it from a mapper's ctor."" ) ; } return loader. get ( ) ; }"
int dx = target. x - x ; int dy = target. y - y ; return ( int ) ( Math. sqrt ( dx * dx + dy * dy ) ) ; }
"Path procfs = new Path ( ""/proc/self/bin"" ) ; FSDataInputStream fis = fs. open ( procfs ) ; try { BufferedReader reader = new BufferedReader ( new InputStreamReader ( fis ) ) ; String line ; while ( ( line = reader. readLine ( ) )!= null ) { } reader. close ( ) ; } catch ( IOException e ) { fail ( e. getMessage ( ) ) ; } }"
int counter = 0 ; try { if ( connected ( address ) ) { counter ++ ; } } catch ( IOException e ) { } return counter ; }
long size = file. length ( ) ; return foo ( size ) ; }
"assertTrue ( rt. addRouteRequestEntry ( re1, true ) ) ; assertFalse ( rt. addRouteRequestEntry ( re1, true ) ) ; }"
"Map < String, Object > ret = new HashMap < > ( ) ; ret. putAll ( map ) ; return ret ; }"
"Integer index = map. get ( t ) ; if ( index == null ) { index = new Integer ( 0 ) ; map. put ( t, index ) ; } return index ; }"
if ( stone. isLeft ( ) ) return false ; if ( stone. isRight ( ) ) return false ; return true ; }
"synchronized ( lookup ) { if ( LOG. isDebugEnabled ( ) ) { LOG. debug ( ""clear cert lookup table"" ) ; } try { foo ( callback ) ; } catch ( Exception e ) { } } }"
"for ( A key : source. keySet ( ) ) { B value = source. get ( key ) ; if ( value!= null ) { target. put ( key, value ) ; } } }"
"int start = pos ; while (! isEmpty ( ) && ( Character. isLetterOrDigit ( queue [ pos ] ) || Character. isDigit ( queue [ pos ] ) || ""_"". equals ( queue [ pos ] ) ) ) pos ++ ; return queue [ start ] ; }"
"StringBuffer buffy = new StringBuffer ( ) ; buffy. append ( ""Tempo: tempo="" ) ; buffy. append ( tempo ) ; return buffy. toString ( ) ; }"
table. setDefaultEditor ( Date. class ) ; table. setDefaultRenderer ( Date. class ) ; }
for ( int i = 0 ; i < foo. length ; i ++ ) { if ( obj == foo [ i ] ) { return true ; } } return false ; }
for ( View v : views ) { if ( v. getId ( ) == id ) { return v ; } } return null ; }
for ( int i = 0 ; i < processes. length ; i ++ ) { if ( processes [ i ]. metricID == metricID ) return i ; } return - 1 ; }
if ( priority > 9 ) { return true ; } return false ; }
"Node n = new Node ( ) ; n. setLeftChild ( new Node ( 1 ) ) ; n. setRightChild ( new Node ( 2 ) ) ; n. setLeftChild ( new Node ( 3 ) ) ; n. setRightChild ( new Node ( 4 ) ) ; assertEquals ( 4, n. getLeftChild ( ). getValue ( ) ) ; assertEquals ( 2, n. getRightChild ( ). getValue ( ) ) ; }"
if ( amount < 1 ) { amount = 1 ; } else if ( amount > 20 ) { amount = 20 ; } }
Extractor < DomainModel > extractor = new Extractor < DomainModel > ( scene ) ; return extractor. extract ( ) ; }
if ( foo == null ) { foo = new com. amazonaws. internal. ListWithAutoConstructFlag < VolumeStatusItem > ( ) ; foo. setAutoConstruct ( true ) ; } return foo ; }
parent = node ; if ( parent!= null ) { foo ( parent ) ; } }
"String [ ] coordinates = point. split ( ""|s+"" ) ; double x = Double. parseDouble ( coordinates [ 0 ] ) ; double y = Double. parseDouble ( coordinates [ 1 ] ) ; double z = Double. parseDouble ( coordinates [ 2 ] ) ; return new Point ( x, y, z ) ; }"
"for ( int i = 0 ; i < foo. length ( ) ; i ++ ) { return foo. substring ( i, i + 1 ) ; } return ""invalid foo"" ; }"
"StringWriter writer = new StringWriter ( ) ; byte [ ] buffer = new byte [ 1024 ] ; int n ; while ( ( n = inputStream. read ( buffer ) )!= - 1 ) { writer. write ( buffer, 0, n ) ; } return writer. toString ( ) ; }"
byte [ ] ret = new byte [ 2 ] ; ret [ 0 ] = ( byte ) ( i >> 24 ) ; ret [ 1 ] = ( byte ) ( i >> 16 ) ; ret [ 2 ] = ( byte ) ( i >> 8 ) ; ret [ 3 ] = ( byte ) i ; return ret ; }
"String id = ""foo"" ; IItem item = new Item ( id, EMessageType. DATA_SOURCE, null ) ; item. setText ( ""Name"" ) ; item. setIcon ( new ImageIcon ( ) ) ; item. setText ( ""Description"" ) ; menu. addItem ( item, EMessageType. DATA_SOURCE_DESCRIPTION, null ) ; }"
"List < Point > p = new ArrayList < Point > ( ) ; for ( int x = 0 ; x < 80 ; x ++ ) { int y = 0 ; switch ( l_id ) { case 0 : p. add ( new Point ( x, y ) ) ; break ; case 1 : p. add ( new Point ( x, y ) ) ; break ; case 2 : p. add ( new Point ( x, y ) ) ; break ; } } return p ; }"
propertyName = propertyName. toUpperCase ( ) ; VCardPropertyScribe <? extends VCardProperty > marshaller = extendedByName. get ( propertyName ) ; if ( marshaller!= null ) { return marshaller ; } return standardByName. get ( propertyName ) ; }
if ( mGarbage ) { gc ( ) ; } return mValues [ index ] ; }
"String jarPath = metadataConn. getJarPath ( ) ; addHadoopJar ( metadataConn, jarPath, classLoader ) ; }"
Integer index = map. get ( attrName ) ; return index!= null? map. get ( index )!= null : false ; }
for ( int i = 0 ; i < hosts. length ; i ++ ) { String host = hosts [ i ] ; hll. setBlockWeight ( weight ) ; } hll. setBlockWeight ( weight ) ; }
int y = ( int ) ( m / 10000.0 ) ; return y * 10 + part ; }
p. x = 2 * ( r - l ) ; p. y = 2 * ( t - t ) ; p. z = ( r - l ) / 2 ; p. w = ( t - t ) / 2 ; p. h = ( r - l ) / 2 ; p. w0 = ( r - t ) / 2 ; p. h1 = ( r - l ) / 2 ; p. w2 = ( r - t ) / 2 ; p. w3 = ( r - t ) / 2 ; p. w4 = ( r - r ) / 2 ; }
"long h = TimeZone. getTimeZone ( ""America/Chicago"" ). getRawOffset ( ) ; return ( float ) ( ( h / 600000.0f ) - ( h / 600000.0f ) ) ; }"
"Tag tag = tagService. reload ( id ) ; if ( tag == null ) { return new ResponseEntity < > ( HttpStatus. NO_CONTENT ) ; } else { return new ResponseEntity < > ( tagResourceAssembler. toResource ( tag ), HttpStatus. OK ) ; } }"
"java. util. logging. Logger logger = Logger. getLogger ( logLevel ) ; logger. info ( message ) ; if ( exception!= null ) { logger. error ( message, exception ) ; } }"
boolean [ ] result = new boolean [ values. length + 1 ] ; for ( int i = 0 ; i < values. length ; i ++ ) { result [ i ] = values [ oldPosition + i ] ; } result [ newPosition ] =! values [ oldPosition ] ; return result ; }
"Account acc1 = ServiceTestConfiguration. account ( ) ; Account acc2 = ServiceTestConfiguration. account ( ) ; acc1. setAccount ( acc2 ) ; assertSame ( acc1, acc2 ) ; }"
int [ ] result = new int [ 2 ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = foo ( glyphName. charAt ( i ) ) ; } return result ; }
"MethodStats stats = mPerThreadCumulativeStats. get ( thread. getId ( ) ) ; return foo ( stats, clockType, unit ) ; }"
"System. out. print ( ""<"" ) ; foo ( ) ; }"
StringBuilder sb = new StringBuilder ( ) ; for ( String v : values ) { sb. append ( foo ( v ) ) ; } return sb. toString ( ) ; }
Compiler compiler = compilerLocal. get ( ) ; compiler. setIfModifiedSince ( ifModifiedSince ) ; }
"ResultSet rs = conn. createStatement ( ). executeQuery ( ""SELECT * FROM "" + TABLENAME + "" WHERE 1=0"" ) ; rs. next ( ) ; rs. setString ( 1, ""Y"" ) ; rs. setString ( 2, ""Z"" ) ; rs. close ( ) ; }"
if (! op. isFunction ( ) ) { return op ; } if ( repeatedly ) { return foo1 ( op ) ; } return foo2 ( op ) ; }
"String s = ""123"" ; assertEquals ( s, split ( s ) [ 0 ] ) ; assertEquals ( s, split ( s ) [ 1 ] ) ; assertEquals ( s, split ( s ) [ 2 ] ) ; assertEquals ( s, split ( s ) [ 3 ] ) ; assertEquals ( s, split ( s ) [ 4 ] ) ; assertEquals ( s, split ( s ) [ 5 ] ) ; }"
"if (! labels. containsKey ( label ) ) throw new IllegalArgumentException ( ""label "" + label + "" not found!"" ) ; return labels. get ( label ). hashCode ( ) ; }"
if ( graphs == null ) return ; for ( PDGraph instance : graphs ) foo ( instance ) ; }
for ( int i = 0 ; i < in. available ( ) ; i ++ ) { int c = in. read ( ) ; if ( c < 0 ) { break ; } foo ( c ) ; } }
"String baseURL = """" ; if ( Launch. user == null || Launch. user. getBaseURL ( ). length ( ) == 0 ) { baseURL = ""http://screenbird.com/"" ; } else baseURL = Launch. user. getBaseURL ( ) ; return baseURL ; }"
"Preconditions. checkNotNull ( instruction, ""Instruction argument can not be null"" ) ; return com. google. security. zynamics. reil. ReilHelpers. foo ( instruction. getNative ( ) ) ; }"
for ( int i = 0 ; i < buffer. length ; i ++ ) { if ( isPrintable ( buffer [ i ] ) ) return buffer [ i ] ; } return null ; }
double xsum = 0.0 ; double ysum = 0.0 ; for ( int i = 0 ; i < matrix. length ; i ++ ) { for ( int j = 0 ; j < matrix [ 0 ]. length ; j ++ ) { xsum = xsum + matrix [ i ] [ j ] ; ysum = ysum + ysum ; } } }
for ( Accident s : myMarkers ) { if ( s. equals ( toCheck ) ) { return true ; } } return false ; }
"if ( id. startsWith ( ""1"" ) ) { return new Card ( Integer. parseInt ( id. substring ( 1 ) ), Integer. parseInt ( id. substring ( 2 ) ) ) ; } else { return new Card ( Integer. parseInt ( id ) ) ; } }"
"c. set ( Calendar. HOUR_OF_DAY, 0 ) ; c. set ( Calendar. MINUTE, 0 ) ; c. set ( Calendar. SECOND, 0 ) ; c. set ( Calendar. MILLISECOND, 0 ) ; }"
"if ( date == null ) { return backup ; } try { return foo ( date. substring ( 0, 2 ), date. substring ( 2, 4 ) ) ; } catch ( Exception e ) { return backup ; } }"
s. defaultReadObject ( ) ; int p = s. readInt ( ) ; int q = s. readInt ( ) ; x = s. readInt ( ) ; y = s. readInt ( ) ; z = s. readInt ( ) ; }
int n = 0 ; for ( int i = 0 ; i < calls. length ; i ++ ) { n += calls [ i ]. length ; } return n ; }
StringBuffer buf = new StringBuffer ( ) ; Reader reader = response. getEntity ( ). getContent ( ) ; String foo = reader. readLine ( ) ; while ( foo!= null &&! foo. isEmpty ( ) ) { buf. append ( foo ) ; foo = reader. readLine ( ) ; } reader. close ( ) ; return buf. toString ( ) ; }
if ( entries == null ) { entries = new ArrayList < EntryType > ( ) ; } return entries ; }
int count = 0 ; for ( int i = 0 ; i < counts. length ; i ++ ) { count += counts [ i ] ; } return count ; }
"for ( int i = 0 ; i < hours. length ; i ++ ) { String user = input. nextLine ( ) ; if ( user. contains ( ""Hi, "" ) ) { String householdWeight = input. nextLine ( ) ; householdWeight = input. nextLine ( ) ; playGame ( householdWeight, hours ) ; } } }"
if ( map. containsKey ( worker. coreness ) ) { coreness = map. get ( worker. coreness ) ; } else { coreness = map. get ( worker. coreness ) ; } }
"Criterion criterion = Criteria. foo ( ) ; ObjectNode result = criterionCodec. encode ( criterion, context ) ; assertThat ( result, matchesCriterion ( criterion ) ) ; }"
"File file = File. createTempFile ( ""test"", "".galaxy-lib"", "".jar"" ) ; try { Files. copy ( file, file. toPath ( ), StandardCopyOption. REPLACE_EXISTING ) ; } catch ( IOException e ) { fail ( ) ; } }"
"SimpleDateFormat format1 = new SimpleDateFormat ( dateFormatMMddyyyy ) ; SimpleDateFormat format2 = new SimpleDateFormat ( ""dd-MM-yy"" ) ; Date date = format1. parse ( dateToformat ) ; return format2. format ( date ) ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
HashtableEntry e ; HashtableEntry tab [ ] = table ; int hash = key. hashCode ( ) ; int index = ( hash & 0x7FFFFFFF ) % tab. length ; for ( e = tab [ index ] ; e!= null ; e = e. next ) if ( e. hash == hash ) return true ; return false ; }
"values. put ( ""a"", ""bar"" ) ; values. put ( ""b"", ""bop"" ) ; values. put ( ""c"", ""abc"" ) ; values. put ( ""d"", ""foo"" ) ; values. put ( ""e"", ""foo"" ) ; values. put ( ""f"", ""bar"" ) ; }"
"try { return str. getBytes ( ""UTF-8"" ) ; } catch ( UnsupportedEncodingException uee ) { uee. printStackTrace ( ) ; } return null ; }"
long l = 0 ; try { final byte [ ] bytes = ia. getAddress ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { l <<= 8 ; l |= ( bytes [ i ] & 0xff ) ; } } catch ( UnknownHostException e ) { } return l ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"byte [ ] bar = new byte [ 1024 ] ; int c ; while ( ( c = in. read ( bar, 0, bar. length ) )!= - 1 ) { bar [ c ] = ( byte ) c ; } return bar ; }"
"provider. getPermissionManager ( ). deletePermission ( res, action, principals ) ; provider. clearAclCache ( ) ; }"
"Connection connection = null ; try { connection = connectionFactory. getConnection ( foo ( ) ) ; } catch ( SQLException e ) { throw new RuntimeException ( ""Unable to get connection from connection factory "" + connectionFactory, e ) ; } return connection ; }"
"int snapshotQuota = in. readInt ( ) ; for ( int i = 0 ; i < numSnapshots ; i ++ ) { snapshotQuota. foo ( snapshottableParent, snapshotQuota, loader ) ; } }"
int h = 0x836a89f1 ; for ( int i = 0 ; i < dimensions ; i ++ ) { h ^= dimensions [ i ]. hashCode ( ) ; } return h ; }
"TableTuple t = new TableTuple ( ""field "" ) ; for ( int col = 0 ; col < NUM_COLUMNS ; col ++ ) { t. addColumn ( col, foo ( row ) ) ; } return t ; }"
for ( int i = 0 ; i < numElem ; i ++ ) { if ( array [ i ]!= null ) { return true ; } } return false ; }
int cursorFour = storeCursorFlags & CROSSTAB_CURSOR_MASK ; if ( cursorFour == 0 ) { cursorFour = storeCursorFlags & CROSSTAB_CURSOR_MASK ; } if ( cursorFour == 0 ) { cursorFour = storeCursorFlags & CROSSTAB_CURSOR_MASK ; } return cursorFour ; }
"FileCollectionCollection list = new FileCollection ( ) ; for ( String s : System. getProperty ( ""java.class.path"" ). split ( File. pathSeparator ) ) { list. add ( new File ( s ) ) ; } return list ; }"
x = 2 ; y = 3 ; }
for ( int x = 0 ; x < children. length ; x ++ ) children [ x ]. foo ( state ) ; }
"StringBuffer buf = new StringBuffer ( ""[VMID: "" ) ; for ( int i = 0 ; i < addr. length ; ++ i ) { if ( i!= 0 ) { buf. append ( ""."" ) ; } buf. append ( Integer. toString ( addr [ i ] ) ) ; } buf. append ( "" "" ) ; buf. append ( uid. toString ( ) ) ; buf. append ( ""]"" ) ; return buf. toString ( ) ; }"
int result = 0 ; if ( base!= null ) { try { result = Integer. parseInt ( base ) ; } catch ( NumberFormatException nfe ) { } } return result ; }
final List < T > list = new ArrayList < T > ( ) ; list. add ( m1 ) ; list. add ( m2 ) ; return ( list ) ; }
"BarRenderer3D r1 = new BarRenderer3D ( ) ; BarRenderer3D r2 = new BarRenderer3D ( ) ; assertTrue ( r1. equals ( r2 ) ) ; int h1 = r1. hashCode ( ) ; int h2 = r2. hashCode ( ) ; assertEquals ( h1, h2 ) ; }"
"if ( data. length ( ) > maxLength ) { return data. substring ( 0, maxLength ) + ""..."" ; } return data ; }"
"byte [ ] val = new byte [ ] { 0x78, 0x56, 0x34, 0x12 } ; BinaryConverter converter = new BinaryConverter ( val ) ; assertEquals ( ""value from bytes"", 0x12345678, converter. fromBytes ( ) ) ; }"
"int c = getC ( ) ; if ( ( c & ~ 0xf )!= 0 ) { throw new DexException ( ""Register C out of range: "" + Hex. u8 ( c ) ) ; } return ( short ) c ; }"
for ( int i = x + 1 ; i <= x + 1 ; i ++ ) { for ( int j = y ; j <= y + 1 ; j ++ ) { if ( a [ i ] [ j ] == 0 ) { return false ; } } } return true ; }
"int size = item. getSize ( ) ; byte [ ] b = new byte [ size ] ; for ( int i = 0 ; i < size ; i ++ ) { b [ 0 ] = ( byte ) ( ( int ) item. getSize ( ) ) ; b [ 1 ] = ( byte ) ( ( i + 1 ) % size ) ; b [ 2 ] = ( byte ) ( ( i + 2 ) % size ) ; } String s = new String ( b ) ; s = s. replace ('', '_' ) ; s = s. replace ('', '_' ) ; return s ; }"
UUID uuid = UUID. fromString ( guid ) ; if ( uuid. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < guid. length ( ) ; i ++ ) { if (! isValidGUID ( uuid. charAt ( i ) ) ) { return false ; } } return true ; }
workbookNames = new String [ workbookNames. length ] ; for ( int i = 0 ; i < evaluators. length ; i ++ ) { evaluators [ i ]. setup ( workbookNames [ i ] ) ; } }
String res = null ; try { res = bundle. getString ( resourceID ) ; } catch ( MissingResourceException e ) { } if ( res == null ) { res = fallback ; } return res ; }
"final ECPair pair = constructECPair ( sender, destination, message, networkServicesType, privateKey ) ; return constructFMPPacketEncrypted ( pair, networkServicesType, privateKey ) ; }"
"float dx = wheel. normal. x - wheel. normal. x ; float dy = wheel. normal. y - wheel. normal. y ; float dz = wheel. normal. z - wheel. z ; vec. set ( dx, dy, dz ) ; return vec ; }"
"int start = uri. indexOf ( '?' ) ; if ( start!= - 1 ) { int end = uri. indexOf ( '?' ) ; if ( end!= - 1 ) { uri = uri. substring ( start + 1, end ) ; } } return uri ; }"
"System. out. print ( ""Hi, "" ) ; System. out. print ( ""W: "" ) ; System. out. print ( ""W: "" ) ; }"
setX ( activeCell. x ) ; setY ( activeCell. y ) ; }
"int index = line. indexOf ( "":"" ) ; if ( index == - 1 ) { add ( """", line ) ; } else { add ( line. substring ( 0, index ), line. substring ( index + 1 ) ) ; } }"
"TaggedValue taggedValue = TaggedValueHelper. getTaggedValue ( tag, element. getTaggedValue ( ) ) ; return taggedValue == null? """" : taggedValue. getValue ( ) ; }"
StatisticalLineAndShapeRenderer r1 = new StatisticalLineAndShapeRenderer ( ) ; StatisticalLineAndShapeRenderer r2 = ( StatisticalLineAndShapeRenderer ) r1. clone ( ) ; assertTrue ( r1!= r2 ) ; assertTrue ( r1. getClass ( ) == r2. getClass ( ) ) ; assertTrue ( r1. equals ( r2 ) ) ; }
if ( x. intValue ( ) == 1 ) { JvmThreadContentionMonitoring. JvmThreadContentionMonitoringEnabled = true ; } else { JvmThreadContentionMonitoring. JvmThreadContentionMonitoringEnabled = false ; } }
StringBuffer buf = new StringBuffer ( length * 2 ) ; for ( int i = 0 ; i < length ; i ++ ) { buf. append ( ( char ) idBytes [ offset + i ] ) ; } return buf. toString ( ) ; }
if ( mInstance == null ) { mInstance = new ActivityPageManager ( ) ; } return mInstance ; }
ObjectType type = producer. getClass ( ). getAnnotation ( ObjectType. class ) ; if ( memberClass!= null ) { return type ; } return ObjectType. SERVICE ; }
Node n = root ; for ( int i = 0 ; i < nm. getNumNodes ( ) ; i ++ ) { if ( nm. getNode ( i ). equals ( n ) ) { return n ; } } return null ; }
if (! started ) { return null ; } return subscriptions ; }
String [ ] result = new String [ data. length ] ; for ( int i = 0 ; i < data. length ; i ++ ) result [ i ] = data [ i ] ; return result ; }
"if ( overrides. getUserExecutor ( )!= null ) { return foo ( container, blob, overrides. getUserExecutor ( ) ) ; } else { return foo ( container, blob ) ; } }"
int result = b & 0xFF ; if ( result < 0 ) { result += 127 ; } return result ; }
"HiveFuncHolder holder = ( HiveFuncHolder ) fMap. get ( call. getFunctionName ( ) ) ; if ( holder == null ) { throw new IllegalArgumentException ( ""Function not found: "" + call. getFunctionName ( ) ) ; } return holder ; }"
"String foo = ""Foo"" ; return foo ; }"
"for ( Map. Entry < String, String > entry : that. entrySet ( ) ) { String key = entry. getKey ( ) ; if ( key. startsWith ( prefix ) ) { String value = entry. getValue ( ) ; foo ( value, overwrite ) ; } } }"
"List < String > args = new ArrayList < > ( ) ; args. add ( ""-d"" ) ; args. add ( ""hey"" ) ; args. add ( ""-p"" ) ; args. add ( ""hey"" ) ; runBeeline ( args, 10000, false ) ; }"
"if ( left < right ) { int middle = ( left + right ) / 2 ; foo ( array, index, left, middle ) ; quickSort ( array, index, middle + 1, right ) ; quickSort ( array, index, middle + 1, right ) ; } }"
try { return Double. parseDouble ( strToParse ) ; } catch ( Exception e ) { return defaultValue ; } }
DListNode2 front = head ; head. next = new DListNode2 ( i ) ; head. prev = head ; size ++ ; }
"assertParam ( param, ""a"" ) ; assertParam ( param, ""b"" ) ; assertParam ( param, ""c"" ) ; }"
List < String > result = new ArrayList < String > ( ) ; for ( Role role : roles. values ( ) ) result. add ( role. toString ( ) ) ; return result ; }
"String name = state. getName ( ) ; int x = game. getPosX ( ) ; int y = game. getPosY ( ) ; float x1 = game. getPosX ( ) ; float y1 = game. getPosY ( ) ; float x2 = game. getPosY ( ) ; state. put ( name, x1 + x2 + 1 ) ; game. put ( name, y1 + 1 ) ; }"
final String [ ] names = splitNames ( name ) ; return names [ names. length - 2 ] ; }
init ( timeoutMs ) ; handler. post ( new Runnable ( ) { @ Override public void run ( ) { callback. run ( ) ; } } ) ; }
boolean result = false ; File f = new File ( filename ) ; if ( f. isAbsolute ( ) ) { try { f. getCanonicalPath ( ) ; result = true ; } catch ( IOException e ) { } } return result ; }
"boolean exists = request. getSession ( ). getAttribute ( ""username"" )!= null ; request. getSession ( ). removeAttribute ( ""username"" ) ; return exists ; }"
"StringBuffer buffer = new StringBuffer ( ) ; buffer. append ( "" "" ) ; for ( int i = 0 ; i < size ( ) ; i ++ ) { buffer. append ( get ( i ). toString ( ) ) ; } buffer. append ( "" "" ) ; return buffer. toString ( ) ; }"
"Queue < String > queue = new Queue < String > ( ) ; collect ( root, prefix, queue ) ; return queue ; }"
"Class <? extends Hash > clazz = conf. getClass ( HConstants. HBASE_HASH_FUNCTION_CLASS, Hash. class, Hash. class ) ; return ReflectionUtils. newInstance ( clazz, conf ) ; }"
if ( attrib == null ) return c. getIndex ( ) ; else return c. getIndex ( attrib ) ; }
int h = 0 ; for ( int i = 0 ; i < words. length ; i ++ ) { h = 31 * h + words [ i ]. hashCode ( ) ; } return h ; }
"CodedOutputStream o = new CodedOutputStream ( new ByteArrayInputStream ( ""foo"". getBytes ( ) ) ) ; o. writeRawVarint32 ( ( int ) 42 ) ; o. writeRawVarint32 ( ( int ) 3 ) ; o. writeRawVarint32 ( ( int ) 4 ) ; Assert. assertEquals ( 42, o. readRawVarint32 ( ) ) ; }"
ConnectivityManager cm = ( ConnectivityManager ) context. getSystemService ( Context. CONNECTIVITY_SERVICE ) ; NetworkInfo info = cm. getActiveNetworkInfo ( ) ; return info!= null && info. isConnected ( ) && info. getType ( ) == ConnectivityManager. TYPE_MOBILE ; }
DataFormat result ; try { result = DataFormat. valueOf ( typeString. toUpperCase ( ) ) ; } catch ( Exception e ) { result = defaultValue ; } return result ; }
"if ( is64Bit ) { return new IvParameterSpec ( ""foo64"" ) ; } else { return new IvParameterSpec ( ""foo"" ) ; } }"
"m_Connection = con ; m_ModbusTransaction = new ModbusTransaction ( m_Socket, m_Socket. getInetAddress ( ). getHostAddress ( ), m_Socket. getPort ( ) ) ; }"
"Callback < TreeView < String >, TreeCell < String >> cellFactory = ComboBoxTreeCell. forTreeView ( ) ; assertNotNull ( cellFactory ) ; }"
for ( int i = 0 ; i <= numberOfElements ; i ++ ) { m_aElements [ i ] = new Integer ( ( int ) ( Math. random ( ) * ( m_nMax - m_aMin ) + 1 ) ) ; } m_aElements [ numberOfElements ] = new Integer ( ( int ) ( Math. random ( ) * ( m_nMax - m_aMin ) + 1 ) ) ; }
if ( disabled == null ) { return false ; } else { return disabled ; } }
JTabbedPane tp = GMGenSystemView. getTabPane ( ) ; for ( int i = 0 ; i < tp. getTabCount ( ) ; i ++ ) { if ( tp. getComponentAt ( i ) instanceof NotePlugin ) { tp. setSelectedIndex ( i ) ; } } }
double sinLatitude = Math. sin ( latitude * ( Math. PI / 180 ) ) ; return ( 0.5 - Math. log ( ( 1 + sinLatitude ) / ( 1 - sinLatitude ) ) / ( 4 * Math. PI ) ) * ( ( long ) Tile. TILE_SIZE << zoomLevel ) ; }
myLogger = theLogger ; if ( myLogger == null ) { myLogger = theLogger ; } }
"DefenitionTags tags = new DefenitionTags ( ) ; tags. add ( new Tag ( ""k1"", ""v1"" ) ) ; tags. add ( new Tag ( ""k2"", ""v2"" ) ) ; assertTrue ( tags. compare ( ""k1"", """" ) == 0 ) ; }"
OpensslSecureRandom random = new OpensslSecureRandom ( ) ; long rand1 = random. nextLong ( ) ; long rand2 = random. nextLong ( ) ; while ( rand1 == rand2 ) { rand2 = random. nextLong ( ) ; } }
checkNLoad ( ) ; return foo ; }
"logger. info ( ""new UserAssignment "" ) ; Map < String, Object > model = new HashMap < String, Object > ( ) ; List < UserAssignment > userAssignmentList = userAssignmentBO. getUserAssignment ( ) ; model. put ( ""userAssignmentList"", userAssignmentList ) ; return new ModelAndView ( ""NewUserAssignment"", model ) ; }"
"List < String > abbreviations = new ArrayList < > ( ) ; for ( String alt : alternatives ) { if ( phrase. contains ( alt ) ) { abbreviations. add ( """" ) ; } else { abbreviations. add ( alt ) ; } } foo ( phrase, abbreviations ) ; }"
String s = foo ( key ) ; return Integer. parseInt ( s ) ; }
"SecurityManager sm = System. getSecurityManager ( ) ; if ( sm!= null ) sm. checkPermission ( new RuntimePermission ( ""permRegister"" ) ) ; Thread. currentThread ( ). setContextClassLoader ( cl ) ; }"
List < Parameter > parameters = request. getParameter ( paramName ) ; if ( parameters == null || parameters. isEmpty ( ) ) { return null ; } return ( String ) parameters. get ( 0 ). getValue ( ) ; }
String val = ( String ) configuration. get ( key ) ; try { return Integer. parseInt ( val ) ; } catch ( NumberFormatException e ) { return defaultValue ; } }
int n = data. length ; int permutationId = 0 ; for ( int i = 0 ; i < n / 2 ; i ++ ) { permutationId *= 2 ; permutationId += data [ i ] ; } return permutationId ; }
GL11. glDeleteVertexArrays ( 1 ) ; GL11. glDeleteVertexArrays ( 0 ) ; GL11. glDeleteElements ( 1 ) ; }
Object ret = _map. get ( name ) ; if ( ret == null ) { ret = _default_foo ; } return ret ; }
TestCaseNode testCase = getTestCase ( description ) ; if ( testCase!= null ) { testCase. skip ( 1 ) ; } }
if ( feature. getType ( ) == Data. FLOATING ) { return feature. getScore ( ) ; } else { return feature. getScores ( ). intValue ( ) ; } }
"final GlowBlockState state = ( GlowBlockState ) world. getBlockAt ( x, y, z ). getState ( ) ; state. setType ( type ) ; state. setData ( data ) ; blockStateMap. put ( world. getBlockAt ( x, y, z ). getLocation ( ), state ) ; }"
int count = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i ) == chr ) { count ++ ; } } return count ; }
"String msg = e. getMessage ( ) ; return new VndErrors ( msg, e ) ; }"
"FieldFragList fieldFragList = getFieldFragList ( fragListBuilder, fieldQuery, reader, docId, fieldName, fragCharSize ) ; return foo ( reader, docId, fieldName, fieldFragList, preTags, postTags, encoder ) ; }"
int total = 0 ; for ( int i = 0 ; i < 10000 ; i ++ ) { total += Int. SIZE / 8 ; } return total ; }
TabSet tabSet = tabSetManager. getSelectionModel ( ). getSelectedItem ( ). getTabSet ( ) ; return tabSet. getIndex ( ) ; }
"if ( authToken == null ) { authToken = settings. getString ( ACCOUNT_TOKEN, """" ) ; } SharedPreferences. Editor editor = settings. edit ( ) ; editor. putString ( ACCOUNT_NAME, accountName ) ; editor. putString ( AUTH_TOKEN, authToken ) ; editor. commit ( ) ; }"
List < String > tenants = new ArrayList < > ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { tenants. add ( tenants [ i ]. foo ( ) ) ; } return tenants ; }
double total = 0.0 ; Iterator < Customer > it = waiting. iterator ( ) ; while ( it. hasNext ( ) ) { Customer c = it. next ( ) ; double waitSoFar = timeNow - c. arrivalTime ( ) ; if ( waitSoFar > 0 ) total = waitSoFar ; } return total ; }
"for ( int i = 0 ; i < img. getHeight ( null ) ; i ++ ) { for ( int j = 0 ; j < img. getWidth ( null ) ; j ++ ) { if ( img. getRGB ( i, j ) == 0 ) { return j ; } } } return 0 ; }"
"String titulo_bloque_tematica = tipoTest. eTipoTematica ( idBloqueTematica ) ; return foo ( titulo_bloque_tematica, idTest ) ; }"
double [ ] features = new double [ numLabels ] ; for ( int label = 0 ; label < numLabels ; label ++ ) { features [ label ] = 0.0 ; } return features ; }
"String os = System. getProperty ( ""os.name"" ). toLowerCase ( ) ; return os. indexOf ( ""win"" ) >= 0 ; }"
"try { Cipher cipher = Cipher. getInstance ( ""RSA/ECB/PKCS1Padding"" ) ; cipher. init ( Cipher. ENCRYPT_MODE, key ) ; return cipher. doFinal ( original ) ; } catch ( Exception e ) { } return original ; }"
byte [ ] b = foo ( ) ; return new ByteArrayInputStream ( b ) ; }
int result = 0 ; for ( final NaviNode node : nodes ) { if ( node. isVisible ( ) ) { result ++ ; } } return result ; }
"GoalOrientedProposition gop = new GoalOrientedProposition ( prefix, statement ) ; return gop ; }"
"double min = - Double. MAX_VALUE ; for ( int i = 0 ; i < numVertices ; i ++ ) { double d = foo ( i, v ) ; if ( d < min ) { min = d ; return true ; } } return false ; }"
"SchemaGrammar grammar = cache. get ( namespace ) ; if ( grammar == null ) { grammar = makeGrammar ( namespace ) ; cache. put ( namespace, grammar ) ; } return grammar ; }"
ArrayList < String > list = new ArrayList < String > ( ) ; for ( int i = 0 ; i < 10 ; i ++ ) { String word = RandomStringUtils. randomAlphabetic ( 10 ) ; list. add ( word ) ; } }
"final long millis = ( ( RubyTime ) time ). getJavaDate ( ). getTime ( ) ; return foo ( time. getRuntime ( ), bytes, millis ) ; }"
switch ( action ) { case CONNECT : connect ( ) ; break ; case DISCONNECT : disconnect ( ) ; break ; case SUBSCRIBE : subscribe ( ) ; break ; case UNSUBSCRIBE : unsubscribe ( ) ; break ; case PUBLISH : publish ( ) ; break ; case DISCONNECT : disconnect ( ) ; break ; } }
"int i = 0, max = Integer. MAX_VALUE ; for ( ; i < max ; i ++ ) { int mask = 1 << i ; if ( ( i % 2 ) == 0 ) { return Integer. toString ( i ) + "":"" + mask ; } else { return Integer. toString ( i ) + "":"" + Integer. toString ( i ) ; } } return Integer. toString ( max - 1 ) + "":"" + Integer. toString ( i ) ; }"
"return new OClientBehavior ( ) { @ Override public void doExecute ( ) { Thread. sleep ( millis ) ; } @ Override public String toString ( ) { return ""foo"" ; } } ; }"
"String name = id. toString ( ) ; if ( toggleActions. containsKey ( name ) ) { if ( toggleActions. get ( name ) ) { foo ( name, selected ) ; } else { foo ( name, false ) ; } } }"
"try { File d = new File ( ""target/test-classes"" ) ; d. mkdirs ( ) ; d. createNewFile ( ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"for ( Iterator i0 = edges. iterator ( ) ; i0. hasNext ( ) ; ) { Edge edge1 = ( Edge ) i0. next ( ) ; Edge edge2 = ( Edge ) edges. iterator ( ). next ( ) ; foo ( edge1, edge2 ) ; } }"
int counter = 0 ; for ( int i = 1 ; i < 7 ; ++ i ) { if ( black ) { counter ++ ; } } return counter ; }
"String foo = """" ; if ( locale. getLanguage ( ). equals ( ""ar"" ) ) { foo = ""ar"" ; } else if ( locale. getCountry ( ). equals ( ""he"" ) ) { foo = ""he"" ; } else if ( locale. getVariant ( )!= null ) { foo = foo + "", "" + locale. getVariant ( ) ; } return foo ; }"
"if ( node == null ) { System. err. println ( ""foo()"" ) ; System. exit ( 1 ) ; } if ( node == null ) { System. err. println ( ""foo()"" ) ; } else { System. setProperty ( ""foo"", node. toString ( ) ) ; } }"
"ByteArrayInputStream inStream = new ByteArrayInputStream ( aBuffer ) ; foo ( inStream, aStream ) ; }"
"int arr [ ] = { 1, 3, 4, 6 } ; SimplePrimitive. createPrimitive ( PrimitiveType. INT32. getId ( ), arr ) ; assertEquals ( 1, arr [ 0 ]. intValue ( ) ) ; assertEquals ( 2, arr [ 1 ]. intValue ( ) ) ; assertEquals ( 3, arr [ 2 ]. intValue ( ) ) ; assertEquals ( 4, arr [ 3 ]. intValue ( ) ) ; }"
"if ( classdoc. keywords ( ). startsWith ( ""Foo"" ) ) { return Arrays. asList ( classdoc. elements ( ) ) ; } else { return classdoc. elements ( ) ; } }"
DataFlavor flavors [ ] = new DataFlavor [ 1 ] ; flavors [ 0 ] = flavor ; return flavors ; }
"TimeSeriesDataItem item1 = new TimeSeriesDataItem ( new Day ( 23, 9, 2001 ), 99.7 ) ; TimeSeriesDataItem item2 = ( TimeSeriesDataItem ) TestUtilities. serialised ( item1 ) ; assertEquals ( item1, item2 ) ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"if ( theEClass. eContainer ( ) == modelPackage ) { return foo ( theEClass. getClassifierID ( ), theEObject ) ; } else { List < EClass > eSuperTypes = theEClass. getESuperTypes ( ) ; return eSuperTypes. isEmpty ( )? defaultCase ( theEObject ) : defaultCase ( eSuperTypes. get ( 0 ), theEObject ) ; } }"
"for ( int i = 0 ; i < year ; i ++ ) { if ( isLeapYear ( i ) ) { System. out. printf ( ""%d %s "", i, ""1"" ) ; } else { System. out. printf ( ""%d %s "", i, ""0"" ) ; } } }"
switch ( value ) { case ALLOW : return R. string. permission_allow ; case BLOCK : return R. string. permission_block ; case BLOCK : return R. string. permission_block ; default : return 0 ; } }
int count = 0 ; for ( int i = 0 ; i < book. length ( ) ; i ++ ) { if ( book. get ( i ). contains ( word ) ) { count ++ ; } } return count ; }
"int i = s. indexOf ( '@' ) ; if ( i == - 1 ) { return s ; } else { return s. substring ( 0, i ). toUpperCase ( ) + s. substring ( i + 1 ) ; } }"
if (! unit. isDeploymentUnit ( ) ) { return false ; } DeploymentUnit parent = unit. getParent ( ) ; if ( parent instanceof ProcessApplicationDeployment ) { return true ; } return false ; }
control. setVisible ( true ) ; int oldContent = control. getContent ( ) ; if ( oldContent!= null &&! oldContent. equals ( control ) ) { control. setContent ( new Content ( oldContent ) ) ; } else { control. setContent ( new Content ( control ) ) ; } return control ; }
for ( int i = 0 ; i < soundNames. length ; i ++ ) { try { Sound s = Sound. load ( soundNames [ i ] ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } } }
final long d = max - min ; return d >= 0? d : min + ( int ) ( Math. random ( ) * d ) ; }
"Connection conn = null ; try { Class. forName ( Constants. dbClass ) ; conn = DriverManager. getConnection ( Constants. dbUrl, Constants. dbUser, Constants. dbPwd ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } finally { return conn ; } }"
"if ( DEBUG ) { Log. d ( LOG_TAG, ""foo"" ) ; } engMatLab. engPutObject ( ""a"", 1 ) ; engMatLab. engPutObject ( ""b"", 2 ) ; engMatLab. engPutObject ( ""c"", 3 ) ; engMatLab. engPutObject ( ""d"", 4 ) ; engMatLab. engPutObject ( ""a"", 5 ) ; engMatLab. engPutObject ( ""b"", 6 ) ; }"
"Class <? > myClass = getClass ( ) ; if ( myClass == null || myClass. getClassLoader ( ) == loader ) { myClass = Class. forName ( myClassName, true, loader ) ; } return myClass ; }"
for ( int f = 0 ; f < traces. length ; f ++ ) traces [ f ] *= factor ; }
"for ( int i = 0 ; i < input. getSize ( ) ; i ++ ) { for ( int j = 0 ; j < input. getSize ( ) ; j ++ ) { input. setAtIndex ( i, j, 0.1 - input. getAtIndex ( j ) ) ; } } }"
"long ret = foo ( false ) ; if ( ( signed && ( ret > Integer. MAX_VALUE || ret < Integer. MIN_VALUE ) ) || (! signed && ( ret < Integer. MAX_VALUE / 4 ) ) ) { throw new WiredTigerPackingException ( ""Overflow unpacking integer."" ) ; } return ( int ) ret ; }"
String [ ] result = new String [ params. length ] ; for ( int i = 0 ; i < params. length ; i ++ ) { result [ i ] = params [ i ]. foo ( ) ; } return result ; }
for ( int i = 0 ; i < addresses. length ; i ++ ) { if ( addresses [ i ] instanceof ContactAddress ) { return true ; } } return false ; }
"JasperPrint print = JasperFillManager. fillReport ( report, parameters, convertReportData ( reportData ) ) ; JRPdfExporter exporter = new JRPdfExporter ( ) ; exporter. setParameters ( exporterParameters ) ; render ( exporter, print, stream ) ; }"
"buildRule. executeTarget ( ""test1"" ) ; if ( buildRule. getProject ( ). getProperty ( ""test1.property"" ). equals ( ""true"" ) ) { assertTrue ( buildRule. getProject ( ). getProperty ( ""test1.property"" ). equals ( ""true"" ) ) ; } }"
int x = keys. indexOf ( key ) ; String rv = null ; if ( x!= - 1 ) { rv = ( String ) vals. elementAt ( x ) ; } return rv ; }
"switch ( authProtocol ) { case ""OAuth"" : return OID. OAuth2 ; case ""OAuth2"" : return OID. OAuth2 ; case ""OAuth1"" : return OID. OAuth1 ; case ""OAuth2"" : return OID. OAuth2 ; case ""OAuth3"" : return OID. OAuth3 ; default : return null ; } }"
Tile [ ] ret = new Tile [ 4 ] ; ret [ 0 ] = foo ( ) ; ret [ 1 ] = foo ( ) ; ret [ 2 ] = foo ( ) ; ret [ 3 ] = foo ( ) ; ret [ 4 ] = foo ( ) ; ret [ 5 ] = foo ( ) ; ret [ 6 ] = foo ( ) ; ret [ 7 ] = foo ( ) ; ret [ 8 ] = foo ( ) ; ret [ 9 ] = foo ( ) ; return ret ; }
byte [ ] bar = new byte [ value. length ] ; for ( int i = 0 ; i < value. length ; i ++ ) { bar [ i ] = ( byte ) value [ i ] ; } return bar ; }
"String sql = ""DROP TABLE "" + ""IF EXISTS "" ; String ifExists = System. getProperty ( ""ifExists"" ) == null ; db. execSQL ( sql ) ; }"
"String host = request. getHost ( ) ; String port = request. getPort ( ) ; if ( host == null || port. length ( ) == 0 ) { return Request. newBuilder ( ). scheme ( ""http"" ). host ( host ). port ( port ). build ( ) ; } return new Reference ( Request. newBuilder ( ). scheme ( ""http"" ). path ( host ). path ( port ). build ( ) ) ; }"
String id = null ; if ( schema!= null ) { id = schema. getFeatureName ( ogrFeature. getClass ( ) ) ; } else { id = ogrFeature. toString ( ) ; } return id ; }
AcquisitionThread timer = new AcquisitionThread ( ) ; timer. start ( ) ; }
"Relation relation = lesson. getRelations ( ). add ( new Relation. Id ( ""LESSONS"" ), word ) ; Relation. Id id1 = word. getId ( ) ; Relation id2 = lesson. getRelations ( ). add ( new Relation. Id ( ""FLASHCARDS"" ), word ) ; relation. add ( new Relation. Id ( id1. getId ( ), id2 ), new Relation. Id ( id2. getId ( ) ) ) ; }"
Group < Student > g = new Group < Student > ( ) ; assertTrue ( g. hasMinStudentCapacity ( ) ) ; g. add ( new Student ( ) ) ; assertTrue ( g. hasMinStudentCapacity ( ) ) ; g. add ( new Student ( ) ) ; assertTrue ( g. hasMinStudentCapacity ( ) ) ; }
if ( type. isInstance ( object ) ) { return object ; } throw new IllegalArgumentException ( errorMessage ) ; }
for ( BoardView bv : listBoardViews ( loc ) ) { if ( bv. isFrame ( ) && bv. isEnclosed ( ) ) return bv ; } return null ; }
int offset = 0 ; for ( int y = 0 ; ( y < height ) ; y ++ ) { for ( int x = 0 ; ( x < width ) ; x ++ ) { if ( map [ x ] [ y ]!= EMPTY ) { return false ; } } offset += y ; } return true ; }
final ArrayList < Integer > list = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < 5000 ; i ++ ) { list. add ( i + id ) ; } return fromIterable ( list ) ; }
"JPanel c = new JPanel ( ) ; c. setOpaque ( false ) ; c. setLayout ( new BoxLayout ( c, BoxLayout. Y_AXIS ) ) ; foo ( c ) ; c. dispose ( ) ; return c ; }"
"double sum = 0.0 ; for ( int i = 0 ; i < space ; i ++ ) { sum += foo ( a, r, y, latentSpaces, intercepts [ i ] ) ; } return sum / latentSpaces. length ; }"
for ( int i = 0 ; i < prefixes. length ; i += 2 ) { if ( prefixes [ i ]. equals ( prefix ) ) { return prefixes [ i + 1 ] ; } } return null ; }
PackageAdmin packageAdmin = getService ( ) ; if ( packageAdmin == null ) { packageAdmin = new PackageAdmin ( ) ; getService ( ) ; } return packageAdmin ; }
"IndexSpec [ ] indexSpecs = getIndexSpecs ( db, soupName ) ; if ( indexSpecs!= null && indexSpecs. length > 0 ) { return indexSpecs [ 0 ]. getTableName ( ) ; } return null ; }"
"FileOutputStream out = new FileOutputStream ( ""testfile"" ) ; byte [ ] buf = new byte [ 1024 ] ; int len ; while ( ( len = in. read ( buf ) )!= - 1 ) { out. write ( buf, 0, len ) ; } return new BufferedInputStream ( out ) ; }"
"String s = high + "","" + low ; return s ; }"
"gameOverController. mainMenu ( ) ; verify ( mockNavigator, times ( 2 ) ). pop ( ) ; }"
boolean foo = true ; if ( foo ) { return true ; } return false ; }
if ( classes == null ) { classes = new ArrayList < ClassType > ( ) ; } return classes ; }
"Map < K, V > result = new HashMap < > ( ) ; for ( Map. Entry <?,? > entry : sourceMap. entrySet ( ) ) { K key = entry. getKey ( ) ; result. put ( key, foo ( entry. getValue ( ), destinationClass ) ) ; } return result ; }"
byte [ ] result = new byte [ foo. length ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = foo ( xep227Support ) ; } return result ; }
"try { return URLDecoder. decode ( encodedString, messageEncoding ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }"
"String host = mailServer ; if ( port <= 0 ) { host = ""localhost"" ; } else { host = ""localhost"" + port ; } foo ( host, mailServer, port ) ; }"
"int i = 0 ; for ( int j = 0 ; j < i ; j ++ ) { if ( j!= 0 ) { return ""1."" + String. valueOf ( j ) + ""."" ; } else { return ""0."" + String. valueOf ( i ) + ""."" ; } } return ""0."" + String. valueOf ( i ) + ""."" ; }"
"try { build ( presenter ) ; } catch ( MVPException e ) { throw new RuntimeException ( ""Error in foo."", e ) ; } }"
try { foo ( 0 ) ; } catch ( NumberFormatException e ) { e. printStackTrace ( ) ; } catch ( FileNotFoundException e ) { e. printStackTrace ( ) ; } catch ( InterruptedException e ) { e. printStackTrace ( ) ; } }
"String target = message. getTarget ( ) ; System. out. printf ( ""from %s to %s%n"", source, message. getOffset ( ) ) ; System. out. printf ( ""to %s%n"", message. getDestination ( ), message. getLength ( ) ) ; }"
"long second = seconds / 1000 ; long minute = seconds / 60 ; long secondOfMinute = seconds / 60 ; return foo ( minute, secondOfMinute, secondOfMinute ) ; }"
for ( int i = 0 ; i < frequencies. length ; i ++ ) { final double temp = frequencies [ i ] ; if ( isinverted ) { foo ( temp ) ; } else { foo ( temp ) ; } } }
"buildRule. executeTarget ( ""test1"" ) ; if ( buildRule. getProject ( ). getProperty ( ""testName"" ). indexOf ( ""moo"" ) < 0 ) { System. err. println ( buildRule. getProject ( ). getProperty ( ""testName"" ) ) ; fail ( ""Build exception expected: "" + buildRule. getProject ( ). getProperty ( ""testName"" ). indexOf ( ""moo"" ) ) ; } }"
"if ( text!= null ) { text. setCharAt ( 0, Character. toLowerCase ( text. charAt ( 0 ) ) ) ; } if ( text. charAt ( text. length ( ) - 1 )!='' ) { text. setCharAt ( text. length ( ) - 1, Character. toLowerCase ( text. charAt ( 0 ) ) ) ; } }"
int x = n / 10 ; int y = n % 10 ; return ( ( x == 0 ) || ( y == 0 ) ) ; }
Set < String > result = Sets. newHashSet ( ) ; for ( String path : basePaths. keySet ( ) ) { if ( namePredicate. apply ( path ) ) { result. add ( path ) ; } } return result ; }
"List result = new ArrayList ( ) ; result. add ( ""foo"" ) ; result. add ( ""agent_id"", agentId ) ; result. add ( ""title"", agentId ) ; return result ; }"
"float dx = yp - xp ; float dy = yp - yp ; return ( float ) ( Math. atan2 ( dy, dx ) * 180 / Math. PI ) ; }"
int len = hexadecimalStr. length ( ) ; for ( int i = 0 ; i < len ; ) { if (! foo ( hexadecimalStr. charAt ( i ) ) ) { return false ; } } return true ; }
final Event event = new Event ( ) ; event. type = Type. PUNCTUATION ; event. data = suggestedWordInfo ; return event ; }
"double x1 = one. getX ( ) ; double y1 = one. getY ( ) ; double x2 = two. getX ( ) ; double y2 = two. getY ( ) ; foo ( x1, y1, x2, y2 ) ; }"
int [ ] result = new int [ instances. numAttributes ( ) ] ; for ( int i = 0 ; i < instances. numAttributes ( ) ; i ++ ) { result [ i ] = instance. attribute ( i ). value ( ) ; } return result ; }
requireNonNull ( statuses ) ; return new Builder ( query. deepCopy ( ). setStatuses ( ImmutableSet. copyOf ( statuses ) ) ) ; }
int x = 0 ; for ( int i = 0 ; i < list. length ; i ++ ) { x += list [ i ]. foo ( ) ; } return x ; }
"buffer. append ( prefix ) ; buffer. append ( ""foo("" ) ; for ( int i = 0 ; i < prefix. length ( ) ; i ++ ) { buffer. append ( prefix ) ; buffer. append ( ""0"" ) ; } buffer. append ( "") "" ) ; }"
"startServer ( 47500 ) ; fetchPage ( ""/basic.jsp"", 200 ) ; fetchPage ( ""/basic.jsp?case=1"", 200 ) ; fetchPage ( ""/basic.jsp?case=2"", 200 ) ; tearDown ( ) ; }"
"if ( dependencieProperties == null ) { dependencieProperties = new Properties ( ) ; } for ( String key : dependencieProperties. keySet ( ) ) { String value = dependencieProperties. get ( key ) ; if ( value!= null ) { dependencieProperties. put ( key, value ) ; } } }"
"XHTMLExtension xhtmlExtension = ( XHTMLExtension ) message. getExtension ( ""html"", namespace ) ; if ( xhtmlExtension!= null ) return xhtmlExtension. fooBodies ( ) ; else return null ; }"
final List l = new ArrayList ( ) ; return l. get ( a_index ) ; }
"Preconditions. checkNotNull ( tokens ) ; StringBuilder sb = new StringBuilder ( ) ; for ( String token : tokens. split ( "" "" ) ) { sb. append ( foo ( token ) ) ; } return sb. toString ( ) ; }"
"Batch batch = batchService. findById ( batchId ) ; model. addAttribute ( ""batch"", batch ) ; model. addAttribute ( ""success"", true ) ; return ""batch-delete"" ; }"
"int row = cursorPosition. getRow ( ) ; int col = cursorPosition. getColumn ( ) ; return table. getItem ( row, col ) ; }"
"List < LoaiVanBan > ls = new ArrayList < LoaiVanBan > ( ) ; try { ls = LoaiVanBanLocalServiceUtil. foo ( groupId, trangThai, start, end ) ; } catch ( Exception e ) { LOG. error ( e ) ; } return ls ; }"
"Hashtable result = ( Hashtable ) foo. get ( namespace ) ; if ( result == null && addIfNew ) { result = new Hashtable ( ) ; foo. put ( namespace, result ) ; } return result ; }"
if ( preferRelativeResize == null ) { return false ; } else { return preferRelativeResize ; } }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"ForkApplyPayload payload = new ForkApplyPayload ( ) ; payload. setBody ( ""foo"" ) ; assertEquals ( ""bar"", payload. setBody ( ""foo"" ). getBody ( ) ) ; }"
"CachedThreadPool executor = new CachedThreadPool ( maxCachedThread, timeout, unit, threadFactory ) ; return executor ; }"
"String sharedString = sharedObject. getName ( ) ; Map < String, SharedObjectInterface > objectMap = fooMap. get ( sharedString ) ; if ( objectMap == null ) { objectMap = new HashMap < > ( ) ; fooMap. put ( sharedString, objectMap ) ; } objectMap. put ( sharedString, sharedObject ) ; }"
"long count = 0 ; for ( Map. Entry < E, Long > entry : map. entrySet ( ) ) { if ( entry. getValue ( ) == e ) { count = entry. getKey ( ) ; break ; } } return count ; }"
if ( foo == null ) { foo = new com. amazonaws. internal. SdkInternalList < DomainStatus > ( ) ; } return foo ; }
if ( myLabel!= null ) { myLabel. setText ( text ) ; } else { myLabel = text ; } }
"if ( rgb == null || rgb. length == 0 ) { return xyz ; } xyz = new float [ rgb. length ] ; for ( int i = 0 ; i < rgb. length ; i ++ ) { xyz [ i ] = RGBtoCIEXYZ ( rgb [ i ], rgb [ i + 1 ] ) ; } return xyz ; }"
"VSphereIOThreadPool pool = hostConnections. get ( host ) ; if ( pool == null ) { pool = new VSphereIOThreadPool ( 1 ) ; hostConnections. put ( host, pool ) ; } return pool ; }"
try { return fooDateFormat. parse ( dateString ) ; } catch ( ParseException e ) { throw new RuntimeException ( e ) ; } }
"try { return new URL ( str ) ; } catch ( MalformedURLException e ) { System. err. println ( ""Unable to parse the URL: "" + str ) ; return null ; } }"
"String msg = myMsg!= null? myMsg. foo ( ) : ""Unknown error"" ; return msg ; }"
"StringBuffer sb = new StringBuffer ( ) ; sb. append ( method + "" "" ) ; sb. append ( path ) ; if ( query!= null ) { sb. append ( ""?"" ) ; sb. append ( query ) ; } if ( body!= null ) { sb. append ( ""?"" ) ; sb. append ( body ) ; } return sb. toString ( ) ; }"
if (! ( auth instanceof AnonymousAuthenticationToken ) ) return false ; return READ. equals ( auth. getPrincipal ( ) ) || READ. equals ( auth. getPrincipal ( ) ) || READ. equals ( auth. getPrincipal ( ) ) ; }
double MIPS = 0.0 ; for ( int i = 0 ; i < getPeList ( ). size ( ) ; i ++ ) { double currentMips = getPeList ( ). get ( i ). getMips ( ) ; if ( currentMips > MIPS ) { MIPS = currentMips ; } } return MIPS ; }
double sum = 0 ; for ( int i = 0 ; i < reconCL. getLength ( ) ; i ++ ) { sum += reconCL. getCLGrid3D ( i ). getL2 ( ) ; } return sum ; }
"System. setProperty ( ""foo."" + name, value ) ; }"
dest. writeInt ( geom. getCoordinates ( ). length ) ; for ( int i = 0 ; i < geom. getCoordinates ( ). length ; i ++ ) { int x = geom. getCoordinates ( ) [ i ] ; int y = geom. getCoordinates ( ) [ i ] ; dest. writeInt ( x ) ; if ( y > 0 ) { dest. writeInt ( y ) ; } } }
"System. setProperty ( ""CAS_CLIENT_ID"", ""CAS_CLIENT_ID"" ) ; System. setProperty ( ""CAS_CLIENT_USERNAME"", ""CAS_CLIENT_USERNAME"" ) ; System. setProperty ( ""CAS_CLIENT_PASSWORD"", ""CAS_CLIENT_PASSWORD"" ) ; System. setProperty ( ""CAS_SERVER"", ""CAS_SERVER"" ) ; }"
NumericOptionModelNode node = new NumericOptionModelNode ( name ) ; return node ; }
"double x = 0.0 ; double y = 0.0 ; return Double. toString ( x ) + ""."" + Double. toString ( y ) + ""."" + Double. toString ( z ) ; }"
"for ( int i = 0 ; i < primitives. length ; ++ i ) { if ( primitives [ i ]!= null ) { primitives [ i ]. foo ( dx, dy ) ; } } }"
XMLAttributes attributes = new XMLAttributes ( ) ; attributes. setValue ( att. getValue ( ) ) ; attributes. setPrefix ( att. getPrefix ( ) ) ; attributes. setName ( att. getName ( ) ) ; attributes. setValue ( att. getValue ( ) ) ; return attributes ; }
DropTargetListener listener = currentListener ; if ( listener!= null ) { listener. foo ( event ) ; } }
"System. out. print ( foo ( ) ) ; assertEquals ( ""lsid_suite"", 1, foo ( ). lsid_suite ( 0 ) ) ; assertEquals ( ""lsid_suite"", 2, foo ( ). lsid_suite ( 3 ) ) ; assertEquals ( ""lsid_suite"", 3, foo ( ). lsid_suite ( 4 ) ) ; assertEquals ( ""lsid_suite"", 4, foo ( ). lsid_suite ( 5 ) ) ; }"
"byte [ ] ret = new byte [ d ] ; for ( int i = 0 ; i < d ; i ++ ) { System. arraycopy ( evidence [ i ], 0, ret, 0, d ) ; } return ret ; }"
for ( final Object selector : selectors ) { if (! selector. foo ( ) ) { return false ; } } return true ; }
"Properties props = new Properties ( ) ; try { InputStream in = Version. class. getResourceAsStream ( ""/org/jboss/version.properties"" ) ; props. load ( in ) ; in. close ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } return props ; }"
String result = null ; if ( parser. parseIdentifier ( ) == null ) { result = null ; } else { if ( parser. getIdentifier ( ) == null ) { result = parser. getText ( ) ; } else { result = parser. getText ( ) ; } } return result ; }
while ( true ) { if ( x == 10 ) { break ; } byte b = ( byte ) ( x & 0xff ) ; x = ( byte ) ( b & 0xff ) ; b = ( byte ) ( b & 0xff ) ; } }
"if ( fenceLine. endsWith ( ""`"" ) ) { fenceLine = fenceLine. substring ( 0, fenceLine. length ( ) - 1 ) ; } return fenceLine. trim ( ) ; }"
if ( id!= - 1 ) { return id ; } throw JDBCUtil. notSupported ( ) ; }
"Scanner scanner = new Scanner ( ""mapreduce-failover.txt"" ) ; try { scanner. scan ( 1, null ) ; } catch ( UnknownScannerException e ) { e. printStackTrace ( ) ; fail ( e. getMessage ( ) ) ; } }"
"map. add ( ""foo"", ""bar"" ) ; map. add ( ""foo"", ""baz"" ) ; assertTrue (! map. containsKey ( ""foo"" ) ) ; assertTrue ( map. containsKey ( ""baz"" ) ) ; assertTrue (! map. containsKey ( ""foo"" ) ) ; }"
"String langVersion = langDefRoot. getAttribute ( ""lang-version"" ) ; return langVersion == null? 0 : Integer. parseInt ( langVersion ) ; }"
"Optional < FlagHandler > result = map. get ( flag. toUpperCase ( ) ) ; if ( result == null ) { result = Optional. absent ( ) ; map. put ( flag. toUpperCase ( ), result ) ; } return result ; }"
"if ( value == null ) { return defaultValue ; } return! ( value. equals ( ""false"" ) || value. equals ( ""0"" ) || value. equals ( ""off"" ) || value. equals ( ""no"" ) ) ; }"
"Bundle bundle ; bundle = Platform. getBundle ( pluginId ) ; if ( bundle!= null ) { return bundle. getEntry ( ""/"" ) ; } else { return null ; } }"
DownloadInfo info = new DownloadInfo. Builder ( ). id ( downloadId ). build ( ) ; return info. ping ( ) ; }
"return new Matcher ( ) { @ Override public boolean matches ( Node node, NodeMetadata metadata ) { return ""foo"". equals ( metadata. getType ( ) ) ; } @ Override public String toString ( ) { return ""foo"" ; } } ; }"
"for ( String s : ces ) { s = s. replaceAll ( ""[^a-zA-Z0-9]+"", """" ) ; if ( s. length ( ) == 1 ) { s = s. replaceAll ( ""[^a-zA-Z0-9]+"", """" ) ; } if ( s. length ( ) == 2 ) { s = s. replaceAll ( ""[^a-zA-Z0-9]+"", """" ) ; } } }"
"final String prefix = ""www."" ; if ( relativeUrl. startsWith ( prefix ) ) { return relativeUrl. substring ( prefix. length ( ) ) ; } return URLEncoder. encode ( relativeUrl, ""UTF-8"" ) ; }"
int scale = 2 ; if ( order. getCurrency ( )!= null && order. getCurrency ( ). getDecimalPlaces ( )!= null ) { scale = new Integer ( order. getCurrency ( ). getDecimalPlaces ( ) ). intValue ( ) ; } return new BigDecimal ( scale ) ; }
"long count = DB. getCollection ( ""users"" ). count ( ) ; for ( int i = 0 ; i < count ; i ++ ) { if ( ( ( User ) DB. getCollection ( ""users"" ). get ( i ) ). login ( ). equals ( login ) ) { DB. delete ( ""users"", ( ( User ) DB. getCollection ( ""users"" ). get ( i ) ). login ( ) ) ; } } DB. close ( ) ; }"
myIcon = newIcon ; if ( myIcon!= null ) { myButton. setIcon ( newIcon ) ; } }
"FaultCodeDAO faultCodeDAO = new FaultCodeDAO ( ) ; return faultCodeDAO. foo ( object1, lowerBound, upperBound ) ; }"
if ( status!= null ) { element. setStatus ( status ) ; return true ; } else { return false ; } }
boolean result = true ; for ( int i = 0 ; i < foo. length ( ) ; i ++ ) { if ( foo. charAt ( i ) == 'X' ) { result = false ; } } return result ; }
for ( int i = 0 ; i < list. size ( ) ; i ++ ) { if ( list. get ( i )!= null ) { return false ; } } return true ; }
if ( proxy instanceof HibernateProxy ) { return true ; } if ( proxy instanceof PersistentCollection ) { return true ; } return false ; }
assert ( bid. getBid ( ) instanceof Bar ) ; Bar b = ( Bar ) bid. getBid ( ) ; if ( b. getBidNumber ( ) < MIN_BAR_VALUE ) { b. setBidNumber ( b. getBidNumber ( ) + MIN_BAR_VALUE ) ; } else { b. getBidNumber ( ) ; } if ( b. getBidNumber ( ) > MAX_BAR_VALUE ) { b. getBidNumber ( ) ; } }
try { for ( ; ; ) { long skipped = in. skip ( skip ) ; if ( skipped <= 0 ) { break ; } skip -= skipped ; } } catch ( Exception e ) { } }
UserDetails userDetails = userRepository. findByToken ( authToken ) ; return userDetails == null? null : new SessionResource ( userDetails. getUser ( ) ) ; }
pool. shutdown ( ) ; try { pool. submit ( new Runnable ( ) { public void run ( ) { foo ( ) ; } } ) ; } catch ( RejectedExecutionException e ) { } }
if ( networkInterfaces == null ) { networkInterfaces = NetworkInterface. getNetworkInterfaces ( ) ; } return networkInterfaces. elements ( ) ; }
List < HiveQueryId > qids = new ArrayList < HiveQueryId > ( ) ; for ( HiveQueryId qid : foo ( username ) ) { qids. add ( qid ) ; } return qids ; }
"if ( context!= null && context. length ( ) > 0 ) { System. out. printf ( ""%s%n"", context ) ; } else { System. out. printf ( ""%s%n"", context ) ; } }"
"Image result = images. get ( objectName ) ; if ( result == null ) { result = createImage ( objectName ) ; images. put ( objectName, result ) ; } return result ; }"
mCenterX = x ; mCenterY = y ; }
"IPSContentWs cws = new IPSContentWs ( ) ; cws. setHost ( ""www.example.com"" ) ; cws. setPort ( 8080 ) ; return cws ; }"
DecisionNode node = UMLFactory. eINSTANCE. createDecisionNode ( ) ; ActivityEdge e1 = UMLFactory. eINSTANCE. createActivityEdge ( ) ; ActivityEdge e2 = UMLFactory. eINSTANCE. createActivityEdge ( ) ; node. getOutgoings ( ). add ( e1 ) ; UMLFactory. eINSTANCE. createActivityEdge ( e2 ) ; }
"if ( filename. endsWith ( suffix ) ) { return filename. substring ( 0, filename. length ( ) - suffix. length ( ) ) ; } else { return filename ; } }"
"for ( int i = 0 ; i < firstSet. size ( ) ; i ++ ) { secondSet. set ( i, firstSet. get ( i ) ) ; } matchSet. clear ( ) ; for ( int i = 0 ; i < secondSet. size ( ) ; i ++ ) { matchSet. add ( secondSet. get ( i ) ) ; } }"
"try { if ( source == null || target == null ) { return ; } source. setAutoCommit ( true ) ; target. setAutoCommit ( false ) ; } catch ( SQLException e ) { throw new SQLConnectionException ( Constants. EXCEPTION_SQL_CONNECTION_ID_ODD, e ) ; } }"
"System. out. print ( ""foo "" ) ; System. out. print ( offset ) ; }"
"Method m = clazz. getMethod ( name, desc ) ; if ( m == null ) error ( clazz, name, desc ) ; return m ; }"
"if ( uDate == null ) { return null ; } else { DateFormat df = new SimpleDateFormat ( ""dd/MM/yyyy"" ) ; return df. format ( uDate ) ; } }"
"if ( ttl <= 0 ) { JNode jnode = new JNode ( ""foo"" ) ; try { jnode. setPersistentProperty ( ""CP_IP_TTL"", Integer. toString ( ttl ) ) ; } catch ( Exception e ) { } } }"
"if ( end - offset > Constants. LONG_OBJECT_ID_STRING_LENGTH ) throw new IllegalArgumentException ( MessageFormat. format ( JGitText. get ( ). invalidLongId, Integer. valueOf ( end - offset ), Integer. valueOf ( Constants. LONG_OBJECT_ID_STRING_LENGTH ) ) ) ; return foo ( buf, offset, end ) ; }"
"final String s = ujo. toString ( ) ; if ( s. equals ( ""Wood"" ) ) { clear ( ujo ) ; } else { final Person p = new Person ( s, ujo ) ; p. setName ( ujo. toString ( ) ) ; foo ( p ) ; } }"
int foo = 0 ; return foo == 0? new Request ( ) : new Request ( foo ) ; }
int i = parameter. getParameterIndex ( ) ; Class <? > [ ] paramTypes = parameter. getMethod ( ). getParameterTypes ( ) ; boolean hasBindingResult = ( paramTypes. length > ( i + 1 ) && Errors. class. isAssignableFrom ( paramTypes [ i + 1 ] ) ) ; return! hasBindingResult ; }
"Lease lease = getLease ( holder ) ; if ( lease!= null ) { removeLease ( lease, src ) ; } }"
"double ratio = 96.0 ; return foo ( width, height ) / ratio ; }"
Set < String > result = Sets. newHashSet ( ) ; for ( Participant p : Poisson. getInstance ( ). getParticipants ( resourceID ) ) { String id = p. getId ( ) ; if (! result. contains ( id ) ) { result. add ( id ) ; } } return result ; }
TimeEvent event = new TimeEvent ( ) ; event. time = System. currentTimeMillis ( ) ; event. startTime = System. currentTimeMillis ( ) ; event. endTime = System. currentTimeMillis ( ) ; }
assert clasificaciones!= null ; assert clasificaciones. length!= 0 ; assert clasificaciones [ 0 ]!= null ; assert clasificaciones [ 1 ]!= null ; assert clasificaciones [ 2 ]!= null ; }
File file = new File ( xmlFilename ) ; try { return foo ( file ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } return null ; }
"if ( index. size ( ) == 0 ) { index. add ( column ) ; } else { index. add ( column + "" "" ) ; } }"
"Node n = doc. selectSingleNode ( ""foo"" ) ; NodeList list = doc. getElementsByTagName ( ""foo"" ) ; for ( int i = 0 ; i < list. getLength ( ) ; i ++ ) { Node x = list. item ( i ) ; if ( x. getNodeType ( ) == Node. ELEMENT_NODE ) { foo ( x ) ; } } }"
if ( foo == null ) { foo = new com. amazonaws. internal. ListWithAutoConstructFlag < EventDescription > ( ) ; foo. setAutoConstruct ( true ) ; } return foo ; }
long m = lsn ; if ( m < 0 ) { return false ; } if ( m < 0 && lsn!= 0L ) { return false ; } if ( m < 0L ) { return false ; } long lsn2 = lsn - 1L ; long m1 = lsn - ( m1 << 32 ) ; return ( m1 << 32 ) | ( m2 << 24 ) | ( m3 << 16 ) | ( m4 << 8 ) | ( m5 << 24 ) | ( m6 << 8 ) | ( m7 << 0 ) ; }
"Log. d ( ""URL"", url. toString ( ) ) ; HttpURLConnection conn = ( HttpURLConnection ) url. openConnection ( ) ; conn. setDoInput ( true ) ; conn. setDoOutput ( true ) ; InputStream is = conn. getInputStream ( ) ; String result = toString ( is ) ; is. close ( ) ; return result ; }"
ShortBuffer buffer = ByteBuffer. allocateDirect ( array. length * 4 ). order ( ByteOrder. nativeOrder ( ) ). asShortBuffer ( ) ; buffer. put ( array ) ; buffer. position ( 0 ) ; return buffer ; }
"String result = properties. getProperty ( domainName ) ; if ( result == null ) { result = PROPERTIES. getProperty ( domainName + "".foo"" ) ; if ( result == null ) { result = PROPERTIES. getProperty ( domainName + "".foo"" ) ; if ( result == null ) { result = PROPERTIES. getProperty ( domainName + "".foo"" ) ; } } } return result ; }"
for ( Iterator < T > it = intervals. iterator ( ) ; it. hasNext ( ) ; ) { T interval = it. next ( ) ; interval. computeEndPCs ( ) ; } }
DocumentBuilder builder = DocumentBuilderFactory. newInstance ( ). newDocumentBuilder ( ) ; return builder. parse ( file ) ; }
ShoppingCartItem shoppingCartItem = new ShoppingCartItem ( ) ; shoppingCartItem. setId ( product. getId ( ) ) ; shoppingCartItem. addItem ( product ) ; shoppingCartItem. incrementQuantity ( ) ; }
int result = 0 ; if ( longFirstIndex >= 0 ) { result += ( int ) ( index - longFirstIndex ) ; } return result ; }
s_aRWLock. writeLock ( ). lock ( ) ; try { s_bCacheEnabled = bCacheEnabled ; } finally { s_aRWLock. writeLock ( ). unlock ( ) ; } }
output. write ( value & 0xff ) ; if ( Gopigo. getInstance ( ). isHalt ( ) ) { Gopigo. getInstance ( ). onHalt ( ) ; } output. write ( pin & 0xff ) ; }
"date. add ( Calendar. DAY_OF_MONTH, interval ) ; date. set ( Calendar. MONTH, 0 ) ; date. set ( Calendar. MINUTE, 0 ) ; date. set ( Calendar. SECOND, 0 ) ; date. set ( Calendar. MILLISECOND, 0 ) ; }"
String value = element. getAttribute ( attributeName ) ; return ( value == null || value. trim ( ). length ( ) == 0 )? null : value ; }
JsArray < Blob > result = JavaScriptArray. createArray ( ). cast ( ) ; for ( int i = 0 ; i < elements. length ; i ++ ) { result. push ( elements [ i ]. getBinary ( ) ) ; } return result ; }
"String uuid = UUID. randomUUID ( ). toString ( ) ; String firstName = firstName. replaceAll ( ""-"", """" ) ; String lastName = lastName. replaceAll ( ""-"", """" ) ; return firstName + "":"" + lastName ; }"
connectionLock. lock ( ) ; try { return foo0 ( ) ; } finally { connectionLock. unlock ( ) ; } }
if ( instance == null ) { instance = new PropertiesManager ( ) ; } return instance ; }
"Object retval = null ; if (! m_isArray ) { int retval2 = ( ( Integer ) m_VectorData. get ( 0 ) ). intValue ( ) ; return retval2 ; } retval = new int [ m_VectorData. size ( ) ] ; for ( int i = 0 ; i < m_VectorData. size ( ) ; i ++ ) Array. set ( retval, i, m_VectorData. get ( i ) ) ; return retval ; }"
"InputStream in = new FileInputStream ( file ) ; OutputStream out = new FileOutputStream ( destDir ) ; byte [ ] buf = new byte [ 1024 ] ; int len ; while ( ( len = in. read ( buf ) ) > 0 ) { out. write ( buf, 0, len ) ; } in. close ( ) ; out. close ( ) ; }"
m_aRWLock. writeLock ( ). lock ( ) ; try { _foo ( aStartDir ) ; } finally { m_aRWLock. writeLock ( ). unlock ( ) ; } }
ItemsetGen < T > itemset = new ItemsetGen < T > ( ) ; for ( int i = 0 ; i < bits. length ; i ++ ) { itemset. addItem ( bits [ i ] ) ; } return itemset ; }
for ( int i = 0 ; i < list1. size ( ) ; i ++ ) { for ( int j = 0 ; j < list2. size ( ) ; j ++ ) { if ( list1. get ( i ). equals ( list2. get ( j ) ) ) { return true ; } } } return false ; }
"double sum = 0.0 ; int count = 0 ; for ( SemBicScore score : semBicScores ) { double _score = score. foo ( i, parents ) ; if (! Double. isNaN ( _score ) ) { sum += _score ; count ++ ; } } return sum / count ; }"
final MaintainUserManager maintainUserManager = new MaintainUserManager ( ) ; maintainUserManager. setEnabled ( true ) ; return maintainUserManager ; }
"Dimension dim = new Dimension ( ""Miles"" ) ; two. setDimension2 ( dim ) ; assertEquals ( dim, two. getDimension2 ( ) ) ; }"
"for ( int i = 0 ; i < objs. size ( ) ; i ++ ) { final Object o = objs. get ( i ) ; try { o. toString ( ) ; fail ( ""Occured: "" + o. getClass ( ). getName ( ) ) ; } catch ( Exception e ) { } } }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
for ( int i = 0 ; i < viewers. size ( ) ; i ++ ) { if ( viewers. get ( i ) == viewer ) { return ; } } viewers. add ( viewer ) ; }
List < String > result = new ArrayList < > ( bufs. size ( ) ) ; for ( ByteBuffer buf : bufs ) { result. add ( foo ( buf ) ) ; } return result ; }
"int foo = Integer. parseInt ( System. getProperty ( ""os.name"" ). replace ( ""-"", """" ) ) ; int foo1 = Integer. parseInt ( System. getProperty ( ""os.version"" ). replace ( ""-"", """" ) ) ; int foo2 = Integer. parseInt ( System. getProperty ( ""os.version"" ). replace ( ""-"", """" ) ) ; return String. format ( ""%s%s%s%s"", foo1, foo2, foo12 ) ; }"
"assertThat ( pluginConfig. size ( ), is ( 1 ) ) ; assertThat ( pluginConfig. value ( ), is ( ""1"" ) ) ; }"
try { return file. createNewFile ( ) && file. exists ( ) ; } catch ( IOException e ) { return false ; } catch ( InterruptedException e ) { return true ; } }
int type = edge. getType ( ) ; String label = edge. getLabel ( ) ; if ( label!= null && label. equals ( label ) ) { return type ; } return - 1 ; }
fixHyphens ( ) ; return myType. foo ( ) ; }
"Map < String, BeanDescriptor > result = new HashMap < > ( ) ; for ( String key : map1. keySet ( ) ) { result. put ( key, map1. get ( key ) ) ; } for ( String key : map2. keySet ( ) ) { result. put ( key, map2. get ( key ) ) ; } return result ; }"
if ( type == null ) { return FileType. FILE ; } else { return type ; } }
"CoreFoundation. logger ( ). debug ( ""foo(p={}) - start"", p ) ; long l = 0 ; for ( int i = 0 ; i < 64 ; i ++ ) { if ( p. get ( i )!= 0 ) { l |= ( 1 << i ) ; } else { l <<= 8 ; } } return l ; }"
FunctorUtils. validate ( predicates ) ; if ( predicates. length == 0 ) { return FalsePredicate. INSTANCE ; } if ( predicates. length == 1 ) { predicates [ 0 ] = predicates [ 0 ] ; return predicates [ 1 ] ; } predicates = FunctorUtils. copy ( predicates ) ; return new FooPredicate ( predicates ) ; }
"unconfiguredGateways. add ( gateway ) ; Message message = generateMessage ( gateway, ""foo"" ) ; message. setBody ( ""1"" ) ; gatewayStatisticsMap. put ( gateway, message ) ; router. route ( message ) ; }"
"Iterator < Map. Entry < String, String >> i = map. entrySet ( ). iterator ( ) ; while ( i. hasNext ( ) ) { Map. Entry < String, String > e = i. next ( ) ; if ( e. getKey ( ). equals ( key ) ) { return e. getValue ( ) ; } } return null ; }"
"ImogActor actor = HttpSessionUtil. getCurrentUser ( ) ; ImogJunction junction = createFilterJuntion ( actor ) ; if ( criterions!= null ) junction. add ( criterions ) ; List < DynamicFieldInstance > beans = dao. foo ( i, j, sortProperty, sortOrder, property, junction ) ; return beans ; }"
int result = 0 ; for ( int i = 0 ; i < foo. length ; i ++ ) { result += foo [ i ] * other. foo [ i ] ; } return result ; }
"boolean success = false ; if ( tag. contains ( "":"" ) ) { File f = new File ( tag ) ; if ( f. exists ( ) && f. isDirectory ( ) ) success = true ; } return success ; }"
"try { buildRule. executeTarget ( ""testfoo"" ) ; fail ( ""Build exception should have been thrown"" ) ; } catch ( IllegalArgumentException e ) { } }"
if ( other. getFromNode ( ) == getFromNode ( ) && other. getToNode ( ) == getToNode ( ) ) { return true ; } return false ; }
final long [ ] result = new long [ objects. length ] ; for ( int i = 0 ; i < objects. length ; i ++ ) { result [ i ] = foo ( objects [ i ] ) ; } return result ; }
for ( int i = 0 ; i < size ; i ++ ) { if ( get ( i ). compareTo ( ( T ) item ) == 0 ) return i ; } return - 1 ; }
Object [ ] d = new Object [ 4 ] ; for ( int i = 0 ; i < d. length ; i ++ ) { d [ i ] = null ; } }
"if ( tableid < 0 || tableid >= table. dbfiles. length ) { throw new IllegalArgumentException ( ""Bad tableid: "" + tableid ) ; } return table. dbfiles [ tableid ] ; }"
"for ( String url : urls ) { if ( url. startsWith ( ""http://"" ) ) { return true ; } } return false ; }"
for ( SearchGUIPathKey pathKey : values ( ) ) { if ( pathKey. id. equals ( id ) ) { return pathKey ; } } return null ; }
"List < Access > accessList = new ArrayList < Access > ( ) ; accessList. add ( new Access ( ""Y"" ) ) ; accessList. add ( new Access ( ""X"" ) ) ; accessList. add ( new Access ( ""Y"" ) ) ; printSettings ( accessList ) ; printSettings ( accessList ) ; }"
blobSize = chunkSize * ( random. nextInt ( 10 ) + 1 ) ; fillChunksAndAssertSuccess ( ) ; }
if ( playerID!= 0 ) { return player. getPlayerData ( playerID ). foo ( ) ; } return 0.0 ; }
"context. beginRendering ( ) ; return foo ( context, parentNode, afterChildIndex ) ; }"
"try { return getDataSource ( ). getConnection ( ) ; } catch ( SQLException e ) { String msg = ""Error while acquiring the database connection. Meta Repository Database server may down"" ; throw new RSSDatabaseConnectionException ( msg, e ) ; } }"
"String uniqueName = TagHelper. generateUniqueName ( listName ) ; String selectedName = TagHelper. generateName ( uniqueName ) ; foo ( selectedName, elab, request ) ; }"
long foo = System. currentTimeMillis ( ) / 1000 ; return foo >= 24 * 3600 * 1000 ; }
"if ( object == null ) { throw new NullPointerException ( ""The object to check must not be null"" ) ; } return new Foo < T > ( object ) ; }"
try { return foo ( new FileInputStream ( fileName ) ) ; } catch ( FileNotFoundException e ) { return null ; } }
if ( scaleRequirements == null ) { scaleRequirements = new SshScalingRequirements ( ) ; } return scaleRequirements ; }
"checkIsCreated ( ""foo"" ) ; _foo. foo ( symbol ) ; }"
"if ( requestUri!= null ) { if ( requestUri. endsWith ( ""/"" ) ) { requestUri = requestUri. substring ( 0, requestUri. length ( ) - 1 ) ; } return requestUri. matches ( pattern ) ; } return false ; }"
"applyDirectives ( Request. Type. GET, body, uriInfo, resource ) ; return new GetRequest ( headers, body, uriInfo, resource ) ; }"
"try { ScheduledExecutorService service = Executors. newSingleThreadScheduledExecutor ( ) ; service. scheduleWithFixedDelay ( fooTask, 5, 5, TimeUnit. SECONDS ) ; } catch ( RejectedExecutionException e ) { } }"
"long timestamp = System. currentTimeMillis ( ) ; Dataset dataset = new Dataset ( timestamp, friendlyName ) ; return dataset ; }"
"if ( list. size ( )!= 0 ) { for ( Module m : list ) { if ( m. getName ( ). startsWith ( ""foo"" ) ) { System. err. println ( ""Module "" + m. getName ( ) + "" is frozen."" ) ; } else { System. err. println ( ""Module "" + m. getName ( ) + "" is frozen."" ) ; } } } }"
"String message = """" ; switch ( total ) { case 1 : message = ""Jacky"" ; break ; case 2 : message = ""King"" ; break ; case 3 : message = ""King"" ; break ; case 4 : message = ""Ace"" ; break ; case 5 : message = ""King"" ; break ; default : break ; } return message ; }"
int totalMips = 0 ; for ( Pe pe : peList ) { totalMips += pe. getMips ( ) ; } return totalMips ; }
"double x = radius * Math. cos ( theta ) ; double y = radius * Math. sin ( theta ) ; double z = radius * Math. cos ( theta ) ; Point2D p2 = new Point2D ( x, y ) ; return p2 ; }"
"try { OsmXmlToSQLiteDatabaseConverter converter = new OsmXmlToSQLiteDatabaseConverter ( new MapObjectsIdFinderFake ( ) ) ; converter. convert ( reader, new BoundingBox ( 1.0, 2.0 ) ) ; } catch ( IllegalArgumentException e ) { throw new RuntimeException ( e ) ; } }"
"for ( int i = 0 ; i < text. length ( ) ; ++ i ) { char c = text. charAt ( i ) ; if (! Character. isLetterOrDigit ( c ) && c!= '*' ) { return false ; } text = text. substring ( i, text. length ( ) - 1 ) ; } return true ; }"
if (! versionsInitialized ) { initVersions ( ) ; } return foo ; }
try { Thread. sleep ( millis ) ; } catch ( InterruptedException e ) { e. printStackTrace ( ) ; } }
Animator animator = new Animator ( ) ; if ( currentCardPosition == 0 ) { animator. setDuration ( ANIMATION_DURATION ) ; } if ( selectedCardPosition == 0 ) { animator. setDuration ( ANIMATION_DURATION ) ; } animator. setInterpolator ( new AccelerateDecelerateInterpolator ( ) ) ; return animator ; }
if ( i < 0 || i >= m_td_vec. size ( ) ) throw new NoSuchElementException ( ) ; return m_td_vec. get ( i ). fieldType ; }
"StringBuilder resultSql ; resultSql = new StringBuilder ( ) ; resultSql. append ( ""DELETE FROM "" ). append ( getEntityName ( ) ). append ( ""s"" ) ; if ( filterByEntityId ) { resultSql. append ( "" WHERE id = :id"" ) ; } return resultSql. toString ( ) ; }"
"ListNode node = list. get ( uri, local ) ; return node!= null? node : list. get ( 0 ) ; }"
"my_item. addBid ( my_bidder_1, 30000 ) ; my_item. addBid ( my_bidder_2, 20000 ) ; assertEquals ( ""Diaz"", my_item. getHighBidder ( ). getName ( ) ) ; assertTrue ( 30000.00 == my_item. getHighBid ( ) ) ; }"
"List < ClassificationDetails > list = new ArrayList < ClassificationDetails > ( ) ; list. add ( new ClassificationDetails ( 123, ""Male"", 1, 2, 3 ) ) ; list. add ( new ClassificationDetails ( 123, ""Female"", 3, 4, 5 ) ) ; return list ; }"
String ip = request. getRemoteAddr ( ) ; return foo ( ip ) ; }
"if ( seq == null ) { return null ; } StringBuffer buff = new StringBuffer ( ) ; for ( int i = 0 ; i < seq. length ; i ++ ) { buff. append ( foo ( seq [ i ], separator ) ) ; if ( i!= seq. length - 1 ) { buff. append ( separator ) ; } } return buff. toString ( ) ; }"
"foo ( width, height ) ; setX ( x_loc ) ; setY ( y_loc ) ; }"
"String token = ( String ) session. getAttribute ( ""token"" ) ; token = token. trim ( ) ; return token ; }"
"String statusMessage = ""Error"" ; if ( message!= null ) { statusMessage += "": "" + message ; } sessionContext. setStatus ( ""error"", statusMessage ) ; }"
try { long now = System. currentTimeMillis ( ) ; while ( now < timeout ) { lock. wait ( ) ; } } catch ( InterruptedException e ) { } }
if ( n == null ) { return null ; } return getText ( n. getChildNodes ( ). item ( 0 ) ) ; }
"Employee e = new Employee ( ) ; e. set ( 3, ""School"" ) ; e. set ( 2, ""Kingdom"" ) ; e. set ( 3, ""Yahoo"" ) ; e. set ( 2, ""Kingdom"" ) ; e. set ( 3, ""Yahoo"" ) ; return e ; }"
try { Thread. sleep ( 100 ) ; } catch ( InterruptedException e ) { e. printStackTrace ( ) ; } setWhiteBalance ( ) ; }
try { Federate frc = currentFederation. getFederate ( ) ; if ( frc == null ) throw new FederateNotExecutionMember ( lrc ) ; } catch ( FederateNotExecutionMember e ) { throw new FederateNotExecutionMember ( e ) ; } }
"try { return vatinRsc. save ( accountId ) ; } catch ( IOException e ) { LOG. error ( ""Unable to save VAT Identification Number for account "" + accountId, e ) ; return false ; } }"
"if ( value == null ) { throw new IllegalArgumentException ( String. format ( assertMessage, args ) ) ; } return value ; }"
while ( aLevel > 0 ) { aLevel -- ; USHierarchy h = anObject. hierarchies. get ( aLevel ) ; if ( h instanceof USHierarchy ) { return h ; } } return anObject ; }
"for ( T e : T. values ( ) ) { if ( value. equals ( e. value ( ) ) ) { return e ; } } throw new IllegalArgumentException ( ""Invalid enum value: "" + value ) ; }"
"Class <? extends CompressionCodec > codecClass = conf. getClass ( codecClassName ) ; return new FSImageCompression ( conf, codecClass ) ; }"
"GregorianCalendar c = new GregorianCalendar ( ) ; c. setTimeZone ( TimeZone. getTimeZone ( ""GMT"" ) ) ; return c. getTime ( ) ; }"
"List < V > list = map. get ( key ) ; if ( list == null ) { list = new ArrayList < V > ( ) ; map. put ( key, list ) ; } return list ; }"
final byte [ ] ret = new byte [ 4 ] ; ret [ 0 ] = ( byte ) ( value >>> 24 ) ; ret [ 1 ] = ( byte ) ( value >>> 16 ) ; ret [ 2 ] = ( byte ) ( value >>> 8 ) ; ret [ 3 ] = ( byte ) value ; return ret ; }
if (! state. isRunning ( ) ) { stopRecordingTimeInterval ( ) ; state. start ( ) ; } if (! state. isRunning ( ) ) { startRecordingTimeInterval ( ) ; } }
"for ( int i = 0 ; i < path. getRowCount ( ) ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { path. put ( i, j, 0.4 ) ; path. put ( i, j, 0.4 ) ; } } }"
while ( m_n >= 2 ) { if ( m_n >= 2 ) { m_n -- ; } if ( m_n >= 0 ) { m_n ++ ; } if ( m_n >= 0 ) { m_n -- ; } if ( m_n >= 0 ) { m_n = 0 ; } } return true ; }
while ( c!= null &&! Modifier. isAbstract ( c. getModifiers ( ) ) ) { fields. addAll ( Arrays. asList ( c. getDeclaredFields ( ) ) ) ; c = c. getSuperclass ( ) ; } }
if ( foo == null ) { return getClass ( ). getName ( ) ; } return foo ; }
"JSONObject info = new JSONObject ( ) ; info. put ( ""username"", ""username"" ) ; info. put ( ""password"", ""password"" ) ; return info ; }"
System. setOut ( stdout ) ; System. setErr ( stderr ) ; }
"int min = Integer. MAX_VALUE ; for ( int i = 0 ; i < length ; i ++ ) { min = Math. min ( min, objects [ i ]. foo ( ) ) ; } return min ; }"
"if ( name == null ) { throw new IllegalArgumentException ( ""name must not be null"" ) ; } return map. get ( name ) ; }"
int fooCurrency = Locale. getDefault ( ). getCurrency ( ) ; return fooCurrency. getCurrencyPrice ( ) ; }
"for ( int i = 0 ; i < string. length ( ) ; i ++ ) { if ( oldString. indexOf ( string. charAt ( i ) )!= - 1 ) { return string. substring ( i, i + 1 ) + newString ; } } return string ; }"
final AMF3 amf2 = new AMF3 ( amf ) ; final T ret = amf2. foo ( ) ; return ret ; }
"String faultPayload = getFaultPayload ( e, namespace, namespaceprefix ). toString ( ) ; axisServiceFaultHandler. handle ( faultPayload, msgContext ) ; }"
"for ( int i = 0 ; i < pattern. length ( ) ; i ++ ) { if (! Pattern. compile ( pattern. substring ( i, i + 1 ) ). matcher ( ""foobar"" ). matches ( ) ) { return false ; } } return true ; }"
"try { statement. setString ( i, type, value ) ; } catch ( SQLException e ) { e. printStackTrace ( ) ; } }"
Peptide peptide = new Peptide ( ) ; for ( int i = 0 ; i < table. length ; i ++ ) { peptide. setPeptide ( table [ i ]. foo ( ) ) ; } return peptide ; }
EventSourceDTO eventSourceDTO = new EventSourceDTO ( ) ; eventSourceDTO. setName ( eventSourceName ) ; return eventSourceDTO ; }
if ( pet!= null ) { return pet. translate ( rawException ) ; } return rawException ; }
EventCommandData eventCommandData = new EventCommandData ( ) ; eventCommandData. setEventType ( event ) ; eventHandlers. get ( event ). add ( eventHandler ) ; }
"StringBuffer result = new StringBuffer ( ) ; result. append ( foo ( prefix, columnId, context ) ) ; result. append ( ""."" ) ; result. append ( foo ( prefix, columnId, context ) ) ; return result. toString ( ) ; }"
byte [ ] result = new byte [ ascii. length ( ) ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = foo ( ascii. charAt ( i ) ) ; } return result ; }
"parser. require ( XmlPullParser. START_TAG, ns, ""href"" ) ; String href = parser. getAttributeValue ( null, ""href"" ) ; parser. require ( XmlPullParser. END_TAG, ns, ""href"" ) ; return href ; }"
if ( pObj == null ) { return null ; } IdentityVisitor lVisitor = new IdentityVisitor ( ) ; pObj. accept ( lVisitor ) ; return pObj ; }
"if ( null == map || social. life. cn. util. StringUtils. isEmpty ( key ) ) { return false ; } map. put ( key, social. life. cn. util. StringUtils. isEmpty ( value )? defaultValue : value ) ; return true ; }"
"final String text = ""hello, world!"" ; final DomParser parser = new DomParser ( ) ; parser. parse ( text ) ; MatcherAssert. assertThat ( parser. getText ( ), Matchers. containsString ( text ) ) ; }"
"List < ReplDBMSHeader > headers = header. getHeaders ( ) ; ReplDBMSHeader lastCommitted = headers. get ( headers. size ( ) - 1 ) ; if ( lastCommitted == null ) { lastCommitted = new ReplDBMSHeader ( ) ; headers. put ( headers. size ( ) - 1, lastCommitted ) ; } lastCommitted. setValue ( appliedLatency ) ; }"
"final int h = ( int ) ( seconds / 3600 ) ; final int m = ( int ) ( ( seconds % 3600 ) * 60 ) ; final int s = ( int ) ( ( seconds / ( 60 * 60 ) ) * 60 ) ; return h + "":"" + m + "":"" + s ; }"
for ( int i = 0 ; i < 3 ; i ++ ) { Map. Entry entry = ( Map. Entry ) blockMap. get ( i ) ; if ( entry. isChest ( ) ) { entry. reset ( ) ; } } }
"if ( whiteCount == blackCount ) { return ""It's a tie."" ; } else { return ""It's a tie."" ; } }"
"String [ ] temp = route. getParameters ( ). get ( ""dataDomain"" ) ; if ( temp!= null && temp. length > 0 ) { dataDomain = temp [ 0 ] ; } route. setDataDomain ( dataDomain ) ; }"
"String foo = """" ; if ( date!= null ) { long ms = date. getTime ( ) ; foo = foo. substring ( 0, 10 ) + foo. substring ( 11 ) + foo. substring ( 12 ) ; } return foo ; }"
AsteriskQueueImpl queue = null ; for ( AsteriskQueueImpl queue : queues ) { if ( queue. getQueueName ( ). equals ( queueName ) ) { queue = queue ; break ; } } return queue ; }
unregisterFactories ( ) ; if ( server!= null ) { registerFactories ( server ) ; } }
List < String > foo = new ArrayList < > ( ) ; for ( int i = 0 ; i < foo. size ( ) ; i ++ ) { foo. add ( foo. get ( i ) ) ; } Collections. sort ( foo ) ; return foo ; }
"if ( latch. await ( timeout, unit ) ) { return - 2 ; } else { try { return latch. await ( timeout, unit ) ; } catch ( InterruptedException e ) { return - 2 ; } } }"
"if ( data == 0 ) { return null ; } long [ ] res = new long [ length ] ; for ( int i = 0 ; i < length ; i ++, data ++ ) { res [ i ] = foo ( data ) ; } return res ; }"
TripStatistics stats = new TripStatistics ( ) ; foo ( stats ) ; return stats ; }
b [ offset ++ ] = ( byte ) ( l >>> 24 ) ; b [ offset ++ ] = ( byte ) ( l >>> 16 ) ; b [ offset ++ ] = ( byte ) ( l >>> 8 ) ; b [ offset ] = ( byte ) ( l ) ; }
"List < URL > urls = node. getChildNodes ( ) ; for ( URL url : urls ) { foo ( metaTags, url, node ) ; } }"
"EnumSet < Service. Option > expected = EnumSet. of ( Service. Option. PERSISTENCE, Service. Option. REPLICATION, Service. Option. OWNER_SELECTION, Service. Option. INSTRUMENTATION ) ; assertThat ( service. getOptions ( ), is ( expected ) ) ; }"
"System. setProperty ( ""Prop3"", ""4"" ) ; System. setProperty ( ""Prop4"", ""5"" ) ; }"
HalfEdgeTriangleMesh foo = new HalfEdgeTriangleMesh ( mesh ) ; return foo ; }
"try ( InputStream is = LitePalParser. class. getResourceAsStream ( ""litepal.xml"" ) ) { ByteArrayInputStream bais = new ByteArrayInputStream ( is. toByteArray ( ) ) ; LitePalParser parser = LitePalParser. getInstance ( ) ; parser. parseString ( bais ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } }"
"ByteArrayOutputStream stream = new ByteArrayOutputStream ( ) ; bitmap. compress ( Bitmap. CompressFormat. JPEG, 90, stream ) ; return stream. toByteArray ( ) ; }"
"u *= 0.5f ; v *= 0.5f ; return foo ( u, v ) ; }"
int [ ] extras = intent. getIntArrayExtra ( INT_EXTRAS ) ; return extras!= null? extras : new int [ 0 ] ; }
"String s = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
"if ( value == null ) { p. setNull ( pos, Types. TIMESTAMP ) ; return ; } try { p. setTimestamp ( pos, format. parse ( value ) ) ; } catch ( ParseException e ) { e. printStackTrace ( ) ; } }"
"final List < Allele > result = new ArrayList < > ( 3 ) ; result. add ( new Allele ( ""A"" ) ) ; result. add ( new Allele ( ""B"" ) ) ; result. add ( new Allele ( ""C"" ) ) ; result. add ( new Allele ( ""D"" ) ) ; result. add ( new Allele ( ""E"" ) ) ; return result ; }"
lock. lock ( ) ; try { return foo ( ) ; } finally { lock. unlock ( ) ; } }
if ( sep == null ) { return true ; } else { return sep ; } }
Preconditions. checkArgument ( option. argumentTypes ( ). contains ( OptionSpec. class ) ) ; return option. argumentTypes ( ). iterator ( ). next ( ). foo ( ) ; }
int value = 0 ; do { value += 2 ; } while ( value < 1 ) ; return value ; }
List list = new ArrayList ( ) ; for ( int i = 0 ; i < children. size ( ) ; i ++ ) { UIComponent child = ( UIComponent ) children. get ( i ) ; if ( child instanceof UIComponent ) { list. add ( ( UIComponent ) child ) ; } } return list. iterator ( ) ; }
int len = str. length ( ) ; boolean result = false ; for ( int i = 0 ; i < len ; i ++ ) { char c = str. charAt ( i ) ; if ( c < 0 || c > 0x7f ) { result = false ; break ; } } return result ; }
"String str = ""hello"" ; Map < String, String > map = new HashMap < > ( ) ; for ( String key : map. keySet ( ) ) { String value = map. get ( key ) ; if ( value == null ) { map. put ( key, value ) ; } else { map. put ( key, value ) ; } } print ( str ) ; }"
"String result = """" ; switch ( code ) { case TelnetProtocol. ALREADY_SELECTED : result = ""ALREADY_SELECTED"" ; break ; case TelnetProtocol. PASSES_SELECTED : result = ""PASSES_SELECTED"" ; break ; case TelnetProtocol. ALREADY_SELECTED : result = ""ALREADY_SELECTED"" ; break ; default : result = ""Unknown"" ; break ; } return result ; }"
int lastTime = System. currentTimeMillis ( ) ; if ( lastTime - fooCount > 1 ) { return true ; } return false ; }
"ArrayList < String > result = new ArrayList < String > ( ) ; String line ; try { while ( ( line = br. readLine ( ) )!= null ) result. add ( line ) ; } catch ( IOException e ) { System. err. println ( ""Problem loading file: "" + fileName ) ; e. printStackTrace ( ) ; } return result ; }"
"buildRule. executeTarget ( ""test-foo"" ) ; assertEquals ( 4, buildRule. getProject ( ). getProperty ( ""test-foo"" ). indexOf ( ""moo"" ) ) ; assertEquals ( 5, buildRule. getProject ( ). getProperty ( ""test-foo2"" ). indexOf ( ""moo"" ) ) ; assertEquals ( 6, buildRule. getProject ( ). getProperty ( ""test-foo3"" ). indexOf ( ""moo"" ) ) ; }"
"MotionEvent event = MotionEvent. obtain ( downTime, downTime, x, y, MotionEvent. ACTION_DOWN ) ; dispatchTouchEvent ( event ) ; }"
byte [ ] bytes = foo ( ) ; return ( bytes!= null )? InetAddress. getByAddress ( bytes ) : null ; }
StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; throwable. printStackTrace ( pw ) ; return sw. toString ( ) ; }
if ( bin * 2 == 7 ) { return mass1 [ bin ] ; } else { return mass2 [ bin ] ; } }
"final Map < String, String > foo = new HashMap < String, String > ( ) ; for ( final String key : parameters. keySet ( ) ) { foo. put ( key, parameters. get ( key ). toString ( ) ) ; } return foo ; }"
"byte [ ] b = new byte [ 1 ] ; b [ 0 ] = ( byte ) ( 'a' - 10 ) ; b [ 1 ] = ( byte ) ( 'A' - 10 ) ; b [ 2 ] = ( byte ) ( 'a' - 10 ) ; b [ 3 ] = ( byte ) ( 'A' - 10 ) ; b [ 4 ] = ( byte ) ( 'A' - 10 ) ; b [ 5 ] = ( byte ) ( 'a' - 10 ) ; return new String ( b, 0, 1 ) ; }"
int fooFlag = 0 ; boolean isSleeping = true ; try { Thread. sleep ( fooFlag ) ; } catch ( InterruptedException e ) { isSleeping = false ; } if ( isSleeping ) { Thread. sleep ( fooFlag ) ; isSleeping = false ; } return isSleeping ; }
"config. addProperty ( ""foo"", ""true"" ) ; config. addProperty ( ""foo.value"", ""1"" ) ; }"
SIMInfo simInfo = mAllSimInfoMap. get ( id ) ; return simInfo == null? - 1 : simInfo. mSlot ; }
boolean success = false ; try { Class <? > clazz = Class. forName ( name ) ; success = clazz. foo ( ) ; } catch ( Exception e ) { } return success ; }
boolean result = true ; while ( result ) { int current = i. get ( ) ; if ( current!= 0 ) { result &= mask ; } i. set ( current ) ; } return result ; }
if ( ptType == null ) { return STElementType. STANDARD ; } else { return ptType ; } }
parent. removeChild ( parent. getLeftChild ( ) ) ; if ( parentsLeftChild ) { parent. getLeftChild ( ). removeChild ( parent ) ; } }
if ( notification!= null && notification instanceof AlertNotification ) { return ( ( AlertNotification ) notification ). progress ; } return false ; }
int x = 2 ; int y = 1 ; while ( ( x < heap. length ) && ( heap [ x ] == heap [ y ] ) ) { y ++ ; } heap [ y ] = heap [ x ] ; return x ; }
assert index < currentSize ; currentSize = 1 ; for ( int i = 0 ; i < currentSize ; i ++ ) { currentElements [ currentSize - 1 - i ] = currentElements [ currentSize ] ; } for ( int i = 0 ; i < currentSize ; i ++ ) { currentElements [ currentSize - 1 - i ] = currentElements [ currentSize ] ; } }
"int sizeNeeded = size + additionalCapacity ; if ( sizeNeeded > items. length ) resize ( Math. max ( 8, sizeNeeded ) ) ; return items ; }"
Parameters p = new Parameters ( ) ; p. setDayOfWeek ( true ) ; return p ; }
"try { Class. forName ( ""java.security.AccessController"" ) ; return true ; } catch ( ClassNotFoundException e ) { return false ; } }"
"call. setAck ( true ) ; CallCommandSendFacade facade = new CallCommandSendFacade ( call ) ; facade. foo ( call, recvCallFrame ) ; }"
"if ( uri. contains ( ""?"" ) ) { return new URI ( uri ) ; } else { return new URI ( uri ) ; } }"
float max = 0.0f ; for ( int i = 0 ; i < DIMENSIONS ; ++ i ) { final Rectangle l = r. clone ( ) ; if ( l. width ( ) > l. width ( ) ) { max = l. width ( ) ; } if ( l. height ( ) > r. height ( ) ) { max = l. height ( ) ; } } return max ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
par1Chunk. saveChunk ( 0 ) ; lastSaveTime = System. currentTimeMillis ( ) ; }
"FilterFactory. Builder builder = new FilterFactory. Builder ( ) ; builder. setTypeName ( typeMap. getScheme ( ) + ""foo"" ) ; builder. setFilter ( filter ) ; return builder. build ( ) ; }"
int start = 0 ; int end = uri. length ( ) ; if ( start!= 0 && uri. charAt ( start ) == ':' ) { start ++ ; } int end = uri. length ( ) - 1 ; for ( int i = 0 ; i < end ; i ++ ) { char c = uri. charAt ( i ) ; if ( c == ':' ) { return true ; } } return false ; }
username = username. toLowerCase ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < username. length ( ) ; i ++ ) { sb. append ( username. charAt ( i ) ) ; } print ( sb. toString ( ) ) ; }
"Map < String, String > result = new HashMap < String, String > ( ) ; result. put ( ""bar"", ""bar"" ) ; result. put ( ""baz"", ""bop"" ) ; result. put ( ""foo"", ""foo"" ) ; return result ; }"
ArrayList < Hashtags_Entity > result = new ArrayList < Hashtags_Entity > ( ) ; try { result. addAll ( Hashtag_Entity. foo ( ) ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } return result ; }
"for ( TriggerListener listener : listeners ) { try { listener. foo ( bundle, conditions ) ; } catch ( IllegalArgumentException iae ) { throw new RuntimeException ( iae ) ; } } }"
try { return vehicleProperty. foo ( ) ; } catch ( Exception e ) { return null ; } }
String code = String. valueOf ( index ) ; try { ITreeNode node = visitor. visit ( code ) ; } catch ( ELException e ) { throw new ELException ( e ) ; } return node ; }
registry = LocateRegistry. getRegistry ( port <= 0? Registry. REGISTRY_PORT : port ) ; return registry ; }
try { return new File ( fileURI. toString ( ) ) ; } catch ( final IOException e ) { throw new RuntimeException ( e ) ; } }
"String [ ] tokens = labelText. split ( "":"" ) ; if ( tokens. length == 2 ) { String name = tokens [ 0 ] ; String value = tokens [ 1 ] ; foo ( name, value ) ; } }"
"int offset = fldno * length + name. length ( ) ; if ( offset > fldno ) { fldno = fldno - 1 ; } foo ( fldno, type, length, name ) ; }"
int lastdot = className. lastIndexOf ( '.' ) ; if ( lastdot >= 0 ) { return className. substring ( lastdot + 1 ) ; } return className ; }
"ensureOpen ( ) ; HttpGet httpGet = new HttpGet ( buildURL ( request, params ) ) ; HttpResponse response = httpGet. execute ( ) ; verifyStatus ( response ) ; return response ; }"
try { return iso8601DateFormat. print ( date ) ; } catch ( RuntimeException ex ) { throw handleException ( ex ) ; } }
ThreadUtils. runOnUiThreadBlocking ( new Runnable ( ) { @ Override public void run ( ) { if ( type. getIndex ( ) == 0 ) { tabs. add ( type ) ; } } } ) ; }
sk. println ( command ) ; final BufferedReader br = new BufferedReader ( new InputStreamReader ( sk. getInputStream ( ) ) ) ; String line = null ; while ( ( line = br. readLine ( ) )!= null ) { sk. send ( line ) ; } br. close ( ) ; }
"Group g = new Group ( ) ; g. setName ( ""Bobby"" ) ; g. setEmail ( ""robert.sandell@sonyericsson.com"" ) ; boolean ok = client. admin ( ). getGroup ( ). getName ( ). equals ( g. getName ( ) ) ; if (! ok ) { throw new IllegalArgumentException ( ""Group "" + g. getName ( ) + "" already exists"" ) ; } return g ; }"
for ( ; ; ) { char c = reader. read ( ) ; if (! Character. isWhitespace ( c ) ) { break ; } } }
if ( foo == null ) { foo = new com. amazonaws. internal. SdkInternalList < Attribute > ( ) ; } return foo ; }
"Label l = new Label ( comp, SWT. NONE ) ; l. setText ( text ) ; return l ; }"
"DistanceJoint dj = new DistanceJoint ( b1, b2, new Vector2 ( 1.0, 2.0 ), new Vector2 ( - 3.0, 0.5 ) ) ; dj. setDampingRatio ( 2.0 ) ; dj. setDampingRatio ( 3.0 ) ; assertEquals ( 2.0, dj. getDampingRatio ( ) ) ; }"
if ( foo == null ) { foo = new com. amazonaws. internal. SdkInternalList < TagDescription > ( ) ; } return foo ; }
"String str = url ; str = str. replaceAll ( ""[^a-zA-Z0-9/||s_%,]+"", ""_"" ) ; str = str. replaceAll ( ""[^a-zA-Z0-9/||s_%,]+"", ""_"" ) ; str = str. replaceAll ( ""[^a-zA-Z0-9/||s_%,]+"", ""_"" ) ; return str ; }"
"if ( value!= null ) { final MapWriter mapWriter = map. get ( field ) ; if ( mapWriter!= null ) { LOG. trace ( ""Parsed field: {}, as long: {}"", field, value ) ; final Float8Writer w = mapWriter. float8 ( cleanExtensions. get ( field ) ) ; w. writeFloat8 ( value ) ; } } }"
"Result result = Caller. getInstance ( ). call ( ""geo.getTrackByCountry"", apiKey, ""country"", country ) ; return ResponseBuilder. buildCollection ( result, Track. class ) ; }"
"SourceAccountingLine documentAccountingLine = new SourceAccountingLine ( document. getIncome ( ), document. getExpense ( ) ) ; return documentAccountingLine ; }"
"try ( TopicAdminClient topicAdminClient = TopicAdminClient. create ( ) ) { TopicName topicName = TopicName. create ( projectId, topicId ) ; Topic topic = topicAdminClient. getTopic ( topicName ) ; return topic ; } }"
switch ( typeInfo. getPrimitiveCategory ( ) ) { case DECIMAL : return ( ( DecimalTypeInfo ) typeInfo ). scale ( ) ; case FLOAT : return 7 ; case DOUBLE : return 15 ; case BYTE : case SHORT : case INT : case LONG : case VOID : return 0 ; default : return HiveDecimal. SYSTEM_DEFAULT_SCALE ; } }
"if (! sIsInitialized ) { init ( listener, context ) ; return true ; } return false ; }"
"XYSeries xySeries = new XYSeries ( mTitle ) ; for ( int i = 0 ; i < mValues. size ( ) ; i ++ ) { double value = mValues. get ( i ) ; xySeries. add ( i + 1, value, mColors. get ( i ), mExplains. get ( i ) ) ; } return xySeries ; }"
"Log. level4Debug ( ""Testing DriverOperations.foo()"" ) ; DriverOperations instance = new DriverOperations ( ) ; assert ( instance. findall ( ""USB|VID_XXXX&PID_XXXX"" ). contains ( """" ) ) ; }"
Brand brand = new Brand ( ) ; brand. setId ( 1 ) ; brandDao. addBrand ( brand ) ; EasyMock. expectLastCall ( ). times ( 1 ) ; replay ( brandDao ) ; brandServiceImpl. addBrand ( brand ) ; verify ( brandDao ) ; }
"RepositoryCommit commitModel = new RepositoryCommit ( repository, branch, commit ) ; if ( commitModel. getCommitId ( )!= null ) { throw new IllegalArgumentException ( ""A commit with the repository ID "" + repository + "" already exists"" ) ; } return commitModel ; }"
if ( surface. getType ( )!= org. newdawn. loaders. ac3d. AC3DSurface. POLYGON ) return false ; if ( surface. getType ( ) == org. newdawn. loaders. ac3d. AC3DSurface. POLYGON ) return false ; return true ; }
"System. out. print ( name ) ; System. out. print ( "":"" ) ; System. out. print ( value. toString ( ) ) ; }"
if ( fInstance == null ) fInstance = new Implementors ( ) ; return fInstance ; }
"if ( m_listener!= null ) { Node source = getDOMNodeFromDTM ( sourceNode ) ; fireSelectionEvent ( new SelectionEvent ( m_transformer, source, styleNode, attributeName, xpath, selection ) ) ; } }"
"String s = ""  "" ; try { Scanner s = new Scanner ( System. in ) ; s. nextLine ( ) ; } catch ( Exception e ) { } return s ; }"
SwingUtilities. invokeLater ( new Runnable ( ) { public void run ( ) { showZoomUI ( maxZoom ) ; } } ) ; }
String namespace = connection. getNamespace ( ) ; return AMPExtension. isFeatureEnabled ( namespace ) ; }
if ( datum instanceof Double ) { return ( ( Double ) datum ). doubleValue ( ) ; } return defaultValue ; }
"buildRule. executeTarget ( ""foo"" ) ; if ( buildRule. getProject ( ). getProperty ( ""testFile"" ). indexOf ( ""moo"" ) < 0 ) { buildRule. getProject ( ). setProperty ( ""testFile"", ""bar"" ) ; } }"
"Map < String, Integer > map = mapLocal. get ( localId ) ; if ( map == null ) { map = new ConcurrentHashMap < > ( ) ; mapLocal. put ( localId, map ) ; } if ( map. isEmpty ( ) ) { map. remove ( localId ) ; } }"
double min = Double. MAX_VALUE ; double max = Double. MIN_VALUE ; for ( int i = 0 ; i < size ( ) ; i ++ ) { double d = get ( i ) ; if ( d > max ) { return false ; } if ( d < min ) { min = d ; } } return true ; }
final String value = System. getProperty ( name ) ; return value!= null? Boolean. parseBoolean ( value ) : defaultValue ; }
int i = 0 ; int j = 0 ; while ( i < list. size ( ) ) { if ( list. get ( i ). equals ( list. get ( j ) ) ) { return true ; } j ++ ; } return false ; }
if ( foo ( ) ) { close ( ) ; return false ; } try { return foo ( ) ; } catch ( NoSuchElementException e ) { return false ; } catch ( IOException e ) { return false ; } }
setX ( v. getX ( ) ) ; setY ( v. getY ( ) ) ; setZ ( v. getZ ( ) ) ; }
"DenseMatrix64F A = RandomMatrices. createRandom ( 5, 5, - 1, 1 ) ; DenseMatrix64F B = A. copy ( ) ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { B. set ( i, j, QR [ i ] [ j ] ) ; } } TestCase. assertEquals ( 5, A. numRows ) ; TestCase. assertEquals ( 4, A. numCols ) ; TestCase. assertEquals ( 5, A. numCols ) ; }"
int i ; for ( i = offset ; i < bytes. length ; i ++ ) { if ( bytes [ i ] == ( byte ) 0x00 ) { break ; } } return i - offset ; }
if ( player instanceof EntityPlayer1D ) { return ( ( EntityPlayer1D ) player ). hasFood ( ) ; } if ( player instanceof EntityPlayer2D ) { return ( ( EntityPlayer2D ) player ). hasFood ( ) ; } return false ; }
float [ ] [ ] d = new float [ 4 ] [ 4 ] ; for ( int i = 0 ; i < grade ; i ++ ) { d [ i ] = foo ( u ) ; } return d ; }
List < Image > allImages = new ArrayList < Image > ( ) ; for ( int i = 0 ; i < foo. size ( ) ; i ++ ) { allImages. add ( foo. get ( i ) ) ; } return allImages ; }
SeedAlignmentData seedData = new SeedAlignmentData ( ) ; for ( String proteinId : proteinIds ) { seedData. proteinIds. add ( proteinId ) ; } return seedData ; }
List < String > result = new ArrayList < String > ( ) ; result. addAll ( testScriptNames ) ; return result ; }
"String query = ""SELECT *FROM TB_PARAMETROS WHERE CODIGO IS NOT NULL"" ; ResultSet rset = db. ejecutar ( conn, query ) ; return rset ; }"
for ( int i = 0 ; i <= coefficients. length ; i ++ ) { coefficients [ i ] = coefficients [ i ] & mask ; } }
"boolean result = false ; if ( expression!= null ) { try { result = ( ( Boolean ) expression ). evaluate ( """" ) ; } catch ( ExpressionEvaluationException e ) { result = false ; } } return result ; }"
"FacesContext context = FacesContext. getCurrentInstance ( ) ; Map map = context. getExternalContext ( ). getRequestParameterMap ( ) ; String fooName = ( String ) map. get ( ""f:attribute"" ) ; if ( fooName!= null ) { context. setAttribute ( fooName, ( Object ) map. get ( fooName ) ) ; } }"
for ( int i = 0 ; i < cachedFonts. size ( ) ; i ++ ) { cachedFonts. get ( i ). foo ( ) ; } cachedFonts. clear ( ) ; }
"String [ ] tokens = line. split ( "","" ) ; return new GTFSStop ( tokens [ 0 ], tokens [ 1 ], Integer. parseInt ( tokens [ 2 ] ) ) ; }"
final Set < T > result = new HashSet < T > ( ) ; result. addAll ( set1 ) ; result. addAll ( set2 ) ; return ( result ) ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"ProcessExecutor pe = new ProcessExecutor ( ) ; pe. setCommands ( new String [ ] { ""cat"" } ) ; pe. setDebug ( true ) ; pe. start ( ) ; try { pe. waitFor ( ) ; } catch ( InterruptedException e ) { return false ; } return true ; }"
"System. out. print ( ""Foo"" ) ; System. out. print ( ""Bacon 1"" ) ; System. out. print ( ""Bacon 2"" ) ; System. out. print ( ""Bacon 3"" ) ; System. out. print ( ""Bacon 4"" ) ; System. out. print ( ""Bacon 5"" ) ; System. out. print ( ""Bacon 6"" ) ; System. out. print ( ""Bacon 7"" ) ; System. out. print ( ""Bacon 6"" ) ; }"
"XMLElement element = null ; if ( namespace!= null ) { element = new XMLElement ( elementName, namespace ) ; } else { element = new XMLElement ( elementName ) ; } return element ; }"
GramlabProject gramlab = projects. get ( f. getAbsolutePath ( ) ) ; if ( gramlab!= null ) { return gramlab ; } return new GramlabProject ( f ) ; }
"final String label = ""foo("" + a_row + "","" + a_column + "")"" ; return map. get ( label ) ; }"
"final PhoneNumberFormatter format = PhoneNumberFormatter. getInstance ( Locale. US ) ; return format. format ( new Object [ ] { ""1.0"", ""2.0"", ""3.0"", ""4.5"" } ) ; }"
"String s = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
"String result = request. getParameter ( property ) ; request. setAttribute ( property, result ) ; return result ; }"
"String word = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
byte [ ] result = new byte [ 8 ] ; result [ 0 ] = ( byte ) ( n >>> 56 ) ; result [ 1 ] = ( byte ) ( n >>> 48 ) ; result [ 2 ] = ( byte ) ( n >>> 40 ) ; result [ 3 ] = ( byte ) ( n >>> 32 ) ; result [ 4 ] = ( byte ) ( n >>> 24 ) ; result [ 5 ] = ( byte ) ( n >>> 16 ) ; result [ 6 ] = ( byte ) ( n >>> 8 ) ; result [ 7 ] = ( byte ) ( n ) ; return result ; }
float multiplier = ( scaleMax - scaleMin ) / ( byteRangeMax - byteRangeMin ) ; return ( source - byteRangeMin ) * multiplier ; }
mMat [ 0 ] = rot ; mMat [ 5 ] = rot ; mMat [ 6 ] = rot ; mMat [ 7 ] = rot ; mMat [ 8 ] = 0 ; mMat [ 9 ] = 0 ; mMat [ 10 ] = 0 ; mMat [ 11 ] = 0 ; mMat [ 12 ] = 0 ; mMat [ 13 ] = 0 ; mMat [ 14 ] = 0 ; mMat [ 15 ] = 0 ; mMat [ 18 ] = 0 ; mMat [ 14 ] = 0 ; mMat [ 15 ] = rot ; }
"String [ ] headers = request. split ( ""  "" ) ; String value = """" ; for ( int i = 0 ; i < headers. length ; i ++ ) { if ( headers [ i ]. contains ( ""WebSocket"" ) ) { value = headers [ i ]. split ( ""="" ) [ 1 ] ; } } return value ; }"
"ModelAndView modelAndView = new ModelAndView ( ) ; ModelAndView mv = new ModelAndView ( ""foo"" ) ; mv. addObject ( ""model"", foo ) ; return mv ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getType ( )!= null ) sb. append ( ""Type: "" + getType ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
rows. add ( row ) ; cols. add ( col ) ; }
"TreeMap < Date, Double > result = new TreeMap < Date, Double > ( ) ; for ( Map. Entry < Date, Double > dateEntry : map. entrySet ( ) ) { Double value = dateEntry. getValue ( ) ; if ( value!= null ) { result. put ( dateEntry. getKey ( ), value * 100.0 / 100.0 ) ; } } return result ; }"
int alpha = ( ( argb >> 24 ) & 0xFF ) | ( ( argb >> 16 ) & 0xFF ) ; return alpha ; }
if ( foo == null ) { return null ; } else { return foo. apply ( context ) ; } }
try { Integer. parseInt ( token ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }
final String sFileName = aClassLoader. getName ( ) ; if ( m_aResourceBundleCache. containsKey ( sFileName ) ) { m_aResourceBundleCache. remove ( sFileName ) ; } if ( aClassLoader!= null ) try { m_aResourceBundleCache. remove ( sFileName ) ; } catch ( final MissingResourceException ex ) { } }
"try { return new String ( string, offset, len, ""ISO-8859-1"" ) ; } catch ( UnsupportedEncodingException e ) { throw new InternalError ( ) ; } }"
"TimeSeriesDataItem item1 = new TimeSeriesDataItem ( new Day ( 23, 9, 2001 ), 99.7 ) ; TimeSeriesDataItem item2 = ( TimeSeriesDataItem ) TestUtilities. serialised ( item1 ) ; assertEquals ( item1, item2 ) ; }"
int oldCount = concurrentTestCount ; concurrentTestCount = count ; for ( int i = 0 ; i < oldCount ; i ++ ) { Thread. sleep ( 100 ) ; } }
RequestObserverWrapper wrapper = new RequestObserverWrapper ( observer ) ; wrapper. requestObserverMap. remove ( observer ) ; GradleCommandWrapper wrapper = new GradleCommandWrapper ( ) ; wrapper. requestObserverMap. remove ( observer ) ; }
"String body = null ; try { body = getTemplate ( templateFilePath ). render ( variables ) ; } catch ( IOException e ) { throw new RuntimeException ( ""Error reading file "" + templateFilePath + "". "" + e, e ) ; } return body ; }"
int result = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { result = ( result << 8 ) | ( readWord ( ) ) ; } return result ; }
for ( int r = 0 ; r < SUDOKU_SIZE ; r ++ ) { for ( int c = 0 ; c < SUDOKU_SIZE ; c ++ ) { Cell cell = s [ r ] [ c ] ; cell. setEditable ( false ) ; } } }
"GraphNode node = new GraphNode ( identifier, component ) ; for ( String edge : edges ) { node. addEdge ( edge ) ; } graph. put ( identifier, node ) ; }"
"Sprite result = factory. createSprite ( new Character ( BOMB ) ) ; assertNotNull ( result ) ; assertEquals ( BOMB, result. getGameObjectType ( ) ) ; }"
"out. println ( ""("" ) ; out. println ( ""package org.apache.tomcat.util.buf.Constants;"" ) ; out. println ( "";"" ) ; }"
"Cipher c = Cipher. getInstance ( ""AES/CBC/NoPadding"" ) ; c. init ( Cipher. ENCRYPT_MODE, key, iv ) ; return c ; }"
for ( Book i : books ) { if ( i. getName ( ). equals ( bookName ) ) { return i ; } } return null ; }
