final ByteArrayOutputStream bout = new ByteArrayOutputStream ( ) ; final InputStream in = new BufferedInputStream ( zip ) ; int b ; while ( ( b = in. read ( ) )!= - 1 ) { bout. write ( b ) ; } return bout. toByteArray ( ) ; }
"Set bindings = new HashSet ( ) ; Iterator iter = allHandleList. iterator ( ) ; while ( iter. hasNext ( ) ) { BindingHandle binding = ( BindingHandle ) iter. next ( ) ; bindings. add ( new TestBinding ( target, binding ) ) ; } return bindings ; }"
"if ( rootNode == null ) return ; inicializarMeta ( rootNode. getLeft ( ), tab ) ; inicializarMeta ( rootNode. getRight ( ), tab ) ; }"
"String result = """" ; try { result = ioOperations. getDeviceDescription ( ) ; } catch ( OHException e ) { } return result ; }"
try { if ( stream!= null ) { stream. close ( ) ; } } catch ( IOException e ) { e. printStackTrace ( ) ; } }
if ( instance == null ) { instance = new ServerHostProperties ( ) ; } return instance ; }
"LOG. info ( ""Scheduling "" + block. getLocalBlock ( ) + "" file "" + blockFile + "" for deletion"" ) ; ReplicaFileDeleteTask deletionTask = new ReplicaFileDeleteTask ( volume, blockFile, metaFile, block, trashDirectory ) ; execute ( volume. getCurrentDir ( ), deletionTask ) ; }"
"if ( c == null ) return null ; return c. getTimeInMillis ( ) + "":"" + c. get ( Calendar. HOUR_OF_DAY ) + "":"" + c. get ( Calendar. MINUTE ) ; }"
switch ( fieldId ) { case 1 : return COLUMN_FAMILY ; case 2 : return SUPER_COLUMN ; case 3 : return COLUMN ; default : return null ; } }
"if ( token!= null ) { return token. getType ( ) ; } if ( raw!= null ) { return raw ; } throw new IllegalStateException ( ""Both indicators of type are null"" ) ; }"
"ByteArray b = new ByteArray ( raw. getBytes ( ), currentPos - 2 ) ; System. arraycopy ( raw. getBytes ( ), currentPos, b, 0, 2 ) ; currentPos += b. length ; return b ; }"
"Map < String, byte [ ] > map = new HashMap < String, byte [ ] > ( ) ; for ( String name : table. keySet ( ) ) { byte [ ] value = table. get ( name ). getBytes ( ) ; map. put ( name, value ) ; } return map ; }"
"StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < a. length ; i ++ ) { if ( i > 0 ) { sb. append ( "" "" ) ; } sb. append ( String. format ( DEFAULT_LOCALE, format, a [ i ] ) ) ; } return sb. toString ( ) ; }"
if ( response == null ) { return false ; } try { String errorCode = response. getStatusLine ( ) ; return ( errorCode!= null && errorCode. equals ( ERROR ) ) ; } catch ( IOException e ) { return false ; } }
long start = System. currentTimeMillis ( ) ; sampleCount = start + capacity ; while ( sampleCount < capacity ) { sampleCount <<= 1 ; long end = System. currentTimeMillis ( ) - start ; if ( end > end ) { end = System. currentTimeMillis ( ) ; } } }
"String name = p. getName ( ) ; int index = name. lastIndexOf ( '.' ) ; if ( index!= - 1 ) { return name. substring ( 0, index ) ; } return name ; }"
"testAddresses. remove ( ""test1"" ) ; testAddresses. remove ( ""test2"" ) ; testAddresses. remove ( ""test3"" ) ; testAddresses. remove ( ""test4"" ) ; testAddresses. remove ( ""test5"" ) ; Assert. assertEquals ( 4, testAddresses. size ( ) ) ; }"
if ( previous!= null ) { previous. destroy ( ) ; previous = null ; } }
List < Card > deck = new ArrayList < Card > ( ) ; for ( Weapon weapon : weaponList ) { deck. add ( weapon. createCard ( ) ) ; } return deck ; }
"if ( opticsplot == null ) { opticsplot = ServiceUtils. getService ( bundleContext, ConfigurationService. class ) ; } return opticsplot ; }"
"String dsa = """" ; for ( int i = 0 ; i < name. length ( ) ; i ++ ) { char ch = name. charAt ( i ) ; if ( Character. isSpecialChar ( ch ) ) { dsa += ch ; } else { dsa += Character. toLowerCase ( ch ) ; } } return dsa ; }"
"Pojo p = Pojo. make ( ""head"", ""subName"" ) ; Expression expr = PathExpressionChain. parse ( ""sub.(o)sub.name"" ) ; expr. execAssign ( new ExprExecCtxt ( p ), ""newValue"" ) ; }"
for ( int i = 0 ; i < method. getParameterTypes ( ). length ; i ++ ) { if ( value ) { return method. getMethod ( i ). getAnnotation ( IndicatesAnnotation. class ) ; } } return null ; }
Assert. assertTrue ( verifyElement ( by ) ) ; Assert. assertTrue ( locateElement ( by ). getText ( ). equalsIgnoreCase ( message ) ) ; }
try { return parseChildIntNull ( clazz ) ; } catch ( NumberFormatException ex ) { return null ; } }
if ( comparator!= null ) { comparator. stopMonitoring ( ) ; setComparator ( null ) ; } return comparator ; }
"byte [ ] b = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
Milestone milestone = new Milestone ( ) ; milestone. setCreatedAt ( new Date ( ) ) ; milestone. removeColor ( ) ; assertTrue ( milestone. getCreatedAt ( ). getTime ( )!= 0 ) ; }
int arrayLen = 1 ; while ( value!= 0 ) { arrayLen *= 2 ; value = value / 2 ; } return arrayLen ; }
"if ( location == null ) throw new IllegalArgumentException ( ""location is null"" ) ; return new ClassPathLocation ( cache, realm, location ) { } ; }"
"WebElement scalingMatrixElement = driver. findElement ( By. xpath ( "".//x/scale[@name='X']"" ) ) ; scalingMatrixElement. clear ( ) ; scalingMatrixElement. sendKeys ( usersFirstName + "","" + usersSurname ) ; }"
"if (! opened ) { return 0 ; } int cnt = 0 ; while ( cnt < psize ) { int b = inputStream. read ( packet, offset + cnt, psize - cnt ) ; if ( b == - 1 ) { break ; } cnt += b ; } return cnt ; }"
HsqlIntKeyHashMap scsMap ; Long scn ; scsMap = ( HsqlIntKeyHashMap ) validationMap. get ( sid ) ; if ( scsMap == null ) { return Long. MIN_VALUE ; } scn = ( Long ) scsMap. get ( csid ) ; return ( scn == null )? Long. MIN_VALUE : scn. longValue ( ) ; }
"Map < String, String > uploadRate = walletSettings. get ( xmlWalletSetting ) ; if ( uploadRate. containsKey ( walletPublicKey ) ) { uploadRate. put ( walletPublicKey, uploadRate. get ( walletPublicKey ) ) ; } }"
ArrayList < String > result = stack. getNames ( ) ; stack = stack. getParent ( ) ; while (! stack. isStackEmpty ( ) ) { result. add ( stack. getName ( ) ) ; stack = stack. getParent ( ) ; } return result ; }
"String [ ] source = sourceList. toArray ( new String [ sourceList. size ( ) ] ) ; for ( int i = 0 ; i < source. length ; i ++ ) { source = source [ i ]. replaceAll ( ""|."", """" ) ; } }"
if ( offset + 2 > hibernatableStringId. length ( ) ) return 0 ; return hibernatableStringId. length ( ) - offset ; }
"List < Child > children = new ArrayList < > ( ) ; for ( final Child child : children ) { if ( child. isEnabled ( ) ) { children. add ( child ) ; } } assertEquals ( 4, children. size ( ) ) ; }"
List list = new ArrayList ( ) ; for ( Iterator i = chains. values ( ). iterator ( ) ; i. hasNext ( ) ; ) { Map. Entry e = ( Map. Entry ) i. next ( ) ; if ( e. getValue ( )!= null ) { list. add ( e. getValue ( ) ) ; } } return list. iterator ( ) ; }
synchronized ( unresolvedClassList ) { List < UnresolvedClass > copy = new ArrayList < UnresolvedClass > ( unresolvedClassList ) ; unresolvedClassList. clear ( ) ; return copy ; } }
"int result = 0 ; try { result = Integer. parseInt ( str. replaceAll ( ""[^0-9]+"", """" ) ) ; } catch ( NumberFormatException e ) { result = - 1 ; } return result ; }"
long length = 0 ; for ( Object value : values ) { length += getFireDamage ( value ) ; } return length ; }
"throwIfNotValid ( username, ""username"" ) ; throwIfNotValid ( message, ""message"" ) ; sendMessage ( username, message, lifetimeInMilliseconds, messageCallback ) ; }"
if ( contourW == null ) { return 0L ; } else { return contourW ; } }
switch ( getFHSourceAnchorLoc ( ) ) { case CenteredConnectionAnchor. BOTTOM : return ManhattanConnectionRouterEx. DOWN ; default : return ManhattanConnectionRouterEx. RIGHT ; } }
while ( el!= null ) { if ( el. getName ( ). equals ( name ) ) return el ; el = el. getParent ( ) ; } return null ; }
"assert fname!= null ; fname = fname. toLowerCase ( ) ; File file = new File ( fname ) ; if (! file. exists ( ) ) return null ; if (! file. isDirectory ( ) ) return null ; String [ ] children = file. list ( ) ; for ( int i = 0 ; i < children. length ; i ++ ) { destroyKernel ( children [ i ], fname ) ; } return fname ; }"
if (! Build. VERSION. SDK_INT < Build. VERSION_CODES. JELLY_BEAN_MR1 ) { return false ; } final PackageManager pm = context. getPackageManager ( ) ; final PackageInfo pi = pm. getPackageInfo ( Sms. class ) ; if ( pi!= null ) { return true ; } return false ; }
if ( service == null ) { service = new Database < Customer > ( Customer. class ) ; } return service ; }
String sessionId = reader. getSession ( ). getId ( ) ; Iterator < Session > it = sessions. iterator ( ) ; while ( it. hasNext ( ) ) { Session session = it. next ( ) ; if ( session. isExpired ( ) ) { it. remove ( ) ; sessionId = session. getId ( ) ; } } return sessionId ; }
"try { return ioOperations. setOutputFile ( transport, user ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return false ; } }"
for ( int i = 0 ; i < binnedBin. length - 1 ; i ++ ) { if ( intensity < binnedBin [ i ] ) { return binnedBin [ i + 1 ] - intensity ; } } return 0.99 ; }
"TermCounter tc = new TermCounter ( url ) ; tc. processElements ( paragraphs ) ; Set < String > terms = tc. keySet ( ) ; for ( String term : terms ) { addTerm ( term, tc ) ; } }"
if ( executionButton == null ) { executionButton = new JRadioButton ( ) ; executionButton. setText ( baseUrl ) ; } return executionButton ; }
"RatingModel rating = ratingList. get ( user. getId ( ) ) ; if ( rating == null ) { rating = new RatingModel ( user ) ; ratingList. put ( user. getId ( ), rating ) ; } return rating ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getRecipients ( )!= null ) sb. append ( ""Recipients: "" + getRecipients ( ) + "","" ) ; if ( getFailedItems ( )!= null ) sb. append ( ""FailedItems: "" + getFailedItems ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"new Thread ( ) { @ Override public void run ( ) { Toast. makeText ( message, Toast. LENGTH_LONG ). show ( ) ; } }. start ( ) ; }"
"if ( jsonElementFloatValue == null ) { return null ; } double d = jsonElementFloatValue. doubleValue ( ) ; double v = 0.0 ; for ( int i = 0 ; i < 3 ; i ++ ) { v += Math. pow ( v, 2.0 ) ; } return new Quaternion ( d, v ) ; }"
long temp = 0 ; for ( int i = 0 ; i < itemTable. size ( ) ; i ++ ) { temp = ( long ) itemTable. get ( i ). getPrice ( ). doubleValue ( ) ; if ( temp > temp ) { temp = temp ; } } return temp ; }
"UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken ( ) ; token. setUsername ( ""root"" ) ; token. setPassword ( """" ) ; return token. getSession ( ) ; }"
TrackedEvent event = getEvent ( it ) ; Assertions. assertThat ( event. getMethod ( ) ). isEqualTo ( BEFORE_EPISURE ) ; CachedProcessNodeExecutionEvent orig = event. getEvent ( ) ; Assertions. assertThat ( orig. getNodeName ( ) ). isEqualTo ( nodeName ) ; }
"ContentStream ls = new ContentStream ( ) ; List < ContentStream > subCategories = searchSubCategory ( str, contentType ) ; for ( String s : subCategories ) { ls. add ( ls. stream ( s ) ) ; } return subCategories ; }"
"int counter = 0 ; for ( int i = 0 ; i < rows * cols ; i ++ ) { String tmpName = fieldName. replace ( "" "", ""_"" ) ; if ( tmpName. length ( ) > 0 ) { tmpName = tmpName. replace ( "" "", ""_"" ) ; } counter ++ ; if ( table. get ( tmpName )!= null ) { table. get ( tmpName ). put ( fieldName, data ) ; counter ++ ; } } return counter ; }"
"String os = System. getProperty ( ""os.name"" ) ; return ( os!= null ) && ( os. toLowerCase ( ). indexOf ( ""win"" ) >= 0 ) ; }"
int val = v. getValue ( ) ; if ( val >= 0 ) { intIndex = vertices. indexOf ( v ) ; if ( val < 0 ) { val = 0 ; } } }
DragTree intTree = new DragTree ( ) ; intTree. intArray = new int [ 1 ] ; intTree. intArray [ 0 ] = new DragTree ( intTree. intArray [ 0 ] ) ; intTree. intArray [ 1 ] = new DragTree ( intTree. intArray [ 1 ] ) ; return intTree ; }
if ( attribute == null ) attribute = new LinkedList ( ) ; attribute. add ( info ) ; }
"try { return ioOperations. getCurrLocation ( id ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return - 1 ; } }"
for ( int i = 0 ; i < data. length ; i ++ ) { if ( data [ i ] == null ) return false ; } return true ; }
"Company c = new Company ( ) ; c. setName ( ""This is a test company"" ) ; c. setEmployees ( null ) ; Iterator < Company > it = distribution. createCompanyAndEmployees ( c ). iterator ( ) ; while ( it. hasNext ( ) ) { c. add ( it. next ( ) ) ; } }"
"if ( rgbValue < 0 ) { return null ; } else { return new RGB ( ( rgbValue & 0x00FF0000 ) >> 16, ( rgbValue & 0x0000FF00 ) >> 8, ( rgbValue & 0x000000FF ) ) ; } }"
"Event event = new Event ( ) ; event. setType ( ""ArtifactoryCombinationFilter"" ) ; List < String > errors = eventService. validateArtifactoryCombinationFilter ( event ) ; assertNotNull ( errors ) ; assertEquals ( 1, errors. size ( ) ) ; assertEquals ( ""ArtifactoryCombinationFilter should return null"", errors. get ( 0 ) ) ; }"
if ( tracker!= null ) { return tracker. stopTracking ( vertexIndex ) ; } return vertexIndex ; }
ByteArrayOutputStream output = new ByteArrayOutputStream ( ) ; try ( RemoteConnection remoteConnection = ( RemoteConnection ) invocation. getRemoteConnection ( ) ) { output. write ( remoteConnection. getAddress ( ). getAddress ( ) ) ; output. write ( '|n' ) ; } catch ( IOException e ) { } return output ; }
if ( ArrayUtils. isEmpty ( annotation ) ) return false ; for ( Class <? extends Annotation > c : annotation ) { if ( annotatedElement. isAnnotationPresent ( c ) ) return true ; } return false ; }
if ( str == null ) return false ; int len = str. length ( ) ; if ( len == 0 ) return false ; for ( int i = 0 ; i < len ; i ++ ) { if ( str. charAt ( i ) == '{' ) return false ; } return true ; }
long sum = 0 ; for ( Tag tag : tags ) { sum += tag. getCount ( ) ; } return sum ; }
"if ( clazz. isAnnotationPresent ( Dependency. class ) ) { return getClassDependencies ( clazz. getSuperclass ( ), fieldName ) ; } else { return null ; } }"
"if ( _client == null ) { String errorMessage = ""Client is not started."" ; throw new RuntimeException ( errorMessage ) ; } _client. start ( ) ; }"
"try { Properties properties = ( Properties ) jsonSerializer. deserialize ( propertiesType ) ; return properties ; } catch ( Exception e ) { throw new RuntimeException ( ""Unknown type "" + propertiesType. toString ( ) ) ; } }"
"mMinX = MathHelper. NULL_VALUE ; mMaxX = - MathHelper. NULL_VALUE ; mMinY = MathHelper. NULL_VALUE ; mMaxY = MathHelper. NULL_VALUE ; int length = getItemCount ( ) ; for ( int k = 0 ; k < length ; k ++ ) { double x = getX ( k ) ; double y = getY ( k ) ; updateRange ( x, y ) ; } }"
"if ( number < 1 || number > 9 ) throw new IllegalArgumentException ( ""Invalid number"" ) ; List < Integer > notedNumbers = new ArrayList < Integer > ( getNotedNumbers ( ) ) ; notedNumbers. remove ( number ) ; return createNewState ( notedNumbers ) ; }"
Sorter sorter = new Sorter ( ) ; for ( int i = 0 ; i < dirEdge. getEdges ( ). size ( ) ; i ++ ) { DirectedEdge de = dirEdge. getEdges ( ). get ( i ) ; sorter. rotate ( de. getEdges ( ). get ( 0 ). getAngle ( ) ) ; if ( sorter. isSorted ( ) ) { return i ; } } return - 1 ; }
List < String > open = new ArrayList < > ( ) ; for ( Component component : deployment. getComponents ( ) ) { open. add ( component. getName ( ) ) ; } if ( open. size ( ) > 0 ) { return open. get ( 0 ) ; } return StringUtils. EMPTY ; }
Set < Integer > staged = new HashSet < Integer > ( ) ; for ( Integer i : a ) { if (! b. contains ( i ) ) { staged. add ( i ) ; } } return staged ; }
try { Class <? > clazz = Class. forName ( typeName ) ; return clazz. isArray ( ) || ( clazz. isArray ( ) && clazz. getName ( ). equals ( typeName ) ) ; } catch ( Exception e ) { return false ; } }
"final Map < String, String > crossProduct = new HashMap < > ( ) ; if ( connType!= null && connType. length ( ) > 0 ) { crossProduct. put ( ""connType"", connType ) ; crossProduct. put ( ""numberOfOptions"", numberOfOptions ) ; } return crossProduct ; }"
assert! isContinuous ( ) ; double result = getResult ( ) ; for ( int i = 0 ; i < incoming. length ; i ++ ) { result += getFilterExpression ( incoming [ i ] ) ; } return result ; }
"PropertyIsEqualTo eq = assertFilter ( ""resourceIcon"", ResourceIsEqualTo. class ) ; Expression expr = eq. getExpression1 ( ) ; String resourceIcon = expr. getExpression2 ( ) ; assertNotNull ( resourceIcon ) ; assertEquals ( ""resourceIcon"", resourceIcon ) ; }"
int am = 0 ; float m = xs [ 0 ] ; for ( int i = 1 ; i < xs. length ; ++ i ) { float v = xs [ i ] ; if ( v > m ) { m = v ; am = i ; } } return am ; }
final double [ ] z = new double [ y. length ] ; for ( int i = 0 ; i < z. length ; i ++ ) { z [ i ] = y [ i ] ; } return z ; }
StoreItem storeItem = new StoreItem ( ) ; storeItem. setUrlConnection ( new UrlConnection ( ) ) ; assertTrue ( storeItem. getUrlConnections ( ). iterator ( ). hasNext ( ) ) ; storeItem. removeUrlConnection ( new UrlConnection ( ) ) ; assertFalse ( storeItem. getUrlConnections ( ). hasNext ( ) ) ; }
"mCodes. set ( category, true ) ; mSuggestions = suggestions ; if ( mListener!= null ) { mListener. onInformRequest ( category, suggestions ) ; } }"
"Vec2 worldCoords = new Vec2 ( screenX, screenY ) ; if ( gameManager. getSegmentBtree ( worldCoords, segmentX, segmentY )!= null ) { return worldCoords ; } else { return null ; } }"
"if ( task!= null ) { logger. logError ( Level. WARNING, ""Error while reading a task: "" + task. toString ( ), e ) ; } else { logger. logError ( Level. WARNING, ""Error while reading an unknown task"", e ) ; } }"
for ( Enumeration e = getNetworkInterfaces ( ) ; e. hasMoreElements ( ) ; ) { NetworkInterface tmp = ( NetworkInterface ) e. nextElement ( ) ; if ( name. equals ( tmp. getName ( ) ) ) return tmp ; } return null ; }
"Object dto = loadBookmarks ( json ) ; if ( dto instanceof Bookmarks ) { return ( ( Bookmarks ) dto ). toJson ( ) ; } else { throw new IllegalArgumentException ( ""Not a Bookmarks object"" ) ; } }"
"sock. setTcpNoDelay ( HttpConnectionParams. getTcpNoDelay ( params ) ) ; sock. setSoTimeout ( HttpConnectionParams. getSoTimeout ( params ) ) ; int linger = HttpConnectionParams. getLinger ( params ) ; if ( linger >= 0 ) { doAbortProcedure ( sock, context, params, linger ) ; } }"
"List < Parameter > parameters = new ArrayList < Parameter > ( ) ; parameters. add ( new Parameter ( ""name"", ""myName"" ) ) ; parameters. add ( new Parameter ( ""value"", ""myValue"" ) ) ; return parameters ; }"
"String s = """" ; try { s = dateFormat. format ( localTime ) ; } catch ( java. text. ParseException e ) { e. printStackTrace ( ) ; } return s ; }"
"String timeIndicator = ""200"" ; for ( int i = 0 ; i < 100 ; i ++ ) { timeIndicator += ""00"" + i ; } return timeIndicator ; }"
doQuickSort2 ( ) ; m_aRWLock. readLock ( ). lock ( ) ; try { int i = m_aElements. size ( ) - 1 ; while ( i >= 0 ) { m_aElements. remove ( i -- ) ; } } finally { m_aRWLock. readLock ( ). unlock ( ) ; } }
"mState = state ; Intent intent = new Intent ( ACTION_Buy_PAGE_RESPONSE ) ; intent. putExtra ( EXTRA_STATE, state ) ; mContext. sendBroadcast ( intent ) ; }"
"if ( iv == null ) { return null ; } byte [ ] result = new byte [ iv. length ] ; System. arraycopy ( iv, 0, result, 0, iv. length ) ; return result ; }"
int length = replace_bytes. length ; StringBuffer result = new StringBuffer ( length ) ; for ( int i = 0 ; i < length ; i ++ ) { result. append ( replace_bytes [ i ] ) ; } return result. toString ( ) ; }
Task. TaskKey key = null ; if ( sendGetRequest ( t ) ) { key = t. key ; } return key ; }
"validateInput ( input ) ; if ( input. length ( ) == 1 ) { return input ; } StringBuilder builder = new StringBuilder ( ) ; for ( int i = 1 ; i < input. length ( ) ; i ++ ) { builder. append ( input. charAt ( i ) ) ; if (! builder. endsWith ( "" "" ) ) { builder. append ( "" "" ) ; } } return builder. toString ( ) ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( mStatus ). append ( "" ("" ). append ( mTimestamp ). append ( "", "" ). append ( mClientId ). append ( "", "" ). append ( mAction ). append ( "")"" ) ; if ( mReason!= null ) { sb. append ( "" ("" ). append ( mReason ). append ( "")"" ) ; } return sb. toString ( ) ; }"
"try { return Integer. parseInt ( getModelResource ( ""backups"" ). size ( ) ) ; } catch ( Exception e ) { return null ; } }"
"String fn = ""sparkAppJob("" + ns + "", "" + elemName + "")"" ; return ( Boolean ) callSparkMethod ( ""element-available"", ns, elemName, fn ) ; }"
"File file = new File ( filename ) ; try { return readFileFromSDCard ( gvrContext, file ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; return null ; } }"
"Set < ProfilerTask > taskSet = new HashSet < ProfilerTask > ( ) ; for ( ProfilerTask task : tasks ) { if ( task. action ( )!= null ) taskSet. add ( task ) ; } return new Pair < > ( description, taskSet ) ; }"
"Node < int > cur = head ; for ( int e : elements ) { cur = Math. max ( cur, e ) ; } add ( cur ) ; }"
int len = rnd. nextInt ( maxLength - minLength + 1 ) + minLength ; char [ ] formats = new char [ len ] ; for ( int i = 0 ; i < formats. length ; i ++ ) { formats [ i ] = ( char ) ( rnd. nextInt ( len ) + minLength ) ; } return new String ( formats ) ; }
mMat [ 0 ] = 0 ; mMat [ 1 ] = 1 ; mMat [ 2 ] = 0 ; mMat [ 3 ] = 0 ; mMat [ 4 ] = 0 ; mMat [ 5 ] = 0 ; mMat [ 6 ] = 0 ; mMat [ 7 ] = 0 ; mMat [ 8 ] = 0 ; mMat [ 9 ] = 0 ; mMat [ 10 ] = 0 ; mMat [ 11 ] = 0 ; mMat [ 12 ] = 0 ; mMat [ 13 ] = 0 ; mMat [ 14 ] = 0 ; mMat [ 15 ] = 0 ; }
"if ( findAll == null ) { return new BigInteger ( ""0"" ) ; } else { return findAll ; } }"
"FacesContext context = FacesContext. getCurrentInstance ( ) ; Map < String, String > params = context. getExternalContext ( ). getRequestParameterMap ( ) ; String url = params. get ( ""jnpurl"" ) ; if ( url!= null &&! url. equals ( local_name ) ) { context. getExternalContext ( ). setAttribute ( ""jnpurl"", url ) ; } }"
"return new PlayerResultsScoreComparator ( ) { @ Override public int compare ( PlayerResultsScoreComparator p1, PlayerResultsScoreComparator p2 ) { return p2. getScore ( ) - p1. getScore ( ) ; } } ; }"
"String result = """" ; for ( int i = 0 ; i < RDB_SIZE ; i ++ ) { char c = data. charAt ( i ) ; if ( ( c >= 'A' && c <= 'Z' ) || ( c >= 'a' && c <= 'z' ) ) { result = result + c ; break ; } } return result ; }"
"IPentahoSession session = getSession ( ) ; Authentication authentication = createAuthentication ( session, hash ) ; return session!= null && authentication!= null ; }"
"if (! ( sessionFactory instanceof SessionFactoryImplementor ) ) { LOGGER. warning ( ""SessionFactory is expected to be instance of SessionFactoryImplementor."" ) ; return null ; } return HazelcastInstance. newHazelcastInstance ( ( SessionFactoryImplementor ) sessionFactory ) ; }"
Query modifiedQuery = new DefaultQuery ( query ) ; modifiedQuery. setTypeName ( getSchema ( ). getTypeName ( ) ) ; return modifiedQuery ; }
Bead result = null ; for ( int i = 0 ; i < numBead ; i ++ ) { bead = readMapWithList ( pos ) ; if ( bead. getBeadNumber ( ) == pos ) { result = bead ; break ; } } return result ; }
"Element result = new Element ( ""jdom"" ) ; result. setAttribute ( ""xmlns:xsi"", ""http://www.w3.org/2001/XMLSchema-instance/"" ) ; result. setAttribute ( ""xmlns:xsi"", ""http://www.w3.org/2001/XMLSchema-instance/"" ) ; result. setAttribute ( ""xmlns:xsi"", ""http://www.w3.org/2001/XMLSchema-instance"" ) ; return result ; }"
InputStream is = new ByteArrayInputStream ( status. toString ( ) ) ; ObjectInputStream ois = new ObjectInputStream ( is ) ; ois. readObject ( ) ; ois. close ( ) ; }
boolean [ ] dups = new boolean [ grid. length ] ; for ( int i = 0 ; i < grid. length ; i ++ ) { int tmp = grid [ whichCol ] [ i ] ; if (! dups [ tmp ] ) { dups [ tmp ] = true ; } } return dups ; }
"if ( item == null ) { throw new IllegalArgumentException ( ""item is null"" ) ; } items. add ( item ) ; }"
"Optional < Integer > index = parseIndex ( args ) ; if (! index. isPresent ( ) ) { return new IncorrectCommand ( String. format ( MESSAGE_INVALID_COMMAND_FORMAT, Command. MESSAGE_USAGE ) ) ; } return new SelectPersonCommand ( index. get ( ) ) ; }"
"boolean result = eglCreateFenceSyncNv ( version1, version2, inclusive ) ; GLES20. eglMakeSync ( result, inclusive ) ; return result ; }"
"prepareShader ( RGB_FRAGMENT_SHADER_STRING, frameWidth, frameHeight, texMatrix ) ; GLES20. glActiveTexture ( GLES20. GL_TEXTURE0 ) ; GLES20. glBindTexture ( GLES20. GL_TEXTURE_2D, textureId ) ; drawRectangle ( viewportX, viewportY, viewportWidth, viewportHeight ) ; GLES20. glBindTexture ( GLES20. GL_TEXTURE_2D, 0 ) ; }"
"if ( name!= null ) { ruleSymbols. put ( name, name ) ; } else { ruleSymbols. remove ( name ) ; } }"
Color pickColor = null ; for ( int i = 0 ; i < colors. length ; i ++ ) { pickColor = colors [ i ] ; if ( pickColor!= null ) { return pickColor ; } } return null ; }
byte [ ] array = getProperty ( key ) ; return ( array!= null )? InetAddress. getByAddress ( array ) : null ; }
"if ( nBytes < 0 || nBytes > 4 ) { throw new IllegalArgumentException ( ""nBytes="" + nBytes ) ; } return tileEntityTiming ; }"
"byte [ ] copyZipEntry = new byte [ zip. length ] ; System. arraycopy ( zip, 0, copyZipEntry, 0, copyZipEntry. length ) ; return copyZipEntry ; }"
"int b1 = read ( ) ; int b2 = read ( ) ; crc. update ( b1, b2 ) ; return b1 ; }"
if ( annexObj instanceof DefaultAnnexLibrary ) { return ( ( DefaultAnnexLibrary ) annexObj ). deltaLong ( ) ; } return annexObj ; }
"name = null ; loaded = false ; if ( map!= null ) { for ( final Entry < String, Integer > entry : map. entrySet ( ) ) { if ( name == null ) { name = entry. getKey ( ) ; } else { map. remove ( entry. getKey ( ) ) ; } } loaded = true ; } }"
"final GpContext gpContext = GpContext. getContextForUser ( ""gp_user"" ) ; final GpMessage message = new GpMessage. Builder ( BigInteger. valueOf ( 3 ) ). setBigInteger ( number ). build ( ) ; assertEquals ( 3, message. getBackStagePasses ( ) ) ; }"
ProxyPreference preference = getProxyDao ( ). get ( ProxyKey. EXCLUDE ) ; return preference!= null? preference. toString ( ) : StringUtils. EMPTY ; }
AttributeType result = null ; AttributeSetType [ ] attrs = ast. getAttributes ( ) ; for ( int i = 0 ; i < attrs. length ; i ++ ) { AttributeType attr = attrs [ i ] ; if ( attr. getID ( ) == attributeID ) { result = attr ; break ; } } return result ; }
if ( props. containsKey ( HOODIE_RO_FILE_FORMAT_PROP_NAME ) ) { return HoodieFileFormat. valueOf ( props. getProperty ( HOODIE_RO_FILE_FORMAT_PROP_NAME ) ) ; } return DEFAULT_RO_FILE_FORMAT ; }
"User committer = commit. getCommitter ( ) ; if ( committer!= null ) avatars. bind ( view, committer ) ; return view ; }"
final String boundaryParam = boundary ( ) ; return boundaryParam!= null && boundaryParam. length ( ) > 0 && Character. isLetter ( boundaryParam. charAt ( 0 ) ) ; }
out. writeInt ( classVersion ) ; out. writeInt ( port ) ; }
"String prefix = ""jdbc:fasta:mem:"" ; if ( dbCode!= null &&! """". equals ( dbCode ) ) { prefix = ""jdbc:fasta:mem:"" + dbCode ; } if ( id!= null &&! """". equals ( id ) ) { prefix = ""jdbc:fasta:mem:"" + id ; } return prefix ; }"
Order order = new Order ( cashierName ) ; cooks. add ( order ) ; return order ; }
FileWriter out = new FileWriter ( file ) ; try { out. write ( contents ) ; } finally { out. close ( ) ; } }
"if ( Trace. isTraceOn ( ) ) Trace. log ( Trace. PROXY, Thread. currentThread ( ). getName ( ) + "" trimToSize: "" + Arrays. toString ( b ) ) ; out_. write ( b ) ; }"
if ( generators == null || generators. length == 0 ) { return null ; } Buffer buffer = BufferUtils. createFloatBuffer ( generators. length ) ; for ( Gen < T > generator : generators ) { buffer. put ( generator. sample ( ) ) ; } buffer. flip ( ) ; return buffer ; }
int ret = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { ret |= ( memPtr + i * 8 ) & mask ; } return ret ; }
if ( options!= null ) { return options. remove ( option )!= null ; } return false ; }
"String rval = null ; try { rval = new String ( SecureRandom. getInstance ( ""SHA1PRNG"" ). generateAlgorithm ( ) ) ; } catch ( NoSuchAlgorithmException e ) { } return rval ; }"
"double x = 0, y = 0 ; for ( int i = 0 ; i < path. size ( ) ; i ++ ) { Point2D p = ( Point2D ) path. get ( i ) ; x = p. x + ( path. getWidth ( ) / 2 ) ; y = p. y + ( path. getHeight ( ) / 2 ) ; } return new Point2D ( x, y ) ; }"
output. write ( opcode ) ; output. write ( '(' ) ; output. write ( type. getDescriptor ( ). getClassName ( ) ) ; output. write ( ')' ) ; output. write ( method. getName ( ). getClassName ( ) ) ; output. write ( '(' ) ; output. write ( type. getDescriptor ( ). getTypeArguments ( ) ) ; output. write ( ')' ) ; }
if (! loaded ) { loaded = true ; loadGame ( info ) ; } }
try { return key!= null && key. isModified ( ) ; } catch ( Exception e ) { return false ; } }
"if ( cookie!= null ) { cookie. setMaxAge ( 0 ) ; cookie. setPath ( ""/"" ) ; response. addCookie ( cookie ) ; return true ; } return false ; }"
Array < ControllerListener > result = new Array < ControllerListener > ( ) ; for ( int i = 0 ; i < listeners. length ; i ++ ) { result. add ( listeners [ i ] ) ; } return result ; }
"if ( key!= null ) { SharedPreferences. Editor editor = sharedPreferences. edit ( ) ; editor. putString ( key, value ) ; editor. commit ( ) ; } }"
"Map < String, Path > result = new HashMap < > ( ) ; for ( String snapshot : snapshots ) { result. put ( snapshot, baseRestoreDir + ""/"" + snapshot ) ; } return result ; }"
"Enumeration < String > en = messages. keys ( ) ; while ( en. hasMoreElements ( ) ) { String key = ( String ) en. nextElement ( ) ; if ( subject. contains ( key ) ) { cachedMessages. put ( key, new Properties ( ) ) ; } } return true ; }"
"String stopId = place. get ( ""stop_id"" ). asText ( ) ; String url = place. get ( ""url"" ). asText ( ) ; StringTokenizer st = new StringTokenizer ( url, "" "" ) ; while ( st. hasMoreTokens ( ) ) { url = st. nextToken ( ) ; } return url ; }"
"Hashtable user = new Hashtable ( ) ; user. put ( ""username"", ""username"" ) ; user. put ( ""lastname"", ""lastname"" ) ; user. put ( ""firstname"", ""firstname"" ) ; user. put ( ""lastname"", ""lastname"" ) ; user. put ( ""firstname"", ""firstname"" ) ; return user ; }"
"try { return Uri. parse ( file. toURI ( ). toString ( ) ) ; } catch ( URISyntaxException e ) { throw new IllegalStateException ( e. getMessage ( ), e ) ; } }"
"Set < EnvVar > envVarSelector = new HashSet < EnvVar > ( ) ; for ( Map. Entry < String, String > entry : System. getenv ( ). entrySet ( ) ) { envVarSelector. add ( entry. getKey ( ), entry. getValue ( ) ) ; } envVarSelector. clear ( ) ; }"
"int l = data. length ; char [ ] out = new char [ l << 1 ] ; for ( int i = 0, j = 0 ; i < l ; i ++ ) { out [ j ++ ] = DIGITS_LOWER [ ( 0xF0 & data [ i ] ) >>> 4 ] ; out [ j ++ ] = DIGITS_LOWER [ 0x0F & data [ i ] ] ; } return out ; }"
"List < I > value = map. get ( key ) ; if ( value == null ) { value = Collections. emptyList ( ) ; map. put ( key, value ) ; } return value ; }"
if ( normalizationFactors!= null ) { for ( int i = 0 ; i < creationPermissions. length ; i ++ ) { if ( creationPermissions [ i ]. reporterIonName. equals ( reporterIonName ) ) { return creationFactors [ i ] ; } } } return null ; }
boolean result = true ; for ( int i = 0 ; i < array. length ; i ++ ) { if ( array [ i ] == theInt ) { result = false ; break ; } } return result ; }
StringBuilder s = new StringBuilder ( ) ; s. append ( '[' ) ; for ( CacheGroup group : cacheGroups ) { s. append ( group. getName ( ) ) ; s. append ('' ) ; } if ( cacheGroups. size ( ) > 0 ) { s. append ( cacheGroups. get ( 0 ). getName ( ) ) ; } s. append ( ']' ) ; return s. toString ( ) ; }
"Package p = mPackage ; mPackage = null ; mCause = cause ; if (! mConnected ) { try { connect ( ) ; } catch ( Exception e ) { Log. e ( TAG, ""Unable to connect to package "" + p. getName ( ), e ) ; } } else { Log. e ( TAG, ""Unable to connect to package "" + p. getName ( ), e ) ; } }"
"String sum = 0 ; for ( int i = 0 ; i < addresses. length ( ) ; i ++ ) { String host = addresses. charAt ( i ) ; if ( host. equals ( ""localhost"" ) || host. equals ( ""127.0.0.1"" ) || host. equals ( ""127.0.1.1"" ) ) { sum += 1 ; } } return sum / addresses. length ( ) ; }"
"if ( states. containsKey ( action ) ) { if ( states. get ( action ). equals ( ""On"" ) ) { return true ; } return false ; } if ( states. get ( action ). equals ( ""Off"" ) ) { return true ; } return false ; }"
"IComplexNumber [ ] [ ] ret = new IComplexNumber [ realComponents. length ] [ realComponents [ 0 ]. length ] ; for ( int i = 0 ; i < realComponents. length ; i ++ ) { ret [ i ] = fibonacciSeriesRecursive ( realComponents [ i ], i ) ; } return ret ; }"
"String icon = LABORATORY_ICONS ; if ( info. getType ( ) == PublishedType. LOGGED_FEATURE ) icon = LABORATORY_ICONS ; else if ( info. getType ( ) == PublishedType. RASTER ) icon = RASTER_ICONS ; return new ResourceReference ( icon, info. getType ( ) ) ; }"
Base64 encoder = new Base64 ( ) ; return new String ( encoder. encode ( str. getBytes ( ) ) ). trim ( ) ; }
Table table = getTable ( p ) ; String [ ] result = new String [ table. size ( ) ] ; for ( int i = 0 ; i < result. length ; i ++ ) { result [ i ] = table. get ( i ) ; } return result ; }
"float [ ] channels = g. getPixels ( ) ; for ( int i = 0 ; i < channels. length ; i ++ ) { if ( colorDistHSB ( g, baseline, incomingPix, hueTresh, saturationTresh, brightnessTresh ) ) { return true ; } } return false ; }"
int pos = buf. position ( ) - 1 ; buf. put ( handshakeString ) ; while ( buf. hasRemaining ( ) ) { buf. position ( pos ) ; pos ++ ; } }
"Toast toast = Toast. makeText ( context, resId, duration ) ; setToast ( toast ) ; return toast ; }"
for ( int i = 0 ; i < Integer. MAX_VALUE ; i ++ ) { if ( board. getSchematic ( ( short ) ( currentIndex + i ) )!= null ) { flyOut. println ( ) ; flyOut. println ( ) ; } } }
"Presence presence = new Presence ( Presence. Type. subscribe ) ; presence. setTo ( jid ) ; subscribers. put ( jid, presence ) ; }"
"KeyStore store = KeyStore. getInstance ( keystore ) ; store. setKeyEntry ( alias, key ) ; store. load ( password ) ; for ( X509Certificate cert : chain ) { store. setKeyEntry ( alias, cert ) ; } }"
"List < String > table = new ArrayList < String > ( 2 ) ; table. add ( """" ) ; table. add ( ""xml"" ) ; return table. iterator ( ) ; }"
"File speechStrategyFile = new File ( mExternalSpeechStrategyDirectory, speechStrategyRelativePath ) ; if ( speechStrategyFile. exists ( ) ) { mFridgeHelper. removeFile ( speechStrategyFile ) ; } }"
m_ModbusTransport = con. getModbusTransport ( ) ; if ( m_ModbusTransport!= null ) { m_ModbusTransport. setPort ( m_ModbusTransport. getPort ( ) ) ; } }
final T value = backgroundTask. apply ( progressIndicator -> { if ( waitMillis >= 0 ) { return value ; } else { backgroundTask. cancel ( ) ; } return value ; } }
"try { Class. forName ( ""java.awt.Desktop"" ) ; return true ; } catch ( Exception e ) { return false ; } }"
byte [ ] user = new byte [ 1 ] ; file. seek ( file. getFilePointer ( ) ) ; file. read ( user ) ; deleteUser ( ) ; return user [ 0 ] ; }
final double [ ] [ ] scores = GAME_DISTANCE_DIMENSIONS ; final double [ ] [ ] ret = new double [ models. length ] [ models [ 0 ]. length ] ; for ( int i = 0 ; i < models. length ; i ++ ) { ret [ i ] [ i ] = scores [ i ] / models [ i ]. length ; } gameStart ( ret ) ; return ret ; }
boolean result = false ; if ( msg instanceof ColumnSettings ) { columnSettings = ( ( ColumnSettings ) msg ). getColumnSettings ( ) ; } return result ; }
final StringBuilder map = new StringBuilder ( ) ; for ( String key : keys ) { map. append ( key ). append ( '=' ) ; } for ( String value : values ) { map. append ( value ). append ( '|n' ) ; } return map. toString ( ) ; }
errors = new int [ numECCodewords ] ; for ( int i = 0 ; i < numECCodewords ; i ++ ) { errors [ i ] = codewords [ i ] ; erasures [ i ] = erasures [ i ] ; } }
"if ( param == null ) { String str = System. getProperty ( ""user.home"" ) + File. separator + ""handbrake.exe"" ; try { param = new String ( str. getBytes ( ) ) ; } catch ( Exception ex ) { } } return param ; }"
"int [ ] x = new int [ ] { 50, 30 } ; int [ ] y = new int [ ] { 50, 30 } ; World world = new World ( ) ; world. move ( x, y, 0 ) ; world. move ( y, 0 ) ; world. move ( x, y + 1 ) ; world. move ( x, y ) ; TestCase. assertFalse ( world. contains ( x, y ) ) ; TestCase. assertFalse ( world. contains ( y, 0 ) ) ; TestCase. assertFalse ( world. contains ( y, 0 ) ) ; }"
List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < getNumVertices ( ) ; i ++ ) { int neighbour = getNeighbors ( i ). size ( ) ; neighbour += getInNeighbors ( i ). size ( ) ; result. add ( neighbour ) ; } Collections. sort ( result ) ; return result ; }
"String s = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
if ( btClass == ERROR ) { return ERROR ; } return btClass & ERROR ; }
"Node node = ( Node ) nodeMap. get ( prefix ) ; if ( node == null ) { node = new Node ( ) ; node. setName ( uri, localName ) ; node. setType ( type ) ; nodeMap. put ( prefix, node ) ; } node. setValue ( value ) ; }"
Jedis jedis = null ; if ( wordSignificances. size ( ) > 0 ) { jedis = wordSignificances. remove ( 0 ) ; } return jedis ; }
"try { return clazz. getDeclaredField ( ""user"" ). getInt ( 0 ) ; } catch ( Throwable t ) { return - 1 ; } }"
"Metadatum [ ] dcv = item. getMetadata ( ) ; if ( dcv!= null ) { for ( int i = 0 ; i < dcv. length ; i ++ ) { receipt. getWrappedEntry ( ). addNonCriticalExtension ( dcv [ i ], dcv [ i ] ) ; } } }"
"String imagePath = clazz. getName ( ). replace ( '.', '/' ) + "".class"" ; return getImage ( imagePath, clazz ) ; }"
"Map < NiFiComponentDTO, PositionDTO > empty = new HashMap < > ( ) ; for ( NiFiComponentDTO component : components ) { empty. put ( component, buildRedoStackEmpty ( component ) ) ; } return empty ; }"
jsonGenerator. writeFieldName ( entity. getClass ( ). getName ( ) ) ; jsonGenerator. writeFieldName ( entity. getClass ( ). getName ( ) ) ; }
"while ( ctx. hasNextNode ( ) ) { Node node = ctx. next ( ) ; ctx. print ( node. getValue ( ) + "" "" ) ; } ctx. next ( ) ; }"
if ( table!= null ) { return table. isForeignKey ( ) ; } return key. isForeignKey ( )? - 1 : 1 ; }
String result = ( String ) degreeBuckets. get ( key ) ; if ( result == null ) { result = defaultString ; } return result ; }
"URL u = new URL ( url ) ; return updateHostNameInURL ( u. getHost ( ), siteFQDN ) ; }"
Tile parent = tileParent ( ) ; while ( parent!= null ) { if ( parent instanceof Tile ) { return parent ; } parent = parent. parent ( ) ; } return null ; }
if ( forceCreate ) { return new File ( getVariableValue ( ) ) ; } else { return getVariableValue ( ) ; } }
if ( getPlot ( )!= null ) { return getPlot ( ). getAllDeniedUUID ( ) ; } else { return new HashSet < UUID > ( ) ; } }
"ServerState s = new ServerState ( ) ; for ( int id : serverState. keySet ( ) ) { if ( cn. compareTo ( s. get ( id ) ) < 0 ) s. put ( id, s. get ( id ) ) ; } return s ; }"
Artifact docTypeOfImplementationClass = unprunedArchive. getLibrary ( ) ; if ( docTypeOfImplementationClass. getArtifact ( )!= null ) { return docTypeOfImplementationClass ; } return unprunedArchive ; }
if ( isRegSendTagMessage ( ) ) return ( ( RegSendTagMessage ) m_message ). getResource ( ) ; else return null ; }
"if ( wordList == null ) { wordList = new ArrayList < Crud <?,? >> ( 1 ) ; } return wordList ; }"
"Intent intent = new Intent ( mSource, mDestination ) ; mSource. putExtra ( BROADCAST_MESSAGE_EXTRA, intent ) ; mDestination. setFlags ( Intent. FLAG_ACTIVITY_NEW_TASK ) ; mApplicationContext. sendBroadcast ( intent ) ; }"
if ( filterUser == null ) { filterUser = new GlobalDataStore ( ) ; } return filterUser ; }
BBOX bbox = buildBBox ( null ) ; return bbox ; }
"String result = """" ; long tmp = ip ; for ( int i = 3 ; i > 0 ; i -- ) { if ( tmp % 2 == 0 ) { result = ""0"" + result ; } else { result = result + ""."" + ( int ) ( tmp / 2 ) ; } } return result ; }"
"insertBlock ( slot ). setSelection ( val, blknum ) ; notifyChanged ( ) ; }"
"Validate. notNull ( cacheConfig, ""Cache configuration must not be null"" ) ; Validate. notNull ( key, ""Key must not be null"" ) ; try { cacheConfig. getKeySerializer ( ). serialize ( key ) ; } catch ( RuntimeException e ) { throw new CacheException ( e ) ; } }"
assertTrue ( runnable. run ( ) ) ; while ( true ) { try { runnable. run ( ) ; } catch ( InterruptedException e ) { } } }
"HCatPartitionSpec spec = new HCatPartitionSpec ( location ) ; assertEquals ( spec. getRoot ( ). toString ( ), location ) ; }"
"CoreArgCheck. isNotNull ( modelResource, ""modelResource"" ) ; CoreArgCheck. isNotNull ( key, ""key"" ) ; Annotation annotation = getResourceAnnotation ( modelResource, false ) ; annotation. getTags ( ). put ( key, value ) ; }"
int i = ( n * BLOCK_SIZE ) / BLOCK_SIZE ; byte [ ] ret = new byte [ i ] ; for ( ; i > 0 ; i -- ) { ret [ i ] = ( byte ) ( readUint32 ( ) ) ; } return ret ; }
"String name = workbook. getExternalSheetName ( sheet ) ; buf. append ( name ) ; buf. append ( "":"" ) ; buf. append ( Integer. toString ( column ) ) ; buf. append ( "":"" ) ; buf. append ( Integer. toString ( row ) ) ; }"
"int nRows = matrix. getRowDimension ( ) ; int nCols = matrix. getColumnDimension ( ) ; if ( nRows < 2 || nCols < 2 ) { throw new MathIllegalArgumentException ( LocalizedFormats. INSUFFICIENT_ROWS_AND_COLUMNS, nRows, nCols ) ; } }"
"ValueEnforcer. notNull ( aCountry, ""Country"" ) ; return isZeroVATAllowed ( aCountry. getCountry ( ), bUndefinedValue ) ; }"
"final Pipeline < FilterResult < Candidate >> newFilter = pipeline. withFilter ( new ConnectionFilter ( ql ) ). withFilter ( new ConnectionFilter ( ql ) ) ; return new CandidateBuilder ( connectionName, newFilter, entityType ) ; }"
"final DirectedEdge e1 = new DirectedEdge ( 1.0, 2.0, 3.0, 4.0 ) ; final DirectedEdge e2 = ( DirectedEdge ) TestUtilities. serialised ( e1 ) ; Assert. assertEquals ( - 1, e2. getIgnoreCount ( ) ) ; e1. addIgnore ( ignores ) ; Assert. assertEquals ( 2.0, e2. getIgnoreCount ( ) ) ; Assert. assertEquals ( 4.0, e2. getIgnoreCount ( ) ) ; }"
for ( FundingSourceAltRef altRef : getAltRefs ( ) ) { for ( FundingSourceAltRef tempAltRef : altRef. getAltRefs ( ) ) { if ( tempAltRef. getAlternative ( ). getId ( ). equals ( fundingAlt. getId ( ) ) ) { return altRef ; } } } return null ; }
int cropIndex = inTrackInfo. getAudioList ( ). getNumAudios ( ) - _numAudios ; inTrackInfo. getAudioList ( ). cropTo ( cropIndex ) ; inTrackInfo. getSelection ( ). clearAll ( ) ; }
"ToggleButton stripCardBtn = new ToggleButton ( view. getCardButton ( ) ) ; for ( ToggleButton b : clickedCardButtons ) { if ( b. getText ( ). contains ( ""  "" ) ) { stripCardBtn. setText ( b. getText ( ). substring ( 0, b. getText ( ). length ( ) - 1 ) ) ; } } return stripCardBtn ; }"
"List < PackageDoc > groupMessages = map. get ( groupname ) ; if ( groupMessages == null ) { groupMessages = new ArrayList < > ( ) ; map. put ( groupname, groupMessages ) ; } return groupMessages ; }"
StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder. append ( prefix ) ; for ( int i = 0 ; i < prefix. length ( ) ; i ++ ) { stringBuilder. append ( ALPHABET [ ( int ) ( Math. random ( ) * ( double ) ALPHABET. length ) ] ) ; } return stringBuilder. toString ( ) ; }
int styleId = attrs. getAttribute ( defStyleAttr ) ; if ( styleId == 0 ) { styleId = defStyleRes ; } return styleId ; }
List < URL > urls = new ArrayList < URL > ( archives. size ( ) ) ; for ( Archive archive : archives ) { urls. add ( archive. getUrl ( ) ) ; } return setEnabledRecursive ( urls ) ; }
Exception e = error ; if ( e!= null ) { if ( e instanceof IllegalStateException ) { e = ( IllegalStateException ) e ; } else { e = null ; } } return e ; }
"List < LimitOrder > limitOrders = new ArrayList < LimitOrder > ( ) ; for ( BigDecimal [ ] ask : orders ) { limitOrders. add ( new LimitOrder ( currencyPair, OrderType. ASK, ask ) ) ; } return limitOrders ; }"
try { return text. getBytes ( charset ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }
if ( aspectGeneratorList == null ) { aspectGeneratorList = new ApplicationContextFactory ( ) ; } return aspectGeneratorList ; }
try { return! iterator. hasNext ( ) ; } catch ( final NoSuchElementException e ) { return false ; } }
"NodeDO lastNode = nodeService. getLastNode ( id ) ; if ( lastNode == null ) { return Collections. emptyList ( ) ; } return nodeService. getChildren ( lastNode, parentRootSum ) ; }"
"if ( m_features. containsKey ( aKey ) ) { return false ; } m_features. put ( aKey, aFeatureName ) ; String aFeaturePath = m_features. get ( aKey ) ; if ( aFeaturePath == null ) { aFeaturePath = aKey + ""."" + aFeatureName ; } return true ; }"
String className = clazz. getName ( ) ; int lastDot = className. lastIndexOf ( '.' ) ; return className. substring ( lastDot + 1 ) + className. substring ( lastDot + 1 ) ; }
"d. readFully ( w, 0, 2 ) ; return ( char ) ( ( w [ 1 ] & 0xff ) << 8 | ( w [ 0 ] & 0xff ) ) ; }"
"SectionCompletedListener listener = new SectionCompletedListener ( spreadsheetPattern, matcher ) ; sectionCompletedListeners. add ( listener ) ; return listener. getRowNum ( ) ; }"
org. sakaiproject. citation. api. ConfigurationService instance = getInstance ( ) ; if ( instance == null ) { return false ; } return instance. isMixDescriptionEditor ( ) ; }
float val = ( float ) Math. round ( percentage * scale ) ; val = relative * val + offset ; return val ; }
"MapEvent event = new MapEvent ( ) ; assertEquals ( 0, event. getItemCount ( ) ) ; assertTrue ( event. getOffset ( )!= 0 ) ; assertEquals ( event. getLength ( ), event. getLength ( ) ) ; assertEquals ( event. getKey ( ), event. getKey ( ) ) ; assertEquals ( event. getValue ( ), event. getValue ( ) ) ; }"
"if ( family!= IPv4 && family!= IPv6 ) throw new IllegalArgumentException ( ""unknown address family"" ) ; byte [ ] bytes ; bytes = toByteArray ( addr, family ) ; if ( bytes!= null ) return InetAddress. getByAddress ( addr, bytes ) ; throw new UnknownHostException ( ""Invalid address: "" + addr ) ; }"
"try { return command. isJframe ( batchModelID, metadata ) ; } catch ( Exception e ) { return false ; } }"
long projectReference = getProjectReference ( startInstant. getTimeInMillis ( ) ) ; int offset = getStartInstant. getActualMaximum ( Calendar. MILLISECOND ) ; if ( offset > 0 ) { projectReference += offset ; } return projectReference ; }
PKIAuthenticationToken pkiToken = getPKITokenFromTarget ( validateTarget ) ; if ( pkiToken == null ) { return false ; } if ( realms!= null && realms. contains ( pkiToken. getRealm ( ) ) ) { return false ; } return true ; }
if ( serialClassName == null ) { return null ; } else { return ( java. util. TimeZone ) Class. forName ( serialClassName ). newInstance ( ) ; } }
"try { return URLEncoder. encode ( string, ""UTF-8"" ). replace ( ""+"", ""%20"" ). replace ( ""*"", ""%2A"" ). replace ( ""%7E"", ""~"" ) ; } catch ( UnsupportedEncodingException e ) { return string ; } }"
messageDigest. update ( dt ) ; return ; }
Object o = contextMap. get ( key ) ; if ( o instanceof AutomationContext ) { return ( AutomationContext ) o ; } else { return null ; } }
IBinder b = msg. getService ( IBinder. class ) ; if ( b instanceof Proxy ) { ( ( Proxy ) b ). getVal ( ) ; } else { IBinder a = b. getService ( IBinder. class ) ; a. getVal ( ) ; } }
"if ( jobName. contains ( ""-"" ) ) { jobName = jobName. substring ( 0, jobName. length ( ) - 1 ) ; } return jobName ; }"
long time = 0 ; switch ( state ) { case FAILED : time = failureDuration ; break ; case FAILED_ON_FAILURE : time = failureDuration * 2 ; break ; case FAILED_ON_UNKNOWN_TYPE : time = failureDuration * 2 ; break ; default : break ; } time += failureDuration ; return time ; }
"String tableIdentifier = ""table1"" ; String columnIdentifier = ""column1"" ; ColumnIdentifier identifier = new ColumnIdentifier ( tableIdentifier, columnIdentifier ) ; m_data. add ( identifier ) ; }"
"int pos = edit. getCaretPosition ( ) ; if ( pos < 0 ) { pos = 0 ; } else if ( pos >= text. length ( ) ) { pos = text. length ( ) - 1 ; } gluPerspective ( edit, pos ) ; }"
"StringBuffer icon = new StringBuffer ( ) ; for ( int i = 0 ; i < 8 ; i ++ ) { icon. append ( getCachedIcon ( b, i ) ) ; if ( icon. length ( ) < 8 ) { icon. append ( "" "" ) ; } } return icon. toString ( ) ; }"
"final Exchange. KeyToken token = new Exchange. KeyToken ( 1, 8 ) ; assert token. getItem ( )!= null ; return token ; }"
"if ( settingsData == null ) { logger. error ( ""Hue bridge settings not initialized correctly."" ) ; return 0 ; } Object value = settingsData. node ( ""lights"" ). node ( deviceId ). node ( ""state"" ). value ( ""lights"" ). value ( ""link"" ) ; if ( value instanceof Integer ) { return ( Integer ) value ; } else { return 0 ; } }"
StringBuffer buf = new StringBuffer ( courseName ). append ( FILE_SEPARATOR ). append ( fileName ) ; appendCharacteristic ( buf. toString ( ) ) ; }
if ( eventTopics == null ) { eventTopics = new com. amazonaws. internal. SdkInternalList < EventTopic > ( ) ; } return eventTopics ; }
int start = type. stream ( ). indexOf ( ':' ) ; if ( start >= 0 && start + 1 < type. stream ( ). length ( ) ) { return type. stream ( ). substring ( start + 1 ) ; } else { return type. toString ( ) ; } }
"String lcs = getLCS ( s1, s2 ) ; return ( s1. length ( ) + s2. length ( ) - lcs. length ( ) ) / 2.0 ; }"
"if (! sectionName. equals ( """" ) ) { hiddenParams. add ( sectionName ) ; } else { hiddenParams. add ( sectionName ) ; } }"
"int value = 0 ; byte [ ] buf = new byte [ 32 ] ; value = runActionUsingPath ( buf, 0 ) ; while ( value [ 0 ]!= 0 ) { value [ 1 ] = ( byte ) ( buf [ 0 ] & 0xFF ) ; value [ 0 ] = ( byte ) ( buf [ 1 ] & 0xFF ) ; } return value ; }"
"checkParameters ( dataset, renderer ) ; XYChart chart = new ScoreBoardChart ( dataset, renderer ) ; return new PlotView ( context, chart ) ; }"
shortInfo. time = time ; shortInfo. size = size ; }
try { return com. google. security. zynamics. binnavi. debug. models. SharedNodeHelper. convertParityModeToString ( m_parity ) ; } catch ( com. google. security. zynamics. binnavi. Database. Exceptions. CouldntSaveDataException e ) { throw new CouldntSaveDataException ( e ) ; } }
for ( int i : inputIndexes ) { if ( inputs [ i ]!= null && inputs [ i ]. stackSize <= 1 ) { return false ; } } return true ; }
"String s = property ; if ( s. contains ( ""EmittingList"" ) ) { s = s. replaceAll ( ""EmittingList"", """" ) ; } return s ; }"
"StringBuilder sb = new StringBuilder ( ) ; for ( byte b : bytes ) { sb. append ( String. format ( ""%02x"", b & 0xFF ) ) ; } return sb. toString ( ) ; }"
try { int constant = Integer. parseInt ( time ) ; return constant ; } catch ( NumberFormatException e ) { } return 0 ; }
ArrayList < Double > pageTypes = new ArrayList < Double > ( ) ; Collections. sort ( strikes ) ; return pageTypes ; }
long start = System. currentTimeMillis ( ) ; do { toString ( timeout ) ; } while ( System. currentTimeMillis ( ) - start < timeout ) ; }
"logger. trace ( ""{} rows remaining to process, currentRow: {}, outputCount: {}"", remainingRows, currentRow, outputCount ) ; setupWriteRelation ( internal, container ) ; if ( popConfig. isFrameUnitsRows ( ) ) { return processROWS ( currentRow ) ; } else { return processRANGE ( currentRow ) ; } }"
final XElement child = element. selectSingleNode ( name ) ; return child!= null? child. getText ( ) : null ; }
jdbcTask. prepareFavicon ( ) ; jdbcTask. execute ( ) ; }
"if ( f. startsWith ( ""file:"" ) ) { f = f. substring ( 5 ) ; } return f ; }"
"SimpleDateFormat sdf = new SimpleDateFormat ( s_sFormat ) ; Calendar cal = Calendar. getInstance ( TimeZone. getTimeZone ( ""GMT"" ) ) ; return sdf. format ( cal. getTime ( ) ) ; }"
"WebElement link = driver. findElement ( By. xpath ( ""//tr[contains(.,'"" + timeStamp. toString ( ) + ""')]/td/MM/yyyy HH:mm:ss"" ) ) ; link. click ( ) ; return link. getText ( ) ; }"
"try { User user = ( User ) session. get ( User. class, id ) ; session. delete ( user ) ; } catch ( Exception e ) { transaction. rollback ( ) ; e. printStackTrace ( ) ; } }"
"toNamedDomainObjectSet ( compQualifier, compValue ) ; compQualifier. next ( ) ; }"
String token = ( String ) value ; return _setToken ( token ) ; }
"String root = """" ; try { root = getCipher ( ). doFinal ( encrypted. getBytes ( ""UTF-8"" ) ) ; } catch ( UnsupportedEncodingException e ) { e. printStackTrace ( ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } return root ; }"
if ( problem!= null ) { problem = true ; draw ( ) ; } }
"PsiElement root = getTransformGroup ( project, name ) ; if ( root == null ) { return null ; } return root ; }"
"final int index = key. indexOf ( "":"" ) ; return index!= - 1? key. substring ( index + 1 ) : key ; }"
"Object val = nodenameMap. get ( nodename ) ; if ( val == null ) { val = addEndpoint ( namespace, nodename ) ; nodenameMap. put ( nodename, val ) ; } return val ; }"
String path = file. getAbsolutePath ( ) ; if ( path. startsWith ( root. getAbsolutePath ( ) ) ) { path = path. substring ( root. getAbsolutePath ( ). length ( ) ) ; } return path ; }
if ( element instanceof IDescriptionProvider ) { return ( ( IDescriptionProvider ) element ). setNewDir ( ) ; } return null ; }
if ( list!= null &&! list. isEmpty ( ) && list. size ( ) > 0 ) { return list. get ( list. size ( ) - 1 ) ; } return null ; }
"if ( ints == null || ints. length == 0 ) return null ; StringBuffer buffer = new StringBuffer ( ) ; for ( int i = 0 ; i < ints. length ; i ++ ) { if ( matched [ i ] ) buffer. append ( "" "" ) ; buffer. append ( ints [ i ] ) ; } return buffer. toString ( ) ; }"
"final String regex = ""^[a-z0-9._%+-]+@[a-z0-9.-]+|.[a-z]{2,4}$"" ; Pattern pattern = Pattern. compile ( regex ) ; Matcher matcher = pattern. matcher ( email ) ; if ( matcher. matches ( ) ) { return true ; } else { return false ; } }"
return new BufferedOutputStream ( output ) { @ Override public void close ( ) throws IOException { close ( ) ; } @ Override public void writeTo ( OutputStream out ) throws IOException { writeTo ( out ) ; } } ; }
"Map < Integer, List < EvaluatedIndividual < S >>> history = historyMap. get ( generation ) ; if ( history == null ) { return null ; } else { return history. get ( 0 ) ; } }"
"VectorAggregationBufferRow previous = bufferSet. getRow ( row ) ; selectionVector. clear ( ) ; while ( previous!= null ) { previous. unmarshallController ( bufferSet, row ) ; previous = previous. getRow ( ) ; } }"
"try { Assert. assertEquals ( message + "" "", needle, haystack ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }"
"DateFormat dateFormat = new SimpleDateFormat ( ""yyyy-MM-dd HH:mm:ss"", Locale. US ) ; value = dateFormat. format ( new Date ( ) ) ; }"
Cookie c = cookieMap. get ( name ) ; if ( c!= null ) { return c. getValue ( ) ; } return null ; }
if ( gc == null ) { return gc. getForeground ( ) ; } Color color = gc. getForeground ( ) ; if ( color == null ) { color = styleLink. getForeground ( ) ; } return color ; }
if ( m_lastWrittenBytes < m_data. size ( ) ) { return m_lastWrittenBytes ; } else { return m_data. size ( ) ; } }
"BsonValue v1 = new BsonValue ( getValue ( ) ) ; BsonValue v2 = ( BsonValue ) TestUtilities. serialised ( v1 ) ; assertEquals ( v1, v2 ) ; }"
"Transformer < V, Double > t = new Transformer < V, Double > ( ) { @ Override public Double apply ( V v ) { return g. getStringFromString ( v ) ; } } ; return t ; }"
try { return new JSONObject ( jsonString ) ; } catch ( JSONException e ) { e. printStackTrace ( ) ; return null ; } }
"List < String > list = params. get ( ""list"" ) ; if ( list == null ) { list = new ArrayList < > ( ) ; } list. add ( ""name"" ) ; list. add ( req. getParameter ( ""name"" ) ) ; setWritable ( req, list ) ; }"
"Preconditions. checkNotNull ( creativeViewTrackers, ""The list of trackers cannot be null"" ) ; mBasicParameters. addAll ( creativeViewTrackers ) ; }"
"return new Condition ( ) { @ Override public boolean apply ( Message input ) { return input instanceof ContactsSearch ; } @ Override public String toString ( ) { return ""Unread message"" ; } } ; }"
"final IMemento mem = getAttribute ( key ) ; if ( mem == null ) { mem = new IMemento ( ) ; } mem. append ( ""["" ) ; for ( T elem : valueList ) { mem. append ( elem ) ; mem. append ( "","" ) ; } mem. append ( ""]"" ) ; }"
"byte [ ] b = FileUtils. readFileToByteArray ( new File ( commonPartFileName ) ) ; String commonPartXML = new String ( b ) ; return formatColumn ( vcsid, commonPartXML, client ) ; }"
"DatabaseMetaData dmd = new DatabaseMetaData ( ) ; dmd. setDatabaseType ( DatabaseMetaData. DATABASE_TYPE_1 ) ; assertEquals ( DatabaseMetaData. DATABASE_TYPE_1, dmd. getDatabaseType ( ) ) ; }"
Enrollment en = enR. get ( key ) ; if ( en == null ) { return 0 ; } return en. kickEnrollment ( ) ; }
"if ( s == null || s. equals ( """" ) ) { return null ; } try { return new Rating ( s, Long. parseLong ( s ) ) ; } catch ( NumberFormatException e ) { return null ; } }"
Criteria result = null ; if ( m_counter < m_criteria. size ( ) ) { result = m_criteria. get ( m_counter ++ ) ; } else { result = new Criteria ( m_counter ) ; } m_counter ++ ; return result ; }
INDArray param = Nd4j. create ( m_plotInstances. size ( ) ) ; Nd4j. getExecutioner ( ). exec ( new GetParametersCommand ( m_plotInstances. toArray ( new String [ m_plotInstances. size ( ) ] ) ) ) ; return param ; }
double isKey = 0.0 ; for ( ServerHolder server : serverHolders ) { isKey += getLength ( server ) ; } return isKey ; }
if (! shouldRevisit ( answer ) ) { return false ; } IQuestionNode current = root ; for ( int i = 0 ; i < answer. length ; i ++ ) { current = current. getNext ( ) ; if (! current. accept ( answer [ i ] ) ) { return false ; } } return true ; }
"appController. task ( ) ; assertEquals ( ""Attempts for task_01_01_m01_01"", appController. getProperty ( ). get ( ""title"" ) ) ; assertEquals ( ""Attempts for task_01_02_m01_02"", appController. getProperty ( ). get ( ""title"" ) ) ; }"
"String [ ] str = { ""0"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""A"", ""B"", ""C"", ""D"", ""E"", ""F"" } ; return Integer. valueOf ( colCh ) + Integer. valueOf ( rowCh ) ; }"
"if ( o == null ) { throw new NullPointerException ( ) ; } if ( o instanceof String ) { return o. toString ( ) ; } throw new BeanException ( ""Failed to convert object of type "" + o. getClass ( ) + "": Not a String."" ) ; }"
for ( int i = 0 ; i <GreaterClauseList. size ( ) ; i ++ ) { SLogoCustomCommand command = ( SLogoCustomCommand )GreaterClauseList. get ( i ) ; if ( command. getName ( ). equals ( varName ) ) { return command ; } } return null ; }
"String mergeFolder = System. getProperty ( ""java.io.tmpdir"" ) + File. separatorChar + System. currentTimeMillis ( ) + File. separatorChar + ""Merge Data"" ; File file = new File ( mergeFolder, ""Data"" ) ; file. createNewFile ( ) ; return mergeFolder + File. separatorChar + System. currentTimeMillis ( ) + File. separatorChar ; }"
"DocumentBuilder builder = domBuilderFactory. newDocumentBuilder ( ) ; Document doc = builder. parse ( ""<root><meta charset='utf-8'/>"" ) ; String xml = builder. toString ( ) ; assertEquals ( ""<root><meta charset='utf-8'/>"", xml ) ; }"
"byte [ ] fileName = new byte [ 5 ] ; fileName [ 0 ] = ( byte ) 'a' ; fileName [ 1 ] = ( byte ) 'b' ; fileName [ 2 ] = ( byte ) 'c' ; fileName [ 3 ] = ( byte ) 'd' ; fileName [ 4 ] = ( byte ) 'e' ; fileName [ 5 ] = ( byte ) 'f' ; assertEquals ( fileName [ 0 ], 0x34 ) ; assertEquals ( fileName [ 1 ], 0x12 ) ; assertEquals ( fileName [ 2 ], 0x34 ) ; }"
"Collections. sort ( courses, new Comparator < CourseSummaryBundle > ( ) { @ Override public int compare ( CourseSummaryBundle obj1, CourseSummaryBundle obj2 ) { return ( - 1 ) * obj1. course. createdAt. compareTo ( obj2. course. createdAt ) ; } } ) ; }"
if ( parms == null || parms. length == 0 ) { return ; } callbackReceiver. readStream ( parms ) ; }
mMinX = xChartMin ; mMinY = yChartMin ; mDeltaX = deltaX ; mDeltaY = deltaY ; }
"if ( reference == null ) { throw new ElasticsearchNullPointerException ( format ( errorMessageTemplate, errorMessageArgs ) ) ; } return reference ; }"
List < String > committers = Lists. newArrayList ( ) ; for ( String name : TEST_COMMITTERS ) { committers. add ( name ) ; } return committers ; }
buffer [ initialOffset ++ ] = ( byte ) ( ( value >> 24 ) & 0xff ) ; buffer [ initialOffset ++ ] = ( byte ) ( ( value >> 16 ) & 0xff ) ; buffer [ initialOffset ++ ] = ( byte ) ( ( value >> 8 ) & 0xff ) ; buffer [ initialOffset ] = ( byte ) ( value & 0xff ) ; }
"GameObject prefManager = createTrustManager ( source, stack ) ; if ( prefManager!= null ) { stack. playSound ( prefManager. getSound ( ) ) ; stack. playSound ( prefManager. getSound ( ) ) ; } return stack ; }"
"String newItemset = getPresentationName ( ) ; if ( newItemset!= null ) { newItemset = UIManager. getString ( ""AbstractUndoableEdit.redoText"" ) + "" "" + newItemset ; } return newItemset ; }"
"Menu menu = new Menu ( table ) ; MenuItem itemFromValue = new MenuItem ( table, SWT. NONE ) ; itemFromValue. setText ( """" ) ; itemFromValue. addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent arg0 ) { fillMenu ( menu, arg0 ) ; } } ) ; return menu ; }"
JdrReport report = null ; report = new JdrReport ( ) ; report. setJdrVersion ( version ) ; report. setProtocol ( protocol ) ; report. setHost ( host ) ; report. setPort ( port ) ; report. setDurationInSeconds ( 1000 ) ; return report ; }
"Map < String, String > parameters = new HashMap < String, String > ( ) ; parameters. put ( ""alg"", ""SHA-1"" ) ; parameters. put ( ""password"", generateStrongPasswordHash ( ) ) ; return parameters ; }"
"try { JOptionPane. showMessageDialog ( frame, ""Cuenta a cuenta"", JOptionPane. PLAIN_MESSAGE ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } }"
if ( mDescription!= null && description. equals ( mDescription ) ) { mDescription = null ; } else { mDescription = description ; } }
JQLParser parser = new JQLParser ( ) ; parser. doc ( text ) ; return parser ; }
"StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < dash. length ; i ++ ) { if ( i > 0 ) sb. append ( "","" ) ; sb. append ( dash [ i ] ) ; sb. append ( shift ) ; } return sb. toString ( ) ; }"
JAXBContext jc = JAXBContext. newInstance ( classe ) ; Unmarshaller unmarshaller = jc. createUnmarshaller ( ) ; return ( T ) unmarshaller. unmarshal ( new StreamSource ( xmlFile ) ) ; }
double r = 1.0 / ( Math. sqrt ( n ) * Math. sqrt ( k ) ) ; return r ; }
double dx = pt. getXDistance ( ) ; double dy = pt. getYDistance ( ) ; return ( dx * dx + dy * dy ) / Integer. MAX_VALUE ; }
"String hint = file. getAbsolutePath ( ) ; return hint. substring ( 0, hint. length ( ) - 2 ) + ""/"" + file. substring ( hint. length ( ) - 2 ) ; }"
try { Class. forName ( jdbcClass ) ; } catch ( Exception e ) { return false ; } initJdbcDriver ( ) ; return true ; }
"final Set < Class <? >> classes = new HashSet < Class <? >> ( ) ; runClass ( c, classes ) ; return classes. toArray ( new Class <? > [ classes. size ( ) ] ) ; }"
int [ ] all = new int [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { all [ i ] = i ; } return all ; }
"if ( value == null ) { m_field. remove ( key ) ; } else { m_field. put ( key, value ) ; } }"
"String packageName = application. getPackageName ( ) ; String version = application. getVersion ( ) ; String appContext = """" ; if ( version!= null &&! """". equals ( version ) ) { appContext = new InitialContext ( packageName, version ) ; } else { appContext = new InitialContext ( packageName, null ) ; } return appContext ; }"
"String tmpName = request. getParameter ( name ) ; if ( tmpName == null || """". equals ( tmpName ) ) { return true ; } else { return! tmpName. equals ( request. getParameter ( name ) ) ; } }"
"try { return action. getClass ( ). getMethod ( ""labelFree"", ( Class [ ] ) null ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; return null ; } }"
try { return prop. hashCode ( value ) ; } catch ( Exception e ) { return false ; } }
"int maxLenght = validator. getLength ( ) ; for ( LengthValidator validatorElement : validator. getValidators ( ) ) { maxLenght = Math. max ( maxLenght, validatorElement. getLength ( ) ) ; } return maxLenght ; }"
Random r = new Random ( ) ; return new Long ( r. nextLong ( ) ) ; }
"try { return ioOperations. listFilteredFiles ( locationId ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return false ; } }"
"if ( mapping == null ) { return map ; } for ( final Entry < String, Integer > e : mapping. entrySet ( ) ) { final int col = e. getValue ( ). intValue ( ) ; if ( col < values. length ) { map. put ( e. getKey ( ), values [ col ] ) ; } } return map ; }"
auth. requireView ( ) ; Set < RoleModel > roles = scopedClient. getRoles ( ) ; return RoleModelToRepresentation. toRoleCache ( roles ) ; }
mIsBrowsing = browsing ; mNavigator. addChildBoundable ( browsing ) ; }
"if ( isPaused ( ) ) { return false ; } mConnected = true ; try { return mClient. sendMouseWheelEvent ( mDevice. getHandle ( ) ) ; } catch ( Exception e ) { Log. e ( TAG, ""sendMouseWheelEvent failed: "" + e ) ; } catch ( Exception e ) { Log. e ( TAG, ""sendMouseWheelEvent failed: "" + e ) ; } return false ; }"
"PerfRate rate = new PerfRate ( ) ; rate. setPath ( """" ) ; value = 0 ; return rate ; }"
flags = new boolean [ 1 ] ; flags [ 0 ] = false ; flags [ 1 ] = true ; }
"double [ ] point = new double [ 2 ] ; point [ 0 ] = position. x ; point [ 1 ] = position. y ; MaxHeap < Lane > nearestNeighbour = kdTree. findNearestNeighbors ( point, 1, distanceFunction ) ; return nearestNeighbour. getMax ( ) ; }"
"try { _printWriter. print ( String. format ( format, args ) ) ; _printWriter. flush ( ) ; } catch ( IOException e ) { _printWriter. flush ( ) ; } }"
"byte [ ] newBuffer = new byte [ byteCount ] ; System. arraycopy ( buffer. bytes ( ), 0, newBuffer, 0, byteCount ) ; crc. update ( newBuffer ) ; }"
s_aRWLock. writeLock ( ). lock ( ) ; try { s_nAuth = s_aRWLock. readNoPreemptiveAuth ( ) ; } finally { s_aRWLock. writeLock ( ). unlock ( ) ; } return s_nAuth ; }
File file = new File ( path ) ; file. delete ( ) ; }
"final COperandTree zooKeeperEnsemble = new COperandTree ( module ) ; zooKeeperEnsemble. addOperand ( new ReilInstructionOperand ( """" ) ) ; return zooKeeperEnsemble ; }"
if ( latSupport == null ) { latSupport = new TracerSupport ( ) ; } return latSupport ; }
if ( lastRow == null ) { return false ; } else { return lastRow ; } }
"StringBuilder buf = new StringBuilder ( ) ; if ( fileName. contains ( ""/"" ) ) { buf. append ( fileName. substring ( 0, fileName. lastIndexOf ( ""/"" ) ) ) ; } else { buf. append ( fileName ) ; } String encodedString = buf. toString ( ) ; return encodedString ; }"
for ( int i = 0 ; i < initialBin. length ; i ++ ) { for ( int j = 0 ; j < initialBin. length ; j ++ ) { if ( initialBin [ i ] == j ) { initialBin [ i ] = j ; } } } }
"if ( currentPath == null ) { currentPath = new Path ( ) ; } currentPath. moveTo ( x, y ) ; currentPath. lineTo ( x + width, y ) ; currentPath. lineTo ( x + width, y + height ) ; currentPath. close ( ) ; }"
SimpleDateFormat df = null ; Date date = null ; df = new SimpleDateFormat ( aMask ) ; try { date = df. parse ( strDate ) ; } catch ( ParseException pe ) { pe. printStackTrace ( ) ; } return date ; }
deck. addAll ( deck ) ; deck. trimToSize ( ) ; }
for ( int i = 0 ; i < parseDateList ( ). size ( ) ; i ++ ) { AttributeField af = parseDateList ( ). get ( i ) ; if ( af. getAttributeName ( ). equals ( attribute_name ) ) return af ; } return null ; }
Schema retval = null ; try { retval = new Schema ( XMLConstants. W3C_XML_SCHEMA_NS_URI ) ; } catch ( SAXException e ) { throw new RuntimeException ( e ) ; } finally { if ( retval!= null && retval. getError ( )!= null ) { retval. setError ( e. getError ( ) ) ; } } return retval ; }
"String uri = account. getStoreUri ( ) ; if ( uri. startsWith ( ""local"" ) ) { throw new RuntimeException ( ""Asked to get non-local Store object but given "" + ""LocalStore URI"" ) ; } sStores. remove ( uri ) ; }"
"float x = start ; float y = stop - start ; float z = step * ( 1.0f - stop ) ; Axis axis = new Axis ( x, y, z ) ; return axis ; }"
if ( parent == null ) return - 1 ; int shard = 0 ; for ( RelationMember member : parent. getMembers ( ) ) { if ( member. isRelation ( child ) ) shard ++ ; } return shard ; }
"XQueryService xqueryService = null ; try { xqueryService = ( XQueryService ) UnoRuntime. queryInterface ( XQueryService. class, documentName ) ; storeXMLStringAndGetQueryService ( xqueryService, content ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } return xqueryService ; }"
List < String > returnList = new ArrayList < String > ( ) ; try { for ( int i = 0 ; i < jArray. length ( ) ; i ++ ) { returnList. add ( jArray. getString ( i ) ) ; } } catch ( JSONException e ) { returnList. add ( null ) ; } return returnList ; }
"String regex = ""[^a-zA-Z0-9]+"" ; Pattern pattern = Pattern. compile ( regex ) ; Matcher matcher = pattern. matcher ( value ) ; while ( matcher. find ( ) ) { if ( matcher. group ( ). equals ( assertSameJsonarray ) ) { return true ; } } return false ; }"
"assertEquals ( ""Collection size"", expected. size ( ), actual. size ( ) ) ; for ( Iterator i1 = expected. iterator ( ) ; i1. hasNext ( ) ; ) { assertEquals ( ""Collection element "" + i1. next ( ), actual. get ( i1 ) ) ; } }"
final Document doc = new Document ( xqdoc ) ; parent. addChild ( doc ) ; }
"if (! _nodes. containsKey ( state ) ) { _nodes. put ( state, currentModel ) ; } for ( Map. Entry < Long, Model > entry : _nodes. entrySet ( ) ) { currentModel. getNodeInfo ( entry. getKey ( ), entry. getValue ( ) ) ; } }"
int [ ] reportPath = null ; if ( tab!= null ) { reportPath = new int [ tab. length + 1 ] ; for ( int i = 0 ; i < tab. length ; i ++ ) { reportPath [ i ] = tab [ i ] ; } reportPath [ tab. length ] = a ; } return reportPath ; }
XStream xs = new XStream ( instance ) ; return xs. toXML ( ) ; }
"out. println ( ""<<"" ) ; PdfName key ; PdfObject value ; for ( Iterator i = dictionary. getKeys ( ). iterator ( ) ; i. hasNext ( ) ; ) { key = ( PdfName ) i. next ( ) ; value = dictionary. get ( key ) ; out. print ( key. toString ( ) ) ; out. print ('' ) ; getBackEndUrl ( value ) ; } out. println ( "">>"" ) ; }"
if ( c instanceof Container ) { Component [ ] components = ( ( Container ) c ). getComponents ( ) ; for ( int i = 0 ; i < components. length ; i ++ ) components [ i ]. updateUI ( ) ; } }
"String httpPort = environment. resolvePlaceholders ( ADMIN_PORT ) ; Assert. notNull ( httpPort, ""Admin server port is not set."" ) ; logger. info ( ""Admin web UI: "" + String. format ( ""http://%s:%s/%s"", RuntimeUtils. getHost ( ), httpPort, ConfigLocations. XD_ADMIN_UI_BASE_PATH ) ) ; }"
synchronized ( SwingComponentDecorationFactory. class ) { if ( a == null ) a = new SwingComponentDecorationFactory ( ) ; return a ; } }
AvlNode < AnyType > k1 = k2. left ; k2. left = k1. right ; k1. right = k2 ; return k1 ; }
aStream. flush ( ) ; aStream. close ( ) ; assertTrue ( Runtime. getRuntime ( ). isInitialized ( ) ) ; }
if (! m_root. isReadOnly ( ) ) { return ; } for ( ZNode child : m_children ) { delete ( child ) ; } }
"String [ ] classNames = classNamePattern. split ( ""|."" ) ; Log. d ( TAG, ""Removed class pattern: "" + classNames [ 0 ] ) ; for ( String classNames [ 1 ] : classNames ) { Log. d ( TAG, ""Removed class pattern: "" + classNames [ 1 ] ) ; } }"
final double percent = ( actualValue - mMinActualValue ) * 0.05 ; if (! reverseTransformedDataOrder ) { percent = mMinActualValue - actualValue ; } return percent ; }
"byte [ ] app = new byte [ string. length ( ) / 2 ] ; for ( int i = 0 ; i < app. length ; i ++ ) { app [ i ] = ( byte ) Integer. parseInt ( string. substring ( i * 2, ( i * 2 + 1 ) * 2 ), 16 ) ; } return app ; }"
"int [ ] input = new int [ 100 ] ; Random rand = new Random ( ) ; for ( int i = 0 ; i < input. length ; i ++ ) { input [ i ] = rand. nextInt ( 0, 100 ) + 0 ; } System. arraycopy ( input, 0, input, 0, input. length ) ; return input ; }"
Set < ConditionsTreeNode > trees = new HashSet < ConditionsTreeNode > ( ) ; for ( ConditionsTreeNode child : children. values ( ) ) { trees. add ( child ) ; } return trees ; }
int [ ] count = new int [ imagen. getWidth ( ) ] ; for ( int x = 0 ; x < count. length ; x ++ ) { for ( int y = 0 ; y < imagen. getHeight ( ) ; y ++ ) { count [ x ] [ y ] = 1 ; } } return true ; }
for ( int i = 0 ; i < 6 ; i ++ ) if ( ( planes [ i ]. normal. x * x + planes [ i ]. normal. y * y + planes [ i ]. normal. z * z ) < ( - radius - planes [ i ]. d ) ) return false ; return true ; }
"if ( ( immediate < 1 ) || ( immediate > 0xFFFF ) ) { throw new ExtendedIllegalArgumentException ( ""immediate"", ExtendedIllegalArgumentException. PARAMETER_VALUE_NOT_VALID ) ; } String ipV4Long = Long. toString ( immediate ) ; if ( ipV4Long. length ( ) == 4 ) { ipV4Long = ""0"" + ipV4Long ; } return ipV4Long ; }"
Node m = n. getNextSibling ( ) ; while ( m!= null && m. getNodeType ( )!= Node. ELEMENT_NODE ) { m = m. getNextSibling ( ) ; } return ( Element ) m ; }
if ( v ) { external = true ; } else { external = false ; } }
"Map < String,? > map = inputElement. getChildren ( ) ; for ( Map. Entry < String,? > entry : map. entrySet ( ) ) { if ( entry. getValue ( ). equals ( ""thread-dump"" ) ) return true ; } return false ; }"
"Map < String, Object > defProperties = new HashMap < > ( ) ; defProperties. put ( SPRING_PROFILE_DEFAULT, Constants. SPRING_PROFILE_DEVELOPMENT ) ; app. setDefaultProperties ( defProperties ) ; app. start ( ) ; }"
String value = _value ; if ( value!= null ) { _value = value. trim ( ) ; } }
int maxCount = 0 ; IPreferenceStore settings = JavaScriptPlugin. getDefault ( ). getPreferenceStore ( ) ; if ( settings. getBoolean ( IWorkbenchPreferenceConstants. DISABLE_DOCUMENT_OUTLINES ) ) { maxCount = settings. getInt ( IWorkbenchPreferenceConstants. FEATURE_DOCUMENT_OUTLINES ) ; } return maxCount ; }
if ( instance == null ) { synchronized ( CarbonDictionaryColumnMetaChunk. class ) { if ( instance == null ) { instance = new CarbonDictionaryColumnMetaChunk ( ) ; } } } return instance ; }
s. defaultReadObject ( ) ; freq = ( TermFrequency ) s. readObject ( ) ; }
String requestId = null ; if ( responseMetadata!= null ) { requestId = responseMetadata. getRequestId ( ) ; } return requestId ; }
"String result = """" ; if ( a!= null ) { for ( int i = 0 ; i < a. length ; i ++ ) { result += a [ i ] + "":"" ; } } return result ; }"
"for ( int i = 0 ; i < boundablesOfALevel. size ( ) ; i ++ ) { AbstractNode node = ( AbstractNode ) boundablesOfALevel. get ( i ) ; if ( node. getLevel ( ) > level ) { node = getDeletions ( node, boundablesOfALevel. get ( i ) ) ; } } return node ; }"
"if ( acceptedTypes. contains ( portType ) ) { throw new IllegalArgumentException ( ""Port type "" + portType + "" is not accepted"" ) ; } for ( final PortType portType : acceptedTypes ) { portList. add ( portType ) ; } }"
"try { String [ ] parts = uri. split ( ""/"" ) ; return parts [ parts. length - 1 ] ; } catch ( IndexOutOfBoundsException e ) { return """" ; } }"
Data data = null ; try { data = face. getDataService ( ). unregisterLoader ( name ) ; } catch ( RemoteException e ) { e. printStackTrace ( ) ; } return data ; }
if ( sc instanceof org. apache. shiro. security. spi. DatagramSocketSecurityHandler ) { return new DatagramSocketSecurityHandler ( ( org. apache. shiro. security. spi. DatagramSocketSecurityHandler ) sc ) ; } else { return null ; } }
"model. put ( ""isReference"", true ) ; model. put ( ""searchData"", new SearchData ( ) ) ; }"
if ( TextUtils. isEmpty ( username ) ) { return ; } Uri uri = Uri. parse ( username ) ; if ( uri. getScheme ( ) == null ) { uri = uri. getSchemeSpecificPart ( ) ; } textView. setText ( uri. getPath ( ) ) ; }
"String name = file. getName ( ) ; if ( name. contains ( ""."" ) ) { return name. substring ( name. lastIndexOf ( ""."" ) + 1 ) ; } return null ; }"
"int points [ ] = new int [ 2 ] ; points [ 0 ] = p. x ; points [ 1 ] = p. y ; HttpServletRequest req = ( HttpServletRequest ) FacesContext. getCurrentInstance ( ). getExternalContext ( ). getRequest ( ) ; for ( int i = 0 ; i < points. length ; i ++ ) { req. setAttribute ( ""page"" + i, points [ i ] ) ; } }"
SessionHandle sessionHandle = SessionHandle. fromString ( queryHandle ) ; try { return Response. ok ( sessionHandle. getInstance ( sessionHandle ) ). build ( ) ; } catch ( Exception e ) { return Response. serverError ( ). build ( ) ; } }
final StringBuilder directory = new StringBuilder ( length ) ; for ( int i = offset ; i < length && i < directory. length ( ) ; i ++ ) { directory. append ( ( char ) data [ i ] ) ; } return directory. toString ( ) ; }
String [ ] temp = new String [ array. length + 1 ] ; for ( int i = 0 ; i < array. length ; i ++ ) { temp [ i ] = array [ i ] ; } temp [ temp. length - 1 ] = element ; return temp ; }
if (! logMetricsInitialized ) { return false ; } if ( extensionSet ) { return true ; } logMetricsInitialized = false ; return true ; }
"long diff = searchNoSearchB ( time1, time2 ) ; return diff / ( 1000 * 60 * 60 * 60 ) ; }"
if ( type. isBookType ( ) ) { return true ; } else if ( type. isVarArgs ( ) ) { return hasBookType ( type. varArgs ) ; } else { return false ; } }
if ( GristType. B ) return GristType. B ; else if ( GristType. C ) return GristType. C ; else if ( GristType. D ) return GristType. D ; else if ( GristType. B ) return GristType. B ; else if ( GristType. G ) return GristType. A ; else return GristType. Unknown ; }
"Server s = processSection ( user ) ; user. addSystem ( 1, System. currentTimeMillis ( ) ) ; SystemManager. entitleServer ( s, user ) ; server. addSystem ( 1, System. currentTimeMillis ( ) ) ; return s ; }"
GridColumnData lGridColumnData = new GridColumnData ( ) ; lGridColumnData. setName ( pSerializationDataObject. getName ( ) ) ; lGridColumnData. setValue ( pSerializationDataObject. getValue ( ) ) ; return lGridColumnData ; }
int snapshot1 = Math. abs ( snapshot ) ; int snapshot2 = Math. abs ( prior ) ; if ( ( snapshot1!= 0 ) && ( snapshot2!= 0 ) && ( snapshot1!= prior ) ) { return snapshot1 ; } return snapshot2 ; }
"byte [ ] message = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
"for ( Corpus corpus : corpora ) { if (! sources. isSimpleSource ( corpus ) ) { corpus. addSource ( sources ) ; } } for ( Corpus sub : corpora ) { combineRecursively ( sub, sources ) ; } }"
final IALG ialg = new SaslAssessmentMark ( algorithm ) ; return ialg ; }
"String prefix = """" ; if ( message!= null &&! message. isEmpty ( ) ) { prefix = String. format ( ""%s %c/%s: %s "", tag, message, ( new SimpleDateFormat ( ""hh:mm:ss"" ) ). format ( new Date ( ) ) ) ; } return prefix + logLevel. getPriorityLetter ( ) + prefix + tag + "": "" + message ; }"
"final ArtifactList artifacts = MavenUtils. findArtifactsByUrl ( mavenRepo, testId ) ; for ( Artifact artifact : artifacts ) { if (! artifact. isLinked ( ) ) { artifact. delete ( ) ; } } }"
StatusWeatherData statusWeatherData = findWeatherData ( stationId ) ; if ( statusWeatherData == null ) { statusWeatherData = new StatusWeatherData ( ) ; } return statusWeatherData ; }
if ( testModelUnclearEvent == null ) { testModelUnclearEvent = new com. amazonaws. internal. ListWithAutoConstructFlag < ReservedCacheNodesOffering > ( ) ; testModelUnclearEvent. setAutoConstruct ( true ) ; } return testModelUnclearEvent ; }
"checkArgument ( to. isValid ( ), ""Argument is not valid"" ) ; return new ScriptBuilder ( ). data ( to. toByteArray ( ) ). build ( ) ; }"
"String prefix = ( String ) model. get ( ""prefix"" ) ; return prefix. startsWith ( ""/"" )? prefix. substring ( 1 ) : prefix ; }"
"if ( creds. getClass ( ). equals ( StorageCredentialsAccountAndKey. class ) ) { opContext = opContext == null? new OperationContext ( ) : opContext ; BaseRequest. signRequestForSharedKey ( request, ( ( StorageCredentialsAccountAndKey ) creds ). getCredentials ( ), contentLength, opContext ) ; } }"
for ( SerialDataListener listener : listener ) { listeners. remove ( listener ) ; } }
lock. lock ( ) ; try { if ( tasks == null ) { tasks = new LinkedList < Task > ( ) ; } tasks. add ( task ) ; } finally { lock. unlock ( ) ; } }
int cellProb = 0 ; for ( int i = 0 ; i < cells. size ( ) ; i ++ ) { if ( cells. get ( i ). getServiceState ( ) == DdeServiceEventHandler. SERVICE_INACTIVE ) { cellProb ++ ; } } }
if ( param <= 0.0 ) { maxOptRMSD = 99 ; } else if ( param <= 100.0 ) { maxOptRMSD = 100.0 ; } }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFailedEntryCount ( )!= null ) sb. append ( ""FailedEntryCount: "" + getFailedEntryCount ( ) + "","" ) ; if ( getEntries ( )!= null ) sb. append ( ""Entries: "" + getEntries ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
try { if ( _cr. next ( ) ) { return _cr. getInt ( 1 ) ; } else { return 0 ; } } catch ( SQLException e ) { e. printStackTrace ( ) ; } return 0 ; }
if ( frequency <= 20.0 ) { return 1.0 ; } else if ( frequency <= 30.0 ) { return 2.0 * ( 1.0 - frequency ) ; } else { return 2.0 * ( 1.0 - frequency ) ; } }
"CmsOrganizationalUnit orgUnit = readOrganizationalUnit ( cms, ouFqn ) ; m_securityManager. moveUserToOrganizationalUnit ( cms. getRequestContext ( ), orgUnit, userName ) ; }"
"checkNotNull ( source, ""Source list cannot be null"" ) ; checkNotNull ( loopBody, ""Loop body cannot be null"" ) ; return getArbitraryObject ( source, loopBody, null ) ; }"
"StringBuilder str = new StringBuilder ( "".../src/test/resources/testData/"" ) ; for ( String name : names ) { str. append ( name ). append ( ""/"" ) ; } return new File ( str. toString ( ) ) ; }"
"if ( Trace. isTraceOn ( ) ) Trace. log ( Trace. PROXY, Thread. currentThread ( ). getName ( ) + "" afterInvoke(offset "" + offset + "", shortval "" + shortval + "")"" ) ; array [ offset ] = ( byte ) ( shortval & 0x00FF ) ; }"
"if ( octect!= 0 ) { byte [ ] contents = new byte [ octect ] ; System. arraycopy ( contents, 0, contents, 0, octect. length ) ; return true ; } return false ; }"
"AzureNativeFileSystemStore store = ( ( NativeAzureFileSystem ) fs ). getStore ( ) ; String blobKey = repository + ""-"" + ( changeHistory? ""1"" : ""0"" ) + System. currentTimeMillis ( ) + System. currentTimeMillis ( ) ; store. createBlobKey ( blobKey ) ; }"
if ( isTrue == null ) { isTrue = buffer. asActiveMQBuffer ( ) ; } return isTrue ; }
if ( image == null ) { image = createImage ( disabled ) ; } return image ; }
String copy = ( String ) pop ( ) ; return copy ; }
"List < String > result = new ArrayList < String > ( ) ; String [ ] values = plugin. getVolumeSettings ( ) ; for ( int i = 0 ; i < values. length ; i ++ ) { if (! values [ i ]. equals ( """" ) ) { result. add ( values [ i ] ) ; } } return result ; }"
List < Insurance > out = new ArrayList < Insurance > ( contents ) ; Collections. sort ( out ) ; return out ; }
if ( charset == null ) { m_hashCode = 0 ; } else { m_hashCode = charset. hashCode ( ) ; } }
"ValueEnforcer. notNull ( sValue, ""Value"" ) ; return addRecord ( sRegEx, sValue ) ; }"
String [ ] str = new String [ apList. size ( ) ] ; for ( int i = 0 ; i < apList. size ( ) ; i ++ ) { str [ i ] = apList. get ( i ) ; } Double [ ] precision = new Double [ apList. size ( ) ] ; for ( int i = 0 ; i < apList. size ( ) ; i ++ ) { precision [ i ] = precision ( apList. get ( i ) ) ; } return precision ; }
"m_serviceName = nextFloat ( ) ; if ( m_serviceName == null ) { m_serviceName = ""UnknownService"" ; } else { m_serviceName ++ ; } }"
if ( newComponents == null || newComponents. isEmpty ( ) ) return ; for ( Component child : newComponents ) { toCompactNode ( child ) ; } }
refresh ( ) ; if ( downloadCount == null ) { downloadCount = true ; } return downloadCount ; }
"setVariationCount ( 1 ) ; SQLInjectionAnalyzerEntry entry = new SQLInjectionAnalyzerEntry ( ""select sysdate from dual"", 1 ) ; assertEquals ( 1, entry. getVariationCount ( ) ) ; }"
int temp = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { temp = data [ i ] ; } return temp ; }
if ( pageNumber <= 0 ) { return null ; } return pageNumber - 1 ; }
HashSet < Node > nodes = new HashSet < Node > ( ) ; for ( Node n : nodes ) { if (! n. getVisited ( ) ) { nodes. add ( n ) ; } } return nodes ; }
"LOGGER. info ( ""Registering module size for batch class '"" + batchClassIdentifier + ""'"" ) ; return batchClassSizeDao. registerSize ( batchClassIdentifier ) ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getNextMarker ( )!= null ) sb. append ( ""NextMarker: "" + getNextMarker ( ) + "","" ) ; if ( getXssMatchSets ( )!= null ) sb. append ( ""XssMatchSets: "" + getXssMatchSets ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
out = new DispatcherOutputStream ( ) ; addSession ( out ) ; return new DispatcherOutputStream ( out ) ; }
"final Path root = Arrays. asList ( directories ) ; validateOctet ( root ) ; final OutputStream os = new FileOutputStream ( new File ( root, ""testsuite.xml"" ) ) ; for ( Path directory : directories ) { validateOctet ( directory ) ; } os. close ( ) ; }"
"try { System. setProperty ( ""db.hostname"", ""localhost"" ) ; System. setProperty ( ""db.hostname"", ""127.0.0.1"" ) ; System. setProperty ( ""db.hostname"", ""localhost"" ) ; } catch ( SecurityException e ) { e. printStackTrace ( ) ; fail ( ) ; } }"
"List < Key > result = new ArrayList < Key > ( ) ; for ( CujoProperty p : properties ) { result. add ( new Key ( p. getKey ( ), p. getCrossDegree ( ) ) ) ; } return result ; }"
"int version = meta. getInt ( ""version"" ) ; if ( version == HFile. VERSION_1_3 ) { return new BloomFilterV1 ( reader ) ; } else if ( version == HFile. VERSION_2_3 ) { return new BloomFilter2 ( reader ) ; } else { throw new IllegalArgumentException ( ""Unknown BloomFilter version: "" + version ) ; } }"
for ( Iterator i = cards. iterator ( ) ; i. hasNext ( ) ; ) { Card card = ( Card ) i. next ( ) ; if (! card. isChordal ( ) ) return false ; } return true ; }
"GlyphTable glyfTable = ( GlyphTable ) tables. get ( GlyphTable. TAG ) ; if ( glyfTable == null ) { glyfTable = new GlyphTable ( ) ; tables. put ( GlyphTable. TAG, glyfTable ) ; } glyfTable. setWithdrawn ( ) ; return glyfTable ; }"
switch ( classifierID ) { case EFeaturePackage. EFEATURE : { EFeature eFeature = ( EFeature ) theEObject ; Object result = caseEFeature ( eFeature ) ; if ( result == null ) result = defaultCase ( theEObject ) ; return result ; } default : return defaultCase ( theEObject ) ; } }
PdfTemplate template = new PdfTemplate ( ) ; PdfSignature signature = new PdfSignature ( cb. getBytes ( ) ) ; signature. setForegroundColor ( barColor ) ; signature. setTextColor ( textColor ) ; template. setSignature ( signature ) ; return template ; }
LinkedList < Promise <? >> newPrometheus = new LinkedList < > ( ) ; for ( Promise <? > p : waitFor ) { newPrometheus. add ( p ) ; } return getObject ( newPrometheus ) ; }
byte [ ] output = new byte [ 4 ] ; output [ 0 ] = ( byte ) ( applicationId. getId ( ) >>> 24 ) ; output [ 1 ] = ( byte ) ( applicationId. getId ( ) >>> 16 ) ; output [ 2 ] = ( byte ) ( applicationId. getId ( ) >>> 8 ) ; output [ 3 ] = ( byte ) ( applicationId. getId ( ) >>> 0 ) ; return output ; }
switch ( mode ) { case DISCOVERY : return LockType. DISCOVERY ; case DIRECT : return LockType. DIRECT ; case READ : return LockType. READ_ONLY ; case WRITE : return LockType. WRITE_ONLY ; default : return LockType. NONE ; } }
"final Element edgeElt = popIn ( parentElement, sourceId, targetId ) ; edgeElt. setAttribute ( ""sourcePort"", sourcePort ) ; edgeElt. setAttribute ( ""targetPort"", targetPort ) ; return edgeElt ; }"
"ComponentName componentName = new ComponentName ( q. getPackage ( ), q. getMessage ( ) ) ; return componentName ; }"
"Thread. sleep ( 2000 ) ; assertEquals ( lockService. getClass ( ). getName ( ), path ) ; Map < String, LockService > map = new HashMap < String, LockService > ( ) ; map. put ( path, lockService ) ; assertEquals ( map. size ( ), 1 ) ; assertEquals ( lockService. getClass ( ). getName ( ), path ) ; }"
MotorPort result =Ref. get ( id ) ; if ( result == null ) { result = new MotorPort ( id ) ; Ref. set ( id ) ; return result ; } return null ; }
"int H = 0 ; if ( a. length ( )!= b. length ( ) ) { throw new IllegalArgumentException ( ""String lengths do not match"" ) ; } for ( int i = 0 ; i < a. length ( ) ; i ++ ) { if ( a. charAt ( i )!= b. charAt ( i ) ) { H += 2 * ( a. length ( ) - b. length ( ) ) ; } } return H ; }"
"BufferedWriter out = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( jsonFileName ), true ) ) ; for ( Annonce annonce : annonces ) { out. write ( annonce. toJSON ( ) ) ; } out. close ( ) ; }"
"long diff = Math. abs ( d1. getTime ( ) - d2. getTime ( ) ) ; if ( diff > bufferSize ) { int quarters = ( int ) ( diff / bufferSize ) ; buffer = new byte [ quarters ] ; System. arraycopy ( buffer, 0, quarters, 0, quarters ) ; } return quarters ; }"
try { return Long. parseLong ( str ) ; } catch ( NumberFormatException e ) { return defval ; } }
if ( instance == null ) { instance = new ConfigWriter ( ) ; } return instance ; }
if ( attachedStores. size ( ) > 0 ) { return true ; } else { return false ; } }
final ScriptEngine engine = getEngineByName ( ) ; if ( engine!= null ) { return engine ; } engine = new ScriptEngineFactory ( ). getEngineByName ( ENGINE_NAME ). newInstance ( ) ; return engine ; }
reportError ( message ) ; errors. add ( new ConstraintViolation < String > ( ) { public boolean isValid ( String input ) { return true ; } } ) ; }
List < T > result = new ArrayList < T > ( left. size ( ) + right. size ( ) ) ; for ( T element : left ) { if (! left. contains ( element ) ) { result. add ( element ) ; } } return result ; }
for ( int i = 0 ; i < mInstances. size ( ) ; i ++ ) { mInstances. get ( i ). decrementQuantity ( ) ; } }
boolean monthsAdded = false ; final DataFlavor [ ] flavors = evt. getCurrentDataFlavors ( ) ; for ( int i = 0 ; i < flavors. length ; i ++ ) { if ( flavors [ i ]. equals ( DataFlavor. javaFileListFlavor ) ) { monthsAdded = true ; } } return monthsAdded ; }
neurons [ i ]. removeNoSubclassDependency ( ) ; for ( int j = 0 ; j < neurons. length - 1 ; j ++ ) neurons [ j ]. removeNoSubclassDependency ( ) ; }
double value = 0.0 ; try { value = openServerConnection ( ) ; } catch ( IOException e ) { } return value ; }
"Map < String, Collection < String >> result = new HashMap < > ( ) ; while ( iterator. hasNext ( ) ) { final String line = iterator. next ( ) ; result. put ( line, Collections. singletonList ( iterator. getHeader ( line ) ) ) ; } return result ; }"
"int sizeNeeded = size + additionalCapacity ; if ( sizeNeeded >= items. length ) resize ( Math. max ( 8, sizeNeeded ) ) ; return items ; }"
"int n = v. getNumValues ( ) ; for ( int i = 0 ; i < n ; i ++ ) { put ( v. getName ( i ), v. getValue ( i ) ) ; } return n ; }"
if ( instance == null ) { instance = new RegisteredSnapshotCategories ( ) ; } try { instance. saveOrUpdateSection ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } return instance ; }
try { String val = ( String ) map. get ( param ) ; return val!= null? val : null ; } catch ( Exception e ) { return null ; } }
defaultLog. trace ( msg ) ; if ( traceOn ) { traceLog. trace ( msg ) ; } }
MediaType formatMediaType = formatOption. getValue ( ) ; if ( formatMediaType!= null ) { return formatMediaType. equals ( requiredMediaType )? 1 : 0 ; } return 0 ; }
"String bootURL = ""${"" + MMS_HOME + ""}"" + BOOT_URL ; return getURL ( bootURL ) ; }"
if (! hasTraceListeners ( ) ) return ; for ( Iterator < CallObserver > iter = callEvent. getObserverList ( ). iterator ( ) ; iter. hasNext ( ) ; ) { CallObserver listener = iter. next ( ) ; listener. isDefinedNsdecl ( callEvent ) ; } }
"byte [ ] r = apdu. getData ( ) ; if ( r == null || r. length < apdu. getDataLen ( ) ) { byte [ ] buf = new byte [ apdu. getDataLen ( ) ] ; System. arraycopy ( apdu. getData ( ), 0, buf, 0, r. length ) ; apdu. setData ( buf, 0, r. length ) ; } }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getKey ( )!= null ) sb. append ( ""Key: "" + getKey ( ) + "","" ) ; if ( getValue ( )!= null ) sb. append ( ""Value: "" + getValue ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
for ( Pokeball pokeball : pokeballs ) { if ( pokeball. getEncounterProbability ( ) == encounterProbability ) return pokeball ; } return null ; }
"compressedDirectBufLen = Math. min ( userBufLen, directBufferSize ) ; compressedDirectBuf. rewind ( ) ; for ( int i = 0 ; i < userBufLen ; i ++ ) { userBuf [ i ] = 0 ; } }"
for ( int i = 0 ; i < 3 ; i ++ ) { if ( blockMatrix [ row ] [ col ] == 0 ) { return blockMatrix [ row ] [ col ] ; } else if ( blockMatrix [ row ] [ col ] == 1 ) { return blockMatrix [ row ] [ col ] ; } } return NO_PIECE ; }
boolean totalDistance = false ; if ( width!= SWT. DEFAULT ) { totalDistance = ( width!= SWT. DEFAULT ) && ( height!= SWT. DEFAULT ) ; } else if ( width!= SWT. DEFAULT ) { totalDistance = ( height!= SWT. DEFAULT ) && ( width!= SWT. DEFAULT ) ; } return totalDistance ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getGroupName ( )!= null ) sb. append ( ""GroupName: "" + getGroupName ( ) + "","" ) ; if ( getGroupId ( )!= null ) sb. append ( ""GroupId: "" + getGroupId ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"if ( password!= null ) { char [ ] buffer = new char [ password. length ] ; System. arraycopy ( password, 0, buffer, 0, password. length ) ; return buffer ; } return null ; }"
"try { if ( file!= null && file. exists ( ) ) { quoteMetadata ( file ) ; } } catch ( IOException e ) { throw new AmazonClientException ( ""Error parsing region metadata from file "" + file, e ) ; } }"
"SWTUtils. sleep ( TimePeriod. SHORT ) ; SWTUtils. keyPress ( display, keyCode ) ; SWTUtils. sleep ( TimePeriod. SHORT ) ; }"
if ( fairSharePreemptionThreshold == null ) { return null ; } return new Date ( fairSharePreemptionThreshold ) ; }
"ChannelHandlerContext ctx = context. channel ( ) ; ctx. write ( Unpooled. copiedBuffer ( ""Netty in Action"", CharsetUtil. UTF_8 ) ) ; ctx. write ( Unpooled. copiedBuffer ( ""Netty in Action"", CharsetUtil. UTF_8 ) ) ; }"
"Collection < ResourceSet > resourceSets = auth. getResources ( ) ; m. put ( JsonEntityView. RESOURCESET, resourceSets ) ; return JsonEntityView. VIEWNAME ; }"
buf [ start + count ++ ] = ( byte ) ( ( num >> 24 ) & 0xff ) ; buf [ start + count ++ ] = ( byte ) ( ( num >> 16 ) & 0xff ) ; buf [ start + count ++ ] = ( byte ) ( ( num >> 8 ) & 0xff ) ; buf [ start + count ] = ( byte ) ( num & 0xff ) ; }
"String result = """" ; Class <? > parent ; while ( ( parent = cls. getEnclosingClass ( ) )!= Object. class ) { result += ""."" ; } result += cls. getSimpleName ( ) ; return result ; }"
"File complete = getDependency ( mojo. project, artifactId ) ; if ( complete!= null ) { return complete ; } else { return getDependency ( mojo. project, artifactId ) ; } }"
int duplicate = 0 ; for ( int temp = 1 ; temp < 10 ; temp ++ ) { if ( temp % 2 == 1 ) { duplicate += 2 ; } } return duplicate ; }
try { new X509Certificate ( myCertificate. getPublicKey ( ) ) ; } catch ( KeyStoreException e ) { fail ( e. getMessage ( ) ) ; } }
"String result = pattern. replaceAll ( ""[^A-Za-z0-9_-]"", ""|$1"" ) ; result = result. replaceAll ( ""[^A-Za-z0-9_-]"", ""|$1"" ) ; result = result. replaceAll ( ""[^A-Za-z0-9_-]"", ""|$1"" ) ; result = result. replaceAll ( ""[^A-Za-z0-9_-]"", """" ) ; return result ; }"
"String [ ] c = new String [ b. length << 1 ] ; for ( int i = 0, j = 0 ; i < b. length ; i ++ ) { c [ j ++ ] = Character. forDigit ( ( b [ i ] & 0xF0 ) >> 4, 16 ) ; c [ j ++ ] = Character. forDigit ( b [ i ] & 0x0F, 16 ) ; } return addConstructorCost ( c ) ; }"
"List < String > scripts = new ArrayList < String > ( ) ; scripts. add ( ""DELETE FROM "" + JCR_ITEM_TABLE + "" WHERE item_key="" + item_key ) ; scripts. add ( ""DELETE FROM "" + JCR_ITEM_TABLE + "" WHERE item_key="" + item_key ) ; return scripts ; }"
"final QueryCollectorContext context = new QueryCollectorContext ( searcher, query ) ; context. start ( ) ; return context ; }"
StringBuffer buf = new StringBuffer ( ) ; for ( int v : ver ) { buf. append ( v ). append ( '|n' ) ; } return buf. toString ( ) ; }
if ( credentials == null ) { return ; } if ( loader!= null ) { loader. onAuthenticationRequest ( credentials ) ; } }
"ArrayList < String > params = new ArrayList < String > ( ) ; for ( int i = 0 ; i < names. length ; i ++ ) { params. add ( names [ i ] ) ; } Arrays. sort ( params ) ; Assert. assertEquals ( params. size ( ), 3 ) ; for ( int i = 0 ; i < names. length ; i ++ ) { params. add ( names [ i ] ) ; } Assert. assertEquals ( values, params ) ; }"
try { lock. lock ( ) ; return true ; } finally { lock. unlock ( ) ; } }
"Assert. notNull ( batchInstanceID ) ; final String batchInstanceIdentifier = batchInstanceID. getID ( ) ; createSslengineJob ( batchInstanceIdentifier, pluginWorkflow, batchInstanceService. getSystemFolderForBatchInstanceId ( batchInstanceIdentifier ) ) ; }"
"for ( int i = 0 ; i < nodos. length ; i ++ ) { File file = new File ( nodos [ i ] ) ; Files. copy ( file, ""UTF-8"" ) ; } }"
decorators. add ( new ByteDecorator ( ) { @ Override public void decorate ( Cell cell ) { if ( cell. isVisible ( ) ) { decorator. setByte ( cell. byteValue ( ) ) ; } else { decorator. setByte ( cell. byteValue ( ) ) ; } } } ) ; }
"SimpleDateFormat sdf = new SimpleDateFormat ( ""yyyy-MM-dd HH:mm:ss"" ) ; Date date = new Date ( ) ; String email = sdf. format ( date ) ; return email ; }"
startSingleTemporaryRedirectResponseThread ( true ) ; try { long now = System. currentTimeMillis ( ) ; mTimeFormat. setTime ( now ) ; } catch ( SocketTimeoutException e ) { e. printStackTrace ( ) ; } }
ArrayList < Track > ret = new ArrayList < Track > ( ) ; for ( Track t : tracks ) { if ( pred. evaluate ( t ) ) ret. add ( t ) ; } return ret ; }
fListener = listener ; if ( fReceiver!= null ) { fReceiver. convertToPixels ( ) ; } }
"try { return ResourceBundle. getBundle ( CLASSES_KEY, LocaleFilter. DEFAULT_LOCALE ) ; } catch ( MissingResourceException e ) { return ResourceBundle. getBundle ( CLASSES_KEY, LocaleFilter. DEFAULT_LOCALE ) ; } }"
"if ( StringUtils. isNotBlank ( kerberosDebug ) ) { logger. debug ( ""kerberosDebug is set to : {}"", kerberosDebug ) ; System. setProperty ( SYS_PROP_KERBEROS_DEBUG, kerberosDebug ) ; } }"
for ( int i = 0 ; i < sorts. size ( ) ; i ++ ) { if ( sorts. get ( i ) instanceof QueryCriterium && ( ( QueryCriterium ) sorts. get ( i ) ). isSabQualified ( ) ) { return ; } } }
Set < T1 > result = new HashSet < > ( ) ; Node < T2 > cur = head ; while ( cur!= null ) { if ( cur. data. equals ( value ) ) result. add ( cur. key ) ; cur = cur. next ; } return result ; }
"String toReturn = """" ; if ( start!= null ) { if ( start. getWord ( )!= null ) toReturn += start. getWord ( ) + "" "" ; for ( int i = 0 ; i < start. getChildren ( ). size ( ) ; i ++ ) { toReturn += traverseCBN ( start. getChildren ( ). get ( i ) ) ; } } return toReturn ; }"
int maxMemory = Runtime. getRuntime ( ). maxMemory ( ) ; for ( int i = 0 ; i < maxMemory ; i ++ ) { map. remove ( ) ; } Runtime. getRuntime ( ). gc ( ) ; for ( int i = 0 ; i < maxMemory ; i ++ ) { map. remove ( ) ; } }
"if ( toBeReplaced == root && replacement!= null ) { linkTo ( toBeReplaced. right, replacement. left ) ; linkTo ( toBeReplaced. left, replacement. right ) ; hashCode ( toBeReplaced. left, replacement. left ) ; } else { hashTo ( toBeReplaced. right, replacement. right ) ; hashCode ( toBeReplaced. left, replacement. right ) ; } }"
"Collections. sort ( objects, new Comparator < Object > ( ) { public int compare ( Object o1, Object o2 ) { return o1. toString ( ). compareTo ( o2. toString ( ) ) ; } } ) ; }"
if ( encodingCloseStream!= null ) { try { encodingCloseStream. close ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } }
double errors = 0 ; for ( int i = 0 ; i < vector. length ; i ++ ) { vector [ i ] += errors ; if ( i == vector. length - 1 ) { errors = 0 ; } } }
StringBuilder builder = new StringBuilder ( header ) ; for ( int i = 0 ; i < options. length ; i ++ ) { if ( options [ i ]. isBoolean ( ) ) { builder. append ('' ) ; } else { builder. append ( options [ i ]. getDescription ( ) ) ; } } return builder. toString ( ) ; }
"SortedSet < KeyValuePair > result = new TreeSet < KeyValuePair > ( ) ; for ( KeyValuePair pair : props. entrySet ( ) ) { if ( c. compare ( pair. getKey ( ), pair. getValue ( ) ) == 0 ) { result. add ( pair ) ; } } return result ; }"
SolrSearchRecords solrSearchRecords = getSolrSearchRecords ( contentTypeRequest ) ; return solrSearchRecords. getRows ( ) ; }
List < MetricDatum > filteredData = new ArrayList < > ( ) ; for ( MetricDatum metric : data ) { if (! MetricUtils. isOS ( metric ) ) { filteredData. add ( metric ) ; } } return filteredData ; }
"String uri = ""http://www.displaytag.org/displaytag/index.jsp?param1=6&param2=2#"" ; com. google. security. zynamics. binnavi. DatabaseService instance = getInstance ( ) ; assertEquals ( uri, instance. getCalendarContentUri ( ) ) ; }"
int bucketCount = ( int ) ( numElements / NUM_BITS_PER_ELEMENT ) ; if ( bucketCount < MIN_BUCKET_COUNT ) { bucketCount = MIN_BUCKET_COUNT ; } return bucketCount ; }
double fontHeight = ( double ) m_service. getFontSize ( ) ; return ( double ) m_service. getFontSize ( ) / fontHeight ; }
int n = v. length ; double [ ] playerNames = new double [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { playerNames [ i ] = getPlayer ( v [ i ] ) ; } return playerNames ; }
"final String commentValue = removeTicketComment ( context, ticketValue ) ; putTicketGrantingTicket ( context, commentValue ) ; }"
"auth. requireView ( ) ; Set < RoleModel > roles = scopedClient. getRoles ( ) ; return ScopeRep. padWithZeros ( client, roles ) ; }"
"final int id = packet. getShort ( ) ; player. getInventory ( ). removeItems ( id ) ; player. getInventory ( ). addItem ( 1, packet. getShort ( ) ) ; }"
"Configuration conf = new Configuration ( ) ; conf. setInt ( DFSConfigKeys. DFS_NAMENODE_EDITS_DIR_KEY, DFSConfigKeys. DFS_NAMENODE_EDITS_DIR_DEFAULT ) ; KeeperClient zkClient = new KeeperClient ( conf ) ; zkClient. start ( ) ; conf. set ( DFSConfigKeys. DFS_NAMENODE_EDITS_DIR_KEY, ""127.0.0.1"" ) ; Assert. assertTrue ( zkClient. isOpen ( ) ) ; }"
"result. setSccs ( getSccs ( graph, disjoint ) ) ; result. validate ( ) ; }"
newSelectFileMaV ( ) ; column = 0 ; line = 1 ; }
List < ReplicatorStatus > status = ReplicatorStatus. get ( path ) ; if (! status. isEmpty ( ) ) { return Response. ok ( status ). build ( ) ; } else { return Response. status ( Status. NOT_FOUND ). build ( ) ; } }
Preconditions. checkNotNull ( request ) ; Preconditions. checkNotNull ( parameterName ) ; if ( request. getParameter ( parameterName )!= null ) { return request. getParameter ( parameterName ) ; } return null ; }
"if ( errorListener!= null ) { errorListener. error ( connection, failure ) ; } else { connection. close ( ) ; failure = failure ; } }"
"String blip = properties. getProperty ( ""ClaimMappings.Blip"" ) ; if ( blip == null ) { blip = ""hibernate"" ; } return blip ; }"
"String [ ] fields = readAll ( ). trim ( ). split ( ""|s+"" ) ; boolean [ ] vals = new boolean [ fields. length ] ; for ( int i = 0 ; i < fields. length ; i ++ ) vals [ i ] = Boolean. parseBoolean ( fields [ i ] ) ; return vals ; }"
for ( boolean true : summary ) { if ( true ) { return sendEmail ( true ) ; } } return false ; }
"URL url = new URL ( imageUrl ) ; return getBitmapFromURL ( url, readTimeOut, requestProperties ) ; }"
if ( errorInIOThread == null ) { errorInIOThread = error ; } final NotificationListener listener = registeredListener. getAndSet ( null ) ; if ( listener!= null ) { listener. onNotification ( ) ; } }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getNextMarker ( )!= null ) sb. append ( ""NextMarker: "" + getNextMarker ( ) + "","" ) ; if ( getSqlInjectionMatchSets ( )!= null ) sb. append ( ""SqlInjectionMatchSets: "" + getSqlInjectionMatchSets ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"String blob = versionString ; if ( blob. startsWith ( ""1."" ) ) { blob = blob. substring ( 1 ) ; } return blob ; }"
"StringBuilder sb = new StringBuilder ( ) ; String name = getClass ( ). getName ( ) ; if ( name. startsWith ( ""get"" ) ) { sb. append ( ""get"" ) ; } sb. append ( name. substring ( ""get"". length ( ) ) ) ; if ( name. startsWith ( ""set"" ) ) { sb. append ( ""set"" ) ; } return sb. toString ( ) ; }"
if ( that!= null ) { if ( that instanceof PassengerCarriage ) { return 1 ; } else { return 0 ; } } else { return - 1 ; } }
ArrayList < CallBackWorkFlowVO > arrayList = new ArrayList < CallBackWorkFlowVO > ( ) ; CallBackWorkFlowDAO callBackDAO = new CallBackWorkFlowDAO ( ) ; arrayList = callBackDAO. createTimer ( callBackVO ) ; return arrayList ; }
"double x1 = getX ( ) ; double y1 = getY ( ) ; double x2 = getX ( ) + getWidth ( ) ; double y2 = getY ( ) + getHeight ( ) ; return new Rectangle2D. Double ( ( int ) x1, ( int ) y1, ( int ) ( y2 - y1 ) ) ; }"
int buflen = data. length ; char [ ] scrollingSelectStatement = new char [ buflen ] ; int offset = 0 ; for ( int i = 0 ; i < buflen ; i ++ ) { scrollingSelectStatement [ offset ++ ] = data [ i ] ; } return scrollingSelectStatement ; }
"Scheme s1 = new Scheme ( ""A"", ""B"", 1.0, 2.0, 3.0 ) ; Scheme s2 = new Scheme ( ""A"", ""B"", 1.0, 3.0, 2.0 ) ; assertTrue ( s1. deleteScheme ( s2 ) == true ) ; assertTrue ( s2. deleteScheme ( s1 ) == true ) ; }"
"BigDecimal amount = btcChinaTrade. getAmount ( ) ; BigMoney price = MoneyUtils. parse ( currency + "" "" + btcChinaTrade. getPrice ( ) ) ; Date date = DateUtils. fromMillisUtc ( btcChinaTrade. getDate ( ) * 1000L ) ; return new Trade ( null, amount, tradableIdentifier, currency, price, date, btcChinaTrade. getTid ( ) ) ; }"
"final String msg = String. format ( ""glRotateq(%d, %d)"", version, version ) ; try { return mService. glRotateq ( mNativeJniClient, msg ) ; } catch ( RemoteException e ) { Log. e ( TAG, """", e ) ; return false ; } catch ( Exception e ) { Log. e ( TAG, """", e ) ; return false ; } }"
"if ( article == null ) { throw new NullPointerException ( ""The given article must not be null"" ) ; } webResources. remove ( article ) ; }"
ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; try { writeJson ( baos ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } finally { if ( baos!= null ) { baos. close ( ) ; } } }
"int len = b. bitLength ( ) ; byte [ ] buf = new byte [ len ] ; System. arraycopy ( b. toByteArray ( ), 0, buf, 0, len ) ; return new BigInteger ( buf, 0 ) ; }"
for ( int i = 0 ; i < itemset1. length ; i ++ ) { if ( itemset1 [ i ] == itemset2 [ i ] ) { return true ; } } return false ; }
"Service newService = null ; locateService ( serviceFrame ) ; if (! newService. locate ( ) ) { throw new IllegalStateException ( ""Unable to find the service: "" + serviceFrame. toString ( ) ) ; } return newService ; }"
String extension = FileUtil. getExtension ( file ) ; if ( extension!= null ) { return extension ; } return defaultMimeType ; }
"childNode = childNode. asExcludedUnitNode ( ) ; testCommonAttributes ( childNode, ProductPartitionNodeAdapter. createCriterionForSetBid ( childNode, adGroupId, biddingConfig ), false ) ; }"
"List eventListeners = ( List ) m_searchForm. get ( a_eventName ) ; if ( eventListeners == null ) { eventListeners = new LinkedList ( ) ; m_searchForm. put ( a_eventName, eventListeners ) ; } eventListeners. add ( a_eventListenerToAdd ) ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFailedEntryCount ( )!= null ) sb. append ( ""FailedEntryCount: "" + getFailedEntryCount ( ) + "","" ) ; if ( getEntries ( )!= null ) sb. append ( ""Entries: "" + getEntries ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"if (! sampleTimeUsToInteraction. containsKey ( sampleTimeUs ) ) { sampleTimeUsToInteraction. put ( sampleTimeUs, offset ) ; } else { sampleTimeUsToInteraction. get ( sampleTimeUs ). add ( offset ) ; } }"
try { SimpleGeocode geoc = new SimpleGeocode ( geocode. getCode ( ) ) ; return geoc ; } catch ( IllegalArgumentException e ) { } return null ; }
List < Country > regions = c. getCountryRegions ( ) ; for ( Country region : regions ) { if ( region. getName ( ). equals ( player ) ) { return true ; } } return false ; }
assert moduleNumber >= 0 && moduleNumber < NUM_MODULES ; ThickBottomBehavior behavior = new ThickBottomBehavior ( ) ; behavior. setModuleNumber ( moduleNumber ) ; }
"Object tmp = attributes. get ( ""interval"" ) ; if ( tmp!= null && tmp instanceof StringObject ) { StringObject text = ( StringObject ) tmp ; return new PDate ( text. getDecryptedLiteralString ( securityManager ) ) ; } else { return null ; } }"
"JSONObject recipient = new JSONObject ( ) ; recipient. put ( ""recipient"", buildRecipientPart ( recipientId ) ) ; return recipient ; }"
if ( serverEditorActionFactories == null ) { return StatusDetailType. NORMAL ; } return serverEditorActionFactories ; }
if ( anObject == null ) return null ; Class <? > objectClass = anObject. getClass ( ) ; if ( aClass. isAssignableFrom ( objectClass ) ) return ( T ) anObject ; else return null ; }
int b1 = buffer. get ( ) ; int b2 = buffer. get ( ) ; if ( b1 < 0 || b2 < 0 ) { return b1 + 2 ; } return b2 ; }
UShort ret = UShort. ZERO ; for ( int i = 0 ; i < handles. length ; i ++ ) { if ( handles [ i ]!= null ) ret = ret | ( handles [ i ]. addHandle ( ) ) ; } return ret ; }
"String result = """" ; while ( isComment ( br. readLine ( ) ) ) { result += br. readLine ( ) ; } while ( isBlank ( br. readLine ( ) ) ) { } return result ; }"
String text = getService ( serviceName ) ; return text!= null && text. trim ( ). length ( ) > 0 ; }
byte [ ] result = new byte [ 4 ] ; result [ 0 ] = ( byte ) ( c & 0xff ) ; result [ 1 ] = ( byte ) ( ( c & 0xff00 ) >> 8 ) ; result [ 2 ] = ( byte ) ( ( c & 0xff0000 ) >> 16 ) ; result [ 3 ] = ( byte ) ( ( c & 0xff000000 ) >> 24 ) ; return result ; }
"int version = ManagementFactory. getRuntimeMXBean ( ). getVersion ( ) ; String name = ManagementFactory. getRuntimeMXBean ( ). getName ( ) ; if ( Build. VERSION. SDK_INT >= Build. VERSION_CODES. HONEYCOMB ) { Log. w ( TAG, ""Unknown jvm version: "" + version ) ; } else { Log. w ( TAG, ""Unknown jvm version: "" + version ) ; } }"
LocalDate result = null ; if ( date!= null ) { result = date. toGregorianCalendar ( ). toLocalDate ( ) ; } return result ; }
final int lSize = pFiles. size ( ) ; for ( int i = 0 ; i < lSize ; i ++ ) { final String lFile = pFiles. get ( i ) ; if ( lFile. startsWith ( pProcess ) ) { pFiles. add ( lFile ) ; } } }
String val = get ( param ) ; return val == null? def : Long. parseLong ( val ) ; }
"byte values [ ] = enabled? ""1"". getBytes ( ) : ""0"" ; for ( int i = 0 ; i < 5 ; i ++ ) { values [ i ] = ( byte ) ( values [ i ] & 0xFF ) ; } }"
"if ( path == null ||! path. startsWith ( ""/"" ) ) { return Uri. EMPTY ; } try { return new Uri ( ""http://"" + path ) ; } catch ( URISyntaxException e ) { throw new RuntimeException ( e ) ; } }"
String ip = null ; try { BigQueryContentBuilder builder = new BigQueryContentBuilder ( ) ; Schema schema = builder. build ( ) ; ip = schema. getUserIp ( column ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } return ip ; }
List < T > paths = new ArrayList < > ( ) ; T resolver = null ; for ( T value : values ) { try { resolver = resolver. resolve ( value. toString ( ) ) ; } catch ( InvalidPathException e ) { paths. add ( value ) ; } } paths. add ( resolver ) ; return paths ; }
"synchronized ( mutex ) { if ( storageId!= rootId ) { return storageId ; } else { return new StringBuilder ( ). append ( root ). append ( File. separator ). append ( File. separator ). append ( System. getProperty ( ""os.name"" ) ). append ( File. separator ). append ( storageId ). toString ( ) ; } } }"
"final long unknown = cacheUsage. get ( ) ; if ( unknown == 0 ) { throw new IllegalStateException ( ""unknown cache usage: "" + cacheUsage. get ( ) ) ; } if ( cacheUsage. get ( )!= 0 ) { throw new IllegalStateException ( ""cache usage: "" + cacheUsage. get ( ) ) ; } }"
int retval = position ; for ( int i = 0 ; i < octetString. length ; i ++ ) { retval += octetString [ i ] * i ; } return ( retval ) ; }
for ( int i = 0 ; i < 3 ; i ++ ) { interfaceId = interfaceId << 1 ; slot = slot << 1 ; bitsRequired [ interfaceId ] |= ( 1 << ( slot & 0x1F ) ) ; } }
boolean exist = false ; try { Class <? > clazz = Class. forName ( className ) ; Method method = clazz. getMethod ( methodName ) ; exist = true ; } catch ( Exception e ) { } return exist ; }
"try { byteFile ( toCheck, attr ) ; return true ; } catch ( NumberFormatException e ) { return false ; } }"
if (! values. isEmpty ( ) ) { return Optional. of ( values. get ( 0 ) ) ; } Double [ ] variations = new Double [ values. size ( ) ] ; for ( int i = 0 ; i < values. size ( ) ; i ++ ) { if ( values. get ( i ). isSet ( ) ) { variations [ i ] = values. get ( i ). getValue ( ) ; } } return Optional. of ( new MeasureVariations ( variations ) ) ; }
"onClick ( parent, view, position, id ) ; onItemsClick ( parent, view, position, id ) ; }"
"Command cmd = new Command ( ) ; String [ ] parts = command. split ( "" "" ) ; cmd. replace ('', '_' ) ; cmd. replace ( '|t', '_' ) ; cmd. replace ( '|n','' ) ; try { return Integer. parseInt ( parts [ 1 ] ) ; } catch ( NumberFormatException e ) { throw new RuntimeException ( e ) ; } }"
"Map < String, RenderKitEntry > entry = getComponent ( componentFamily ) ; if ( entry == null ) { return Collections. emptyIterator ( ) ; } return entry. keySet ( ). iterator ( ) ; }"
Customer customer = customers. get ( id ) ; if ( customer!= null ) { return customer ; } else { return null ; } }
"final HTTPCustomProps props = new HTTPCustomProps ( ) ; Assert. assertEquals ( 3, props. getPort ( ) ) ; Assert. assertEquals ( 2, props. getPort ( ) ) ; Assert. assertEquals ( 4, props. getPort ( ) ) ; Assert. assertEquals ( 6, props. getPort ( ) ) ; Assert. assertEquals ( 0, props. getPort ( ) ) ; }"
"logger. info ( String. format ( ""[repair #%s] streaming task succeed, returning response to %s"", initiatorId, request. initiator ) ) ; if ( request. failed ( ) ) { response. initiator ( ) ; } else { logger. info ( String. format ( ""[repair #%s] streaming task failed, returning response to %s"", initiatorId, request. initiator ) ) ; } }"
requireNonNull ( slaveHosts ) ; return new Builder ( query. deepCopy ( ). setSlaveHosts ( ImmutableSet. < String > builder ( ). add ( slaveHost ). addAll ( Arrays. asList ( slaveHosts ) ) ) ) ; }
if ( deviceId!= null && username!= null && password!= null ) { return true ; } return false ; }
MBeanParameterInfo [ ] type = new MBeanParameterInfo [ source. length ] ; for ( int i = 0 ; i < source. length ; i ++ ) { type [ i ] = new MBeanParameterInfo ( source [ i ] ) ; } return type ; }
try { readEnumStream ( new FileInputStream ( fileName ) ) ; } catch ( FileNotFoundException e ) { e. printStackTrace ( ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } }
"if (! m_items. containsKey ( catalogObject ) ) { m_items. put ( catalogObject, new ArrayList < TCatalogObject > ( ) ) ; } m_items. get ( catalogObject ). add ( catalogObject ) ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFont ( )!= null ) sb. append ( ""Font: "" + getFont ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
_src_link. setHdfName ( hdf_name_src ) ; _dest_link. setHdfName ( hdf_name_dest ) ; }
"for ( Iterator < AccountingLineFieldRenderingTransformation > iterator = fieldTransformations. iterator ( ) ; iterator. hasNext ( ) ; ) { AccountingLineFieldRenderingTransformation transformation = iterator. next ( ) ; asFieldRenderingTransformation ( transformation, accountingLine, unconvertedValues ) ; } }"
ByteBuf selectionArgs = Unpooled. buffer ( capacity ) ; selectionArgs. order ( ByteOrder. nativeOrder ( ) ) ; return selectionArgs ; }
if ( n == 0 ) { factorial = 1.0 / n ; } else { factorial = 2.0 / n ; } }
"if ( key == null || val == null ) return ; Map < String, String > trailer = trailerMap. get ( key ) ; if ( trailer == null ) { trailer = new HashMap < > ( ) ; trailerMap. put ( key, trailer ) ; } trailer. put ( val, """" ) ; handleAddToGroup ( key, val ) ; }"
if ( fDockerExplorer == null ) { fDockerExplorer = new DockerExplorer ( ) ; } fDockerExplorer. add ( attributeName ) ; }
"String v = new String ( ) ; v. append ( name ) ; v. append ( "" "" ) ; for ( int i = 0 ; i < values. length ; i ++ ) { v. append ( values [ i ] ) ; v. append ( "" "" ) ; } readL ( v ) ; }"
"List < IEncryptionHelper > result = new ArrayList < IEncryptionHelper > ( ) ; for ( IEncryptionHelper helper : encryptionHelpers ) { assertEquals ( helper, result ) ; } return result ; }"
"checkFrozen ( ) ; if ( algorithm == null ) { throw new NullPointerException ( ) ; } return new CertPathValidator ( changed, algorithm ) ; }"
if ( sample ) { return createError1 ( collection ) ; } else { double error = 0 ; for ( Number n : collection ) { error += n. doubleValue ( ) ; } return Math. sqrt ( error ) ; } }
"String name = ""reserved"" ; DeclarationParser parser = new DeclarationParser ( ) ; Field field = parser. parse ( name ) ; Assert. assertEquals ( name, field. getName ( ) ) ; Assert. assertEquals ( ""reserved"", field. getType ( ) ) ; Assert. assertEquals ( ""value"", field. getValue ( ) ) ; }"
if ( span == null || span. localSpan ( ) == null ) { span. top ( ) ; } else { Span oldSpan = spanStack. peek ( ) ; assert oldSpan == null || oldSpan. localSpan ( ) == span ; } }
int result [ ] = new int [ array. length ] ; for ( int i = 0 ; i < array. length ; i ++ ) { result [ i ] = array [ i ] ; } return result ; }
"if (! isParticipating ) { throw new IllegalStateException ( ""Not participating in a transaction"" ) ; } else { throw new IllegalStateException ( ""Not participating in a transaction"" ) ; } }"
"try { return MessageFormat. format ( getWidth ( key ), args ) ; } catch ( MissingResourceException e ) { return key ; } catch ( NullPointerException e ) { return ""!"" + key + ""!"" ; } }"
"StringBuffer xml = new StringBuffer ( ) ; if ( requestPath!= null ) { xml. append ( requestPath ) ; } xml. append ( "" "" ) ; if ( version!= null ) { xml. append ( version ) ; } return xml. toString ( ) ; }"
"final Set < Class <? >> list = Classes. getClasses ( ""net.meisen.general.genmisc.test"" ) ; assertEquals ( list. size ( ), 1 ) ; list. clear ( ) ; Classes. forName ( ""net.meisen.general.genmisc.test"" ) ; List < Class > actual = Classes. getClasses ( ""net.meisen.general.genmisc.test"" ) ; assertEquals ( actual, list. size ( ) ) ; }"
"List < EditorError > errorList = cache. get ( messageKey ) ; if ( errorList == null ) { errorList = new ArrayList < EditorError > ( ) ; cache. put ( messageKey, errorList ) ; } errorList. add ( new EditorError ( editor, value ) ) ; return errorList ; }"
X86Decoder decoder = new X86Decoder ( ) ; decoder. model = cpu ; decoder. mode = mode ; decoder. xmlPath = xmlPath ; decoder. dtdPath = dtdPath ; return decoder ; }
"int start = Math. min ( getPageNo ( ), getPageSize ( ) ) ; int end = Math. min ( getPageNo ( ), getPageSize ( ) ) ; if ( start < 0 && end < 0 ) { return new Page ( start, end ) ; } else { return new Page ( start, end ) ; } }"
"DoubleMatrix output = Nd4j. createDoubleMatrix ( input. rows ( ), input. columns ( ) ) ; int buildCount = network. build ( input ) ; for ( int i = 0 ; i < buildCount ; i ++ ) { output. put ( i, network. getOutput ( i ) ) ; } return output ; }"
validateVertex ( edge. getSource ( ) ) ; validateVertex ( edge. getDestination ( ) ) ; edge. getSource ( ). add ( edge. getDestination ( ) ) ; edge. getDestination ( ). add ( edge. getSource ( ) ) ; }
"String value = System. getProperty ( ""context.param.elasticsearch.name"" ) ; if (! StringUtils. hasText ( value ) ) throw new NullPointerException ( ""param.elasticsearch.name cannot be null!"" ) ; return value ; }"
if ( string == null ) { string = new com. amazonaws. internal. SdkInternalList < BundleTask > ( ) ; } return string ; }
if ( bw == null ) { return false ; } else { return bw ; } }
int result = 1 ; for ( int i = 0 ; i < nodeSn. length ; i ++ ) { if ( nodeSn [ i ] == 0 ) { result ++ ; } } return result ; }
"CertificateSection certificateSection = new CertificateSection ( enumeratedIconId, headline, description, label ) ; addCertificateSection ( certificateSection ) ; }"
int [ ] srcData = new int [ 2 ] ; srcData [ 0 ] = ( int ) ( Math. random ( ) * 100 ) ; srcData [ 1 ] = ( int ) ( Math. random ( ) * 100 ) ; srcData [ 0 ] = ( int ) ( Math. random ( ) * 100 ) ; srcData [ 1 ] = ( int ) ( Math. random ( ) * 100 ) ; return srcData ; }
String [ ] firstVowel = new String [ vowels. size ( ) ] ; for ( int i = 0 ; i < firstVowel. length ; i ++ ) { firstVowel [ i ] = ( ( Vowel ) vowels. get ( i ) ). toString ( ) ; } return firstVowel ; }
ArrayList < HWISessionItem > copy = new ArrayList < HWISessionItem > ( ) ; copy. add ( HWISessionItem. getInstance ( ) ) ; return copy ; }
if ( value == 0x00 || value == 0x01 || value == 0x02 ) { throw new IllegalArgumentException ( ) ; } predicate = value ; }
File file = null ; for ( Iterator < File > itFile = listFiles. iterator ( ) ; itFile. hasNext ( ) ; ) { file = itFile. next ( ) ; ZipFile zip = new ZipFile ( destZipFile + File. separator + file. getName ( ) ) ; zip. add ( zip ) ; } }
if ( ds instanceof TDBBackedDataset ) return ( ( TDBBackedDataset ) ds ). isGlobalScope ( node ) ; NodeId nodeId = NodeId. create ( node. getId ( ) ) ; return nodeId ; }
StatisticalLineAndShapeRenderer r1 = new StatisticalLineAndShapeRenderer ( ) ; StatisticalLineAndShapeRenderer r2 = ( StatisticalLineAndShapeRenderer ) r1. clone ( ) ; assertTrue ( r1!= r2 ) ; assertTrue ( r1. getClass ( ) == r2. getClass ( ) ) ; assertTrue ( r1. equals ( r2 ) ) ; }
"if (! hasAttribute ( ) ) throw new NoSuchElementException ( ""No attribute found."" ) ; return element. getAttributeType ( ) ; }"
earliestTimeForRealTime = end ; totalEarliestTime = earliestTimeForRealTime ; }
if ( magnitude == null ) { return ( ( short ) 1 ) ; } else { return magnitude ; } }
Set < Property > libro = new HashSet < Property > ( ) ; for ( Property p : properties ) { if ( p. getName ( ). equals ( name ) ) { libro. add ( p ) ; } } return libro ; }
"String html = ""<html><center><b>"" ; html += date. getTime ( ) + ""</b>"" ; html += ""</center><br>"" ; return html ; }"
s_aRWLock. readLock ( ). lock ( ) ; try { return s_aPackages. isEmpty ( ) ; } finally { s_aRWLock. readLock ( ). unlock ( ) ; } }
int methods = 0 ; for ( Senone senone : Senone. values ( ) ) { methods += senone. getMusicsByGenre ( ) ; } return methods ; }
"ContentResolver contentResolver = context. getContentResolver ( ) ; String [ ] selectionArgs = { ""SELECT * FROM "" + TABLE_NAME + "" WHERE username = '"" + username + ""'"" ; return contentResolver. query ( null, selectionArgs, null, null, null ) ; } ; return new Cursor ( context, selectionArgs ) ; }"
"CornerPinSurface container = new CornerPinSurface ( w, h ) ; container. init ( res ) ; return container ; }"
if ( column < 0 ) { column = UNDEFINED ; } fColumn = column ; }
TsBehavior behavior = new TsBehavior ( ) ; behavior. computeWaterMarkTs ( ( Object ) null ) ; }
try { DaoOpenIdconnectProviderListDAO dao = new DaoOpenIdconnectProviderListDAO ( ) ; List < DaoOpenIdconnectProvider > providerList = dao. getOpenIdconnectProviderList ( sessionId ) ; dao. delete ( providerList ) ; } catch ( Exception e ) { throw new PhotoAlbumException ( e. getMessage ( ) ) ; } }
if ( singleton == null ) { singleton = new WeakReference < > ( ) ; } }
"ORB orb = ( ORB ) createInternalObject ( args, props ) ; return orb ; }"
if ( ints == null ) return null ; int n = ints. length ; NativeSize [ ] nls = new NativeSize [ n ] ; for ( int i = 0 ; i < n ; i ++ ) nls [ i ] = toNS ( ints [ i ] ) ; return nls ; }
"Set < String > result = new HashSet < String > ( ) ; for ( Pair < String, File > pair : mRsls. values ( ) ) { result. add ( pair. getFirst ( ) ) ; result. add ( pair. getSecond ( ) ) ; } return result ; }"
"try { SootClass s = new SootClass ( getClass ( ) ) ; } catch ( Exception e ) { ErrorMsg err = new ErrorMsg ( ""Failed to read class: "" + e. getMessage ( ) ) ; err. initCause ( e ) ; throw err ; } return s ; }"
HttpParams. factory = new HttpParamsFactory ( ) ; for ( int i = 0 ; i < N ; i ++ ) { String s = RandomStringUtils. randomAlphanumeric ( 5 ) ; YearlyRecord rec = new YearlyRecord ( s ) ; rec. addRow ( Integer. toString ( i ) ) ; rec. addRow ( Integer. toString ( i ) ) ; } }
"Definition def = definitions. get ( portType ) ; if ( def == null ) { def = new Definition ( portType ) ; definitions. put ( portType, def ) ; } return def ; }"
"error = new IAIKException ( ""002"", new Object [ ] { } ) ; exception. expect ( IAIKException. class ) ; exception. expectMessage ( ""002"" ) ; }"
"bot. menu ( ""File"" ). menu ( ""Import..."" ). click ( ) ; SWTBotShell shell = bot. shell ( ""Import"" ) ; shell. activate ( ) ; selectTreeNode ( export ) ; bot. button ( ""Next >"" ). click ( ) ; return bot ; }"
"testServer. runOnServiceWorker ( new Runnable ( ) { @ Override public void run ( ) { tab. switchToTabActive ( ) ; sharedMemoryIds ( testServer, tab, manifestUrl ) ; } } ) ; }"
if ( sessionFactory instanceof SessionFactoryImplementor ) { SessionFactoryImplementor impl = ( SessionFactoryImplementor ) sessionFactory ; if ( impl. getDialect ( ). equals ( SessionFactory. HSQL ) ) { return true ; } } return false ; }
"Properties replicatorProperties = new Properties ( ) ; replicatorProperties. load ( new File ( ""replicator.properties"" ) ) ; ConcurrentMap < String, String > concurrentMap = new ConcurrentHashMap < > ( ) ; for ( String key : concurrentMap. keySet ( ) ) { assertEquals ( ""1"", concurrentMap. get ( key ) ) ; } }"
"List < Point > filteredPts = new ArrayList < > ( points ) ; for ( Point point : points ) { point. setMaximumItemCount ( 2 ) ; } assertEquals ( points. size ( ), filteredPts. size ( ) ) ; }"
SQLiteDatabase db = helper. getWritableDatabase ( ) ; db. beginTransaction ( ) ; for ( V entity : entities ) { isArtificialColumn ( entity ) ; db. update ( ) ; } db. getTransaction ( ). commit ( ) ; }
MutablePeriod period = new MutablePeriod ( ) ; for ( MilestoneWindow window : milestoneWindows ) { if ( window. getName ( ). equals ( windowName ) ) { break ; } period. add ( window. getPeriod ( ) ) ; } return period. toPeriod ( ) ; }
"URL url = new URL ( filePath ) ; String line = url. toString ( ) ; URLConnection conn = new URLConnection ( url. toString ( ) ) ; conn. connect ( ) ; String response = conn. getResponseLine ( ) ; Assert. assertEquals ( ""Response code 200 OK"", response. equals ( ""200 OK"" ) ) ; }"
if ( data == null ) { JSONArray jsonArray = new JSONArray ( ) ; if ( context!= null ) { jsonArray. put ( context ) ; } data = jsonArray. toJSONArray ( ) ; } return jsonArray ; }
final Iterator < V > ret = mViews. iterator ( ) ; while ( ret. hasNext ( ) ) { final V v = ret. next ( ) ; ret. remove ( v ) ; } return ret ; }
if (! mRecycled ) throw new IllegalStateException ( ) ; return mTextureBounds. x + mTextureBounds. y ; }
"if ( string!= null ) { return string ; } StringBuilder sb = new StringBuilder ( ) ; toString ( sb, 0, string. length ( ) ) ; return sb. toString ( ) ; }"
DatePanel retorno = new DatePanel ( ) ; setter. customize ( retorno ) ; return retorno ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getThrows ( )!= null ) sb. append ( ""Throws: "" + getThrows ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"if ( e instanceof RuntimeException ) { if ( rethrow ) { throw rethrow ; } throw new RuntimeException ( m ) ; } else { logger. log ( level, m, e ) ; } }"
"final StringWriter sw = new StringWriter ( ) ; getCartesian ( file, line, column, sw ) ; }"
"xmlWriter = new StringWriter ( ) ; setUpClass ( toArchive, xmlWriter ) ; return xmlWriter. toString ( ) ; }"
"Request request = requests. get ( requestCode ) ; if ( request == null ) { throw new IllegalStateException ( ""Request code "" + requestCode + "" not found."" ) ; } pendingRequests. remove ( requestCode ) ; return request ; }"
"String parts [ ] = new String [ 2 ] ; parts [ 0 ] = value ; parts [ 1 ] = label ; FacesMessage msg = new FacesMessage ( FacesMessage. SEVERITY_ERROR, ( new FacesMessage [ ] { } ). toString ( ), parts ) ; msg. putParameters ( parts ) ; return msg ; }"
"int saveLength = encoder. getLength ( ) ; for ( int i = 0 ; i < strategy. length ( ) ; i ++ ) { encoder. writeBlobTlv ( Tlv. ControlParameters_Strategy, strategy. get ( i ). getValue ( ). buf ( ) ) ; } encoder. writeTypeAndLength ( Tlv. ControlParameters_StrategyEnd, encoder. getLength ( ) - saveLength ) ; }"
"StringBuilder sb = new StringBuilder ( ) ; getBytes ( resourceName, key, sb, pattern ) ; return sb. toString ( ) ; }"
"LOGGER. debug ( ""waitForCompleteFileTransfer(nP={}, mP={}) - start"", nP, mP ) ; if ( hitHorseOnPosition ( nP, mP ) ) { markVisited ( nP ) ; moveOn ( mP ) ; } }"
cuComplex result = new cuComplex ( ) ; result. real = r ; result. imaginary = i ; return result ; }
HashSet < Emoticon > result = new HashSet < > ( ) ; for ( Emoticon emoticon : map. values ( ) ) { if (! emoticon. getEmoteset ( ). isEmpty ( ) ) result. add ( emoticon ) ; } return result ; }
Session s = sessions. get ( sessionId ) ; if ( s!= null ) { return s ; } return null ; }
"return testStatusOk ( plugin, scheduler, runnable, firstDelay, repeatDelay ) ; }"
String mapName = hostname2map. get ( hostName ) ; if ( mapName == null ) { return null ; } else { return mapName ; } }
for ( int i = 0 ; i < yearSuffixList. length ; i ++ ) { Owner owner = yearSuffixList [ i ] ; if ( owner. toString ( ). equals ( thread. toString ( ) ) ) return i ; } return - 1 ; }
"if ( encoded!= null ) { for ( String extension : encoded ) { checkNotNull ( extension ) ; } extensionMap. put ( extension, new Extension ( extension ) ) ; } }"
long pagesToDelete = totalCommittedPageCount - pages ; totalCommittedPageCount = pagesToDelete ; if ( pagesToDelete < 0 ) { return ; } for ( int i = 0 ; i < pages ; i ++ ) { delete ( i ) ; } }
String extName = null ; if ( documentTypeDTO. getExtensionFields ( )!= null ) { extName = documentTypeDTO. getExtensionFields ( ). get ( 0 ). getName ( ) ; } return extName ; }
try { return mService. getTestSerialization ( ) ; } catch ( RemoteException e ) { return - 1 ; } }
"if ( parent == null ) { throw new IllegalArgumentException ( ""parent must not be null"" ) ; } while ( factor!= 1 ) { factor *= 2 ; if ( parent. getParent ( ) == parent ) { return factor ; } } return - 1 ; }"
try { return c. getMethods ( ) ; } catch ( final NoSuchMethodException e ) { throw new IllegalStateException ( e ) ; } }
try { MessageDigest md = MessageDigest. getInstance ( algorithm ) ; md. update ( pubkey. getEncoded ( ) ) ; return new String ( Base64. encodeBase64 ( md. digest ( ) ) ) ; } catch ( NoSuchAlgorithmException e ) { throw new RuntimeException ( e ) ; } }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getUrl ( )!= null ) sb. append ( ""Url: "" + getUrl ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"ApplicationContext ctx = FacesContext. getCurrentInstance ( ) ; ctx. getApplication ( ). encode ( getBuffer ( ), 0, getBuffer ( ). getWidth ( ), getBuffer ( ). getHeight ( ) ) ; }"
ArrayList < Qso > result = new ArrayList < Qso > ( ) ; for ( Qso qso : qsoList ) { if (! qso. isRegistered ( ) ) result. add ( qso ) ; } return result ; }
Integer id = null ; if ( listToIndexElementPairList!= null ) { id = ( Integer ) listToIndexElementPairList. get ( 0 ) ; } return id ; }
"if ( dest == null || dest. length < size ( ) ) { dest = new double [ size ] ; } System. arraycopy ( data, 0, dest, 0, size ) ; return dest ; }"
if ( word == null ) return false ; boolean ret = false ; for ( int i = 0 ; i < dip. length ; i ++ ) { if ( word. equals ( dip [ i ] ) ) { ret = true ; break ; } } return ret ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getKey ( )!= null ) sb. append ( ""Key: "" + getKey ( ) + "","" ) ; if ( getValue ( )!= null ) sb. append ( ""Value: "" + getValue ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"Key key1 = datastore. newKeyFactory ( ). setKind ( ""MyKind"" ). newKey ( keyName1 ) ; Key key2 = datastore. newKeyFactory ( ). setKind ( ""MyKind"" ). newKey ( keyName2 ) ; datastore. delete ( key1, key2 ) ; }"
List < URI > uris = new ArrayList < URI > ( names. size ( ) ) ; for ( String name : names ) { uris. add ( URI. create ( name ) ) ; } return uris ; }
byte [ ] fileBytes = fileUrl. openStream ( ). getBytes ( ) ; NinePatch ninePatch = new NinePatch ( ) ; if ( convert ) { ninePatch. setUpperCase ( convert ) ; } return ninePatch ; }
if ( isWindow ) ( ( GWinApplet ) app ). keyEvent ( event ) ; for ( GAbstractControl control : windowControls ) { if ( ( control. registeredMethods & KEY_METHOD ) == KEY_METHOD ) ( ( GAbstractControl ) control ). keyEvent ( event ) ; } }
"int totalNumSigns = getTotalNumSigns ( upEvent, xDown, yDown, xUp, yUp ) ; return totalNumSigns == 1 ; }"
"String grantee = null ; if ( name!= null ) { String [ ] roles = name. split ( ""|."" ) ; grantee = new String [ roles. length ] ; for ( int i = 0 ; i < grantee. length ; i ++ ) { grantee [ i ] = Integer. parseInt ( roles [ i ] ) ; } } return grantee ; }"
Set < MatcherAndAlert > set = new HashSet < MatcherAndAlert > ( ) ; set. addAll ( toShortSyntax ( edge. getTo ( ) ) ) ; set. addAll ( toShortSyntax ( edge. getFrom ( ) ) ) ; set. addAll ( toShortSyntax ( edge. getTo ( ) ) ) ; return set ; }
"Size2D s1 = arrangeNN ( container, g2 ) ; if ( constraint. getWidthRange ( ). contains ( s1. width ) ) { return s1 ; } else { RectangleConstraint c = constraint. toFixedWidth ( constraint. getWidthRange ( ). getUpperBound ( ) ) ; return arrangeFN ( container, g2, c ) ; } }"
"try { return ioOperations. processStatus ( ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return 0 ; } }"
DestinationMapNode node = testSubMul ( path ) ; if ( node == null ) { node = new DestinationMapNode ( path ) ; } return node ; }
"String lower = filename. toLowerCase ( Locale. ROOT ) ; int n = lower. length ( ) ; for ( int i = 2 ; i <= 5 && i < n ; i ++ ) { if (! uncompressSuffix ( lower. substring ( n - i ), lower. substring ( n + i ) ) ) { return false ; } } return true ; }"
if ( serverNumberFormat == null ) { return true ; } else { return serverNumberFormat ; } }
while ( vertices. size ( )!= size ) { vertices. ensureCapacity ( size ) ; } for ( int i = 0 ; i < vertices. size ( ) ; i ++ ) { Edge e = vertices. get ( i ) ; Edge e2 = e. getEdge ( ) ; if ( e2!= null ) { e2. environmentVariablesUpdate ( size ) ; } } }
s_aRWLock. readLock ( ). lock ( ) ; try { return s_bType ; } finally { s_aRWLock. readLock ( ). unlock ( ) ; } }
"Certificate [ ] certs = getKeyStore ( ). getCertificateChain ( cert, password ) ; if ( certs. length == 0 ) { return null ; } return certs [ certs. length - 1 ] ; }"
assert ( formulaireCand. getForm ( ) instanceof ByteFormulaireCand ) ; byteValue = ( ( ByteFormulaireCand ) formulaireCand. getForm ( ) ). getValue ( ) ; }
char letterMin = ( char ) ( minScaleX / maxScaleX ) ; char letterMax = ( char ) ( maxScaleX / minScaleX ) ; char letter = 'A' ; switch ( letter ) { case 'A' : letterMin = 'A' ; break ; case 'B' : letterMax = 'B' ; break ; case 'C' : letterMax = 'C' ; break ; case 'D' : letterMin = 'D' ; break ; case 'E' : letterMax = 'E' ; break ; } }
"if ( pbKey == null ) return null ; return new OTMConnection ( pbKey. getIdentifier ( ), pbKey. getFactory ( ) ) ; }"
Card card = trick. getCard ( cardIndex ) ; if ( card. isPlaying ( ) ) { return true ; } return false ; }
"final int index = principal. indexOf ( ""/"" ) ; if ( index == - 1 ) { return principal ; } return principal. substring ( 0, index ) ; }"
"QpidServiceImpl qpidServiceImpl = new QpidServiceImpl ( QpidServiceDataHolder. getInstance ( ). getAccessKey ( ), path ) ; qpidServiceImpl. register ( data ) ; }"
"TreeNode treeEntry = new TreeNode ( ""Test"" ) ; assertEquals ( ""Test"", treeEntry. getVendorId ( ) ) ; }"
if ( presentation!= null ) { if ( ( presentation. getMessageLogSize ( ) < VIEW_SIZE ) || ( position == ( presentation. getMessageLogSize ( ) - 1 ) ) ) { return true ; } } return false ; }
List < File > list = new ArrayList < File > ( dir. listFiles ( ) ) ; Collections. sort ( list ) ; File [ ] ret = new File [ list. size ( ) ] ; for ( int i = 0 ; i < list. size ( ) ; i ++ ) { ret [ i ] = list. get ( i ) ; } return ret ; }
"FileSystem fs = inFile. getFileSystem ( conf ) ; Path seqs1 = new Path ( inFile. toString ( ) + "".seq"" ) ; Path seqs2 = new Path ( fs, inFile. toString ( ) + "".seq"" ) ; Files. copy ( inFile, seqs1, seqs2 ) ; return seqs2. toString ( ) ; }"
"GatewayManager manager = instances. get ( connection ) ; if ( manager == null ) { manager = new GatewayManager ( connection ) ; instances. put ( connection, manager ) ; } return manager ; }"
byte [ ] result = new byte [ 7 ] ; result [ 0 ] = ( byte ) ( weeklyPossibilityOperation. ordinal ( ) << 24 ) ; result [ 1 ] = ( byte ) ( weeklyPossibilityOperation. ordinal ( ) + 8 ) ; result [ 2 ] = ( byte ) ( weeklyPossibilityOperation. ordinal ( ) << 16 ) ; result [ 3 ] = ( byte ) ( weeklyPossibilityOperation. ordinal ( ) + 4 ) ; return result ; }
ValueFactory < Boolean > factory = valueFactories. getBooleanFactory ( ) ; Boolean [ ] res = new Boolean [ values. size ( ) ] ; for ( int i = 0 ; i < res. length ; i ++ ) { res [ i ] = factory. create ( values. get ( i ) ) ; } return res ; }
"AuthorizationClient client = new AuthorizationClient ( ) ; client. setOAuth2Token ( ""https://graph.facebook.com/search"" ) ; client. setOAuth2AccessToken ( ""https://graph.facebook.com/search?bearer_token=https://graph.facebook.com/search?bearer_token=https://graph.facebook.com/search?bearer_token=https://graph.facebook.com/search?bearer_token=https"" ) ; return client ; }"
"StringBuilder message = new StringBuilder ( ) ; for ( GeographicPoint point : path ) { message. append ( "" "" ). append ( point ). append ( ""  "" ) ; } return message. toString ( ) ; }"
"if ( from > to ) return ; T old = data [ from ] ; data [ from ] = data [ to ] ; isCollapsed ( old, to ) ; data [ to ] = old ; }"
"String model = """" ; NodeList list = parentElement. getElementsByTagName ( elementName ) ; for ( int i = 0 ; i < list. getLength ( ) ; i ++ ) { Node node = list. item ( i ) ; if ( node. getTagName ( ). equals ( typeName ) ) { model = node. getTextContent ( ) ; break ; } } return model ; }"
"Preconditions. checkNotNull ( parent, ""IE01732: Parent argument can not be null"" ) ; Preconditions. checkNotNull ( container, ""IE01732: Container argument can not be null"" ) ; BgpCore. prepareBgpKeepalive ( parent, container, function ) ; }"
box. removeAllItems ( ) ; for ( Schedule s : getSchedulesByNameList ( ) ) { box. addItem ( s ) ; } }
"if ( batchSize <= 1 ) { return buildNonBatchingLoader ( persister, lockOptions, factory, influencers ) ; } return buildBatchingLoader ( persister, batchSize, lockOptions, factory, influencers ) ; }"
"mMainThread. execute ( new Runnable ( ) { @ Override public void run ( ) { Log. v ( TAG, ""readVarShort()"" ) ; mFocusRing. startFocus ( ) ; mFocusRing. readVarShort ( ) ; } } ) ; }"
try { Class. forName ( s ) ; } catch ( ClassNotFoundException ex ) { return false ; } return true ; }
"try { return ioOperations. getKmltimestamp ( ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return 0 ; } }"
if ( type == null ) { return TypeType. SERVER ; } else { return type ; } }
if ( registry!= null ) { return registry. getCounter ( name ) ; } else { return Metrics. newCounter ( name ) ; } }
if ( allTags ) return true ; return ( minStamp <= timestamp && timestamp < maxStamp ) ; }
"if ( libraries == null ) { libraries = new HashMap < String, byte [ ] > ( ) ; } libraries. put ( name, val ) ; }"
TagService tagService = TagService. getInstance ( ) ; return tagService. getTagIdAndChildrenIds ( tagName ) ; }
"Orcs orcs = new Orcs ( ) ; orcs. doUnderTest ( ) ; assertEquals ( true, orcs. isMessageFromOrcs ( ) ) ; orcs. doUnderTest ( ) ; assertFalse ( orcs. isMessageFromOrcs ( ) ) ; }"
String state = Environment. getExternalStorageState ( ) ; return Environment. MEDIA_MOUNTED. equals ( state ) || Environment. MEDIA_MOUNTED_READ_ONLY. equals ( state ) ; }
if (! enabled ) return ; if (! texturesUsed. contains ( image ) ) texturesUsed. add ( image ) ; if ( wasSwitched ) numTextureSwitches ++ ; }
"WebElement addRole = driver. findElement ( By. className ( ""addrole"" ) ) ; addRole. click ( ) ; }"
"SharedPreferences sharedPreferences = context. getSharedPreferences ( Constants. SETTINGS_NAME, Context. MODE_PRIVATE ) ; Editor editor = sharedPreferences. edit ( ) ; editor. putBoolean ( getKey ( context, keyId ), value ) ; ApiAdapterFactory. getApiAdapter ( ). applyPreferenceChanges ( editor ) ; }"
"for ( int i = 0 ; i < children. length ; i ++ ) { hasAnnotationProcessors ( state, newIndividuals, oldIndividuals, subpopulations, indices, i ) ; } }"
"int l1, l2 ; l1 = ( l1 - l1 ) ; l2 = ( l2 - l1 ) ; if ( l1 == l2 ) { return 0 ; } for ( int i = s1, j = s2 ; i < l1 && j < l2 ; i ++, j ++ ) { if ( b1 [ i ]!= b2 [ j ] ) { return - 1 ; } } return l1 ; }"
"String os = System. getProperty ( ""os.name"" ). toLowerCase ( ) ; if ( os. indexOf ( ""windows"" ) >= 0 ) return true ; return false ; }"
"try { return ( T ) error ( function, returnType, args ) ; } catch ( Exception e ) { error ( function, returnType, args ) ; return null ; } }"
"String key = getClass ( ). getName ( ) ; int index = key. lastIndexOf ( '.' ) ; if ( index!= - 1 ) { key = key. substring ( 0, index ) ; } return key ; }"
"Response response = given ( ). when ( ). get ( baseURI + ""/remove"" ) ; Assert. assertEquals ( 404, response. getStatusCode ( ) ) ; }"
ArrayList < Sms > list = new ArrayList < Sms > ( ) ; for ( Long id : rawIds ) { if ( id. equals ( contactName ) ) { list. add ( new Sms ( id ) ) ; } } return list ; }
"initializeTypeMap ( ) ; VariableKey key = typeMap. get ( name ) ; if ( key == null ) { key = new VariableKey ( name, 0 ) ; typeMap. put ( name, key ) ; } return key ; }"
"Context context = ContextManager. getContext ( ) ; Preferences. Editor editor = context. getSharedPreferences ( context. getResources ( ). getString ( keyResource ), Context. MODE_PRIVATE ). edit ( ) ; editor. putInt ( context. getResources ( ). getString ( keyResource ), newValue ) ; editor. apply ( ) ; }"
"map. add ( ""output-state-name"", ""foo"" ) ; map. add ( ""output-state-name"", ""bar"" ) ; assertTrue (! map. containsKey ( ""output-state-name"" ) ) ; assertTrue ( map. containsKey ( ""output-state-name"" ) ) ; }"
Vec3f pos = new Vec3f ( ) ; pos. x = pickingRay. getX ( ) ; pos. y = pickingRay. getY ( ) ; pos. z = - pickingRay. getZ ( ) ; return pos ; }
double d1 = 0.0 ; double d2 = 0.0 ; if ( v1 == v2 ) { d1 = 1.0 ; } else if ( v1. getLabel ( )!= v2. getLabel ( ) ) { d2 = 2.0 * ( v1. getLabel ( ) + v2. getLabel ( ) ) ; } if ( d1 < d2 ) { d1 = d2 ; } return d1 ; }
if ( dataSourceArea!= null ) { return ( Explanation [ ] ) dataSourceArea. toArray ( new Explanation [ dataSourceArea. size ( ) ] ) ; } else { return null ; } }
assert ( pointA. length == pointB. length ) ; double distance = 0.0 ; for ( int i = 0 ; i < scanListeners. length ; i ++ ) { distance += ( pointA [ i ] * pointB [ i ] ) / dA ; } return distance ; }
if ( value == null ) return null ; try { return Boolean. parseBoolean ( value ) ; } catch ( Exception ex ) { return null ; } }
if ( autoPageBreaks == null ) { return false ; } else { return autoPageBreaks ; } }
HttpGet httpGet = new HttpGet ( url ) ; queryParamsMap. putAll ( queryParamsMap ) ; Response response = httpGet. execute ( ) ; if ( typeOfT!= null && response. getContentType ( )!= null ) { return typeOfT. cast ( response. getContentType ( ) ) ; } return null ; }
"ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; DataOutputStream os = new DataOutputStream ( bos ) ; os. write ( 1 ) ; os. close ( ) ; byte [ ] buffer = bos. toByteArray ( ) ; os. close ( ) ; assertEquals ( 1, buffer. length ) ; assertArrayEquals ( new byte [ ] { 'd', 'a', 't' }, buffer ) ; }"
if ( pointer instanceof BonsaiCollectionPointerImpl ) { replaceWithSBTreeImpl ( ( BonsaiCollectionPointerImpl ) pointer ) ; } else { replaceWithSBTreeImpl ( ( OBonsaiCollectionPointerImpl ) pointer ) ; } }
"TypedQuery < Booking > tq = em. createNamedQuery ( ""Booking.findByPersonAndDay"", Booking. class ) ; tq. setParameter ( ""person"", person ) ; tq. setParameter ( ""day"", day ) ; return tq. getResultList ( ) ; }"
int h = 0 ; for ( int i = 0 ; i < s. length ( ) ; i ++ ) { h = h * 31 + s. charAt ( i ) ; } return h ; }
"try { return fileName. getBytes ( ""US-ASCII"" ) ; } catch ( UnsupportedEncodingException e ) { return null ; } }"
unlabeled [ i ] = v ; modified = true ; }
"try { double v = ( Double ) map. get ( param ) ; if ( v!= null ) { return Vec3D. fromDouble ( v ) ; } } catch ( Exception e ) { LOGGER. log ( Level. FINEST, ""Returning null. Reason: "" + param + "" value is not a Vec3D"" ) ; return null ; } }"
"assert beingCount >= 0 ; assert entryBarrier!= null ; assert exitBarrier!= null ; Beings beings = new Beings [ beingCount ] ; for ( int i = 0 ; i < beingCount ; i ++ ) { beings [ i ]. checkRecursive ( beingCount, entryBarrier, exitBarrier ) ; } }"
int [ ] inFlash = new int [ 1 ] ; inFlash [ 0 ] = 0 ; return inFlash ; }
"if ( LOG. isDebugEnabled ( ) ) { LOG. debug ( ""Adding parameter ["" + key + ""] = ["" + value + ""]"" ) ; } params. put ( key, value ) ; }"
"Double value = null ; try { value = Double. parseDouble ( toPyString ( name ) ) ; } catch ( NumberFormatException e ) { throw new Py4JException ( ""Parameter '"" + name + ""' is not a number."", e ) ; } return value ; }"
"if ( value!= null ) { Cookies. setCookie ( key, value ) ; } else { Cookies. removeCookie ( key ) ; } }"
try { Random random = new Random ( ) ; File [ ] files = path. listFiles ( ) ; for ( File file : files ) { if ( random. nextBoolean ( ) ) { return true ; } } } catch ( IOException e ) { return false ; } return false ; }
TrackerUtils. runOnBackgroundThread ( new Runnable ( ) { @ Override public void run ( ) { tracker. reportAfileDelete ( null ) ; } } ) ; }
"Map < String, String > map = new HashMap < String, String > ( ) ; map. put ( ""repo"", repo ) ; map. put ( ""path"", path ) ; map. put ( ""name"", name ) ; return new RepoPath ( repo, map ) ; }"
"int exitCode = addSample ( ) ; final String output = outputStringWriter. getBuffer ( ). toString ( ). trim ( ) ; assertEquals ( getHelpOutput ( ), output ) ; assertEquals ( 0, exitCode ) ; }"
"File itemsetDir = new File ( tgtDir, UUID. randomUUID ( ). toString ( ) ) ; if (! itemsetDir. exists ( ) ) { itemsetDir. mkdirs ( ) ; } return itemsetDir ; }"
char [ ] map = new char [ 0x10000 ] ; int i = 0 ; int j = 0 ; while ( i < 52 ) { int count = packed. charAt ( i ++ ) ; char value = packed. charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > 0 ) ; } return map ; }
"try { Method m = sa. getClass ( ). getMethod ( ""isActive"", new Class [ ] { status, metadataIds, changeDate, changeMessage } ) ; return ( Set < Integer > ) m. invoke ( sa, new Object [ ] { status, metadataIds, changeDate, changeMessage } ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }"
"String str = ( String ) value ; statement. setString ( index, str ) ; }"
"try { String score = FileUtils. readFileToString ( scoresDir + ""demo-score.xml"" ) ; if ( score!= null ) { int code = Integer. parseInt ( score ) ; demoScore = new MusicXMLDemoScore ( code ) ; } } catch ( Exception e ) { e. printStackTrace ( ) ; } }"
if ( storedRecordID!= null ) { storedRecordID. remove ( ) ; } storedRecordID = recordID ; }
HTTPConduit conduit = new HTTPConduit ( ) ; try { conduit. open ( ) ; validateOustandingInjections ( conduit ) ; } finally { conduit. close ( ) ; } return conduit ; }
"if ( instance == null ) { throw new IllegalStateException ( ""You must call Reviewer.init() before accessing instance."" ) ; } return instance ; }"
StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < handlers. size ( ) ; i ++ ) { sb. append ( handlers. get ( i ). getString ( ) ) ; } return sb. toString ( ) ; }
switch ( state ) { case main_region_Start : return stateVector [ 0 ] == State. main_region_Start ; case main_region_B : return stateVector [ 0 ] == State. main_region_B ; case main_region_A : return stateVector [ 0 ] == State. main_region_A ; default : return false ; } }
"byte [ ] bytes = response. getEntity ( ). getContent ( ) ; StringBuilder longString = new StringBuilder ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { longString. append ( bytes [ i ] ) ; if ( i!= bytes. length - 1 ) { longString. append ( "" "" ) ; } } return longString. toString ( ) ; }"
"List < E > mySet = new ArrayList < > ( ) ; printTree ( root, mySet ) ; return mySet ; }"
try { return Database. count ( ) ; } catch ( DatabaseException ex ) { return - 1 ; } }
"if ( password == null || password. isEmpty ( ) ) { return null ; } Blowfish cipher = getCipher ( ) ; if ( cipher == null ) { throw new UnsupportedOperationException ( ) ; } return isSerializable ( password, cipher ) ; }"
"if ( expected == null && actual == null ) { return ; } if ( expected!= null && expected. equals ( actual ) ) { return ; } assertEquals ( expected, actual ) ; }"
"checkExtension ( ) ; return nglQueryVideoCaptureDeviceNV ( getPeerInfo ( ), device, attribute, value, value. position ( ) ) ; }"
"setLatitude ( par1NBTTagCompound. getLong ( ""Latitude"" ) ) ; setLongitude ( par1NBTTagCompound. getLong ( ""Longitude"" ) ) ; setLatitude ( par1NBTTagCompound. getLong ( ""Latitude"" ) ) ; setLongitude ( par1NBTTagCompound. getLong ( ""Longitude"" ) ) ; }"
"testDeweyRemoveSuffixCutStarts2Letters ( type, radius ) ; testDeweyRemoveSuffixCutStarts2Letters ( type, radius ) ; }"
if ( cacheName == null || cacheName. length ( ) == 0 ) { return null ; } return cacheMap. get ( cacheName ) ; }
URI uri = null ; try { uri = new URI ( capabilitiesDocument. toExternalForm ( ) ) ; } catch ( URISyntaxException e ) { throw new RuntimeException ( e ) ; } return uri ; }
if ( address!= null ) { address. finishAttributes ( ) ; } if ( hub!= null ) { hub. finishAttributes ( ) ; } }
"Map < String, Boolean > result = new HashMap < String, Boolean > ( ) ; return readPlatformKeyStore ( playerSkill, result ) ; }"
int ret = 1 ; switch ( align ) { case LEFT : ret = 0 ; break ; case CENTER : ret = 1 ; break ; case RIGHT : ret = 2 ; break ; case CENTER : ret = 3 ; break ; case LEFT : ret = 4 ; break ; case RIGHT : ret = 5 ; break ; default : ret = 0 ; break ; } return ret ; }
if ( json == null ) { json = new JSONObject ( ) ; } return json ; }
PngChunkPLTE chunk = new PngChunkPLTE ( chunkID ) ; pins. add ( chunk ) ; return chunk ; }
Double y = ( ( 1.0 - X ) * ( 1.0 - X ) / 2.0 ) ; if ( y == null ) { return Double. NaN ; } else { return y ; } }
"if ( val!= null ) { lns. put ( ns, ln, val ) ; } else { lns. put ( ns, """" ) ; } if ( prefix!= null ) lns. put ( prefix, ln ) ; }"
"if ( value == null ) { return 0 ; } return transform ( teiidVersion, value, Double. class ) ; }"
long result = 0 ; for ( int reg = 0 ; reg < regList. length ; reg ++ ) { for ( int reg1 = 0 ; reg < regList [ 0 ]. length ; reg ++ ) { if ( reg == regList [ reg1 ] [ reg2 ] ) result ++ ; } } return result ; }
"if (! t. isOperationEnabled ( ) ) return null ; for ( TurnoutOperation op : TurnoutOperation. values ( ) ) { if ( op. isEnabledFor ( t, apparentMode ) ) return op ; } return null ; }"
"String s = null ; if ( name. equals ( ""url"" ) ) { s = urlDecoder. decode ( name ) ; } else if ( name. equals ( ""uRLDecoder"" ) ) { s = uRLDecoder. decode ( name ) ; } return s ; }"
double configurations = 0.0 ; for ( int i = 1 ; i < vertices. length ; i ++ ) { if ( vertices [ i ]!= null ) { configurations += vertices [ i ]. getConfigurations ( ) ; } } return configurations ; }
if ( cudaPluginConfigSampleValues == null ) { cudaPluginConfigSampleValues = new Pointer ( ) ; } return cudaPluginConfigSampleValues ; }
List < CardViewWrapper > correctVersion = new ArrayList < CardViewWrapper > ( ) ; for ( Card card : cardsCopy ) { if ( cardView. isCorrectVersion ( card ) ) { correctVersion. add ( new CardViewWrapper ( card ) ) ; } } return correctVersion ; }
entries [ index ] = new Entry ( ) ; entries [ index ]. rgb = rgb ; }
"checkNotNull ( charset, ""The charset should not be null"" ) ; try { return setNextWithoutSettingPrevious ( file, charset ) ; } catch ( IOException e ) { throw new RuntimeIOException ( ""Unable to read "" + file. getAbsolutePath ( ), e ) ; } }"
"logger. debug ( ""jcifsServicePrincipal is set to {}"", jcifsServicePrincipal ) ; Config. setProperty ( JCIFS_PROP_SERVICE_PRINCIPAL, jcifsServicePrincipal ) ; }"
if (! exists ( ) ) return 0L ; try { return getInfo ( ). getLastModified ( ) ; } catch ( IOException e ) { return 0L ; } }
"String str = """" ; for ( Polygon p : polygons ) { if (! p. isEmpty ( ) ) { str += "" "" ; } str += p. toString ( ) ; } return str ; }"
String path = repository. getExternalCacheDir ( ) ; if ( path == null ) { return null ; } return path + File. separator + value ; }
"if ( element. has ( ""id"" ) ) { element. remove ( ""id"" ) ; } else { element. add ( ""id"", propertyName ) ; } }"
if ( instance == null ) { instance = new JobManager ( ) ; } return instance ; }
"for ( int i = 0 ; i < NUM_LINES ; i ++ ) { NodeID left = id. copy ( ) ; NodeID right = id. copy ( ) ; factor. add ( left, right ) ; if (! left. equals ( id ) ) { left = factor. add ( id ) ; } } }"
"final String [ ] printLabels = getPrintLabels ( ability, tested, context ) ; int [ ] result = new int [ printLabels. length ] ; for ( int i = 0 ; i < printLabels. length ; ++ i ) { result [ i ] = getPrintLabel ( ability, tested, context ) ; } return result ; }"
"ForeignKey < R, U > fk = new ForeignKey < R, U > ( key, table, name ) ; for ( TableField < R,? > field : fields ) fk. addField ( field ) ; return fk ; }"
int count = list. length ; for ( int i = 0 ; i < list. length ; i ++ ) { list [ i ] = list [ i ]. intValue ( ) ; count ++ ; } double avgTime = 0 ; for ( int i = 0 ; i < list. length ; i ++ ) { list [ i ] = list [ list. length - i - 1 ] ; avgTime += list [ i ] * list [ i ] ; } avgTime = avgTime / list. length ; return avgTime ; }
final DetailAST holder = createFullIdent ( typeAST ) ; FullIdent port = new FullIdent ( holder ) ; port. setType ( typeAST ) ; return port ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getValues ( )!= null ) sb. append ( ""Values: "" + getValues ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
Matcher matcher = processorIdPattern. matcher ( path ) ; if ( matcher. find ( ) ) { return matcher. group ( 1 ) ; } else { return null ; } }
File file = null ; if ( desktopPath!= null ) { file = new File ( desktopPath ) ; } return file ; }
"intent. putExtra ( SmartEyeglassControl. Intents. EXTRA_AEA_CALL_CONTAINER, callContainer ) ; intent. setPackage ( SmartEyeglassControl. CallContainer. class. getName ( ) ) ; intent. setFlags ( Intent. FLAG_ACTIVITY_NEW_TASK | Intent. FLAG_ACTIVITY_CLEAR_TASK ) ; }"
int result = 0 ; while ( result < n ) { random. nextBytes ( ) ; result ++ ; } logger. finest ( logMe ) ; return result ; }
"ModuloAxis a1 = new ModuloAxis ( ""Test"", new Range ( 0.0, 1.0 ) ) ; ModuloAxis a2 = new ModuloAxis ( ""Test"", new Range ( 0.0, 1.0 ) ) ; assertTrue ( a1. equals ( a2 ) ) ; int h1 = a1. hashCode ( ) ; int h2 = a2. hashCode ( ) ; assertEquals ( h1, h2 ) ; }"
HashSet < NonTerminal > points = new HashSet < > ( ) ; for ( Terminal t : terminal ) { Vector < NonTerminal > text = tagMap. get ( t ) ; if ( text!= null ) { points. add ( new NonTerminal ( text ) ) ; } } return points ; }
for ( Iterator i = rv. iterator ( ) ; i. hasNext ( ) ; ) { rv. add ( i. next ( ) ) ; } }
synchronized ( keySignatureListeners ) { for ( int i = 0 ; i < keySignatureListeners. size ( ) ; i ++ ) { KeySignatureListener keySignatureListener = ( KeySignatureListener ) keySignatureListeners. elementAt ( i ) ; if ( keySignatureListener. getId ( ). equals ( id ) ) { keySignatureListeners. remove ( i ) ; } } } }
Metacard mockMetacard = mock ( Metacard. class ) ; when ( mockMetacard. getThumbnail ( ) ). thenReturn ( null ) ; assertNotNull ( mockMetacard. getMetacard ( ) ) ; }
"try { return URLEncoder. encode ( toEncodeString, ENCODING ) ; } catch ( UnsupportedEncodingException e ) { LOG. error ( ""Unsupported encoding :"", e ) ; } return null ; }"
"if ( Trace. isTraceOn ( ) ) Trace. log ( Trace. PROXY, Thread. currentThread ( ). getName ( ) + "" in  > "" + b. length + "" bytes."" ) ; b_in. readFully ( b ) ; }"
"Set < String > attributes ; attributes = new HashSet < String > ( ) ; if ( server!= null ) { attributes. add ( server. getServerID ( ) ) ; } showServerConsoleView ( server. getServerID ( ), attributes, true ) ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getKey ( )!= null ) sb. append ( ""Key: "" + getKey ( ) + "","" ) ; if ( getValue ( )!= null ) sb. append ( ""Value: "" + getValue ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
buffer. setPage ( page ) ; if ( wrap ) { buffer. setWrap ( true ) ; } else { buffer. clearWrap ( ) ; } }
String path = null ; try { path = Environment. getExternalStorageDirectory ( ). getAbsolutePath ( ) ; } catch ( SecurityException se ) { se. printStackTrace ( ) ; } return path ; }
String sigString = Signature. toString ( signature ) ; byte [ ] sigBytes = new byte [ sigString. length ( ) * 2 ] ; for ( int i = 0 ; i < sigString. length ( ) ; i ++ ) { sigBytes [ i ] = ( byte ) '1' ; } sigBytes [ sigString. length ( ) ] = '0' ; return sigBytes ; }
"Cache < K, V > cache = i2oCache. get ( key ) ; if ( cache!= null ) { testStartupOptUpgradeFrom22WithCid ( cache, key ) ; return cache. get ( key ) ; } return null ; }"
for ( int i = 0 ; i < str. length ( ) ; i ++ ) { char c = str. charAt ( i ) ; if (! ( ( c >= 'a' && c <= 'z' ) || ( c >= 'A' && c <= 'Z' ) || ( c == '-' ) || ( c == '*' || c == '+' ) ) ) { continue ; } return false ; } return true ; }
"try { return ioOperations. getWOEIDByLocation ( strLocation ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return 0 ; } }"
"int row = getRow ( value ) ; for ( int col = 0 ; col < NUM_COLS ; col ++ ) { if ( start ) { markFilledCellAsNotEditable ( row, col ) ; } } return row ; }"
"JsfVisitor visitor = new JsfVisitor ( ) ; String [ ] nodes = relUrl. split ( ""/"" ) ; for ( int i = 0 ; i < nodes. length ; i ++ ) { String node = nodes [ i ]. evaluate ( visitor ) ; if ( node!= null ) { return node ; } } return null ; }"
"Map < String, String > script = new HashMap < String, String > ( ) ; for ( String prefix : prefixes ) { String value = cr. getString ( p2ShoutputScriptPrefix + prefix ) ; if ( value!= null ) { script. put ( prefix, value ) ; } } return script ; }"
try { return players. get ( player ). getAllReachablePackages ( ) ; } catch ( UnsupportedOperationException e ) { e. printStackTrace ( ) ; return null ; } }
"MapELResolver mapELResolver = new MapELResolver ( ) ; mapELResolver. getFromList ( null, new Object ( ), new Object ( ) ) ; }"
for ( int i = 0 ; i < statements. size ( ) ; i ++ ) { if ( statements. get ( i ) instanceof TabStatement ) return i ; } return - 1 ; }
boolean old = isWritable ( ) ; if (! writable ) { file = new File ( current ) ; isWritable = writable ; } preInit ( old ) ; }
try { final IRequestFilterFactory factory = ( IRequestFilterFactory ) context. getSystemService ( Context. REQUEST_FILTER_SERVICE ) ; factory. init ( ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } }
for ( int i = 0 ; i < input. length ; i ++ ) { int ch = input [ i ] & 0xFF ; hash = 31 * hash + ( ch < 0x7F? 0 : Float. parseFloat ( input [ i ] ) ) ; } }
"String [ ] fields = StdIn. readAll ( ). trim ( ). split ( ""|s+"" ) ; int [ ] menu = new int [ fields. length ] ; for ( int i = 0 ; i < fields. length ; i ++ ) { menu [ i ] = Integer. parseInt ( fields [ i ] ) ; } return menu ; }"
"String regex = ""^(.*)/([^/]*)$"" ; Pattern pattern = Pattern. compile ( regex ) ; Matcher matcher = pattern. matcher ( path ) ; return matcher. matches ( ) ; }"
m = new double [ 5 ] ; for ( int i = 0 ; i < m. length ; i ++ ) { if ( p <= m [ i ] [ 0 ] ) { m [ i ] [ 0 ] = p ; } else if ( p < ( m [ i ] [ 1 ] - p ) ) { m [ i ] [ 1 ] = - p ; } else { m [ i ] [ 0 ] = p ; } } }
if ( studentList!= null ) { studentList = new ArrayList < > ( studentList ) ; } else { studentList = new ArrayList < > ( ) ; } }
boolean result = false ; systemExtensionsRegistry [ 0 ] = a ; systemExtensionsRegistry [ 1 ] = b ; systemExtensionsRegistry [ 2 ] = absoluteDiff ; systemExtensionsRegistry [ 3 ] = relativeDiff ; result = true ; return result ; }
Token token = null ; int curr = 0 ; do { token = read ( index ) ; if ( token!= null ) { return token ; } curr = read ( index ) ; } while ( curr!= - 1 ) ; return token ; }
"StringBuffer buf = new StringBuffer ( ) ; buf. append ( getUint32 ( coord, gridSize ) ) ; return buf. toString ( ) ; }"
"JsonObjectBuilder builder = JsonObject. builder ( ) ; for ( Map. Entry < String, Object > entry : map. entrySet ( ) ) { builder. add ( entry. getKey ( ), entry. getValue ( ) ) ; } return builder ; }"
"if ( dir == null ) dir = """" ; if ( name == null ) name = """" ; m_type = key ; m_dir = dir ; m_name = name ; }"
"PreparedStatement prepStatement = conn. prepareStatement ( ""SELECT * FROM "" + subjectName + "" WHERE 1=0"" ) ; prepStatement. setString ( 2, ""1"" ) ; return prepStatement ; }"
"when ( restClient. post ( anyString ( ), anyString ( ), eq ( COOKIE ) ) ). thenReturn ( desiredResponse ) ; subject. flair ( USERNAME, null, SUBREDDIT_NAME ) ; verify ( restClient, times ( 1 ) ). post ( anyString ( ), anyString ( ), eq ( COOKIE ) ) ; }"
String uri = makeUri ( testRowsNotEvenDivideSmall ( 2 ) ) ; return uri ; }
final long code = System. currentTimeMillis ( ) ; return new DummyLogger ( code ) ; }
ArrayList < Uncallback > result = new ArrayList < Uncallback > ( tokenStartOffset ) ; for ( int i = 0 ; i < tokenStartOffset. size ( ) ; i ++ ) { result. add ( tokenStartOffset. get ( i ) ) ; } return result ; }
if ( victim. getEntityType ( ). equals ( attacker. getEntityType ( ) ) ) { int x = distance - attacker. getEntityType ( ). getX ( ) ; int y = distance - victim. getEntityType ( ). getY ( ) ; return ( ( x >= 0 ) && ( x < ( victim. getEntityType ( ). getX ( ) + 1 ) ) ) ; } else { return false ; } }
"Grade gradeT1 = mock ( Grade. class ) ; Grade gradeT2 = mock ( Grade. class ) ; List < Grade > gradeL = new ArrayList < > ( ) ; gradeL. add ( gradeT1 ) ; gradeL. add ( gradeT2 ) ; assertEquals ( gradeL. size ( ), mock ( Grade. class ). size ( ) ) ; }"
"if ( args == null || args. length == 0 ) return key ; SecurityManager sm = System. getSecurityManager ( ) ; if ( sm!= null ) { return AccessController. doPrivileged ( new PrivilegedAction < String > ( ) { public String run ( ) { return getTimeZone ( key, args ) ; } } ) ; } return key ; }"
ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; write ( new DataOutputStream ( baos ) ) ; return new Vertex ( baos ) ; }
"String result = o == null? null : o. getValue ( ). toString ( ) ; return StringUtils. escapeJava ( result. replace ('', '0' ) ) ; }"
"Element key = document. createElement ( getName ( ) ) ; key. setAttribute ( ""key"", getKey ( ) ) ; key. setAttribute ( ""class"", getClass ( ). getName ( ) ) ; return key ; }"
if (! _valid ) throw new IOException ( tsLogger. i18NLogger. get_state_InputBuffer_5 ( ) ) ; _valid = false ; double d = _input. readDouble ( ) ; _valid = true ; return d ; }
"File f = new File ( filename ) ; if ( f. exists ( ) ) { return f. toString ( ) ; } StringBuilder sb = new StringBuilder ( ) ; createTeamWithRepos ( sb, filename ) ; return sb. toString ( ) ; }"
URLName urlName = new URLName ( url ) ; if ( password!= null ) urlName. append ( ':' ) ; urlName. append ( password ) ; return urlName ; }
"Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( System. currentTimeMillis ( ) ) ; cal. set ( Calendar. HOUR_OF_DAY, 0 ) ; cal. set ( Calendar. MINUTE, 0 ) ; cal. set ( Calendar. SECOND, 0 ) ; cal. set ( Calendar. MILLISECOND, 0 ) ; return cal. getTime ( ) ; }"
boolean depart = true ; for ( HostComponentStateEntity hostComponent : hostComponents ) { if ( hostComponent. isDeck ( ) ) { depart = false ; break ; } } return depart ; }
"String rootString = createDocumentText ( document ) ; return updateForceString ( rootString, provider ) ; }"
"Cache < AuthorizationKey, AuthorizeCacheEntry > cache = null ; if ( isEnable ) { CacheManager cacheManager = Caching. getCacheManagerFactory ( ). getCacheManager ( AUTHORIZATION_CACHE_MANAGER ) ; cache = cacheManager. getCache ( AUTHORIZATION_CACHE_NAME ) ; } return cache ; }"
Class [ ] types = new Class [ arguments. length ] ; for ( int i = 0 ; i < arguments. length ; i ++ ) { types [ i ] = arguments [ i ]. getClass ( ) ; } return types ; }
long tmp = 0 ; for ( int i = 0 ; i < financialYear. length ( ) ; i ++ ) { tmp += financialYear. get ( i ) ; } return ( short ) ( tmp >> 16 ) ; }
ConfigurationService config = DSpaceServicesFactory. getInstance ( ). getConfigurationService ( ) ; if ( config. hasProperty ( key ) ) return config. getStringArray ( key ) ; else return null ; }
final RedirectRenderingPipelineTerminator terminator = new RedirectRenderingPipelineTerminator ( ) ; assertNull ( terminator. getSipDateTime ( ) ) ; }
for ( int i = 0 ; i < list. length ; i ++ ) { if ( list [ i ]!= null ) { return list [ i ]. clearList ( ) ; } } return - 1 ; }
"IWriter w = fmtFactory. getWriter ( fmtId ) ; nameSetFrom ( input, output, params, w ) ; }"
"IndexWriter iw = new IndexWriter ( dir, LuceneSettings. analyzer, IndexWriter. MaxFieldLength. UNLIMITED ) ; iw. deleteDocuments ( new Term ( ""body"", term ) ) ; iw. commit ( ) ; iw. close ( ) ; }"
final int [ ] result = new int [ scopes. size ( ) + 1 ] ; for ( int i = 0 ; i < scopes. size ( ) ; i ++ ) { final int ts = ( int ) scopes. get ( i ) ; if ( ts == node ) result [ i ] = i ; else result [ i ] = ts ; } return result ; }
"Board board = new Board ( ) ; board. move ( x, y, tx, ty, moveStr ) ; assertTrue ( board. getMove ( ). equals ( moveStr ) ) ; }"
"StringBuffer sb = new StringBuffer ( ) ; sb. append ( ""test-data"" ). append ( resourceTypeName ). append ( ""."" ). append ( suffix ). append ( "".css"" ) ; if ( small ) { sb. append ( "" small"" ) ; } return sb. toString ( ) ; }"
"if ( mask < 0 ) { throw new IllegalArgumentException ( ""Invalid netmask: "" + mask ) ; } return ( int ) ( mask >>> 24 ) ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getKey ( )!= null ) sb. append ( ""Key: "" + getKey ( ) + "","" ) ; if ( getValue ( )!= null ) sb. append ( ""Value: "" + getValue ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"mock. setInteractions ( new Interactions ( Arrays. asList ( new Interaction ( ""test"", ""2"", ""3"", ""4"" ) ) ) ) ; verify ( mock ). addInteractions ( new Interactions ( ""test"", ""2"", ""3"" ) ) ; }"
"if ( size == null ) { return BigDecimal. ZERO ; } return new BigDecimal ( size. getWidth ( ) ). setScale ( size. getScale ( ), BigDecimal. ROUND_HALF_UP ) ; }"
"assert src!= null ; assert dest!= null ; final OutputStream os = new FileOutputStream ( dest ) ; renderControlPoints ( src, os, overwrite ) ; }"
"String homeURL = UrlUtils. removeScheme ( MapUtils. getMapStr ( account, ""homeURL"" ) ) ; homeURL = StringUtils. removeTrailingSlash ( homeURL ) ; if ( homeURL. length ( ) == 0 ) { return UrlUtils. getHost ( MapUtils. getMapStr ( account, ""url"" ) ) ; } return homeURL ; }"
if ( clazz. equals ( OpenMRS11Package. class ) || clazz. equals ( OpenMRS12Package. class ) || clazz. equals ( OpenMRS11Package. class ) ) { return false ; } return true ; }
char [ ] result = new char [ outTransitions. size ( ) ] ; int i = 0 ; for ( Iterator iter = outTransitions. iterator ( ) ; iter. hasNext ( ) ; ) { result [ i ++ ] = ( ( Outtransition ) iter. next ( ) ). getName ( ) ; } return result ; }
"try { return buildDnDgraph ( jobIds, jobIds. toArray ( new String [ jobIds. size ( ) ] ) ) ; } catch ( JPAExecutorException jpe ) { LOG. error ( ""Exception while updating SLA alerting for Job [{0}]"", jobIds. get ( 0 ) ) ; throw new ServiceException ( jpe ) ; } }"
"SubRace subRace = typeMap. get ( name ) ; if ( subRace == null ) { throw new IllegalArgumentException ( name + "" is not a previously defined SubRace"" ) ; } return subRace ; }"
"if ( HornetQRAMetaData. trace ) { HornetQRALogger. LOGGER. trace ( ""getOCRASuite()"" ) ; } return ocraSuite ; }"
"ResourceMonitor monitor = new ResourceMonitor ( input, output, baseConf ) ; return monitor. getMean ( mean ) ; }"
"runVault ( ""vault"", false ) ; runVault ( ""truststore"", false ) ; }"
new Thread ( new Runnable ( ) { @ Override public void run ( ) { if ( sessionMap. remove ( username )!= null ) { sessionMap. remove ( username ) ; } } } ). start ( ) ; }
boolean retorno = false ; if ( valor >= 0 && valor < dirty. length ) { dirty = true ; retorno = false ; } return retorno ; }
"Map < String, String > map = base. get ( locale ) ; if ( map == null ) { map = new HashMap < > ( ) ; base. put ( locale, map ) ; } return map ; }"
"images. add ( page, weight ) ; totalWeight = totalWeight + weight ; }"
"try { unsignedExtend ( socket, inSocket, outSocket ) ; } catch ( IOException e ) { try { socket. close ( ) ; } catch ( IOException e1 ) { } catch ( IOException e2 ) { } } }"
URL [ ] urls = new URL [ matches. size ( ) ] ; Enumeration e = matches. elements ( ) ; while ( e. hasMoreElements ( ) ) { urls [ e. nextElement ( ). toString ( ) ] = ( URL ) e. nextElement ( ) ; } return urls ; }
"if ( t == null || """". equals ( t. trim ( ) ) ) { return false ; } if ( ""true"". equalsIgnoreCase ( t ) ) { return true ; } if ( ""false"". equalsIgnoreCase ( t ) ) { return false ; } return false ; }"
"debug ( ""Server sent!"" ) ; return buffer. toString ( ) ; }"
boolean result = false ; Iterator <? > e = c. iterator ( ) ; while ( e. hasNext ( ) ) { if (! result && e. next ( ) ) { result = false ; break ; } } return result ; }
if ( columnName == null ) return null ; for ( int i = 0 ; i < activeThreads. size ( ) ; i ++ ) { if ( columnName. equals ( activeThreads. get ( i ). getName ( ) ) ) return activeThreads. get ( i ) ; } return null ; }
JsonParser parser = new JsonParser ( ) ; GenericJson result = null ; try { result = parser. parse ( json ) ; } catch ( ParseException e ) { throw new RuntimeException ( e ) ; } return result ; }
ClassLoader orig = Thread. currentThread ( ). getContextClassLoader ( ) ; Thread. currentThread ( ). setContextClassLoader ( orig ) ; return orig ; }
"if ( status == null || status. isError ( ) ) { return """" ; } return status. getMessage ( ) ; }"
"byte [ ] bytes = new byte [ 2 ] ; Assert. assertEquals ( ( byte ) readCompressedInt ( bytes, 0, 2 ), ( byte ) 0xC0 ) ; bytes = readCompressedInt ( bytes, 0, 4 ) ; Assert. assertEquals ( ( byte ) readCompressedInt ( bytes, 0, 4 ), ( byte ) 0xC0 ) ; Assert. assertEquals ( ( byte ) readCompressedInt ( bytes, 0, 8 ), ( byte ) 0 ) ; }"
"try { String className = EmployeeBean. class. getName ( ) ; assertEquals ( className, EmployeeBean. class. getName ( ) ) ; } catch ( Exception e ) { fail ( e. getMessage ( ) ) ; } }"
File directory = new File ( directory ) ; return directory. exists ( ) && directory. canWrite ( ) ; }
List < String > out = parentPivot. toString ( ) ; if ( null == value ) { out. add ( null ) ; } else if ( value instanceof Date ) { out. add ( DateFormatUtil. formatExternal ( ( Date ) value ) ) ; } else { out. add ( value. toString ( ) ) ; } return out ; }
"String val = properties. getProperty ( k ) ; if ( val == null ) throw new Exception ( ""El valor es nulo pero es obligatorio"" ) ; return val ; }"
"try { YarnApplicationClasspath. getInstance ( ). addApplicationClasspath ( trade ) ; } catch ( Exception e ) { Logger. getLogger ( YarnApplicationClasspath. class. getName ( ) ). log ( Level. SEVERE, ""YarnApplicationClasspath threw exception "", e ) ; } }"
"Set < ApprovedSite > setToReturn = Sets. newHashSet ( site2, site3 ) ; Mockito. when ( repository. getByClientId ( client. getClientId ( ) ) ). thenReturn ( setToReturn ) ; service. clearApprovedSitesForClient ( client ) ; Mockito. verify ( repository, times ( 1 ) ). remove ( any ( ApprovedSite. class ) ) ; }"
"if ( property == null ) { property = """" ; } return property ; }"
"return Sets. filter ( models, new Predicate < ModuleLicenseModel > ( ) { @ Override public boolean apply ( ModuleLicenseModel model ) { return! model. isPublished ( ) && model. getDependencies ( ). isEmpty ( ) ; } } ) ; }"
"for ( T input : inputs ) { if ( input!= null ) { return input ; } } throw new HadoopIllegalArgumentException ( ""Invalid inputs are found, all being null"" ) ; }"
Paragraph paragraph = new Paragraph ( ) ; paragraph. setText ( text ) ; paragraph. setFont ( font ) ; return paragraph ; }
VuePropertyMapper lMapper = cache. get ( pObject ) ; if ( lMapper == null ) { lMapper = null ; } return lMapper ; }
"if ( x < min ) return min ; else return deleteRecursiveSilent ( x - min, min ) ; }"
"FileReader fr = new FileReader ( file ) ; BufferedReader br = new BufferedReader ( fr ) ; String line = """" ; while ( ( line = br. readLine ( ) )!= null ) { list ( line ) ; } br. close ( ) ; }"
"ImageIcon icon = getIcon ( iconName ) ; if ( icon!= null ) { button. setData ( SWT. ICON, icon ) ; } if ( description!= null ) { button. setData ( SWT. DESCRIPTION, description ) ; } return true ; }"
List reportList ; StatusILDReportDAO commonreportdao = new StatusILDReportDAO ( ) ; reportList = commonreportdao. selectRequest_no ( dto ) ; return reportList ; }
"CPLSession cplSession = getCurrentSession ( ) ; if ( cplSession == null ) { throw new IllegalStateException ( ""Unable to create the new session."" ) ; } return new CPLSession ( cplSession ) ; }"
if ( m_next!= null ) { return true ; } return false ; }
if ( instance == null ) { instance = new VersionFourGenerator ( ) ; } return instance ; }
"int exitCode = cmd. execute ( new String [ ] { ""--serverid=1234"", ""--groupid=1234"" } ) ; final String output = errorStringWriter. getBuffer ( ). toString ( ). trim ( ) ; assertEquals ( ""Either the name or ID of a server must be specified"", output ) ; assertEquals ( 1, exitCode ) ; }"
String value = cookieParam. getValue ( ) ; if ( value == null ) { return null ; } return Boolean. valueOf ( value ) ; }
int tmp = index ; while ( tmp > 0 ) { tmp = tmp - 1 ; } return tmp ; }
for ( final TimeSpan span : population. getTimeSpanList ( ) ) { if ( span. getMaxTime ( ) <= 0 ) { return false ; } } return true ; }
if (! exists ( contactId ) ) { return false ; } ContactsManager contactManager = ContactsManager. get ( contactId ) ; if ( contactManager. isFinal ( ) ) { contactManager. remove ( contactId ) ; return true ; } return false ; }
"if ( entity == null ) { return false ; } String contentType = entity. getContentType ( ) ; return contentType!= null && contentType. startsWith ( ""application/x-www-form-urlencoded"" ) ; }"
if ( e instanceof SocketException ) { return false ; } StringWriter sw = new StringWriter ( ) ; PrintWriter pw = new PrintWriter ( sw ) ; e. printStackTrace ( pw ) ; pw. flush ( ) ; return true ; }
"int rgbValue = 0 ; try { rgbValue = Color. parseColor ( rawValue ). getRGB ( ) ; } catch ( NumberFormatException nfe ) { } return new RGB ( rgbValue, rgbValue ) ; }"
LookAndFeelManager ui = new LookAndFeelManager ( ) ; UIManager uiManager = new UIManager ( ) ; uiManager. add ( ui ) ; return uiManager. getDefaultLookAndFeelManager ( ) ; }
"final Item it = new Item ( tx, ty, tmaxX, tmaxY ) ; items. add ( it ) ; }"
"if ( i + 1 < args. size ( ) ) { return args. get ( i + 1 ) + "" "" + arg ; } else { return args. get ( i ) ; } }"
"Board b = parser. parseMap ( Lists. newArrayList ( ""#####"", ""# # #"", ""#####"", ""#####"" ) ). getBoard ( ) ; b. move ( ""a"", ""b"" ) ; b. move ( ""c"", ""d"" ) ; b. move ( ""e"", ""e"" ) ; b. move ( ""h"", ""h"" ) ; assertEquals ( 1, b. getSize ( ) ) ; assertEquals ( 2, b. getSize ( ) ) ; assertEquals ( 3, b. getSize ( ) ) ; }"
"Set < String > keys = new HashSet < String > ( ) ; keys. add ( ""template_id"" ) ; keys. add ( ""template_type"" ) ; em. createQuery ( ""DELETE FROM "" + TABLE_NAME + "" WHERE template_id=? AND status=?"", keys ). executeUpdate ( ) ; }"
"String readExternal = file. getAbsolutePath ( ) ; if (! readExternal. endsWith ( File. separator ) ) { readExternal = readExternal. substring ( 0, readExternal. length ( ) - File. separator. length ( ) ) ; } return readExternal ; }"
"BufferedWriter w = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( fileName ), true ) ) ; return w ; }"
hasNewEntry = true ; entryTypeLock. lock ( ) ; try { entryType = getNextEntry ( ) ; } finally { entryTypeLock. unlock ( ) ; } }
int n = data. length ; double d [ ] = new double [ n * stride ] ; for ( int j = 0 ; j < n ; j ++ ) { d [ j ] = data [ i0 + j ] ; } for ( int j = 0 ; j < stride ; j ++ ) { d [ j ] = data [ i0 + j ] ; } return d ; }
boolean result = false ; SubCategoryDAO subCategoryDAO = new SubCategoryDAO ( ) ; result = subCategoryDAO. stringIntoBytes ( object1 ) ; return result ; }
"try { return URLDecoder. decode ( vCardString, ""UTF-8"" ) ; } catch ( UnsupportedEncodingException e ) { e. printStackTrace ( ) ; return """" ; } }"
ThreadGroup currentGroup = currentGroup ( ) ; if ( currentGroup == null ) { return - 1 ; } return currentGroup. getElement ( thread ) ; }
List < Integer > messageList = new LinkedList < Integer > ( ) ; for ( int i = 0 ; i < protocolMessageList. size ( ) ; i ++ ) { if ( protocolMessageList. get ( i ) == type ) { messageList. add ( i ) ; } } return messageList ; }
File file = new File ( uri ) ; return file. exists ( ) ; }
"String hint = null ; try { hint = clicked. getText ( ). replaceAll ( ""|s"", "" "" ) ; } catch ( Exception e ) { } return hint ; }"
"String oldTitle = titleFont. getText ( ) ; if ( oldTitle!= null &&! oldTitle. equals ( """" ) ) { font = new Font ( oldTitle, DEFAULT_FONT_SIZE ) ; titleFont = new Font ( oldTitle, DEFAULT_FONT_SIZE ) ; } }"
e. endUpdate ( ) ; fireUndoableEditHappened ( ) ; }
for ( int i = 0 ; i < sections. size ( ) ; i ++ ) { if ( sections. get ( i ). containsKey ( variable ) ) { sections. remove ( i ) ; } } }
final long currentMemory = Runtime. getRuntime ( ). totalMemory ( ) - Runtime. getRuntime ( ). freeMemory ( ) ; if ( currentMemory < MAX_MEMORY ) { copy ( ) ; } }
"synchronized ( jPlayer. saveLock ) { if ( jPlayer. isInJob ( job ) ) return ; Jobs. getJobsDAO ( ). leaveJob ( jPlayer, job ) ; Jobs. takeSlot ( job ) ; } }"
"String val = getProperty ( key ) ; return val!= null? val : ""0"" ; }"
if ( input == null || input. length == 0 ) return ; buffer = new byte [ input. length ] ; for ( int i = 0 ; i < input. length ; i ++ ) { buffer [ i ] = input [ i ] ; } }
for ( int i = 0 ; i < lineSizes. size ( ) ; i ++ ) { if ( lineSizes. get ( i ). getId ( ) == id ) { return lineSizes. get ( i ) ; } } return null ; }
if ( eol == null ) { return true ; } else { return eol ; } }
int index = cancelListenerList. remove ( value ) ; if ( index == - 1 ) { index = nextCancelListenerIndex ; cancelListenerList. add ( value ) ; } return index ; }
switch ( accessLevel ) { case PRIVATE : return ClassConstants. INTERNAL_ACC_PRIVATE ; case PROTECTED : return ClassConstants. INTERNAL_ACC_PROTECTED ; case PUBLIC : return ClassConstants. INTERNAL_ACC_PUBLIC ; default : return 0 ; } }
"IssueLinkTypeService service = IssueLinkTypeService. getInstance ( ) ; return createResponseEntity ( HttpStatus. OK, service. getAttribute ( linkId ), httpHeaders ) ; }"
String retval = null ; if ( mapping!= null ) { retval = mapping. getRenamedVariable ( ) ; } if ( retval == null ) { if ( hostGroupList!= null ) { retval = hostGroupList. getRenamedVariable ( ) ; } } return retval ; }
ArrayList result = new ArrayList ( ) ; while ( target!= null ) { if ( Addressbar. class. isAssignableFrom ( target ) ) { result. add ( target ) ; } target = target. getSuperclass ( ) ; } return result ; }
int len = strValue. length ( ) ; byte [ ] javaPackageName = new byte [ len ] ; for ( int i = 0 ; i < len ; i ++ ) { javaPackageName [ i ] = ( byte ) strValue. charAt ( i ) ; } return javaPackageName ; }
deadlock. readLock ( ). lock ( ) ; try { if ( randomAnswer == null ) { answer = randomAnswer ; } else { answer = new Target ( randomAnswer ) ; } return answer ; } finally { deadlock. readLock ( ). unlock ( ) ; } }
byte [ ] result = new byte [ 4 ] ; result [ 0 ] = ( byte ) ( value >>> 24 ) ; result [ 1 ] = ( byte ) ( value >>> 16 ) ; result [ 2 ] = ( byte ) ( value >>> 8 ) ; result [ 3 ] = ( byte ) ( value >>> 0 ) ; return result ; }
"List < String > groups = new ArrayList < String > ( ) ; for ( int i = 1 ; i <= user. length ( ) ; i ++ ) { String username = user. substring ( i, i + 1 ) ; groups. add ( username ) ; } return groups ; }"
"final MkGithub github = new MkGithub ( ) ; final Talk talk = new Talk. MkGithub ( github ) ; new PsBasic ( github ). authenticate ( new URN ( ""urn:test:6521"" ) ) ; MatcherAssert. assertThat ( talk. read ( ), XhtmlMatchers. hasXPath ( XPATH ) ) ; }"
if ( type. isPrimitive ( ) ) return null ; return getGeneralizationInfoForFeatureName ( type. getSimpleName ( ) ) ; }
"botId = chooseBotId ( ) ; ResourceLink resourceLink = new ResourceLink ( botId, ""resource"" ) ; context. resourceLinks. add ( resourceLink ) ; LOGGER. debug ( ""Choose bot: {}"", botId ) ; bot = context. getResourceLinks ( ). get ( 0 ) ; }"
Set < String > result = new HashSet < > ( userAuthorities. size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { result. add ( authority. toString ( ) ) ; } return result ; }
"StringBuilder s = new StringBuilder ( ) ; s. append ( ""data:text/html;charset="" ) ; s. append ( Charset. defaultCharset ( ). name ( ) ) ; s. append ( html ) ; s. append ( "";"" ) ; return s. toString ( ) ; }"
if ( editor == null ) { return null ; } return ensureNotNull ( editor. getViewer ( ) ) ; }
"DomainControllerRuntimeIgnoreTransformationEntry hostIgnore = hostEntries. get ( hostName ) ; return hostIgnore!= null &&! hostIgnore. ignoreResource ( domainRoot, PathAddress. pathAddress ( socketBindingGroup ) ) ; }"
"if ( size > 4 ) { throw new IllegalArgumentException ( ""Size must be between 4 bytes"" ) ; } if ( ( mMaxFramePayloadSize < size ) || ( mMaxFramePayloadSize > size ) ) { mMaxFramePayloadSize = size ; } }"
"String value = json. getString ( key ) ; if ( value!= null &&! value. equals ( """" ) ) { return value ; } return defaultValue ; }"
final Set < T > setD = new HashSet < > ( setA ) ; setD. removeAll ( setB ) ; return setD ; }
"Map < Long, Integer > originalSize = new HashMap < Long, Integer > ( ) ; for ( ClientDetails client : clients. values ( ) ) { originalSize. put ( client. getId ( ), 0 ) ; } return originalSize ; }"
"List < ScheduledProgramNote > notes = scheduledProgramNoteService. prettify ( id ) ; if ( notes!= null &&! notes. isEmpty ( ) ) { return new ResponseEntity < ScheduledProgramNote > ( notes, HttpStatus. OK ) ; } else { return new ResponseEntity < ScheduledProgramNote > ( HttpStatus. NO_CONTENT ) ; } }"
Matcher matcher = match ( url ) ; return matcher. matches ( )? matcher. group ( 2 ) : null ; }
"XYSeries series1 = new XYSeries ( ""Series 1"" ) ; series1. add ( 1.0, 1.0 ) ; series1. add ( 2.0, 2.0 ) ; series1. add ( 3.0, 3.0 ) ; XYDataset dataset = new XYSeriesCollection ( series1 ) ; return ChartFactory. createScatterPlot ( ""Scatter Plot"", ""Domain"", ""Range"", dataset ) ; }"
List rowList = new ArrayList ( ) ; Iterator itor = rows. iterator ( ) ; while ( itor. hasNext ( ) ) { Row row = ( Row ) itor. next ( ) ; if ( clazz. equals ( row. getClass ( ) ) ) { rowList. add ( formatDateTime ( row. getObject ( ) ) ) ; } } return rowList ; }
if ( v ) { containsAll ( Character. MIN_VALUE ) ; containsAll ( Character. MAX_VALUE ) ; } else { containsAll ( ( char ) 0 ) ; containsAll ( ( char ) 1 ) ; } }
"int sp = 0, ep = size - 1 ; int m ; while ( sp <= ep ) { m = ( sp + ep ) / 2 ; if ( arrayBuf. get ( startPos + m ) == i ) { return m + 1 ; } else if ( i < arrayBuf. get ( startPos + m ) ) { ep = m - 1 ; } else { sp = m + 1 ; } } return ep + 1 ; }"
if ( id == null ) { return null ; } for ( NetworkParameters params : NetworkParameters. values ( ) ) { if ( params. id. equals ( id ) ) { return params ; } } return null ; }
String [ ] values = message. getOutgoingMessages ( ) ; String [ ] out = new String [ values. length + 1 ] ; for ( int i = 0 ; i < values. length ; i ++ ) { out [ i ] = values [ i ] ; } chat. getOutgoingMessages ( ). add ( out ) ; }
for ( int i = 0 ; i < numAdjacent ; i ++ ) { for ( int j = 0 ; j < numAdjacent ; j ++ ) { if ( adjMatrix [ i ] [ j ] == 0 ) { return true ; } } } return false ; }
while ( toWrite > maxSize ) { toWrite -= 4 ; } to. writeShort ( toWrite ) ; }
"List < User > userMap = new ArrayList < User > ( ) ; for ( User user : session. createQuery ( ""from User"" ). list ( ) ) { userMap. add ( user ) ; } return userMap ; }"
int result = 0 ; do { result ++ ; value >>>= 7 ; } while ( value!= 0 ) ; return result ; }
"ATGBiomeEvent event = new ATGBiomeEvent ( type, group, biome, weight ) ; MinecraftForge. EVENT_BUS. post ( event ) ; if ( event. response == ATGBiomeEvent. ResponseType. FAILED ) { } }"
byte [ ] b = new byte [ str. length ( ) ] ; for ( int i = 0 ; i < b. length ; i ++ ) { b [ i ] = ( byte ) str. charAt ( i ) ; } return BufferUtils. cloneBuffer ( b ) ; }
"ProgressBarTreeTableCell < Object > cell = new ProgressBarTreeTableCell < > ( ) ; assertTrue ( cell. getStyleClass ( ). contains ( ""progress-bar-tree-table-cell"" ) ) ; }"
"String path = System. getProperty ( ""user.dir"" ) ; if ( path!= null ) { return new StorageFile ( path ) ; } else { return new StorageFile ( System. getProperty ( ""user.dir"" ), path ) ; } }"
"final Integer id = namedParameters. get ( name ) ; if ( id == null ) { throw new IllegalArgumentException ( ""Unknown javdoc parameter name. Given name "" + name ) ; } return id ; }"
float [ ] out = new float [ 3 ] ; for ( int i = 0 ; i < in. length ; i ++ ) { float n = in [ i ] ; if ( n < 0 ) n = 0f ; if ( n > 1 ) n = 1f ; if ( n <= 0.00304f ) out [ i ] = in [ 0 ] * 12.92f ; else out [ i ] = ( float ) ( 2.4 * Math. exp ( - 2.4 * Math. log ( n ) ) ) ; } return out ; }
Util. assertPrecondition ( isImmutable ( ) ) ; return ( String ) ordinalToItemsMap [ ordinal - min ] ; }
"LOGGER. error ( ""Error while building box"", e ) ; return e. getMessage ( ) ; }"
Object tnOpSet = adHocChatRoom. getParentProvider ( ). getOperationSet ( OperationSetTyping. class ) ; if ( tnOpSet!= null ) return true ; else return false ; }
"if ( deathDate == null ) { try { deathDate = findDeathDate ( ) ; } catch ( SocketException e ) { LOGGER. error ( ""Inspecting the network failed: "" + e. getMessage ( ), e ) ; } } return deathDate ; }"
try { return value. getBytes ( encoding ) ; } catch ( UnsupportedEncodingException e ) { throw new IllegalArgumentException ( e ) ; } }
"Director director = new Director ( 10 ) ; TestCase. assertEquals ( 10, director. getPriority ( ) ) ; TestCase. assertEquals ( 10, director. getStartPriority ( ) ) ; TestCase. assertEquals ( 10, director. getEndPriority ( ) ) ; }"
long folderId = - 1 ; try { if ( dataRepositoryId!= 0 ) { folderId = dataRepositoryId ; } } catch ( Exception e ) { LOG. error ( e ) ; } return folderId ; }
if ( jolokiaUrl!= null ) { container. setJolokiaUrl ( jolokiaUrl ) ; } }
"double [ ] bounds = wmtSource. getTilesForZoom ( zoomLevel ) ; ReferencedEnvelope tabBounds = new ReferencedEnvelope ( ) ; for ( int x = 0 ; x < bounds. length ; x ++ ) { for ( int y = 0 ; y < bounds [ 0 ]. length ; y ++ ) { if ( bounds [ x ] [ y ]!= null ) { tabBounds. add ( new ReferencedEnvelope ( x, y, bounds [ x ] [ y ] ) ) ; } } } return tabBounds ; }"
int ch1 = data [ offset ++ ] & 0xff ; int ch2 = data [ offset ++ ] & 0xff ; return ( ch1 << 24 ) + ( ch2 << 16 ) + ( ch3 << 8 ) + ( ch4 << 0 ) ; }
"StringBuilder buf = new StringBuilder ( ) ; if ( objects!= null ) { for ( int i = 0 ; i < objects. length ; i ++ ) { buf. append ( toString ( objects [ i ] ) ) ; if ( i < objects. length - 1 ) { buf. append ( "","" ) ; } } } return buf. toString ( ) ; }"
int n = matrix. length ; int [ ] [ ] result = new int [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( matrix [ i ] [ j ] < matrix [ j ] [ i ] ) { result [ i ] [ j ] = matrix [ i ] [ j ] ; } else { result [ i ] [ j ] = 0 ; } } } return result ; }
setModified ( modifiedObject ) ; addRule ( modifiedObject ) ; }
"if ( value == null ) { configuration. remove ( key ) ; } else { configuration. put ( key, value ) ; } }"
Date result = null ; for ( Date date : dates ) { long timestamp = date. getTime ( ) ; if ( timestamp < 0 ) { timestamp = 0 ; } result = new Date ( timestamp ) ; } return result ; }
long oldLength = Long. MAX_VALUE ; if ( length!= oldLength ) { selectValueFromMoveDropdown ( ( int ) ( length - oldLength ) ) ; } }
int cnt = 0 ; for ( int i = 0 ; i < script. length ( ) ; i ++ ) { for ( int j = 0 ; j < script. length ( ) ; j ++ ) { if ( script. charAt ( i ) == '|n' && script. charAt ( j ) == '|r' ) { cnt ++ ; } } } }
double max = 0.0 ; for ( double element : array ) { if ( element > max ) { max = element ; } } return max ; }
"LOG. info ( ""Getting cluster leaves."" ) ; try { clusterLeaves. awaitTermination ( timeout, unit ) ; } catch ( InterruptedException e ) { throw new RuntimeException ( ""Interrupted"", e ) ; } return clusterLeaves. isEmpty ( ) ; }"
int currentPoint = - 1 ; for ( int i = 0 ; i < allPoints. numInstances ( ) ; i ++ ) { double currentPoint = allPoints. instance ( i ). value ( ) ; if ( currentPoint < pointList [ currentPoint ] ) { currentPoint = pointList [ currentPoint ] ; } } return currentPoint ; }
String valor = System. getProperty ( nombre_propiedad ) ; saveOffscreenView ( valor ) ; return valor ; }
try { if ( client!= null ) { client. flush ( ) ; } } catch ( Exception e ) { e. printStackTrace ( ) ; } }
"try { final X509EncodedKeySpec keySpec = new X509EncodedKeySpec ( key ) ; cancelDivest ( keySpec, out ) ; } catch ( final Exception e ) { throw new RuntimeException ( ""Failed to cancel the divisor"", e ) ; } }"
"try { return ioOperations. hashCode ( medicalType ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return false ; } }"
"Method method = mMethodSet. get ( id ) ; if ( method == null ) { throw new IllegalArgumentException ( String. format ( ""Method %d does not exist"", id ) ) ; } }"
"if ( resultSegment == null ) { throw new NullPointerException ( ""resultSegment must not be null"" ) ; } resultSegment. setParentSegment ( parentSegment ) ; isSegmentActive = true ; }"
float message = ( float ) ( Math. cos ( theta ) * Math. PI / 180 ) ; if ( message > 0 ) { message = 0 ; } return message ; }
"String [ ] tabSuffixes = getVal ( ""TAB_SUFFIXES"" ) ; try { return Integer. parseInt ( tabSuffixes [ 0 ] ) ; } catch ( NumberFormatException e ) { return - 1 ; } }"
double w = in ; while ( w > CapChartFetcher. GRID_SIZE ) { w /= 2 ; } return w ; }
"if ( nextSibling!= null ) { return context. getPackageManager ( ). resolveActivity ( nextSibling, PackageManager. MATCH_DEFAULT_ONLY ) ; } else { return context. getPackageManager ( ). resolveActivity ( nextSibling, PackageManager. MATCH_DEFAULT_ONLY ) ; } }"
"clean = clean. replaceAll ( ""<"", ""&lt;"" ) ; clean = clean. replaceAll ( "">"", ""&gt;"" ) ; return clean ; }"
ThresholdEvent event = new ThresholdEvent ( new MouseEvent ( ) ) ; assertTrue ( event instanceof Serializable ) ; }
DataInputStream var1 = new DataInputStream ( new BufferedInputStream ( new GZIPInputStream ( par0InputStream ) ) ) ; NBTTagCompound var2 ; try { var2 = ( NBTTagCompound ) var1. read ( ) ; } finally { var1. close ( ) ; } return var2 ; }
"for ( int i = 0 ; i < a. length ; i ++ ) { StdDraw. setXscale ( i, a [ i ] / 2 ) ; StdDraw. setPenRadius ( 2.0 / a [ i ] ) ; for ( int j = i + 1 ; j < a. length ; j ++ ) { StdDraw. line ( i, a [ j ] / 2, i, a [ j ] / 2 ) ; } } }"
"float sampleRate = 16000 ; int sampleSizeInBits = 8 ; int channels = 2 ; boolean signed = true ; boolean bigEndian = true ; AudioFormat format = new AudioFormat ( sampleRate, sampleSizeInBits, channels, signed, bigEndian ) ; return format ; }"
if ( attributeList == null ) { return true ; } else { return attributeList ; } }
"if ( child. getType ( ). equals ( String. class ) ) { String format = child. getText ( ) ; if ( format!= null ) { formats. put ( format, child. getData ( ) ) ; } } else { formats. put ( child. getText ( ), child. getData ( ) ) ; } }"
"if ( resourceList == null ) throw new IllegalArgumentException ( ""resourceList is null"" ) ; if ( _resourceList == null ) { resourceList = new ResourceList ( ) ; } _resourceList = resourceList ; }"
instance = sessionManager ; if ( instance == null ) { instance = new ServerSessionManager ( ) ; } }
"String s = """" ; if ( n instanceof DecimalFormat ) { DecimalFormat format = ( DecimalFormat ) DecimalFormat. getInstance ( Locale. US ) ; format. setMaximumFractionDigits ( length ) ; s = format. format ( n ) ; } while ( s. length ( ) < length ) { s = ""0"" + s ; } return s ; }"
"Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( date ) ; cal. set ( Calendar. MONTH, cal. get ( Calendar. MONTH ) ) ; cal. set ( Calendar. WEEK_OF_YEAR, 1 ) ; return getCanonicalName ( cal ) ; }"
"String [ ] wordsToReturn = { newPw, confirmPw } ; StringBuilder sb = new StringBuilder ( ) ; for ( String word : wordsToReturn ) { sb. append ( word ) ; } sb. setLength ( sb. length ( ) - 1 ) ; return sb. toString ( ) ; }"
ClassLoader cl = VMStackWalker. getCallingClassLoader ( ) ; return cl!= null? cl. getPackagesForClassLoader ( ) : VMClassLoader. getPackagesForClassLoader ( ClassLoader. getSystemClassLoader ( ) ) ; }
try { return info. getProperty ( propertyName ) ; } catch ( final IntrospectionException e ) { throw new RuntimeException ( e ) ; } }
Key pixelKey = null ; for ( Key key : keys ) { if ( cls. equals ( key ) ) { pixelKey = key ; break ; } } return pixelKey ; }
final View child = decorView. getChildAt ( 0 ) ; return child == null? RecyclerView. NO_POSITION : recyclerView. getChildAt ( child. getChildCount ( ) - 1 ). getIndex ( ) ; }
"LocalDate cursor = LocalDate. of ( year, 1, 1, 0, 0 ) ; cursor. setYear ( year ) ; return cursor ; }"
if ( string == null ) { string = getDummyLogger ( ) ; } return string ; }
"String dat = convertStarToBinary ( tsvFileName, datFileName ) ; requiredAndRequiresNew ( tsvFileName, dat, radius ) ; }"
StrutsModel model = modelFor ( context ) ; if ( model == null ) { model = combinedModelFor ( context ) ; } return model ; }
CheckResult res = null ; SAXParser saxParser = new SAXParser ( ) ; res = saxParser. parse ( aResponse ) ; return res ; }
"return new Predicate < RequestHandler > ( ) { @ Override public boolean apply ( RequestHandler input ) { return! annotation. isInstance ( input ) ; } @ Override public String toString ( ) { return ""handler."" + annotation. getName ( ) ; } } ; }"
SecurityManager sm = System. getSecurityManager ( ) ; if ( sm!= null ) { sm. checkPermission ( Permissions. MIDP_CREATE ) ; createButtons. setEnabled ( true ) ; } else { createButtons. setEnabled ( false ) ; } }
if ( integrate == null ) { return false ; } else { return integrate ; } }
Set < String > attendees = new HashSet < String > ( ) ; if ( minutesAsAService!= null ) { attendees. addAll ( minutesAsAService. getPossibleAttendees ( ) ) ; } return attendees ; }
"int bytesRead = _file. read ( buffer, seekPos, requestedLen ) ; if ( bytesRead!= requestedLen ) { throw new IOException ( ""Cannot read "" + requestedLen + "" bytes, seekPos="" + seekPos + "" length="" + bytesRead + "" buffer="" + buffer. length ) ; } return bytesRead ; }"
Long val = serverTrusted. get ( key ) ; return val!= null? val : null ; }
try { ip. stopThread ( ic ) ; } catch ( RemoteException e ) { e. printStackTrace ( ) ; } }
if ( val < minAlpha ) { minAlpha = val ; } else if ( val > maxAlpha ) { maxAlpha = val ; } }
"try { Method proxyMethod = clazz. getMethod ( ""getProxyClass"", new Class [ ] { } ) ; Proxy. newProxyInstance ( clazz. getClassLoader ( ), null, proxyMethod ) ; } catch ( NoSuchMethodException e ) { throw new RuntimeException ( e ) ; } }"
accumulator = new BitSet ( 100 ) ; accumulateResults ( accumulator ) ; accumulator. set ( ( int ) ( Math. random ( ) * 100 ) ) ; accumulator. set ( ( int ) ( Math. random ( ) * 100 ) ) ; accumulator. set ( ( int ) ( Math. random ( ) * 100 ) ) ; }
dataInput. writeInt ( m_populations. length ) ; for ( int i = 0 ; i < m_populations. length ; i ++ ) { dataInput. writeUTF ( m_populations [ i ]. getId ( ) ) ; } }
"String user = db. getUser ( ) ; String password = db. getPassword ( ) ; if ( isPasswordFile ( db ) ) { return Pair. of ( user, password ) ; } return Pair. of ( user, password ) ; }"
"String drawable = resPath ; if ( drawable. contains ( "".png"" ) ) { drawable = drawable. substring ( drawable. lastIndexOf ( '.' ) + 1 ) ; } if ( drawable. contains ( "".gif"" ) ) { drawable = drawable. substring ( 0, drawable. length ( ) - 4 ) ; } return drawable ; }"
"if ( conditionFactors. contains ( factor ) ) throw new WebDAVException ( IResponse. SC_BAD_REQUEST, Policy. bind ( ""error.parseDuplicateEntry"" ) ) ; conditionFactors. addElement ( factor ) ; }"
"driver. getLoopStack ( ). push ( loopPointer ) ; assertEquals ( 1, driver. getLoopStack ( ). size ( ) ) ; }"
"logger. log ( Level. SEVERE, ""Error while clearing users."" ) ; try { Iterator < User > it = user. iterator ( ) ; while ( it. hasNext ( ) ) { it. remove ( ) ; } } catch ( Exception e ) { logger. log ( Level. SEVERE, ""Error while clearing users."", e ) ; } return 0 ; }"
String [ ] all = new String [ userLibraries. size ( ) ] ; for ( int i = 0 ; i < userLibraries. size ( ) ; i ++ ) { all [ i ] = ( String ) userLibraries. get ( i ) ; } return all ; }
assert! inState. get ( ) ; return inState. get ( ) ; }
if ( argArray!= null ) { return argArray ; } return stringArgs ; }
PDRectangle retval ; COSArray array = ( COSArray ) dictionary. getDictionaryObject ( COSName. B ) ; if ( array!= null ) { retval = new PDRectangle ( array ) ; } else { retval = getCOSNumber ( COSName. B ) ; } return retval ; }
int backoff = ( int ) ( Math. random ( ) * 2 ) + 1 ; return generateKey ( backoff ) ; }
"long keySize = key!= null? key. getClass ( ). hashCode ( ) : 0 ; long valueSize = value!= null? value. getClass ( ). hashCode ( ) : 0 ; return deserializeThrift ( keySize, valueSize ) ; }"
"OutputAnalyzer output = JcmdBase. jcmd ( VM_ARGS, new String [ ] { ""snap"" } ) ; output. println ( """" ) ; output. println ( """" ) ; output. println ( getHelp ( ) ) ; output. println ( """" ) ; }"
"Matcher matcher ; matcher = MERGE_INFO_PATTERN. matcher ( line ) ; if ( matcher. matches ( ) ) { m_instances = new HashMap < > ( ) ; } else { m_instances = new HashMap < > ( ) ; } String [ ] tokens = matcher. group ( 1 ). split ( "","" ) ; for ( int i = 0 ; i < tokens. length ; i ++ ) { m_instances. put ( tokens [ i ], new Integer ( tokens [ i ] ) ) ; } }"
"if ( dataSet!= null ) { addDataSetListener ( listener, fireMode ) ; if ( fireMode == FireMode. ON_CHANGE ) { fireDataSetChange ( ) ; } } }"
"final List < IssueType > issueTypes = new ArrayList < IssueType > ( ) ; for ( IssueType type : IssueType. values ( ) ) { issueTypes. add ( type ) ; } assertEquals ( 0, issueTypes. size ( ) ) ; for ( IssueType type : IssueType. values ( ) ) { assertEquals ( type. hashCode ( ), issueTypes. get ( type ). hashCode ( ) ) ; } return issueTypes ; }"
"if ( VM. VerifyAssertions ) VM. _assert ( s. length == userTransactionLength ) ; byte [ ] buf = new byte [ userTransactionLength + tag ] ; System. arraycopy ( userTransaction, 0, buf, 0, userTransactionLength ) ; userTransaction = buf ; }"
"Set < LegislatorTerms > legislatorTerms = temporalCoordinateSystem1. getLegislatorTermsByMongoId ( ) ; assertFalse ( legislatorTerms. isEmpty ( ) ) ; assertEquals ( temporalCoordinateSystem2. getLegislatorTermsByMongoId ( ). hashCode ( ), legislatorTerms. size ( ) ) ; }"
Grammar grammar = null ; List < String > cacheNames = new ArrayList < String > ( ) ; for ( File f : dir. listFiles ( ) ) { cacheNames. add ( f. getName ( ) ) ; } if ( cacheNames. size ( ) > 0 ) { grammar = cacheNames. get ( 0 ) ; } }
"final File home = new File ( System. getProperty ( ""user.home"" ) ) ; final File songUri = new File ( home, ""song-maven-pom.xml"" ) ; SharedPreferences. Editor editor = sharedPreferences. edit ( ) ; editor. putString ( MavenCorePreference. POM_URI, songUri. getAbsolutePath ( ) ) ; editor. commit ( ) ; return songUri ; }"
"try { return ioOperations. testFilesToLibraryWaitFailTimeout ( ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return null ; } }"
"LOGGER. info ( ""awaitAckAsync() - start"" ) ; process. awaitAck ( ) ; }"
short cellnum = ( short ) ( firstcell - 1 ) ; return cellnum ; }
lock. lock ( ) ; try { corruptByteInFile ( result ) ; } finally { lock. unlock ( ) ; } }
"for ( int i = 0 ; i < releasedIdVector. size ( ) ; i ++ ) { releasedIdVector. set ( i, releasedIdVector. get ( i ) + tempID ) ; } }"
"Argument argument = ( Argument ) args. get ( name ) ; if ( argument == null ) throw new IllegalArgumentException ( ""Unknown argument: "" + name ) ; return argument ; }"
Matrix m = getValue ( ) ; for ( int i = 0 ; i < rects. size ( ) ; i ++ ) m. putShort ( rects. get ( i ). left ) ; m. putShort ( rects. get ( i ). right ) ; m. putShort ( rects. get ( i ). top ) ; }
"DatabaseRelationDefinition def = find ( id ) ; if ( def!= null && def. hasSchema ( ) ) { String schemaName = def. getSchema ( ). getName ( ) ; def = deleteDirectoryRecursively ( id, schemaName ) ; } return def ; }"
line = ch ; column = 0 ; }
"JScrollPane jScrollPane = new JScrollPane ( component, bounds, backgroundColor, noBorder, visible ) ; jScrollPane. setAutoscrolls ( true ) ; return jScrollPane ; }"
"long mask = ( 1L << 63 ) - 1L ; return new CRCPolynomial ( l, mask ) ; }"
byte [ ] valByte = new byte [ 4 ] ; valByte [ 0 ] = ( byte ) ( ( val & Tomcat_MAJOR_MASK ) >> Tomcat_MAJOR_SHIFT ) ; valByte [ 1 ] = ( byte ) ( ( val & Tomcat_MINOR_MASK ) >> Tomcat_MINOR_SHIFT ) ; return valByte ; }
resetX ( ) ; if ( plot. isTimeLabelEnabled ) { rescalePlotOnTimeAxis ( ) ; } plot. getPlotAbstraction ( ). updateResetButtons ( ) ; plot. refreshDisplay ( ) ; }
"_input. next ( ""create"" ) ; String name = _input. peek ( ) ; BloodGroup group = _input. getBloodGroup ( name ) ; assertEquals ( name, group. getName ( ) ) ; assertEquals ( 1, group. getBloodGroup ( ). ordinal ( ) ) ; }"
if ( ctrCand. getId ( ) == null ) { return null ; } OdfCtrCand resultCand = ctrCand. getResultList ( ) ; if ( resultCand instanceof OdfCtrCand ) { return ( OdfCtrCand ) resultCand ; } return null ; }
repository. findById ( 1L ) ; verify ( repository ). findById ( eq ( 1L ) ) ; }
int nextKey ; do { nextKey = ( nextKey + 1 ) % dictionaries. length ; } while ( dictionaries [ nextKey ]!= null ) ; return nextKey ; }
"if ( null == isbnFunction ) { isbnFunction = new HashMap < > ( ) ; } isbnFunction. put ( key, value ) ; }"
"map = Text. toMapNativeEncoding ( ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"" ) ; assertEquals ( ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"", map. charAt ( 0 ) ) ; assertEquals ( ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"", map. charAt ( 1 ) ) ; assertEquals ( ""ABCDEFGHIJKLMNOPQRSTUVWXYZ"", map. charAt ( 2 ) ) ; }"
RpcClient rpcClient = new XmlRpcClient ( config ) ; try { config. setGatewayInfo ( rpcClient. getGatewayInfo ( id ) ) ; } finally { rpcClient. dispose ( ) ; } }
"byte [ ] newArr = new byte [ arr. length + amount ] ; System. arraycopy ( arr, 0, newArr, 0, arr. length ) ; return newArr ; }"
synchronized ( totalScore ) { totalScore = null ; while ( totalScore == null ) { try { Thread. sleep ( 100 ) ; } catch ( InterruptedException ie ) { } } } }
HttpGet httpGet = new HttpGet ( targetUrl ) ; return doRequest ( httpGet ) ; }
bridge. removePolicy ( rec. getRecord ( ) ) ; if ( signalServer ) { bridge. reload ( datastore ) ; } }
RemoteInvoker bean = ( RemoteInvoker ) out. readObject ( ) ; if ( bean. getClass ( ). isArray ( ) ) { return bean. fromBytes ( out ) ; } else { bean. fromBytes ( out ) ; } }
String s = in. readUTF ( ) ; auctionsNumber = new String ( s ) ; }
"Map < String, String > returnMap = new HashMap < String, String > ( ) ; returnMap. putAll ( mDisconnectP ) ; return returnMap ; }"
if ( dp. getType ( ) == HmDataType. INT && ( ( Integer ) value ). intValue ( ) == dp. getValue ( ). length ( ) ) { return new Integer ( ( Integer ) value ) ; } else if ( dp. getType ( ) == HmDataType. LONG && ( ( Long ) value ). longValue ( ) == dp. getValue ( ). longValue ( ) ) { return new Long ( value ) ; } return null ; }
if ( keyAt == null ) { keyAt = new com. amazonaws. internal. SdkInternalList < InstanceStatusEvent > ( ) ; } return keyAt ; }
"ListData newData = new ListData ( ) ; newData. type = TYPE_TEXT ; newData. text = """" ; newData. editable = true ; return newData ; }"
"Double ret = varMap. get ( name ) ; if ( ret == null ) { ret = testAddQuotesIfNotExist_11 ( name, value ) ; } return ret ; }"
"Session session = HibernateUtil. getSessionFactory ( ). getCurrentSession ( ) ; Criteria flowLogsCriteria = session. createQuery ( ""from FlowLogs"" ) ; flowLogsCriteria. add ( Restrictions. eq ( ""dateCreated"", new Date ( ) ) ) ; return flowLogsCriteria ; }"
"Matcher paramMatcher = CANCEL_PARAM_PATTERN. matcher ( queryString ) ; if ( paramMatcher. find ( ) ) { builder. append ( paramName ) ; builder. append ( ""="" ) ; builder. append ( paramMatcher. group ( 1 ) ) ; return false ; } return true ; }"
int removeCount = g. getTotalRemoveCount ( ) ; int addCount = g. getTotalAddCount ( ) ; g. setRemoveCount ( removeCount + addCount ) ; if ( addCount!= 0 ) { g. setAddCount ( addCount + 1 ) ; } }
try { return adminDAO. findNextNonDeletedIndex ( ) ; } catch ( OmnigeneException e ) { throw new WebServiceException ( e ) ; } }
"try { Integer serviceValue = Integer. parseInt ( ( String ) event. getComponent ( ). getAttributes ( ). get ( ""serviceValue"" ) ) ; } catch ( NumberFormatException e ) { e. printStackTrace ( ) ; } }"
int i = - 1 ; switch ( c ) { case 'A' : i = 0 ; break ; case 'B' : i = 1 ; break ; case 'C' : i = 2 ; break ; case 'D' : i = 3 ; break ; case 'E' : i = 4 ; break ; case 'F' : i = 5 ; break ; case 'G' : i = 6 ; break ; case 'P' : i = 7 ; break ; } return i ; }
"Map < String, String > ret = new HashMap < String, String > ( ) ; ret. put ( ""name"", name ) ; ret. put ( ""onlineResource"", onlineResource ) ; return ret ; }"
"final boolean portAdded = false ; for ( int port2 : ports ) { if ( addNamespaceDeclaration ( port2, port ) ) { portAdded = true ; break ; } } return portAdded ; }"
"Expression newExpr = ExpressionParser. parseConditionalExpression ( condExpr ) ; Map < String, Object > data = new HashMap < String, Object > ( ) ; data. put ( ""key"", newExpr ) ; return newExpr ; }"
"Vector v1 = new Vector ( ) ; v1. add ( 1.0, 0.5f ) ; v1. add ( 2.0, 2.0f ) ; v1. add ( 3.0, 3.0f ) ; Vector v2 = ( Vector ) ( v1. clone ( ) ) ; v2. add ( 2.0, 2.0f ) ; v2. add ( 3.0, 2.0f ) ; assertEquals ( v1, v2 ) ; }"
if ( node == startNode ) { return true ; } else if ( node == endNode ) { return true ; } return false ; }
StringBuffer b = new StringBuffer ( s. length * 8 ) ; for ( int i = 0 ; i < s. length ; i ++ ) { b. append ( quote ) ; b. append ( s [ i ] ) ; b. append ( quote ) ; b. append ( separator ) ; } b. setLength ( b. length ( ) - separator. length ( ) ) ; return b. toString ( ) ; }
"if ( parent == null ) { return null ; } else { return new XmlPathElementImpl ( parent, name ) ; } }"
"Map < String, String > env = new HashMap < > ( ) ; if ( results!= null ) { for ( Result result : results ) { env. put ( result. getVariable ( ), result. getValue ( ) ) ; } } env. putAll ( results ) ; }"
"if ( mainSideJoinable. getKeyColumns ( ). isEmpty ( ) || inverseSidePersister. getKeyColumns ( ). isEmpty ( ) ) { return false ; } return loadAnchorPane ( mainSideJoinable. getMainSide ( ), inverseSidePersister ) ; }"
Iterator < Bundle > iter = bundles. iterator ( ) ; while ( iter. hasNext ( ) ) { Bundle bundle = iter. next ( ) ; isLockWindows ( bundle ) ; } }
int [ ] empty = new int [ textureIds. size ( ) ] ; for ( int i = 0 ; i < textureIds. size ( ) ; i ++ ) { empty [ i ] = textureIds. get ( i ). getID ( ) ; } return empty ; }
"Vector v = new Vector ( ) ; addComplexExpression ( v, ""a"" ) ; addComplexExpression ( v, ""b"" ) ; addComplexExpression ( v, ""c"" ) ; addComplexExpression ( v, ""d"" ) ; addComplexExpression ( v, ""e"" ) ; return v. elements ( ) ; }"
long total = parseArchives ( ) ; if ( total < 0 ) { total = 0 ; } return total ; }
int first = 0 ; for ( Iterator i = converterList. iterator ( ) ; i. hasNext ( ) ; ) { Character. Attribute attr = ( Character. Attribute ) i. next ( ) ; if ( attributes. contains ( attr. toString ( ) ) ) { first = attr. getIndex ( ) ; break ; } } return first ; }
final Set < BeanProperty > properties = map. get ( clazz ) ; if ( properties!= null &&! properties. isEmpty ( ) ) { return properties. stream ( ). map ( p -> BeanProperty. getHexEncodedSignature ( p. getType ( ) ) ). collect ( Collectors. toList ( ) ) ; } return Collections. emptySet ( ) ; }
int session = ( int ) ( coordinate * ( 1.0 - 0.5 ) ) ; if ( session > Integer. MAX_VALUE ) { session = ( int ) ( ( coordinate - session ) * ( 1.0 - 0.5 ) ) ; } return session ; }
try { return new DateValue ( fs. close ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } catch ( URISyntaxException e ) { throw new RuntimeException ( e ) ; } }
Parcelable a = ( Parcelable ) mContainer. get ( ) ; if ( a!= null ) { a. writeToParcel ( mParcel ) ; } }
if ( tile. getX ( ) == 0 && tile. getY ( ) == 0 ) return true ; if ( tile. getX ( ) == player. getX ( ) && tile. getY ( ) == player. getY ( ) ) return true ; if ( tile. getY ( ) == player. getY ( ) && tile. getX ( ) == player. getY ( ) ) return true ; return false ; }
"if ( canReturnCollationKeys ) { return new ComparisonKey ( StandardNames. XS_STRING, collator. getCollationKey ( a. getStringValue ( ) ) ) ; } else { return new ComparisonKey ( StandardNames. XS_STRING, a. getStringValue ( ) ) ; } }"
Vector v = new Vector ( ) ; return v ; }
SiteModel siteModel = new SiteModel ( ) ; siteModel. isReadable = true ; return siteModel ; }
ProjectExplorer pe = new ProjectExplorer ( ) ; pe. open ( ) ; pe. getProject ( projectName ). deleteDeploymentInfo ( deploymentInfo ) ; }
"FormActions dropdown = new FormActions ( driver ) ; dropdown. selectDropdownItemByID ( ""id_grade"", grade ) ; }"
"final double x1 = 0.0001 ; final double y1 = 0.0001 ; final double x2 = 0.0001 ; final double y2 = 0.0001 ; Map < String, Object > map = new HashMap < > ( ) ; map. put ( ""x1"", x1 ) ; map. put ( ""y1"", y2 ) ; map. put ( ""x2"", x2 ) ; map. put ( ""y2"", y2 ) ; assertEquals ( x1, map. get ( ""x1"" ) ) ; assertEquals ( y1, map. get ( ""y2"" ) ) ; }"
"Writer out = new FileWriter ( aBackupFile ) ; try { crossProduct ( aBackupOPMLDocument, out ) ; } finally { out. close ( ) ; } }"
File f = dir ; if ( f!= null ) { for ( int i = 0 ; i < filename. length ( ) ; i ++ ) { if ( filename. toLowerCase ( ). equals ( f. getName ( ). toLowerCase ( ) ) ) { return f ; } } } return null ; }
if (! ring. isHole ( ) ) return ; if ( CGAlgorithms. isCCW ( ring. getCoordinates ( ) ) ) return ; if ( CGAlgorithms. isCCW ( ring. getCoordinates ( ) ) ) return ; if ( CGAlgorithms. isCCW ( ring. getCoordinates ( ) ) ) return ; if (! ring. isHole ( ) ) return ; computeOrientation ( ) ; }
"DijkstraNodeData data = nodeData. get ( n ) ; if ( data == null ) { data = new DijkstraNodeData ( n ) ; nodeData. put ( n, data ) ; } return data ; }"
if ( type == null ) return true ; switch ( type ) { case CSS : return parseCSS ( ) ; case CSSStyle : return parseCSS ( ) ; case BLOCK : return parseBlock ( ) ; case BLOCKID : return parseBlocks ( ) ; default : return false ; } }
"Map < String, String > env = new HashMap < String, String > ( ) ; for ( Map. Entry < String, ConfNode > e : src. getAllNodes ( ). entrySet ( ) ) { if ( e. getKey ( ). startsWith ( prefix ) ) { env. put ( e. getKey ( ), e. getValue ( ) ) ; } } }"
if (! arrayClass. isArray ( ) ) return null ; return arrayClass. getComponentType ( ) ; }
List < Element > assets = new ArrayList < Element > ( ) ; for ( int i = 0 ; i < grid. length ; i ++ ) { assets. add ( ( Element ) grid [ i ] ) ; } return assets ; }
previous = null ; empty = true ; }
"try { return ioOperations. getSubscription ( subjectName ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return null ; } }"
"List < T > ret = new ArrayList < > ( ) ; for ( Node n : nodes ) { if ( n. getClass ( ) == cls ) ret. add ( ( T ) n ) ; } for ( Node n : nodes ) { verifyPermissions ( n, cls ) ; ret. add ( ( T ) n ) ; } return ret ; }"
"synchronized ( readerMap ) { Iterator < Entry < String, WorkItemId >> it = readerMap. entrySet ( ). iterator ( ) ; while ( it. hasNext ( ) ) { Entry < String, WorkItemId > entry = it. next ( ) ; if ( entry. getKey ( ). equals ( workItemId ) ) { it. remove ( ) ; } } } }"
for ( int i = 1 ; i < 32 ; i ++ ) { mask ^= ( 1 << ( i & 31 ) ) ; } return mask ; }
"Rating opponent ; String md5 = player. getMd5 ( ) ; if ( md5. equals ( """" ) ) { opponent = player ; } else { if ( md5. equals ( ""Gold"" ) ) { opponent = player ; } else { opponent = new Rating ( player, md5 ) ; } } return opponent ; }"
if ( size >= max ) { return ; } writeListNullElement ( ) ; size ++ ; }
int total = 0 ; byte [ ] b = integer. getBytes ( ) ; ByteBuffer buf = ByteBuffer. allocate ( b. length + 4 ) ; buf. put ( b [ 0 ] ) ; buf. put ( b [ 1 ] ) ; buf. put ( b [ 2 ] ) ; buf. put ( b [ 3 ] ) ; buf. put ( b [ 4 ] ) ; buf. put ( b [ 5 ] ) ; buf. put ( b [ 6 ] ) ; buf. put ( b [ 7 ] ) ; buf. put ( 0 ) ; return buf ; }
if ( e. getValue ( ) <= 0 ) return true ; return false ; }
"Company company = impl. getCompanyById ( 8 ) ; assertEquals ( 255, company. getPixelRgb ( ) ) ; }"
"string = ( String ) invokeSwingUtilities2StaticMethod ( ""clipToSpace"", new Class [ ] { JComponent. class, FontMetrics. class, String. class, int. class }, new Object [ ] { c, fm, string, availTextWidth } ) ; return string ; }"
if ( keystrokes. size ( ) == 1 ) { keystrokes. remove ( 0 ) ; keystrokes. add ( 0 ) ; } while ( keystrokes. size ( ) > 1 ) { keystrokes. remove ( 0 ) ; keystrokes. add ( 0 ) ; } }
boolean result = false ; if (! frameworkPackageList. isEmpty ( ) ) { for ( String packageName : frameworkPackageList ) { if ( packageName. startsWith ( currentClass ) ) { result = true ; break ; } } } return result ; }
final int sourcePeriod = ( int ) ( sourceDate / 1000 ) ; final int destinationPeriod = ( int ) ( destinationDate / 1000 ) ; return sourcePeriod <= destinationPeriod ; }
try { Double. parseDouble ( string ) ; return true ; } catch ( NumberFormatException e ) { return false ; } }
"T validType = validateConfiguredType ( ) ; if (! validType. equals ( STR_NULL ) ) { throw new WicketRuntimeException ( ""Valid types are: "" + validType ) ; } return validType ; }"
"while ( loader!= null ) { ClassLoader previousLoader = loaders. putIfAbsent ( loader. getFileType ( ), loader ) ; if ( previousLoader!= null ) { previousLoader. deactivate ( ) ; } loader = previousLoader ; } }"
"String uuid = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
fPos = p ; fLast = fStart ; fEnd = fEnd ; }
Resources resources = context. getResources ( ) ; DisplayMetrics metrics = resources. getDisplayMetrics ( ) ; float px = dp * ( metrics. densityDpi / DisplayMetrics. DENSITY_DEFAULT ) ; return px ; }
Row row = new Row ( ) ; row. setRowIndex ( rowIndex + 1 ) ; rows. add ( row ) ; return row ; }
"PdfPageEvent event ; for ( Iterator i = events. iterator ( ) ; i. hasNext ( ) ; ) { event = ( PdfPageEvent ) i. next ( ) ; event. getKeyByName ( writer, document ) ; } }"
List < Company > results = new ArrayList < > ( ) ; for ( Company c : database. getCompanies ( ). values ( ) ) { if (! results. contains ( c ) ) { results. add ( c ) ; } } Collections. sort ( results ) ; return results ; }
int target = - 1 ; for ( int i = 0 ; i < length ; i ++ ) { if ( buffer [ i ]!= null &&! ( buffer [ i ]. isMatched ( ) ) ) { target = buffer [ i ]. findBestTarget ( ) ; } } return target ; }
"RefReplicated refReplicated = null ; if ( ref!= null && ( ref. startsWith ( ""gerrit:"" ) || ref. startsWith ( ""gerrit:"" ) ) ) { refReplicated = gerritReplicatedMap. get ( gerritServer ). get ( ref ) ; } if ( refReplicated!= null && ( slaveHost!= null && slaveHost. startsWith ( ""gerrit:"" ) ) ) { refReplicated = gerritReplicatedMap. get ( slaveHost ) ; } return refReplicated ; }"
"InfrastructureCommand infrastructureCommand = new InfrastructureCommand ( ) ; Object [ ] args = new Object [ 2 ] ; args [ 0 ] = userSession ; args [ 1 ] = user ; return infrastructureCommand. execute ( userSession, ResourceLocator. GET_HEARTBEAT_HELPER_FACTORY, args ) ; }"
"final Repo repo = GithubProfileValidationTest. repo ( Joiner. on ( '|n' ). join ( ""merge:"", "" script:"", ""  - pwd"" ) ) ; new GithubProfile ( repo ). read ( ) ; }"
"int exitCode = execute. execute ( new String [ ] { ""--serverid=1234"" } ) ; final String output = errorStringWriter. getBuffer ( ). toString ( ). trim ( ) ; assertEquals ( ""Missing required argument --statementId"", output ) ; assertEquals ( 1, exitCode ) ; }"
"if ( color == Color. WHITE ) { color = Color. BLACK ; } else if ( color == Color. GRAY ) { color = Color. WHITE ; } else if ( color == Color. B ) { color = Color. B ; } else { color = Color. NONE ; } matches ( r, g, b, a ) ; }"
String name = String. valueOf ( pos ) ; return ( pos < 0 || pos >= lines. size ( ) )? 0 : lines. get ( name ) ; }
"if ( color. length ( ) > 3 ) { int i = Integer. parseInt ( color. substring ( 0, 3 ), 16 ) ; int j = Integer. parseInt ( color. substring ( 3, 5 ), 16 ) ; int k = Integer. parseInt ( color. substring ( 5, 7 ), 16 ) ; color = color. substring ( k ) ; } return color ; }"
"if ( url!= null ) { String scheme = getSchemeFromUrl ( url ) ; if ( scheme!= null ) { return new URI ( scheme + ""://"" + url ) ; } } return new URI ( null ) ; }"
if ( endPos == null ) { return 0 ; } else { return endPos ; } }
int count = 0 ; for ( int i = 0 ; i < Phones. length ; i ++ ) { if ( Phones [ i ]!= null && Phones [ i ]. usernameExists ( ) ) { count ++ ; } } return count ; }
synchronized ( LOCK ) { if ( sInstance == null ) { sInstance = new ExternalAuthUtils ( ) ; } return sInstance ; } }
"if ( value > 1 || value < - 1 ) { throw new IllegalArgumentException ( ""followColorScheme must be between 0 and 1"" ) ; } if ( value == followColorScheme. getLatitude ( ) ) { followColorScheme. setLatitude ( value ) ; } else { throw new IllegalArgumentException ( ""followColorScheme must be between 0 and 1"" ) ; } }"
"if ( named == null || name. equals ( """" ) ) { return - 1 ; } int prevAlarmTime = alarmTime + named. alarmTime ; if ( prevAlarmTime > alarmTime ) { alarmTime = prevAlarmTime ; } return alarmTime ; }"
"boolean cci = inValue == null || inValue. equals ( """" ) ; if ( inIsHeader ) { cci = inValue. equals ( ""0"" ) || inValue. equals ( ""1"" ) || inValue. equals ( ""0"" ) ; } else { cci = inValue. equals ( ""100%"" ) || inValue. equals ( ""%"" ) ; } return cci ; }"
if ( values == null ) values = new ArrayList < DatabaseRecord > ( ) ; DatabaseRecord record = new DesktopRecord ( ) ; record. setName ( columnName ) ; record. setValue ( value ) ; record. setChange ( true ) ; connection. deliver ( record ) ; }
if ( inUse ) { mConnectionTimer. cancel ( ) ; } else { mConnectionTimer. start ( ) ; } }
if ( finishRegistrationOfPersistenceContext == null ) { finishRegistrationOfPersistenceContext = new ArrayList < ExtendedEntityManager > ( ) ; } finishRegistrationOfPersistenceContext. add ( xpc ) ; }
int value = fLines [ subsetIndex ] ; if ( value >= 0 && value < 0xFFFF ) return ( char ) value ; return NOT_A_CHARACTER ; }
"String name = machine. getName ( ) ; if ( name == null ) return ; if (! name. equals ( ""localhost"" ) &&! name. equals ( ""127.0.0.1"" ) &&! name. equals ( ""127.0.1.1"" ) ) throw new IllegalArgumentException ( ""Not running"" ) ; parameters. put ( machine. getId ( ), name ) ; }"
"Set < String > result = new HashSet < String > ( ) ; String [ ] parts = s. split ( "","" ) ; for ( String part : parts ) { if ( part. length ( ) > 0 ) { result. add ( part. trim ( ) ) ; } } return result ; }"
"ContextAttribute attribute = new ContextAttribute ( attributeName ) ; pointMap. put ( attributeName, attribute ) ; return attribute ; }"
ClassLoader cl = Thread. currentThread ( ). getContextClassLoader ( ) ; Class regularClass = cl. loadClass ( className ) ; return regularClass ; }
ResourceDescriptor parent = reference. getParent ( ) ; while ( parent!= null ) { if ( parent instanceof PlatformDescriptor ) { return true ; } parent = parent. getParent ( ) ; } return false ; }
"Path root = destinationPath. toAbsolutePath ( ) ; Files. createDirectories ( root. resolve ( destinationPath. getFileName ( ) ), true, StandardOpenOption. CREATE, StandardOpenOption. WRITE ) ; }"
"Square s1 = square. getScale ( ) ; Square s2 = square. getScale ( ) ; Square [ ] path = new Square [ path. length ] ; for ( int i = 0 ; i < path. length ; i ++ ) { path [ i ] = s1. copy ( ) ; path [ i ] = s2 ; } assertEquals ( s1. length, path. length ) ; }"
if ( url == null || url. length ( ) == 0 ) { return null ; } return associationURLPrefix + url ; }
"try { return encodePart ( pathSegment, ""UTF-8"", dataSource ) ; } catch ( final UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }"
"IServiceRegistry serviceRegistry = ServiceRegistry. getRegistry ( ) ; return serviceRegistry. gcspyGatherData ( server, port, monitorPort ) ; }"
for ( final char invalidChar : INVALID_URL_CHARS ) { if ( url. contains ( invalidChar ) ) { return true ; } } return false ; }
"int result = 0 ; while ( true ) { result += Base64. encodeBytes ( sizeBytes, Base64. DEFAULT ) ; sizeBytes += size ; } return result ; }"
"if ( batch <= 0 ) { return ; } workQueue. put ( batch, new Runnable ( ) { @ Override public void run ( ) { processBatch ( batch ) ; } } ) ; }"
if ( cronInterval == null ) { cronInterval = new com. amazonaws. internal. ListWithAutoConstructFlag < FilteredLogEvent > ( ) ; cronInterval. setAutoConstruct ( true ) ; } return cronInterval ; }
try { return new ProfileApplicationDecorator ( profileApplicationFile ) ; } catch ( ProfileApplicationNotFoundException e ) { return null ; } }
ByteBuffer buf = ( ByteBuffer ) glyf. clone ( ) ; buf. flip ( ) ; return buf ; }
String role = ERROR_TO_ROLE_MAP. get ( errorCode ) ; if ( role == null ) { role = ERROR_TO_ROLE_MAP. get ( errorCode ) ; if ( role == null ) { role = ERROR_TO_ROLE_MAP. get ( errorCode ) ; } } return role ; }
"int [ ] size = new int [ components. size ( ) ] ; for ( int i = 0 ; i < components. size ( ) ; i ++ ) { Component comp = components. get ( i ) ; size [ i ] = comp. getPreferredSize ( ) ; } return new Dimension ( xTotal. length + size [ 0 ], yTotal. length + size [ 1 ] ) ; }"
assert patterns!= null ; final List < SearchPattern > elements = new ArrayList < > ( patterns. length ) ; for ( SearchPattern pattern : patterns ) { elements. addAll ( pattern. getElements ( ) ) ; } return new SearchPattern ( elements ) ; }
if ( occurred ) { return true ; } if ( localToString!= null ) { return localToString. streamToString ( ) ; } return false ; }
XPath xPath = new XPath ( xpathExpr ) ; NodeList list = new EmptyNodeList ( ) ; NodeList nodes = xPath. selectNodes ( dom ) ; for ( int i = 0 ; i < list. getLength ( ) ; i ++ ) { Node node = list. item ( i ) ; if ( node. getNodeType ( ) == Node. ELEMENT_NODE ) list. item ( i ) ; } return list ; }
"String os = System. getProperty ( ""os.name"" ) ; return ( os!= null && os. toLowerCase ( ). indexOf ( ""win"" ) >= 0 ) ; }"
"try { return remove ( fsd, ezKeyName ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }"
try { select ( ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } }
"int fl = 10 ; predToPair = new HashMap < Unit, ValueUnitPair > ( ) ; for ( ValueUnitPair v : predToPair. values ( ) ) { predToPair. put ( v, new ValueUnitPair ( v. getUnit ( ), null ) ) ; } assertTrue ( predToPair. isEmpty ( ) ) ; }"
final T token = obstaclePositions. get ( o ) ; if ( token == null ) { return null ; } return token ; }
while ( activeWriters > 0 ) { try { wait ( ) ; } catch ( InterruptedException e ) { } } activeWriters -- ; }
assertDelegateAvailable ( ) ; return delegate. getDisplayName ( src ) ; }
"Matcher m = uriPattern. matcher ( rawUrl ) ; if ( m. find ( ) ) { String uri = m. group ( 1 ) + "":"" + rawUrl. substring ( m. start ( ), rawUrl. length ( ) ) ; return uri ; } return rawUrl ; }"
try { em. persist ( album ) ; } catch ( Exception e ) { throw new PhotoAlbumException ( e. getMessage ( ) ) ; } }
Date result = null ; if ( m_map. containsKey ( type ) ) { result = ( Date ) m_map. get ( type ) ; } return ( result ) ; }
"ConnectivityManager cm = ( ConnectivityManager ) context. getSystemService ( Context. CONNECTIVITY_SERVICE ) ; List < DataConnection > connections = cm. getActiveDataConnections ( ) ; for ( DataConnection connection : connections ) { addToMultiMap ( connection, target ) ; } }"
synchronized ( m_userCache ) { m_currentStatus = Status. EMPTY ; m_userCache. remove ( m_currentStatus ) ; } }
"String value = getProperty ( property ) ; if ( value == null ) { return defaultValue ; } try { return ""true"". equalsIgnoreCase ( value ) ; } catch ( NumberFormatException e ) { return defaultValue ; } }"
int originalSize = size ( ) ; int n = values. length ; for ( int i = 0 ; i < n ; i ++ ) { mCurStatus [ i ] = values [ i ] ; } return size ( )!= originalSize ; }
String [ ] list = component. getPath ( ). split ( DELIMITER ) ; return list [ list. length - 1 ] ; }
if ( running ) { return timeLeft - timeLeft ; } else { return - 1 ; } }
final String sKeyFullTextQuery = _getFullTextQuery ( sKey ) ; return sKeyFullTextQuery == null? sDefault : sKeyFullTextQuery ; }
StringBuilder sb = new StringBuilder ( ) ; for ( int i = 1 ; i < id. length ( ) ; i ++ ) { char c = id. charAt ( i ) ; if ( c < '0' || c > '9' ) { sb. append ( '0' ) ; } sb. append ( c ) ; } return Integer. parseInt ( sb. toString ( ) ) ; }
"StringBuffer value = new StringBuffer ( ) ; switch ( fieldDesc. getType ( ) ) { case Boolean : value. append ( ""1"" ) ; break ; case Boolean : value. append ( ""0"" ) ; break ; case Integer : value. append ( Integer. toString ( value ) ) ; break ; default : value. append ( ""0"" ) ; break ; } return value. toString ( ) ; }"
"DocumentID id1 = new DocumentID ( id ) ; DocumentID id2 = new DocumentID ( id1 ) ; id2. setId ( id2 ) ; List < DocumentInterval > list = eventualObsolescenceFacet. getIntervals ( id2, MaxIntervalFacet. RESERVED_MAX ) ; assertEquals ( 1, list. size ( ) ) ; assertEquals ( id1. getId ( ), list. get ( 0 ). getId ( ) ) ; }"
Subscriber < Object > s = new TestSubscriber < Object > ( ) ; s. request ( ) ; return s. request ( ) ; }
ArrayList < Location > locations = new ArrayList < Location > ( ) ; for ( int i = 0 ; i < Constants. NUM_LOCATIONS ; i ++ ) { if ( isFree ( locations. get ( i ) ) ) { return locations. get ( i ) ; } } return null ; }
"if ( lazyKey == null ) { throw new NullPointerException ( ""lazyKey is null"" ) ; } if ( type == null ) { throw new NullPointerException ( ""type is null"" ) ; } getLabelsByPageIndicesInternal ( lazyKey, type ) ; }"
"if ( connection == null ) throw new IllegalArgumentException ( ""connection is null"" ) ; connections. add ( connection ) ; }"
"int i = ( int ) ( htTimestamp / HT_TIMESTAMP_FACTOR ) ; long physical = ( int ) ( htTimestamp % HT_TIMESTAMP_FACTOR ) ; long logical = ( int ) ( htTimestamp % HT_TIMESTAMP_FACTOR ) ; return new long [ ] { physical, logical } ; }"
Intent intent = new Intent ( Intent. ACTION_VIEW ) ; intent. setData ( Uri. parse ( fragmentName ) ) ; intent. setFlags ( Intent. FLAG_ACTIVITY_NEW_TASK ) ; context. startActivity ( intent ) ; }
"if ( o == null ) { throw new NullPointerException ( ) ; } if ( o instanceof Boolean ) { return o. toString ( ) ; } throw new BeanException ( ""Failed to convert object of type "" + o. getClass ( ) + "": Not a boolean."" ) ; }"
"assert request!= null ; String name = request. getHead ( ). ref ; if ( name == null || name. length ( ) == 0 ) return """" ; return name ; }"
DigiDocException ex = validateIdent ( data ) ; if ( ex!= null ) throw ex ; m_digestValue = data ; }
for ( int i = 0 ; i < musicNames. length ; i ++ ) { if ( description. containsKey ( musicNames [ i ] ) ) { description. remove ( musicNames [ i ] ) ; } } }
if ( node == null ) { return ; } RBNode parent = node. getParent ( ) ; while ( parent!= null ) { if ( isRed ( parent ) ) { node. addGapGap ( parent ) ; } parent = parent. getParent ( ) ; } }
HttpServletRequest request = ( HttpServletRequest ) FacesContext. getCurrentInstance ( ). getExternalContext ( ). getRequest ( ) ; HttpSession session = request. getSession ( ) ; if ( session!= null ) { session. removeAttribute ( SESSION_ID ) ; } }
HttpSession session = ( HttpSession ) request. getSession ( false ) ; return session ; }
List < T > l_turnoversList = new ArrayList < > ( ) ; l_turnoversList. addAll ( p_turnoversList ) ; Collections. sort ( l_turnoversList ) ; return l_turnoversList ; }
"System. setProperty ( SPRING_PROFILES_ACTIVE, ""your-active-profile"" ) ; doDeletePlacedStudentData ( ) ; }"
for ( int i = 0 ; i < leftBlock. length ; i ++ ) { if ( leftBlock [ i ] == i ) { leftBlock [ i ] = i ; } else if ( rightBlock [ i ] == i ) { rightBlock [ i ] = i ; } } }
"try { reportErrorContent ( controller, action, false ) ; return true ; } catch ( Exception e ) { reportErrorContent ( controller, action, e ) ; return false ; } }"
Iterator iterator = classMap. values ( ). iterator ( ) ; while ( iterator. hasNext ( ) ) { Clazz clazz = ( Clazz ) iterator. next ( ) ; clazz. hasPublicConstructor ( classVisitor ) ; } }
"Filter < DependencyTree > filter = parse ( dependencyFilterText ) ; if ( isEmpty ( filter ) ) { return excludeOptionalDependenciesFilter ; } return Filters. or ( excludeOptionalDependenciesFilter, filter ) ; }"
try { return getSDFAFromFile ( new File ( inFN ) ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; System. exit ( 1 ) ; } return null ; }
Automaton a = new Automaton ( ) ; a. singleton = null ; a. deterministic = true ; return a ; }
"SimpleToken token1 = new SimpleToken ( ) ; token1. setAuthValue ( ""chris"" ) ; token1. setAuthValue ( ""chrismills"" ) ; SimpleToken token2 = new SimpleToken ( ) ; token2. setAuthValue ( ""chrismills"" ) ; token2. setAuthValue ( ""chrismills"" ) ; assertTrue ( token1. authenticate ( token2, null ) ) ; }"
drawingGroup. add ( d ) ; if ( d instanceof BooleanOption ) { ( ( BooleanOption ) d ). setSelected ( true ) ; } }
"IUPACTable up = null ; switch ( id ) { case 1 : up = new UND ( ""uc"" ) ; break ; case 2 : up = new UND ( ""mr"" ) ; break ; case 3 : up = new UND ( ""mr"" ) ; break ; case 4 : up = new UND ( ""mr"" ) ; break ; case 5 : up = new UND ( ""mr"" ) ; break ; default : break ; } return up ; }"
"try { return ioOperations. deleteAllRules ( patient ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return null ; } }"
String value = null ; try { value = resource. getString ( key ) ; } catch ( Exception e ) { } return value ; }
testGameObject. ln ( ) ; verify ( mockBombBehavior ). decrementBomb ( ) ; }
int [ ] testRight = null ; if ( tab == null ) { testRight = new int [ 0 ] ; } else { for ( int i = 0 ; i < tab. length ; i ++ ) { testRight [ i ] = tab [ tab. length - 1 - i ] ; } } return testRight ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) + "","" ) ; if ( getValues ( )!= null ) sb. append ( ""Values: "" + getValues ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"if ( session!= null ) { try { session. close ( ) ; } catch ( JMSException ex ) { logger. trace ( ""Could not close JMS Session"", ex ) ; } catch ( Throwable ex ) { logger. trace ( ""Unexpected exception on closing JMS Session"", ex ) ; } } }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getPollDelayMillis ( )!= null ) sb. append ( ""PollDelayMillis: "" + getPollDelayMillis ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
String key = genKey ( seed ) ; return Base64. encodeBase64String ( key. getBytes ( ) ) ; }
NameIDPolicy nameIDPolicy = new NameIDPolicy ( ) ; setPolicyVersion ( nameIDPolicy ) ; return nameIDPolicy ; }
IRule [ ] currentRules = new IRule [ rules. length ] ; for ( int i = 0 ; i < rules. length ; i ++ ) { currentRules [ i ] = rules [ i ] ; } isRunning = true ; for ( int i = 0 ; i < rules. length ; i ++ ) { if ( rules [ i ]!= null ) { isRunning [ i ] = rules [ i ] ; } } }
"model. addAttribute ( ""taskId"", taskId ) ; List < Task > taskList = crudService. findAll ( ) ; logger. info ( ""Found {} task(s)"", taskList. size ( ) ) ; model. addAttribute ( ""taskList"", taskList ) ; return VIEW_NAME_TASK_LIST ; }"
Random random = new Random ( ) ; T object = null ; for ( int i = 0 ; i < list. size ( ) ; i ++ ) { object = list. get ( i ) ; } return object ; }
"StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < actions. size ( ) ; i ++ ) { JSONObject action = actions. get ( i ) ; sb. append ( action. toJSONString ( movable ) ) ; } sb. delete ( sb. length ( ) - 1, sb. length ( ) ) ; return sb. toString ( ) ; }"
"try { tcpSender. close ( ) ; tcpReceiver = null ; } catch ( IOException e ) { LOG. warn ( ""Unable to close SpanReceiver correctly: "" + e. getMessage ( ), e ) ; } }"
ArrayList < SalaPesi > user = new ArrayList < SalaPesi > ( ) ; user. addAll ( pesiDao. obtener ( ) ) ; return user ; }
"long t = System. currentTimeMillis ( ) ; for ( Map. Entry < Long, Integer > e : map. entrySet ( ) ) { t = Math. max ( t, e. getValue ( ) ) ; } return t ; }"
for ( int i = 0 ; i < projectList. size ( ) ; i ++ ) { if ( projectList. get ( i ) == id ) return i ; } return - 1 ; }
"if ( includeColumnNames ) { for ( int i = 1 ; i <= rs. getColumnCount ( ) ; i ++ ) { includeColumn ( resultService. getColumn ( rs, i ), false ) ; } } }"
"StringBuffer r = new StringBuffer ( ) ; r. append ( lang ) ; r. append ( ""-"" ) ; r. append ( country ) ; return r. toString ( ) ; }"
byte [ ] result = new byte [ 4 ] ; result [ 0 ] = ( byte ) ( ( tpFile. getFilePointer ( ) >> 24 ) & 0xFF ) ; result [ 1 ] = ( byte ) ( ( tpFile. getFilePointer ( ) >> 16 ) & 0xFF ) ; result [ 2 ] = ( byte ) ( ( tpFile. getFilePointer ( ) >> 8 ) & 0xFF ) ; result [ 3 ] = ( byte ) ( tpFile. getFilePointer ( ) & 0xFF ) ; return result ; }
"Bundle bundle = new Bundle ( ) ; bundle. putString ( ID_KEY, id ) ; bundle. putInt ( SOURCE_KEY, source ) ; bundle. putInt ( VERSION_KEY, version ) ; bundle. putString ( payload, payload ) ; return bundle ; }"
if ( s < 0 || s > nisoSet. length ) { return - 1 ; } return nisoSet [ s ] ; }
byte [ ] result = new byte [ 2 ] ; result [ 0 ] = ( byte ) ( value & 0xff ) ; result [ 1 ] = ( byte ) ( ( value >>> 8 ) & 0xff ) ; return result ; }
ContentTypeInfo checksum = null ; for ( Policy rule : rules ) { if ( rule. matches ( message ) ) { checksum = rule. checksumIfd ( message ) ; break ; } } return checksum ; }
if ( m_currentData == null ) { return new ArrayList < CmsContainerElementBean > ( ) ; } return m_currentData ; }
"PowerFunction2D f1 = new PowerFunction2D ( 1.0, 2.0 ) ; PowerFunction2D f2 = new PowerFunction2D ( 1.0, 2.0 ) ; assertFalse ( f1. equals ( f2 ) ) ; f1 = new PowerFunction2D ( 2.0, 3.0 ) ; assertFalse ( f1. equals ( f2 ) ) ; f2 = new PowerFunction2D ( 2.0, 3.0 ) ; assertFalse ( f1. equals ( f2 ) ) ; }"
XContentType type = XContentType. getType ( content ) ; if ( type == null ) { return null ; } return isSubstring ( type ) ; }
"try { return execute ( ""echo hello"" ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; List < String > list = new ArrayList < String > ( ) ; list. add ( e. getMessage ( ) ) ; return list ; } }"
"addContributors ( new ArrayList < CourseInfo > ( ) ) ; for ( CourseInfo ci : item. getCourseInfos ( ) ) { addContributors ( ci. getName ( ), ci ) ; } }"
String keyword = keywordInJimple. getText ( ) ; return keyword ; }
if ( updatedRssiValue == null ) { updatedRssiValue = new XMLOutputFactory2 ( ) ; } return updatedRssiValue ; }
"String message = ""No se encontraron ambipos"" ; out. println ( message ) ; wait ( 1000 ) ; }"
final IntervalsSet result = new IntervalsSet ( ) ; result. add ( start ) ; result. add ( end ) ; return result ; }
"if ( stream!= null ) { try { processRecord ( new InputStreamReader ( stream, ""UTF-8"" ), tag ) ; } catch ( UnsupportedEncodingException e ) { e. printStackTrace ( ) ; } } }"
try { return ( TokenInformation ) clone ( ) ; } catch ( CloneNotSupportedException cannotHappen ) { return null ; } }
world. setPinned ( true ) ; todo - 1 ; pinned = true ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getXssMatchSetId ( )!= null ) sb. append ( ""XssMatchSetId: "" + getXssMatchSetId ( ) + "","" ) ; if ( getName ( )!= null ) sb. append ( ""Name: "" + getName ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
int old = count ; count ++ ; if ( ( count == capacity ) && ( old == capacity ) ) { return oldValue ; } return ( old + 1 ) ; }
if (! myPage. isShowing ( ) ) { return false ; } else { return myPage. getY ( ) ; } }
if ( getInitialData ( ) == null ) { updateStatus ( elapsedTime ) ; } if ( elapsedTime <= getInitialData ( ). getRefreshTime ( ) ) { updateStatus ( elapsedTime ) ; } }
int scale = 1 ; for ( int i = 0 ; i < gcMap. length ; i ++ ) { if ( gcMap [ i ] == entry ) { scale *= 2 ; } } return scale == 1 ; }
"StringBuffer result = new StringBuffer ( ) ; for ( int i = 0 ; i < inputString. length ( ) ; i ++ ) { result. append ( inputString. substring ( i, i + length ) ) ; } return result. toString ( ) ; }"
connection = new Connection ( ) ; connection. setHost ( HOST_NAME ) ; connection. setPort ( PORT ) ; connection. setIdleTimeout ( IDLE_TIMEOUT ) ; connection. setSoTimeout ( SO_TIMEOUT ) ; }
if ( osEntry!= null ) { return ( String ) osEntry. getDos ( ) ; } return UNKNOWN ; }
"if ( enabled == false ) { mean. set ( 0 ) ; } else { mean. set ( 0, enabled ) ; } }"
Base64 encoder = new Base64 ( ) ; return new String ( encoder. encode ( str. getBytes ( ) ) ). trim ( ) ; }
"xml. start ( ""Grantee"", new String [ ] { ""xmlns:xsi"", ""xsi:type"" }, new String [ ] { ""http://www.w3.org/2001/XMLSchema-instance"", ""CardApplication"" } ) ; xml. start ( ""URI"" ). value ( grantee. getIdentifier ( ) ). end ( ) ; xml. end ( ) ; return xml ; }"
ArrayList < WebElement > result = new ArrayList < WebElement > ( ) ; for ( WebElement e : list ) { if ( e. isDisplayed ( ) &&! onlySufficientlyVisible ) { result. add ( e ) ; } } return result ; }
PromptCommand comand = null ; int i ; for ( i = 0 ; i < threads. size ( ) ; i ++ ) { comand = threads. get ( i ) ; if ( comand. getSentence ( ). equals ( line ) ) { comand = null ; break ; } } return comand ; }
exportInteraction. clear ( ) ; for ( int i = 0 ; i < agents. size ( ) ; i ++ ) { agents. get ( i ). getBits ( exportInteraction ) ; } }
T result = null ; for ( Annotation annotation : annotations ) { if ( annotation. annotationType ( ) == annotationClass ) { result = ( T ) annotation ; break ; } } return result ; }
SimplePrincipalProvider ret = null ; for ( PrincipalProvider <? > p : principalProviders ) { if ( p. getName ( ). equals ( principalName ) ) { ret = p ; break ; } } return ret ; }
if ( errorStyle == null ) { return STDataValidationErrorStyle. NONE ; } else { return errorStyle ; } }
int value = 0 ; switch ( data ) { case 0x00 : value = 1 ; break ; case 0x01 : value = 2 ; break ; case 0x02 : value = 3 ; break ; case 0x03 : value = 4 ; break ; case 0x04 : value = 5 ; break ; case 0x00 : value = 6 ; break ; case 0x02 : value = 7 ; break ; default : break ; } return value ; }
"String fromFieldSignature = fieldSignature. substring ( ""from"". length ( ) ) ; return fromFieldSignature. equals ( ""0"" ) || fromFieldSignature. equals ( ""1"" ) || fromFieldSignature. equals ( ""2"" ) ; }"
"byte [ ] buffer = new byte [ 4 ] ; buffer [ 0 ] = ( byte ) inMax ; for ( int i = 1 ; i <= 5 ; i ++ ) { buffer [ 1 ] = ( byte ) ( ( inMax >> ( 8 * i ) ) & 0xFF ) ; } mProgressBar. setBounds ( 0, 0, buffer. length, buffer ) ; }"
"hadoopFsuri = b ; if ( b ) { settings. set ( HADOOP_FSURI, Boolean. toString ( b ) ) ; } }"
if ( formObj. has ( TAG_PERIOD ) ) { JSONArray periodArray = formObj. getJSONArray ( TAG_PERIOD ) ; return periodArray ; } return null ; }
Iterator < Member > it = members. iterator ( ) ; while ( it. hasNext ( ) ) { if ( it. next ( ). getName ( ). equals ( name ) ) { it. remove ( ) ; } } }
"encodedHosts. put ( host. getName ( ), host ) ; hostKnownHosts. put ( host. getName ( ), new HashSet < > ( Arrays. asList ( hostKnownHosts ) ) ) ; }"
"Chat newChat = new Chat ( userJID, thread, listener ) ; return setExpandedFromMemory ( newChat ) ; }"
"try { return ( Float ) invokeByReflection ( caller, new Class <? > [ ] { int. class }, new Object [ ] { index }, ""getProxyClassLoader"" ) ; } catch ( UnsupportedOperationException e ) { return caller. getClazz ( ). getName ( ) ; } }"
if ( button == 1 ) { buttonText [ x ] [ y ]. add ( clickcount ) ; } else if ( button == 2 ) { if ( button == 3 ) { buttonText [ x ] [ y ]. add ( clickcount ) ; } else if ( button == 4 ) { buttonText [ x ] [ y ]. add ( clickcount ) ; } else { buttonText [ x ] [ y ]. add ( clickcount ) ; } } }
"int dotIdx = fileName. lastIndexOf ( '.' ) ; if ( dotIdx > 0 ) { return fileName. substring ( 0, dotIdx ) ; } else { return fileName ; } }"
"Element groupRoot = doc. createElement ( elementName ) ; groupRoot. setAttributeNS ( XMLConstants. XLINK_NAMESPACE_URI, ""xmlns:xsi"", ""http://www.w3.org/2001/XMLSchema-instance/"" ) ; groupRoot. setAttributeNS ( null, ""xmlns:xsi"", ""http://www.w3.org/2001/XMLSchema-instance/"" ) ; return groupRoot ; }"
if ( writer == null ) { mapper = GSON. create ( ) ; } return writer ; }
int dx = target. x - x ; int dy = target. y - y ; return ( int ) ( Math. sqrt ( dx * dx + dy * dy ) ) ; }
"Path procfs = new Path ( ""/proc/self/bin"" ) ; FSDataInputStream fis = fs. open ( procfs ) ; try { BufferedReader reader = new BufferedReader ( new InputStreamReader ( fis ) ) ; String line ; while ( ( line = reader. readLine ( ) )!= null ) { } reader. close ( ) ; } catch ( IOException e ) { fail ( e. getMessage ( ) ) ; } }"
try { lock. readLock ( ). lock ( ) ; int count = 0 ; while ( ( count = readTokens ( address ) )!= - 1 ) { } unlock. readLock ( ). unlock ( ) ; return count ; } catch ( IOException e ) { } finally { lock. readLock ( ). unlock ( ) ; } }
long size = file. length ( ) ; return logSize ( size ) ; }
"assertEquals ( EXPECTED_VALUE, processor. execute ( ""test1"", ANONYMOUS_CSVCONTEXT ) ) ; assertEquals ( EXPECTED_VALUE, processor. execute ( ""test1"", ANONYMOUS_CSVCONTEXT ) ) ; assertEquals ( EXPECTED_VALUE, processor. execute ( ""test1"", ANONYMOUS_CSVCONTEXT ) ) ; }"
"Map < String, Object > magic = new HashMap < String, Object > ( ) ; for ( String magic : MAGIC_STRINGS ) { magic. put ( magic, attributes. get ( magic ) ) ; } return magic ; }"
"Integer index = tableInfo. get ( t ) ; if ( index == null ) { index = createTableInfo ( t ) ; tableInfo. put ( t, index ) ; } return index ; }"
boolean found = false ; for ( Swot swot : list ) { if ( swot. getStone ( ). equals ( stone ) ) { found = true ; break ; } } return found ; }
synchronized ( mReadLock ) { callback. run ( ) ; if ( mClientCertLookup!= null ) { mClientCertLookup. clear ( ) ; } } }
"for ( A key : source. keySet ( ) ) { B value = source. get ( key ) ; if ( value!= null ) { target. put ( key, value ) ; } } }"
int i ; for ( i = 0 ; i < queue. length ( ) ; i ++ ) { if (! Character. isLetterOrDigit ( queue. charAt ( i ) ) ) { break ; } } if ( i == 0 && ( queue. charAt ( i ) == '-' || queue. charAt ( i ) == '_' || queue. charAt ( i ) == ':' ) ) { return queue. substring ( i ) ; } return null ; }
"StringBuffer buffy = new StringBuffer ( ) ; buffy. append ( ""Tempo: tempo="" ) ; buffy. append ( tempo ) ; return buffy. toString ( ) ; }"
"table. setDefaultTreatmentBuilder ( new DateTreatmentBuilder ( ) ) ; assertEquals ( Date. class, table. getDefaultTreatmentBuilder ( ). getClass ( ) ) ; assertEquals ( Date. class, table. getDefaultTreatmentBuilder ( ). getClass ( ) ) ; }"
if ( obj == null || obj instanceof Long ) { return false ; } try { return ( ( Long ) obj ). longValue ( )!= 0 ; } catch ( NumberFormatException e ) { return false ; } }
if ( id > 0 ) { for ( int i = 0 ; i < views. length ; i ++ ) { if ( views [ i ]. id == id ) { return views [ i ] ; } } } return null ; }
int retval = resetDeck [ metricID - 1 ] ; resetDeck [ metricID - 1 ] = retval ; return retval ; }
if ( priority <= article. getPriority ( ) ) { article. setPriority ( priority ) ; return true ; } return false ; }
"RadixTreeNode rootNode = new RadixTreeNode ( UNIT_TEST, UNIT_TEST ) ; rootNode. addChildNode ( rootNode ) ; TestCase. assertEquals ( UNIT_TEST, rootNode. getUnit ( ) ) ; }"
if ( parent == null ) { return ; } parent. isPartitionTag = amount > 0? 1 : 0 ; }
Extractor < DomainModel > extractor = new Extractor < DomainModel > ( scene ) ; return testValidateSelectPrivilegesForAdmin ( extractor ) ; }
if ( allocationDelayTimeoutSettingNanos == null ) { allocationDelayTimeoutSettingNanos = new com. amazonaws. internal. SdkInternalList < VolumeStatusItem > ( ) ; } return allocationDelayTimeoutSettingNanos ; }
if ( _parent == null ) { _parent = node ; _edgePair = node ; } else { _parent. addEdgePair ( node ) ; } }
"String [ ] coordinates = point. split ( ""|."" ) ; double x = Double. parseDouble ( coordinates [ 0 ] ) ; double y = Double. parseDouble ( coordinates [ 1 ] ) ; double z = Double. parseDouble ( coordinates [ 2 ] ) ; Point p = new Point ( x, y ) ; return p ; }"
"if ( dataSource!= null ) { return dataSource. getShellService ( ) ; } return ""null"" ; }"
StringBuffer provider = new StringBuffer ( ) ; BufferedReader br = new BufferedReader ( new InputStreamReader ( inputStream ) ) ; while ( true ) { String line = br. readLine ( ) ; if ( line == null ) break ; provider. append ( line ) ; } br. close ( ) ; return provider. toString ( ) ; }
String data = Integer. toString ( i ) ; if ( data. length ( )!= 2 ) { return null ; } data = new byte [ 2 ] ; data [ 0 ] = ( byte ) ( data. charAt ( 0 ) & 0xFF ) ; data [ 1 ] = ( byte ) ( data. charAt ( 1 ) & 0xFF ) ; data [ 0 ] = ( byte ) ( data. charAt ( 0 ) & 0xFF ) ; return data ; }
"ITextItem item = new ITextItem ( Messages. getString ( ""data.source.list"" ) ) ; item. setText ( Messages. getString ( ""data.source.description"" ) ) ; item. setText ( Messages. getString ( ""data.sources.description"" ) ) ; menu. add ( item ) ; }"
List < Point > closestDataSetIndex = new ArrayList < Point > ( ) ; for ( int i = 0 ; i < dataSetIndices. size ( ) ; i ++ ) { Point point = dataSetIndices. get ( i ) ; if ( point. l_id < l_id ) { closestDataSetIndex = point ; } } return closestDataSetIndex ; }
propertyName = propertyName. toUpperCase ( ) ; VCardPropertyScribe <? extends VCardProperty > marshaller = inputs. get ( propertyName ) ; if ( marshaller!= null ) { return marshaller ; } return standardInputs. get ( propertyName ) ; }
if ( mGarbage ) { gc ( ) ; } return mValues [ index ] ; }
"List < String >SubtreeTags = new ArrayList < String > ( ) ; getSubtreeTags ( metadataConn, classLoader,SubtreeTags ) ; }"
if ( attrName == null ) return false ; return requestIds. contains ( attrName ) ; }
"if ( hosts == null || weight == 0 ) return ; Long count = blocks. get ( hosts ) ; if ( count == null ) { count = new Long ( weight ) ; blocks. put ( hosts, count ) ; } count. add ( weight ) ; }"
"Calendar cal = Calendar. getInstance ( ) ; cal. setTimeInMillis ( m ) ; cal. set ( Calendar. HOUR_OF_DAY, 0 ) ; cal. set ( Calendar. MINUTE, 0 ) ; cal. set ( Calendar. SECOND, 0 ) ; cal. set ( Calendar. MILLISECOND, 0 ) ; return ( int ) cal. get ( Calendar. YEAR ) ; }"
double [ ] clipRect = new double [ 4 ] ; clipRect [ 0 ] = l - itemOffset ; clipRect [ 1 ] = t - itemOffset ; clipRect [ 2 ] = r - itemOffset ; clipRect [ 3 ] = b - itemOffset ; }
byte [ ] twoBytes = new byte [ 2 ] ; for ( int h = 0 ; h < 3 ; h ++ ) { twoBytes [ h ] = ( byte ) ( ( h << 3 ) + ( h & 0x3F ) ) ; } for ( int h = 0 ; h < 3 ; h ++ ) { twoBytes [ h ] = ( byte ) ( ( h << 5 ) + ( h & 0x3F ) ) ; } return Float. reverseBytes ( twoBytes ) ; }
"Tag tag = tagService. reload ( id ) ; if ( tag == null ) { return new ResponseEntity < > ( HttpStatus. NO_CONTENT ) ; } else { return new ResponseEntity < > ( tagResourceAssembler. toResource ( tag ), HttpStatus. OK ) ; } }"
"final Logger logger = Logger. getLogger ( logLevel ) ; logger. info ( message ) ; if ( exception!= null ) { logger. error ( message, exception ) ; } }"
boolean [ ] validCookie = new boolean [ values. length + newPosition ] ; for ( int i = 0 ; i < values. length ; i ++ ) { if ( values [ i ] && oldPosition == i ) { validCookie [ i ] = values [ oldPosition ] ; } else { validCookie [ i ] =! values [ oldPosition ] ; } } return validCookie ; }
"Account acc1 = ServiceTestConfiguration. account ( ) ; Account acc2 = ServiceTestConfiguration. account ( ) ; assertEquals ( ""test"", acc1. toString ( ) ) ; assertEquals ( ""account2"", acc2. toString ( ) ) ; }"
int [ ] extensions = new int [ 1 ] ; extensions [ 0 ] = glyphName. hashCode ( ) ; return extensions ; }
"MethodStats stats = mPerThreadCumulativeStats. get ( thread. getId ( ) ) ; return getProperties ( stats, clockType, unit ) ; }"
indent = INDENT ; String line ; while ( ( line = reader. readLine ( ) )!= null ) { if ( line. length ( ) > 0 ) { break ; } indent ++ ; } fileLines. add ( new Line ( ) ) ; }
"StringBuilder builder = new StringBuilder ( ) ; for ( String v : values ) { builder. append ( ""'"" ). append ( escape ( v ) ). append ( ""'"" ) ; } return builder. toString ( ) ; }"
"if ( ifModifiedSince < 0 ) { throw new ExtendedIllegalArgumentException ( ""ifModifiedSince"", ExtendedIllegalArgumentException. PARAMETER_VALUE_NOT_VALID ) ; } m_ifModifiedSince = ifModifiedSince ; }"
"ResultSet rs = conn. createStatement ( ). executeQuery ( ""SELECT * FROM "" + TABLE_QUOTE ) ; rs. next ( ) ; String quoteId = rs. getString ( 1 ) ; while ( rs. next ( ) ) { quoteId = rs. getString ( 2 ) ; } rs. close ( ) ; conn. close ( ) ; }"
if ( repeatedly ) { return BlockRenamer. getInstance ( op ) ; } else { return BlockRenamer. getInstance ( op ) ; } }
"String s = ""bla"" ; assertEquals ( s. length ( ), 2 ) ; assertEquals ( s [ 0 ], ""bla"" ) ; assertEquals ( s [ 1 ], ""bla"" ) ; assertEquals ( s [ 2 ], ""bla"" ) ; assertEquals ( s [ 3 ], ""bla"" ) ; assertEquals ( s [ 4 ], ""bla"" ) ; assertEquals ( s [ 5 ], ""bla"" ) ; }"
"if (! operations. containsKey ( label ) ) throw new IllegalArgumentException ( ""Label '"" + label + ""' not found!"" ) ; int oldCount = operations. get ( label ). getCodeCount ( ) ; operations. put ( label, newCount + 1 ) ; return oldCount ; }"
if ( graphs == null ) return ; for ( PDGraph instance : graphs ) cacheExpression ( instance ) ; }
"commentText = """" ; try { commentText = new String ( in. read ( ) ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } finally { try { commentText = new String ( in. read ( ) ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } } }"
"String baseURL = """" ; if ( Session. getInstance ( ) == null || Session. getInstance ( ). user. getBaseURL ( ). length ( ) == 0 ) { baseURL = ""http://screenbird.com/"" ; } else baseURL = Session. getInstance ( ). user. getBaseURL ( ) ; return baseURL ; }"
"Preconditions. checkNotNull ( instruction, ""Instruction argument can not be null"" ) ; return com. google. security. zynamics. reil. ReilHelpers. isComboBox ( instruction. getNative ( ) ) ; }"
for ( int i = 0 ; i < buffer. length ; i ++ ) { if ( buffer [ i ] < 32 || buffer [ i ] > 127 ) return ( null ) ; } return null ; }
for ( int i = 0 ; i < points. size ( ) ; i ++ ) { double sum = 0.0 ; for ( int j = 0 ; j < points. size ( ) ; j ++ ) { sum += points. get ( i ). subtract ( points. get ( j ) ) ; } } }
Iterator < Accident > it = observers. iterator ( ) ; while ( it. hasNext ( ) ) { Accident d = it. next ( ) ; if ( d. equals ( toCheck ) ) { return true ; } } return false ; }
Card card = CARDS_BY_ID. get ( id ) ; if ( card == null ) { card = CARDS_BY_ID. get ( new String [ ] { } ) ; } return card ; }
"c. set ( Calendar. HOUR_OF_DAY, 0 ) ; c. set ( Calendar. MINUTE, 0 ) ; c. set ( Calendar. SECOND, 0 ) ; c. set ( Calendar. MILLISECOND, 0 ) ; setKeyStoreUrl ( c. getTimeInMillis ( ) ) ; }"
try { return dateParser. parse ( date ) ; } catch ( ParseException e ) { return backup ; } }
"s. defaultReadObject ( ) ; int length = s. readInt ( ) ; if ( length > 0 ) { for ( int i = 0 ; i < length ; i ++ ) { unitResults. put ( i, s. readObject ( ) ) ; } } }"
int value = 0 ; String [ ] calls = getCalls ( ) ; for ( int i = 0 ; i < calls. length ; i ++ ) { if ( calls [ i ]. equals ( DELIM ) ) { value += 2 ; } } return value ; }
"InputStream content = response. getEntity ( ). getContent ( ) ; StringWriter sw = new StringWriter ( ) ; IOUtils. copy ( content, sw, ""UTF-8"" ) ; return sw. toString ( ) ; }"
if ( freezeLength == null ) { freezeLength = new ArrayList < EntryType > ( ) ; } return freezeLength ; }
String key = key ( ) ; try { return Long. parseLong ( props. getProperty ( key ) ) ; } catch ( NumberFormatException e ) { return 0 ; } }
"for ( int i = 0 ; i < hours. length ; i ++ ) { String user = input. nextLine ( ) ; if ( user. contains ( ""Hi, "" ) ) { hours [ i ] = 0.0 ; } else { hours [ i ] = 1.0 ; } } input. nextLine ( ) ; }"
"int coreness = 0 ; for ( Integer c : map. keySet ( ) ) { if ( c == coreness ) { coreness = map. get ( c ) ; break ; } } Log. i ( TAG, ""coreness updated"" ) ; }"
"Criterion criterion = Criteria. getUsesLocation ( ) ; ObjectNode result = criterionCodec. encode ( criterion, context ) ; assertThat ( result, matchesCriterion ( criterion ) ) ; }"
GalaxyLibrary. Builder builder = new GalaxyLibrary. Builder ( ) ; builder. setId ( TEST_FILE_ID ) ; builder. setFile ( TEST_FILE_PATH ) ; when ( builder. build ( ) ). thenReturn ( TEST_FILE_ID ) ; assertTrue (! builder. filter ( createTestFile ( ) ) ) ; }
"SimpleDateFormat format1 = new SimpleDateFormat ( dateFormatMMddyyyy ) ; SimpleDateFormat format2 = new SimpleDateFormat ( ""dd-MM-yy"" ) ; Date date = format1. parse ( dateToformat ) ; return format2. format ( date ) ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getApplications ( )!= null ) sb. append ( ""Applications: "" + getApplications ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
HashtableEntry e ; HashtableEntry tab [ ] = table ; int hash = key. hashCode ( ) ; int index = ( hash & 0x7FFFFFFF ) % tab. length ; for ( e = tab [ index ] ; e!= null ; e = e. next ) if (! e. key. equals ( key ) ) return false ; return true ; }
"if ( values == null ) { clear ( ) ; return ; } for ( Map. Entry < String, String > entry : values. entrySet ( ) ) { addToken ( entry. getKey ( ), entry. getValue ( ) ) ; } }"
"try { return str. getBytes ( ""UTF-8"" ) ; } catch ( UnsupportedEncodingException uee ) { uee. printStackTrace ( ) ; } return null ; }"
long l = 0 ; try { final byte [ ] bytes = ia. getAddress ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { l <<= 8 ; l |= ( bytes [ i ] & 0xff ) ; } } catch ( UnknownHostException e ) { } return l ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getRecords ( )!= null ) sb. append ( ""Records: "" + getRecords ( ) + "","" ) ; if ( getNextShardIterator ( )!= null ) sb. append ( ""NextShardIterator: "" + getNextShardIterator ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
byte [ ] url = new byte [ 1024 ] ; int b ; while ( ( b = in. read ( ) )!= - 1 ) { url [ b ] = ( byte ) b ; } return url ; }
"String id = nextUtteranceId ( res, action, principals ) ; if ( id!= null ) { resource. deletePermission ( id ) ; } }"
"try { final Connection connection = getConnection ( connectionFactory ) ; if ( connection == null ) { throw new ConnectionException ( ""Unable to open connection"" ) ; } return connection ; } catch ( final SQLException exception ) { throw new ConnectionException ( ""Unable to get connection from connection factory"", exception ) ; } }"
int snapshotSize = in. readInt ( ) ; if ( snapshotSize <= 0 ) { return ; } Snapshot [ ] snapshots = new Snapshot [ numSnapshots ] ; for ( int i = 0 ; i < numSnapshots ; i ++ ) { snapshots [ i ] = loader. loadSnapshot ( in ) ; } snapshottableParent. setSnapshotQuota ( snapshotSize ) ; }
int result = 1 ; for ( int i = 0 ; i < vals. length ; i ++ ) result = 31 * result + Float. floatToIntBits ( vals [ i ] ) ; return result ; }
"String name = rowToName. get ( row ) ; if ( name == null ) { name = String. valueOf ( row ) ; rowToName. put ( row, name ) ; } return new TableTuple ( name ) ; }"
"try { return iter. hasNext ( ) ; } catch ( DBException e ) { throw e ; } catch ( RuntimeException e ) { throw new DBException ( e. getMessage ( ), e ) ; } }"
if ( storeCursorFlags == FOCUS_SCROLL_MODE ) return FOCUS_SCROLL_MODE ; return ( storeCursorFlags & ( ~ FOCUS_SCROLL_MODE ) )!= 0? FCUS_SCROLL_MODE : FCUS_SCROLL_MODE ; }
URL [ ] urls = new URL [ 1 ] ; urls [ 0 ] = cp ; return setRedirect ( urls ) ; }
int newX = getX ( ) ; int newY = getY ( ) ; posType = ( newX - x ) / 2 ; posType = ( newY - y ) / 2 ; }
for ( int x = 0 ; x < children. length ; x ++ ) children [ x ]. testPerceptron ( state ) ; }
"StringBuffer result = new StringBuffer ( ) ; if ( addr!= null ) { for ( int i = 0 ; i < addr. length ; ++ i ) { int x = addr [ i ] & 0xFF ; result. append ( ( x < 0x10? ""0"" : """" ) + Integer. toString ( x, 16 ) ) ; } } result. append ( ':' ) ; result. append ( uid. toString ( ) ) ; return result. toString ( ) ; }"
if ( base!= null ) { try { return Integer. valueOf ( base ). intValue ( ) ; } catch ( NumberFormatException nfe ) { } } return 0 ; }
final List < T > list = new ArrayList < T > ( 2 ) ; list. add ( m1 ) ; list. add ( m2 ) ; return ( list ) ; }
"ImageAttachment a1 = new ImageAttachment ( ) ; ImageAttachment a2 = new ImageAttachment ( ) ; assertTrue ( a1. equals ( a2 ) ) ; int h1 = a1. hashCode ( ) ; int h2 = a2. hashCode ( ) ; assertEquals ( h1, h2 ) ; }"
"if ( data. length ( ) > maxLength ) { data = data. substring ( 0, maxLength ) + ""..."" ; } return data ; }"
"byte [ ] val = new byte [ ] { 0x78, 0x56, 0x34, 0x12 } ; BinaryConverter converter = new BinaryConverter ( val ) ; assertEquals ( ""value from bytes"", 0x12345678, converter. fromBytes ( ) ) ; }"
"int c = getC ( ) ; if ( ( c & ~ 0xf )!= 0 ) { throw new DexException ( ""Register C out of range: "" + Hex. u8 ( c ) ) ; } return ( short ) c ; }"
for ( int i = 0 ; i < 5 ; i ++ ) { for ( int j = 0 ; j < 5 ; j ++ ) { if ( a [ i ] [ j ] == x || a [ i ] [ j ] == y ) { return ( false ) ; } } } return ( true ) ; }
"ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; DataOutputStream dos = new DataOutputStream ( baos ) ; dos. write ( eatKeyword ( context, item, bitstream_name ) ) ; return baos. toString ( ) ; }"
UUID uuid = UUID. fromString ( guid ) ; if ( uuid. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < guid. length ( ) ; i ++ ) { if (! isValidGUID ( uuid. charAt ( i ) ) ) { return false ; } } return true ; }
workbookNames = new String [ workbookNames. length ] ; for ( int i = 0 ; i < evaluators. length ; i ++ ) { evaluators [ i ]. changeDateTime ( workbookNames [ i ] ) ; } }
"String key ; try { key = ResourceBundle. getBundle ( resourceID, getDefaultLocale ( ) ). getString ( resource ) ; } catch ( MissingResourceException mre ) { key = fallback ; } return key ; }"
"final ECPair pair = constructECPair ( sender, destination, message, networkServicesType, privateKey ) ; return constructFMPPacketEncrypted ( pair, networkServicesType, privateKey ) ; }"
vec. x = ( wheelPos. x - wheelPos. x ) / 2 ; vec. y = ( wheelPos. y - wheelPos. y ) / 2 ; vec. z = ( wheelPos. z - wheelPos. z ) / 2 ; return vec ; }
"int index = uri. indexOf ( '?' ) ; if ( index == - 1 ) { return uri ; } return uri. substring ( 0, index ) ; }"
String [ ] sourceList = sourceList. toArray ( new String [ sourceList. size ( ) ] ) ; for ( int i = 0 ; i < sourceList. length ; i ++ ) { sourceList [ i ] = ( String ) sourceList [ i ] ; } }
for ( int i = 0 ; i < patientList. size ( ) ; i ++ ) { if ( patientList. get ( i ). isPatientPresent ( activeCell ) ) { return ; } } activeCell. x = 0 ; activeCell. y = 0 ; }
"int index = line. indexOf ( "":"" ) ; if ( index == - 1 ) { dbSystemVersion = line ; } else { dbSystemVersion += "":"" + line. substring ( 0, index ) ; } }"
"TaggedValue taggedValue = TaggedValueHelper. getTaggedValue ( tag, element. getTaggedValue ( ) ) ; return taggedValue == null? """" : taggedValue. getValue ( ) ; }"
"StandardXYSeriesLabelGenerator g1 = new StandardXYSeriesLabelGenerator ( ""Series {0}"" ) ; StandardXYSeriesLabelGenerator g2 = ( StandardXYSeriesLabelGenerator ) g1. clone ( ) ; assertTrue ( g1!= g2 ) ; assertTrue ( g1. getClass ( ) == g2. getClass ( ) ) ; assertTrue ( g1. equals ( g2 ) ) ; }"
for ( Enumeration e = JvmThreadContentionMonitoring. values ( ) ; e. hasMoreElements ( ) ; ) { JvmThreadContentionMonitoring container = ( JvmThreadContentionMonitoring ) e. nextElement ( ) ; if ( container. getName ( ). equals ( x. name ( ) ) ) { createContainerAsDirectory ( container ) ; } } }
"String caption = null ; try { caption = new String ( idBytes, offset, length ) ; } catch ( UnsupportedEncodingException e ) { e. printStackTrace ( ) ; } return caption ; }"
if ( appManager == null ) { appManager = new ActivityPageManager ( ) ; } return appManager. generateConcatenatedKeyStream ( ) ; }
ObjectType objectType = readMemberClass ( producer ) ; if ( objectType == null ) { objectType = ObjectType. SERVICE ; } return objectType ; }
Node ret = root ; for ( int i = 0 ; i < nodes. size ( ) ; i ++ ) { Node n = nodes. get ( i ) ; if ( nm. matches ( n ) ) { ret = n ; break ; } } return ret ; }
"if (! started ) { throw new IllegalStateException ( ""Broker is not started."" ) ; } return accessor ; }"
String [ ] responseChangeSong = new String [ data. length ] ; for ( int i = 0 ; i < data. length ; i ++ ) { responseChangeSong [ i ] = data [ i ] ; } return responseChangeSong ; }
"if ( overrides!= null ) { return setProperties ( container, blob, overrides ) ; } else { return setProperties ( container, blob ) ; } }"
int result = b & 0xFF ; if ( result < 0 ) { result = - result ; } return result ; }
"FunctionClass funcName = call. getFunctionClass ( ) ; if ( funcName == null ) { throw new IllegalArgumentException ( ""Function not found: "" + call. getFunctionName ( ) ) ; } HiveFuncHolder holder = new HiveFuncHolder ( funcName ) ; return holder ; }"
"File propertiesFile = new File ( ""workflow.properties"" ) ; Properties properties = new Properties ( ) ; try { properties. load ( new FileInputStream ( propertiesFile ) ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } return properties. toString ( ) ; }"
"Set < Map. Entry < String, String >> keys = that. keySet ( ) ; for ( Map. Entry < String, String > entry : keys ) { String key = entry. getKey ( ) ; String value = entry. getValue ( ) ; if ( value!= null && prefix. length ( ) > 0 ) { push ( key, value, overwrite ) ; } } }"
"List < String > firstArg = getBaseArgs ( miniHS2. getBaseJdbcURL ( ) ) ; assertEquals ( ""0"", firstArg. get ( 0 ) ) ; }"
"if ( left < right ) { int middle = ( left + right ) / 2 ; bToString ( array, index, left, middle ) ; quickSort ( array, index, middle + 1, right ) ; } }"
if ( strToParse == null ) { return defaultValue ; } try { return Double. parseDouble ( strToParse ) ; } catch ( Exception e ) { return defaultValue ; } }
"DListNode2 front = new DListNode2 ( i, head ) ; head. next = head. next. prev ; int item = head. next ; head. prev = head ; size ++ ; }"
"if ( param instanceof String ) { assertEquals ( ""Repeat string"", ( String ) param, 1 ) ; } else { assertEquals ( ""Repeat string"", param. toString ( ) ) ; } }"
Set < String > keySet = roleMap. keySet ( ) ; List < String > index = new ArrayList < String > ( keySet. size ( ) ) ; for ( String role : keySet ) { index. add ( role ) ; } Collections. sort ( index ) ; return index ; }
ArrayList < GameState > values = new ArrayList < GameState > ( ) ; values. add ( state ) ; game. remove ( state. getId ( ) ) ; }
final String [ ] names = splitNames ( name ) ; return names [ names. length - 3 ] ; }
"Assert. notNull ( callback ) ; Assert. notNull ( timeoutMs ) ; appendParameterTypes ( new Callable < Void > ( ) { @ Override public Void call ( ) { callback. run ( ) ; return null ; } }, timeoutMs ) ; }"
"File f = new File ( filename ) ; boolean result = false ; if ( f. exists ( ) ) { try { return new File ( f, getDaysBackSuffix ( ) ). exists ( ) ; } catch ( IOException e ) { result = false ; } } else { result = true ; } return result ; }"
"final HttpSession session = request. getSession ( ) ; UserContainer userContainer = ( UserContainer ) session. getAttribute ( ""userContainer"" ) ; if ( userContainer == null ) { return false ; } return true ; }"
"StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < m_Elements. length ; i ++ ) { sb. append ( m_Elements [ i ] + "" "" ) ; } return sb. toString ( ) ; }"
synchronized ( displayMetrics ) { Set < String > keys = new HashSet < String > ( ) ; for ( String key : displayMetrics. keySet ( ) ) { if ( key. startsWith ( prefix ) ) { keys. add ( key ) ; } } return keys ; } }
"Class <? extends Hash > containerClass = conf. getClass ( HConstants. HBASE_HASH_FUNCTION_CLASS, Hash. class, Hash. class ) ; return ReflectionUtils. newInstance ( containerClass, conf ) ; }"
if ( attrib == null ) return gc. getBeginIndex ( ) ; else return gc. getIterator ( ). getRecallDescription ( attrib ) ; }
hashCode = 0 ; for ( int i = 0 ; i < type. length ; i ++ ) { char c = type [ i ] ; hashCode += ( c < '0'? '1' : '0' ) + ( c < '9'? '0' : '9' ) + ( c < 'a'? 'a' : 'a' ) ; } return hashCode ; }
"CodedOutputStream proto = new CodedOutputStream ( new ByteArrayInputStream ( Base64. getDecoder ( ). encode ( VARINT32 ) ) ) ; proto. writeRawVarint32 ( 0 ) ; byte [ ] val = proto. readRawVarint32 ( ) ; byte [ ] expected = new byte [ ] { ( byte ) 0x78, ( byte ) 0x56, ( byte ) 0x78, ( byte ) 0 } ; assertArrayEquals ( expected, Bytes. toBytes ( val ) ) ; }"
"PackageManager pm = context. getPackageManager ( ) ; try { return pm. getPackageInfo ( context. getPackageName ( ), PackageManager. GET_CONFIGURATIONS )!= null ; } catch ( NameNotFoundException e ) { return false ; } }"
DataFormat type = DataFormat. valueOf ( typeString. toUpperCase ( ) ) ; if ( type == null ) { return defaultValue ; } return type ; }
if ( removeCategory == null ) return null ; return new IvParameterSpec ( removeCategory. getBytes ( ) ) ; }
m_Connected = false ; m_Con = con ; if ( m_IO!= null ) { if ( m_IO instanceof ModbusTransport ) { if ( ( ( ModbusTransport ) m_IO ). isReady ( ) ) { ( ( ModbusTransport ) m_IO ). setReady ( ) ; } } } }
"Callback < TreeView < String >, TreeCell < String >> cellFactory = ComboBoxTreeCell. forTreeView ( ) ; assertNotNull ( cellFactory ) ; }"
"if ( ( m_firstFree + numberOfElements ) >= m_mapSize ) { m_mapSize += ( m_blocksize + numberOfElements ) ; Object newMap [ ] = new Object [ m_mapSize ] ; System. arraycopy ( m_map, 0, newMap, 0, m_firstFree + 1 ) ; m_map = newMap ; } m_firstFree += numberOfElements ; }"
if ( disabled == null ) { return false ; } else { return disabled ; } }
JTabbedPane tp = GMGenSystemView. getTabPane ( ) ; for ( int i = 0 ; i < tp. getTabCount ( ) ; i ++ ) { if ( tp. getComponentAt ( i ) instanceof NotePlugin ) { tp. setSelectedIndex ( i ) ; } } }
double sinLatitude = Math. sin ( latitude * ( Math. PI / 180 ) ) ; return ( 0.5 - Math. log ( ( 1 + sinLatitude ) / ( 1 - sinLatitude ) ) / ( 4 * Math. PI ) ) * ( ( long ) Tile. TILE_SIZE << zoomLevel ) ; }
"if ( theLogger == null ) { throw new NullPointerException ( ""theLogger is null"" ) ; } screenLogger = theLogger ; }"
"mSoundPool. load ( """" ) ; Assert. assertEquals ( 0, mSoundPool. getSound ( ""test1"" ). length ) ; Assert. assertEquals ( 0, mSoundPool. getSound ( ""test2"" ). length ) ; Assert. assertEquals ( 0, mSoundPool. getSound ( ""test3"" ) [ 0 ] ) ; Assert. assertEquals ( 0, mSoundPool. getSound ( ""test4"" ) [ 1 ] ) ; Assert. assertEquals ( 0, mSoundPool. getSound ( ""test5"" ) [ 2 ] ) ; }"
"String str = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
"StringBuilder buf = new StringBuilder ( ) ; for ( int i = 1 ; i < m_groups. size ( ) ; i ++ ) { buf. append ( m_groups. get ( i ). getName ( ) ) ; if ( i!= m_groups. size ( ) - 1 ) { buf. append ( "","" ) ; } } buf. setLength ( buf. length ( ) - 1 ) ; return buf. toString ( ) ; }"
"logger. info ( ""new UserAssignment "" + userAssignment. getUser ( ) ) ; Map < String, Object > model = new HashMap < String, Object > ( ) ; List < UserAssignment > userAssignmentList = userAssignmentBO. selectUserAssignment ( ) ; model. put ( ""userAssignmentList"", userAssignmentList ) ; return new ModelAndView ( ""NewUserAssignment"", model ) ; }"
"if ( hasTraceListeners ( ) ) { int nListeners = m_traceListeners. size ( ) ; for ( int i = 0 ; i < nListeners ; i ++ ) { TraceListener listener = ( TraceListener ) m_traceListeners. elementAt ( i ) ; listener. traceEnd ( phrase, alternatives ) ; } } }"
String value = m_properties. getProperty ( key ) ; return value!= null && Integer. parseInt ( value ) == i? i : - 1 ; }
AccessController. doPrivileged ( new PrivilegedAction < Object > ( ) { public Object run ( ) { Thread. currentThread ( ). setContextClassLoader ( cl ) ; return null ; } } ) ; }
List < Parameter > parameters = request. getParameter ( paramName ) ; if ( parameters == null || parameters. isEmpty ( ) ) { return null ; } return ( String ) parameters. get ( 0 ). getValue ( ) ; }
"String val = ( String ) configuration. get ( key ) ; if ( val == null || """". equals ( val ) ) return defaultValue ; try { return Integer. parseInt ( val ) ; } catch ( NumberFormatException e ) { return defaultValue ; } }"
"int permutationId = 0 ; int pos = 0 ; while ( data [ pos ]!= 0 ) { permutationId ++ ; pos = ( pos + 1 ) % data. length ; } swap ( permutationId, data. length ) ; return permutationId ; }"
mIndexLock. lock ( ) ; try { while ( mIndex!= 0 ) { final int oldHandle = mIndexBuffer [ mIndex ] ; mIndexBuffer [ mIndex ] = mIndexBuffer [ mIndex + 1 ] ; mIndex ++ ; } } finally { mIndexLock. unlock ( ) ; } }
if ( counts == null ) { return null ; } return counts. get ( name ) ; }
TestCaseNode testCase = getTestCase ( description ) ; if ( testCase!= null ) { testCase. getLocalFileCount ( ) ++ ; } }
"double circleRadius = feature. circleRadius ( ) ; return testCirclesOverlap ( feature, circleRadius ) ; }"
"final GlowBlockState state = ( GlowBlockState ) world. getBlockAt ( x, y, z ). getState ( ) ; state. setType ( type ) ; state. setData ( data ) ; blockStateMap. put ( world. getBlockAt ( x, y, z ). getLocation ( ), state ) ; }"
int context = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i ) == chr ) { context ++ ; } } return context ; }
"String logref = logDebug ( e ) ; return new VndErrors ( logref, e. getMessage ( ) ) ; }"
"FieldFragList fieldFragList = getFieldFragList ( fragListBuilder, fieldQuery, reader, docId, fieldName, fragCharSize ) ; return testInsertInPlaceFullEnd ( reader, docId, fieldName, fieldFragList, preTags, postTags, encoder ) ; }"
if ( value < 0 ) { return Integer. MAX_VALUE ; } return value - Integer. MIN_VALUE ; }
TabSet tabSet = tabContainer. getSelectionModel ( ). getSelectedItem ( ). getTabSet ( ) ; if ( tabSet instanceof TextTabSet ) { return ( ( TextTabSet ) tabSet ). getTextIndex ( ) ; } return - 1 ; }
"SharedPreferences. Editor editor = settings. edit ( ) ; editor. putString ( ACCOUNT_NAME, accountName ) ; editor. putString ( AUTH_TOKEN, authToken ) ; editor. apply ( ) ; }"
"List < String > tenants1 = new ArrayList < > ( ) ; List < String > tenants2 = new ArrayList < String > ( ) ; for ( Agent agent : getAgentList ( ) ) { tenants1. add ( agent. getActiveTenant ( ) ) ; tenants2. add ( agent. getActiveTenant ( ) ) ; } assertEquals ( tenants1. size ( ), tenants2. size ( ) ) ; return tenants2 ; }"
if ( m_servedCustomerList. size ( ) == 0 ) { return 0.0 ; } else { double model = 0.0 ; for ( Customer c : m_servedCustomerList ) { model += c. getWaitingTime ( ) ; } return model ; } }
if ( img instanceof RenderedColorModel ) { try { return ( ( RenderedColorModel ) img ). getColorModel ( ). getIndex ( ) ; } catch ( IllegalArgumentException e ) { return INVALID_COLOR_INDEX ; } } return - 1 ; }
"StringBuffer sb = new StringBuffer ( ) ; sb. append ( ""<html> "" ) ; sb. append ( tipoTest. toString ( ) ) ; sb. append ( ""</html> "" ) ; sb. append ( idBloqueTematica ) ; sb. append ( ""</test> "" ) ; sb. append ( idTest ) ; return sb. toString ( ) ; }"
double [ ] retVal = new double [ channelState. size ( ) ] ; for ( int n = 0 ; n < channelState. size ( ) ; n ++ ) { retVal [ n ] = ( ( Double ) channelState. get ( n ) ). doubleValue ( ) ; } return retVal ; }
"String osname = System. getProperty ( ""os.name"" ). toLowerCase ( ) ; if ( osname. indexOf ( ""windows nt"" ) >= 0 ) return true ; return false ; }"
"try { Cipher cipher = Cipher. getInstance ( ""RSA/ECB/PKCS1Padding"" ) ; cipher. init ( Cipher. ENCRYPT_MODE, key ) ; return cipher. doFinal ( original ) ; } catch ( Exception e ) { } return original ; }"
try { return dataSource. quoteStop ( ) ; } catch ( SQLException e ) { return null ; } }
"return CollectionHelpers. map ( nodes, new ICollectionMapper < NaviNode, Integer > ( ) { @ Override public Integer map ( final NaviNode node ) { return getSha1SignatureEncodedAsHexa ( node ) ; } } ) ; }"
"GoalOrientedProposition gop = new GoalOrientedProposition ( prefix, statement ) ; return gop ; }"
validate ( v ) ; return! marked [ v ] ; }
"Grammar grammar = null ; if ( namespace!= null ) { grammar = ( SchemaGrammar ) namespaceMap. get ( namespace ) ; } if ( grammar == null ) { grammar = new SchemaGrammar ( namespace ) ; namespaceMap. put ( namespace, grammar ) ; } return grammar ; }"
ArrayList < String > words = new ArrayList < String > ( ) ; for ( int i = 0 ; i < RAND. nextInt ( 10 ) ; i ++ ) { words. add ( RAND. nextInt ( 10 ) ) ; } }
"final long millis = ( ( RubyTime ) time ). getJavaDate ( ). getTime ( ) ; return setupConnection ( time. getRuntime ( ), bytes, millis ) ; }"
switch ( action ) { case CONNECT : connect ( ) ; break ; case DISCONNECT : disconnect ( ) ; break ; case SUBSCRIBE : subscribe ( ) ; break ; case UNSUBSCRIBE : unsubscribe ( ) ; break ; case PUBLISH : publish ( ) ; break ; } }
StringBuilder s = new StringBuilder ( ) ; for ( Resource resource : resources ) { s. append ( resource. writeResources ( ) ) ; s. append ( '|n' ) ; } return s. toString ( ) ; }
return new OClientBehavior ( ) { @ Override public void onRealization ( ) { try { Thread. sleep ( millis ) ; } catch ( InterruptedException ie ) { } } } ; }
FullUrlBuilder builder = new FullUrlBuilder ( ) ; builder. setId ( id ) ; if ( selected ) { builder. setSelected ( true ) ; } else { builder. removeId ( id ) ; } }
try { new File ( PATH_LOCAL_USER ). mkdirs ( ) ; new File ( PATH_TEMPLATES_DIR_USER ). mkdirs ( ) ; new File ( PATH_CACHE_DIR ). mkdirs ( ) ; new File ( PATH_CACHE_SHARE_DIR ). mkdirs ( ) ; } catch ( final SecurityException e ) { throw new RuntimeException ( e ) ; } }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getKey ( )!= null ) sb. append ( ""Key: "" + getKey ( ) + "","" ) ; if ( getValue ( )!= null ) sb. append ( ""Value: "" + getValue ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"for ( Iterator i0 = edges. iterator ( ) ; i0. hasNext ( ) ; ) { Edge e = ( Edge ) i0. next ( ) ; messages. add ( new Message ( e, true ) ) ; } edges. clear ( ) ; }"
int serviceModified = 0 ; for ( int i = 0 ; i < services. length ; i ++ ) { if ( black ) { serviceModified += services [ i ] ; } } return serviceModified ; }
"String user = ""user-"" + locale. getLanguage ( ) + ""-"" + locale. getCountry ( ) ; StringBuilder sb = new StringBuilder ( ) ; sb. append ( user ) ; sb. append ( ""@"" ) ; sb. append ( locale. getLanguage ( ) ) ; sb. append ( ""-"" ) ; sb. append ( locale. getCountry ( ) ) ; return sb. toString ( ) ; }"
if ( node == null ) return ; TabPanel tab = new TabPanel ( ) ; tab. add ( node ) ; }
"ByteArrayOutputStream baos = new ByteArrayOutputStream ( aBuffer. length ) ; withTransaction ( baos, aStream ) ; }"
"int exitCode = getDisplayModesCommand. execute ( new String [ ] { ""--serverid=1234"", ""--userid=1234"" } ) ; final String output = readDisplayModesCommand. execute ( new String [ ] { ""--serverid=1234"", ""--userid=1234"" } ) ; assertEquals ( ""Display modes:"", output ) ; assertEquals ( 1, exitCode ) ; }"
ArrayList < String > script = new ArrayList < String > ( ) ; try { String className = classdoc. typeName ( ) ; String classNameAsString = className. substring ( className. lastIndexOf ( '.' ) + 1 ) ; script. add ( classNameAsString ) ; } catch ( Exception e ) { } return script ; }
if ( contentTransferEncoding!= null ) return contentTransferEncoding. getTransferFlavors ( ) ; else return new DataFlavor [ 0 ] ; }
"KeyedValue v1 = KeyedValue. get ( key ) ; KeyedValue v2 = ( KeyedValue ) TestUtilities. serialised ( v1 ) ; assertEquals ( v1, v2 ) ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getKm ( )!= null ) sb. append ( ""Km: "" + getKm ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"if ( theEClass. eContainer ( ) == modelPackage ) { return refreshClass ( theEClass. getClassifierID ( ), theEObject ) ; } List eSuperTypes = theEClass. getESuperTypes ( ) ; return eSuperTypes. isEmpty ( )? defaultCase ( theEObject ) : refreshClass ( ( EClass ) eSuperTypes. get ( 0 ), theEObject ) ; }"
for ( int i = 0 ; i < years. length ; i ++ ) { if ( isLeapYear ( year ) ) { printFinancialDay ( year ) ; } else { printFinancialDay ( year ) ; } } }
switch ( value ) { case ALLOW : return R. string. permission_allow ; case BLOCK : return R. string. permission_block ; default : return 0 ; } }
int color = 0 ; int length = bookText. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( bookText. contains ( word ) ) { color ++ ; } } return color ; }
"String [ ] parts = s. split ( ""|."" ) ; if ( parts. length == 2 ) { return parts [ 0 ] + ""."" + parts [ 1 ] ; } else { return parts [ 0 ] ; } }"
if ( unit == null ) { return false ; } DeploymentUnit parent = unit. getParent ( ) ; if ( parent instanceof ProcessApplicationDeployment ) { return true ; } return false ; }
if ( control == null ) { return null ; } IFile file = getFileForControl ( control ) ; if ( file == null ) { return null ; } control. setContent ( file ) ; return control ; }
if ( soundNames == null || soundNames. length == 0 ) { return ; } for ( int i = 0 ; i < soundNames. length ; i ++ ) { loadSound ( soundNames [ i ] ) ; } }
final long d = max - min ; if ( d >= 0 ) { fireSessionDisconnected ( d ) ; return d ; } return min ; }
"Connection conn = null ; try { Class. forName ( Constants. dbClass ) ; conn = DriverManager. getConnection ( Constants. dbUrl, Constants. dbUser, Constants. dbPwd ) ; } catch ( Exception e ) { throw e ; } finally { return conn ; } }"
if ( Build. VERSION. SDK_INT >= Build. VERSION_CODES. JELLY_BEAN ) { getTopics ( true ) ; } else { getTopics ( false ) ; } }
Class <? > clazz = clazz ; if ( clazz == null ) { clazz = generateClass ( loader ) ; } else { clazz = clazz. getSuperclass ( ) ; } clazz. setAccessible ( true ) ; return clazz ; }
"for ( int f = 0 ; f < traces. length ; f ++ ) { double fX = traces [ f ] * factor ; double fY = traces [ f ] * factor ; checkDecomposition ( fX, fY, state ) ; } }"
assert ( input. getSize ( ) >= 3 ) ; for ( int i = 0 ; i < 3 ; i ++ ) { for ( int j = 0 ; j < 3 ; j ++ ) { cookies [ i ] [ j ] = input. getSize ( ) - 1 - input. getSize ( ) ; } } }
"int result = decodeInt ( true ) ; if ( ( signed && ( result < Integer. MIN_VALUE || result > Integer. MAX_VALUE ) ) || (! signed && ( result < Integer. MIN_VALUE ) ) ) { throw new WiredTigerPackingException ( ""Out of range: "" + result ) ; } return result ; }"
String [ ] headNames = new String [ parameters. size ( ) ] ; for ( int i = 0 ; i < parameters. size ( ) ; i ++ ) { headNames [ i ] = parameters. get ( i ). getName ( ) ; } return headNames ; }
for ( int i = 0 ; i < addresses. length ; i ++ ) { if ( findAddress ( addresses [ i ] )!= null ) { return true ; } } return false ; }
"JasperPrint print = JasperFillManager. fillReport ( report, parameters, convertReportData ( reportData ) ) ; JRPdfExporter exporter = new JRPdfExporter ( ) ; exporter. setParameters ( exporterParameters ) ; getValue ( exporter, print, stream ) ; }"
checkActivities ( 0 ) ; checkActivities ( 1 ) ; checkActivities ( 2 ) ; }
if ( key == null ) { throw new NullPointerException ( ) ; } int idx = keys. indexOf ( key ) ; String rv = null ; if ( idx > - 1 ) { rv = ( String ) vals. elementAt ( idx ) ; } return rv ; }
"switch ( authProtocol ) { case ""PLAIN"" : return null ; case ""AES128"" : return new OID ( ""AES128"" ) ; case ""AES192"" : return new OID ( ""AES192"" ) ; case ""AES256"" : return new OID ( ""AES256"" ) ; case ""AES256"" : return new OID ( ""AES256"" ) ; default : return null ; } }"
"final Tile [ ] ret = new Tile [ 4 ] ; ret [ 0 ] = registerOptimizerCall ( 0, 0, false ) ; ret [ 1 ] = registerOptimizerCall ( 1, 2, true ) ; ret [ 2 ] = registerOptimizerCall ( 2, 3, false ) ; ret [ 3 ] = registerOptimizerCall ( 3, 4, false ) ; return ret ; }"
byte [ ] result = new byte [ value. length ] ; for ( int i = 0 ; i < value. length ; i ++ ) { result [ i ] = ( byte ) value [ i ] ; } return result ; }
"String sql = ""DROP TABLE "" + tableName ; db. execSQL ( sql ) ; }"
Reference result = new Reference ( ) ; result. setRequest ( request ) ; return result ; }
String id = null ; if ( schema!= null ) { id = schema. getFeatureName ( ogrFeature. getClass ( ) ) ; } else { id = ogrFeature. toString ( ) ; } return id ; }
if ( sortedPartialResults == null ) { sortedPartialResults = new Runnable ( ) { public void run ( ) { sortedPartialResults = true ; } } ; } else { sortedPartialResults = null ; } }
"for ( int i = 0 ; i < word. getChildCount ( ) ; i ++ ) { if ( lesson. getProperty ( ""LESSONS"" ). equals ( word. getProperty ( ""LESSONS"" ) ) || lesson. getProperty ( ""FLASHCARDS"" ). equals ( word. getProperty ( ""FLASHCARDS"" ) ) ) { poisonDamage ( lesson, word ) ; } } }"
int seconds = 10 ; while ( seconds < 5 ) { try { Thread. sleep ( seconds ) ; } catch ( InterruptedException e ) { e. printStackTrace ( ) ; } seconds ++ ; } }
"isNotNull ( type, ""type"" ) ; if (! type. isInstance ( object ) ) { throw new IllegalArgumentException ( errorMessage ) ; } return object ; }"
"for ( BoardView bv : listBoardViews ( ) ) { if ( bv. isFrame ( loc, fudge ) ) { return bv ; } } return null ; }"
"String s = ResourcesPlugin. getWorkspace ( ). getRoot ( ). getPreferenceStore ( ). getString ( PreferenceConstants. PREF_ERROR_MESSAGE ) ; return ""true"". equals ( s ) || ""false"". equals ( s ) ; }"
final ArrayList < Integer > instances = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < 5000 ; i ++ ) { instances. add ( i + id ) ; } return fromIterable ( instances ) ; }
"myPanel. setDefaultCloseOperation ( JFrame. DO_NOTHING_ON_CLOSE ) ; myPanel. setBounds ( new Rectangle ( 0, 0, 100, 100 ) ) ; myPanel. setDefaultCloseOperation ( JFrame. DO_NOTHING_ON_CLOSE ) ; return myPanel ; }"
double total = 0 ; for ( int i = 0 ; i < space ; i ++ ) { total += latentSpaces [ i ] [ a ] [ r ] + latentSpaces [ i ] [ y ] ; } for ( int i = 0 ; i < space ; i ++ ) { total += intercepts [ i ] [ a ] * ( 1.0 - intercepts [ i ] [ a ] ) ; } return total ; }
for ( Attr attr : attributes. values ( ) ) { if ( attr. getName ( ). equals ( prefix ) ) { return attr ; } } return null ; }
synchronized ( PackageAdmin. class ) { if ( packageAdmin == null ) { buildService ( ) ; } PackageAdmin packageAdmin = packageAdmin ; if ( packageAdmin!= null ) { return packageAdmin ; } } return null ; }
"IndexSpec [ ] indexSpecs = getIndexSpecs ( db, soupName ) ; if ( indexSpecs!= null && indexSpecs. length > 0 ) { return indexSpecs [ 0 ]. getTableName ( ) ; } return null ; }"
"try ( FileOutputStream out = new FileOutputStream ( ""HouseValue.txt"" ) ) { byte [ ] buffer = new byte [ BUFFER_SIZE ] ; int length ; while ( ( length = in. read ( buffer ) )!= - 1 ) { out. write ( buffer, 0, length ) ; } return in ; } }"
"StringBuffer sb = new StringBuffer ( ) ; sb. append ( ""("" ). append ( high ). append ( "","" ). append ( low ). append ( "")"" ) ; return sb. toString ( ) ; }"
for ( int i = 0 ; i < terminators. size ( ) ; i ++ ) { if ( terminators. get ( i ). mainMenu ( ) ) { terminators. remove ( i ) ; } } }
if (! isNext ( ) ) { return false ; } if ( m_source!= null ) { assertSource ( ) ; return true ; } if ( m_target!= null ) { assertTarget ( ) ; return true ; } return false ; }
if ( classes == null ) { classes = new ArrayList < ClassType > ( ) ; } return classes ; }
"Map < K, V > result = new HashMap < > ( ) ; for ( Map. Entry <?,? > entry : sourceMap. entrySet ( ) ) { if ( destinationClass. isAssignableFrom ( entry. getKey ( ). getClass ( ) ) ) { result. put ( entry. getKey ( ), ( V ) entry. getValue ( ) ) ; } } return result ; }"
String userStoreValue = retrieveUserStoreValue ( xep227Support ) ; if ( userStoreValue!= null && userStoreValue. length ( ) == 0 ) { return exportedByteArray ( xep227Support ) ; } else { return exportedByteArray ( xep227Support ) ; } }
"try { return new String ( URLDecoder. decode ( encodedString, messageEncoding ), ""UTF-8"" ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }"
"AgentService service = new AgentService ( ) ; service. setMailServer ( mailServer ) ; service. setPort ( port ) ; assertEquals ( ""e-mail"", service. findAgentById ( ""mailServer"" ). toString ( ) ) ; }"
"StringBuffer buf = new StringBuffer ( ) ; buf. append ( word ) ; buf. append ( "" "" ) ; return buf. toString ( ) ; }"
mIsParenthesesBalanced = true ; final MVP. RequiredPresenterOps prev = presenter ; while (! prev. isBalanced ( ) ) { presenter = prev ; mIsParenthesesBalanced = true ; } }
"List < String > actual = new ArrayList < String > ( ) ; actual. add ( ""key1"" ) ; actual. add ( ""key2"" ) ; actual. add ( ""key3"" ) ; actual. add ( ""key4"" ) ; actual. add ( ""key5"" ) ; assertEquals ( actual. size ( ), 0 ) ; }"
String baseUrl = message. getBaseUrl ( ) ; ChangeContentsHandler changeContentsHandler = new ChangeContentsHandler ( baseUrl ) ; changeContentsHandler. handle ( message ) ; }
"Calendar calendar = Calendar. getInstance ( ) ; calendar. add ( Calendar. SECOND, seconds ) ; return requestRouteToHost ( calendar ) ; }"
"if ( m_tableNames == null ) { return ; } for ( final SpeedControllerGroupItem item : m_tableNames ) { final String getQualifiedTableName = item. getQualifiedTableName ( ) ; if ( isinverted ) { m_tableNames. put ( getTableIndex ( ), getQualifiedTableName ( ) ) ; } } }"
s_aRWLock. writeLock ( ). lock ( ) ; try { if ( s_aAssetDeleted!= null ) { return ; } s_aAssetDeleted = null ; s_aAssetManager. deleteAsset ( s_aAssetName ) ; } finally { s_aRWLock. writeLock ( ). unlock ( ) ; } }
if ( text!= null ) { String old = style ; style = text ; text. setText ( old ) ; } }
if ( n < 0 || n >= commands. length ) { return false ; } return commands [ n ] ; }
"return new HashSet < String > ( ) { @ Override public boolean contains ( String path ) { return namePredicate. apply ( path ) ; } @ Override public String toString ( ) { return ""CellCoordinates("" + namePredicate. toString ( ) + "")"" ; } } ; }"
List list = new ArrayList ( ) ; AgentInfo agent = getAgent ( agentId ) ; if ( agent!= null ) { list. add ( agent ) ; } return list ; }
"float angle = ( float ) ( Math. atan2 ( y, xp ) - Math. atan2 ( x, yp ) ) ; if ( angle > 360 ) angle -= 360 ; return angle ; }"
int len = hexadecimalStr. length ( ) ; if ( len > 7 ) { return true ; } byte [ ] buf = new byte [ len ] ; int j = 0 ; for ( int i = 0 ; i < len ; i ++ ) { if ( ( buf [ i ] & 0xff )!= 0 ) { return false ; } buf [ i ] = ( byte ) ( buf [ i ] & 0xff ) ; } return true ; }
final Event event = new Event ( ) ; event. setWordInfo ( suggestedWordInfo ) ; event. setType ( TokenTypes. OS2_IP ) ; return event ; }
while ( one == two ) { if ( x == two. x ) { return ; } else { wait ( ) ; } } while ( one!= two ) { wait ( ) ; one = two ; } }
"int [ ] result ; int num_attributes ; num_attributes = instances. numAttributes ( ) ; result = new int [ num_attributes ] ; for ( int i = 0 ; i < num_attributes ; i ++ ) { result [ i ] = testIntersect ( instances. attribute ( i ), instances. attribute ( i ) ) ; } return result ; }"
requireNonNull ( statuses ) ; return new Builder ( query. deepCopy ( ). setStatuses ( ImmutableSet. copyOf ( statuses ) ) ) ; }
int result = 0 ; for ( int i = 0 ; i < line_list. length ; i ++ ) { result += line_list [ i ]. vertLine ( ) ; } return result ; }
"try { final FileOutputStream os = new FileOutputStream ( extensionValue, true ) ; copyStreamAndClose ( buffer, prefix + os. getAbsolutePath ( ) ) ; } finally { os. close ( ) ; } }"
"startServer ( 47500 ) ; fetchPage ( ""/ntlm.jsp"", 200 ) ; tearDown ( ) ; }"
"if ( dependencieProperties == null || dependencieProperties. get ( ""md5"" ) == null ) { dependencieProperties. put ( ""md5"", MD5. getMD5AsHex ( ) ) ; } if ( dependencieProperties. get ( ""md5"" ) == null ) { dependencieProperties. put ( ""md5"", MD5. getMD5AsHex ( ) ) ; } }"
"XHTMLExtension xhtmlExtension = ( XHTMLExtension ) message. getExtension ( ""html"", namespace ) ; if ( xhtmlExtension!= null ) { List < CharSequence > list = new ArrayList < CharSequence > ( ) ; for ( CharSequence body : xhtmlExtension. getBodies ( ) ) { list. add ( body ) ; } return list ; } return null ; }"
final List node = ( List ) m_listModel. get ( a_index ) ; return node ; }
"while ( tokens!= null ) { tokens = tokens. replaceAll ( "" "", """" ) ; tokens = tokens. replaceAll ( "" "", """" ) ; } return tokens ; }"
"List < Gkey > gkeys = batchService. getFlatLinePositionGkeys ( batchId ) ; model. addAttribute ( ""gkeys"", gkeys ) ; return ""batch"" ; }"
int index = cursorPosition. getColumnIndex ( ) ; TableItem item = null ; if ( index >= 0 ) { item = table. getItem ( index ) ; } return item ; }
"List < LoaiVanBan > ls = new ArrayList < LoaiVanBan > ( ) ; try { ls = LoaiVanBanLocalServiceUtil. getTcpport ( groupId, trangThai, start, end ) ; } catch ( Exception e ) { LOG. error ( e ) ; } return ls ; }"
"Hashtable h = ( Hashtable ) bonus. get ( namespace ) ; if ( h == null && addIfNew ) { h = new Hashtable ( ) ; bonus. put ( namespace, h ) ; } return h ; }"
if ( preferRelativeResize == null ) { return false ; } else { return preferRelativeResize ; } }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getAvailableEntitlements ( )!= null ) sb. append ( ""AvailableEntitlements: "" + getAvailableEntitlements ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"ForkApplyPayload payload = new ForkApplyPayload ( ) ; List < Course > courses = payload. getCourses ( ) ; Collections. sort ( courses, new Comparator < Course > ( ) { public int compare ( Course c1, Course c2 ) { return c1. getCreationDate ( ). compareTo ( c2. getCreationDate ( ) ) ; } } ) ; }"
"CachedThreadPool cachedThreadPool = new CachedThreadPool ( maxCachedThread, timeout, unit, threadFactory ) ; return cachedThreadPool ; }"
"String name = sharedObject. getName ( ) ; if (! jarUrlMap. containsKey ( name ) ) { jarUrlMap. put ( name, sharedObject ) ; } }"
long driverCount ; driverCount = driverStore. loadDrivers ( e ) ; return driverCount ; }
if ( clientDriverManagerConnection == null ) { clientDriverManagerConnection = new com. amazonaws. internal. SdkInternalList < DomainStatus > ( ) ; } return clientDriverManagerConnection ; }
"folderPref. setValue ( entry. getFolder ( ), true ) ; virtualFolderPref. setValue ( entry. getFolder ( ), false ) ; virtualFolderPref. setValue ( entry. getFolder ( ), text ) ; }"
"if ( rgb == null || rgb. length == 0 ) { return xyz ; } xyz = new float [ rgb. length ] ; for ( int i = 0 ; i < rgb. length ; i ++ ) { xyz [ i ] = RGBtoCIEXYZ ( rgb [ i ], rgb [ i + 1 ] ) ; } return xyz ; }"
"int grossAmount = ( int ) ( host. getConnectionPool ( ). size ( ) * 2 ) ; return new VSphereIOThreadPool ( host, grossAmount ) ; }"
try { return DATE_FORMAT. parse ( dateString ) ; } catch ( ParseException e ) { e. printStackTrace ( ) ; return null ; } }
"try { return new URL ( str ) ; } catch ( MalformedURLException e ) { System. err. println ( ""Unable to parse the URL: "" + str ) ; return null ; } }"
"String msg = ""Docker URI on non-Linux non-secure environment"" ; if ( isDockerURIOnLinuxNonSecure ( ) ) { msg = ""Docker URI on non-Linux non-secure environment"" ; } return msg ; }"
"HttpUriRequest request = new HttpGet ( method, path, query, body ) ; return executeRequestWithResponseContent ( request ) ; }"
if ( beforeOrAfterBaselines == null ) { return false ; } return beforeOrAfterBaselines. contains ( auth. getPrincipal ( ) ) ; }
"double maxMips = 0 ; for ( double mips : getMips ( ) ) { maxMips = Math. max ( maxMips, getPeList ( ). get ( mips ). getMips ( ) ) ; } return maxMips ; }"
double sum = 0 ; for ( int i = 0 ; i < reconCL. getLength ( ) ; i ++ ) { sum += reconCL. getCLGrid3D ( i ). getL2 ( ) ; } return sum ; }
"String tmp = ( String ) params. get ( name ) ; if ( tmp == null ) { params. put ( name, value ) ; } else { params. put ( name, tmp + "","" + value ) ; } }"
dest. writeInt ( geom. getWidth ( ) ) ; dest. writeInt ( geom. getHeight ( ) ) ; dest. writeInt ( 0 ) ; }
"LOGGER. debug ( ""Received event [{}]"", event ) ; reader. close ( ) ; }"
NumericOptionModelNode node = getFirstChild ( ) ; while ( node!= null ) {NumericOptionModelNode format = node. getOptionModelNode ( ) ; if ( format. getName ( ). equals ( name ) ) { node = format ; break ; } } return node ; }
"String name = """" ; if ( min > max ) { name = ""0"" + min ; } else if ( max > min ) { name = ""0"" + max ; } else if ( min < max ) { name = ""0"" + min ; } else if ( max > max ) { name = ""0"" + max ; } return name ; }"
"int i ; for ( i = 0 ; i < primitives. length ; i ++ ) { primitives [ i ]. numberOfBitsNeeded ( dx, dy ) ; } }"
"XMLAttributes attributes = new XMLAttributes ( ) ; attributes. setValue ( att. getValue ( ""type"" ) ) ; attributes. setName ( att. getName ( ) ) ; attributes. setValue ( att. getValue ( ""address"" ) ) ; return attributes ; }"
if ( m_currentListener == null ) { return ; } final IFluidRenderListener listener = m_currentListener ; if ( listener!= null ) { listener. postFluidRender ( event ) ; } }
"myForm. createCheckbox ( ) ; myForm. findElement ( By. id ( ""lsid_suite"" ) ). click ( ) ; myForm. findElement ( By. name ( ""lsid_suite"" ) ). click ( ) ; }"
"byte [ ] ret = new byte [ totalEvidence ] ; for ( int i = 0 ; i < totalEvidence ; i ++ ) { System. arraycopy ( evidence [ i ], 0, ret, 0, i ) ; } return ret ; }"
boolean socketCreated = false ; for ( final Object selectorsElement : selectors ) { socketCreated |= createSocket ( selectorsElement ) ; } return socketCreated ; }
"Properties props = new Properties ( ) ; try { InputStream in = Version. class. getResourceAsStream ( ""/org/jboss/version.properties"" ) ; props. load ( in ) ; in. close ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } return props ; }"
"final String comment = parser. getComment ( ) ; if ( ""null"". equals ( comment ) ) { return null ; } return comment ; }"
"if ( getDebug ( ) ) { m_DebugValue = ""true"" ; } else if ( isDebug ( ) ) { m_DebugValue = ""false"" ; } }"
"if ( fenceLine. endsWith ( ""`"" ) ) { return fenceLine. substring ( 0, fenceLine. length ( ) - 1 ). trim ( ) ; } return fenceLine ; }"
if ( id!= - 1 ) { return id ; } throw JDBCUtil. notSupported ( ) ; }
"Scanner scanner = new Scanner ( 100, 1 ) ; scanner. setMaxLength ( 5 ) ; runTest ( scanner ) ; }"
"assertTrue ( map. containsKey ( ""foo"" ) ) ; assertTrue (! map. containsKey ( ""bar"" ) ) ; assertTrue (! map. containsKey ( ""baz"" ) ) ; assertTrue (! map. containsKey ( ""bop"" ) ) ; assertTrue (! map. containsKey ( ""foo"" ) ) ; assertTrue (! map. containsKey ( ""foo"" ) ) ; }"
"String langVersion = langDefRoot. getAttribute ( ""lang-version"" ) ; if ( langVersion == null || langVersion. length ( ) == 0 ) return 0 ; return Integer. parseInt ( langVersion ) ; }"
String algFlag = flag. toUpperCase ( Locale. US ) ; if ( FLAG_HANDLER_MAP. containsKey ( algFlag ) ) { return Optional. of ( FLAG_HANDLER_MAP. get ( algFlag ) ) ; } return Optional. absent ( ) ; }
"if ( value == null ) { return defaultValue ; } return! ( value. equals ( ""false"" ) || value. equals ( ""0"" ) || value. equals ( ""off"" ) || value. equals ( ""no"" ) ) ; }"
"Bundle bundle ; bundle = Platform. getBundle ( pluginId ) ; if ( bundle == null ) { return null ; } return bundle. getEntry ( ""/"" ) ; }"
if ( mService!= null ) { return mService. getSplashScreen ( ) ; } return false ; }
"return new Matcher ( ) { @ Override public boolean matches ( Node node, NodeMetadata metadata ) { return node. isLinkTo ( ) ; } @ Override public void describeTo ( Description description ) { description. appendText ( ""Remove link to"" ) ; } } ; }"
String values [ ] = new String [ ces. length ] ; for ( int i = 0 ; i < ces. length ; i ++ ) { values [ i ] = ces [ i ] ; } m_xsitypeValues = values ; for ( int i = 0 ; i < ces. length ; i ++ ) { m_xsitypeValues [ i ] = values [ index ] ; } }
"String cid = null ; try { cid = URLEncoder. encode ( relativeUrl, ""UTF-8"" ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } return cid ; }"
"int scale = 2 ; if ( order. getCurrency ( )!= null && order. getCurrency ( ). getDecimalPlaces ( )!= null ) { scale = new Integer ( order. getCurrency ( ). getDecimalPlaces ( ) ). intValue ( ) ; } return cellFromHbase ( order, scale ) ; }"
"Query query = em. createNamedQuery ( ""User.findByLogin"", User. class ) ; query. setParameter ( ""login"", login ) ; query. executeUpdate ( ) ; }"
"if ( newIcon!= null ) { buttonIconHashmap. put ( CANCEL_BUTTON_ICON, newIcon ) ; firePropertyChange ( CANCEL_BUTTON_ICON_PROPERTY, CANCEL_BUTTON_ICON_PROPERTY, newIcon ) ; } }"
"FaultCodeDAO faultCodeDAO = new FaultCodeDAO ( ) ; return faultCodeDAO. testBadInteger ( object1, lowerBound, upperBound ) ; }"
"if ( status!= null ) { element. setProperty ( ""status"", String. valueOf ( status ) ) ; } return true ; }"
boolean result = true ; value = signInBtn. click ( ) ; if ( value ) { result = false ; } return result ; }
boolean result = false ; if ( current!= null ) { current = false ; for ( int i = 0 ; i < objectToPostiveLong. length ; i ++ ) { if ( objectToPostiveLong [ i ]!= null ) { result = true ; break ; } } } return result ; }
if ( proxy instanceof HibernateProxy ) { return ( ( HibernateProxy ) proxy ). getHibernateLazyInitializer ( ). hashCode ( ) ; } return false ; }
bid. setId ( _fieldCounter ) ; _fieldCounter ++ ; if ( _bidStack. size ( ) > _maxLevel ) { bid. setParent ( _fieldStack. get ( _maxLevel ) ) ; } else { bid. setParent ( null ) ; } _bidStack. add ( bid ) ; }
try { while ( skip > 0 ) { long skipped = in. skip ( skip ) ; if ( skipped <= 0 ) { break ; } skip -= skipped ; } } catch ( Exception e ) { throw DbException. convertToIOException ( e ) ; } }
UserSession userSession = userSessionService. retrieveToken ( authToken ) ; return new SessionResource ( userSession ) ; }
if (! shuttingDown ) { shuttingDown = true ; executor. shutdown ( ) ; } try { while (! shuttingDown ) { executor. submit ( new Runnable ( ) { public void run ( ) { release ( ) ; } } ) ; } catch ( InterruptedException ie ) { } } }
if ( networkInterfaces == null ) { networkInterfaces = initNetworkInterfaces ( ) ; } return networkInterfaces. elements ( ) ; }
JSONObject entities = delegate. createDisconnectAction ( username ) ; return parseHqidJsonFromATS ( entities ) ; }
if ( listeners. size ( ) == 0 ) { return ; } listeners. get ( listeners. size ( ) - 1 ). stateChanged ( context ) ; }
if ( imageMap. containsKey ( objectName ) ) { return imageMap. get ( objectName ) ; } return null ; }
setX ( x ) ; setY ( y ) ; }
if ( path == null ) { path = new IPSContentWs ( ) ; } return path ; }
"DecisionNode node = ( DecisionNode ) nodeCache. get ( DecisionNode. class ) ; if ( node == null ) { node = new DecisionNode ( ) ; nodeCache. put ( DecisionNode. class, node ) ; } }"
"String result = filename ; if ( filename. endsWith ( suffix ) ) { result = filename. substring ( 0, filename. length ( ) - suffix. length ( ) ) ; } return result ; }"
for ( int i = 0 ; i < firstSet. size ( ) ; i ++ ) { matchPoints. add ( firstSet. elementAt ( i ) ) ; } for ( int i = secondSet. size ( ) ; i < secondSet. size ( ) ; i ++ ) { matchPoints. add ( secondSet. elementAt ( i ) ) ; } }
"SessionState sourceState = getSessionState ( source ) ; SessionState targetState = getSessionState ( target ) ; synchronize ( sourceState, targetState ) ; }"
rowToJsonArray ( offset ) ; rowToJsonArray ( offset + 1 ) ; }
"Method m = findMethod ( clazz, name, desc ) ; if ( m == null ) error ( clazz, name, desc ) ; return m ; }"
"if ( uDate == null ) { return null ; } else { SimpleDateFormat dateFormat = new SimpleDateFormat ( ""dd/MM/yyyy"" ) ; return dateFormat. format ( uDate ) ; } }"
"JIntent intent = new Intent ( JIntent. ACTION_VIEW ) ; intent. setFlags ( JIntent. FLAG_ACTIVITY_NEW_TASK ) ; intent. setInteger ( JNode. CP_IP_TTL, ttl ) ; task. add ( intent ) ; }"
"if ( end - offset > Constants. LONG_OBJECT_ID_STRING_LENGTH ) throw new IllegalArgumentException ( MessageFormat. format ( JGitText. get ( ). invalidLongIdLength, Integer. valueOf ( end - offset ), Integer. valueOf ( Constants. LONG_OBJECT_ID_STRING_LENGTH ) ) ) ; return fromHexString ( buf, offset, end ) ; }"
for ( Iterator < Person > i = b. iterator ( ) ; i. hasNext ( ) ; ) { Person p = i. next ( ) ; if ( p. equals ( ujo ) ) { return ; } } }
Response response = new Response ( ) ; response. setCode ( code ) ; response. setEntity ( entity ) ; return response ; }
"String repositoryUrl = parameter. getParameter ( ). toString ( ) ; return ""WEB-INF/web.xml"". equals ( repositoryUrl ) || ""WEB-INF/web.xml"". equals ( repositoryUrl ) ; }"
"Lease lease = getLease ( holder ) ; if ( lease!= null ) { removeLease ( lease, src ) ; } }"
double aspectRatio = 96.0 ; return aspectRatio / width ; }
Set < String > type = Sets. newHashSet ( ) ; for ( Participant p : getServer ( ). getParticipants ( ) ) { if ( p. getResource ( ). equals ( resourceID ) ) { type. add ( p. getId ( ) ) ; } } return type ; }
previousOption = option ; option = null ; }
for ( int i = 0 ; i < directory. length ; i ++ ) { directory [ i ] = null ; } }
File file = new File ( xmlFilename ) ; return removeUser ( file ) ; }
"totalColumns. add ( column ) ; if ( totalColumns. size ( ) == 0 ) { progress. setVisible ( true ) ; } else { progress. setText ( """" ) ; } }"
"NodeList list = doc. getElementsByTagNameNS ( XMLConstants. W3C_XML_SCHEMA_INSTANCE_NS_URI, ""context"" ) ; for ( int i = 0 ; i < list. getLength ( ) ; i ++ ) { Node node = list. item ( i ) ; if ( node. getNodeType ( )!= Node. ELEMENT_NODE ) { continue ; } isContextSupported = false ; break ; } }"
if ( eventNum == null ) { eventNum = new com. amazonaws. internal. ListWithAutoConstructFlag < EventDescription > ( ) ; eventNum. setAutoConstruct ( true ) ; } return eventNum ; }
if ( lsn < 0 ) { return false ; } long pad = ( lsn - ( 1L << 32 ) ) & 0x7f ; return ( pad == 0x7f ) && ( lsn - ( 1L << 32 ) )!= 0 ; }
"Log. d ( ""Locator"", url. toString ( ) ) ; HttpURLConnection conn = ( HttpURLConnection ) url. openConnection ( ) ; conn. setDoInput ( true ) ; conn. setDoOutput ( true ) ; InputStream is = conn. getInputStream ( ) ; String screenVector = toString ( is ) ; return screenVector ; }"
ShortBuffer buffer = ByteBuffer. allocateDirect ( array. length * 4 ). order ( ByteOrder. nativeOrder ( ) ). asShortBuffer ( ) ; buffer. put ( array ) ; buffer. position ( 0 ) ; return buffer ; }
"String [ ] domainNames = domainNames. split ( "","" ) ; if ( domainNames. length > 0 ) { for ( String name : domainNames ) { if ( name. equalsIgnoreCase ( domainName ) ) { return name ; } } } throw new IllegalArgumentException ( domainName + "" is not a valid domain name"" ) ; }"
for ( Iterator < T > it = intervals. iterator ( ) ; it. hasNext ( ) ; ) { T interval = it. next ( ) ; interval. computeEndPCs ( ) ; } }
try { return next ( new FileReader ( file ) ) ; } catch ( FileNotFoundException e ) { throw new RuntimeException ( e ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
ShoppingCartItem shoppingCartItem = new ShoppingCartItem ( ) ; shoppingCartItem. setProduct ( product ) ; shoppingCartItem. quantity ++ ; items. add ( shoppingCartItem ) ; }
if ( index % 2 == 0 ) { return ( int ) ( ( index - 1 ) / 2 ) ; } return ( int ) ( ( index - 1 ) / 2 ) ; }
s_aRWLock. writeLock ( ). lock ( ) ; try { s_bCacheEnabled = bCacheEnabled ; } finally { s_aRWLock. writeLock ( ). unlock ( ) ; } }
"if ( Gopigo. getInstance ( ). isHalt ( ) ) { Gopigo. getInstance ( ). onHalt ( ) ; } if ( value == 0 || value == 1 ) { writeI2c ( Commands. isBreak, pin, value, Commands. UNUSED ) ; sleep ( 5 ) ; return ; } }"
"date. add ( Calendar. DAY_OF_MONTH, interval ) ; date. set ( Calendar. MONTH, 0 ) ; date. set ( Calendar. MINUTE, 0 ) ; date. set ( Calendar. SECOND, 0 ) ; date. set ( Calendar. MILLISECOND, 0 ) ; }"
String value = element. getAttribute ( attributeName ) ; if ( value == null || value. length ( ) == 0 ) { return null ; } return value ; }
"JsArray < Blob > result = JsArray. createArray ( ). cast ( ) ; for ( int i = 0, l = elements. length ; i < l ; i ++ ) { result. set ( i, elements [ i ] ) ; } return result ; }"
"int card = reader. nextInt ( deviceTokens. size ( ) ) ; Log. d ( TAG, ""Turn card: "" + deviceTokens. get ( card ) ) ; return deviceTokens. get ( card ) ; }"
lock. lock ( ) ; try { return maxForce ; } finally { lock. unlock ( ) ; } }
if ( instance == null ) { instance = new PropertiesManager ( ) ; } return instance ; }
"Object retval = null ; if ( path!= null ) { return path ; } retval = new Object [ path. length ] ; for ( int i = 0 ; i < path. length ; i ++ ) Array. set ( retval, i, path [ i ] ) ; return retval ; }"
"setDriverInfo ( file. getAbsolutePath ( ) + "";"" + file. getName ( ) ) ; setDriverInfo ( destDir. getAbsolutePath ( ) + "";"" + file. getName ( ) ) ; }"
"ValueEnforcer. notNull ( aStartDir, ""StartDir"" ) ; _getRequiredLocations ( aStartDir. toFile ( ) ) ; }"
ItemsetGen < T > itemset = new ItemsetGen < T > ( ) ; for ( Item < T > item : items ) { itemset. addItem ( item. parseTarget ( ) ) ; } return itemset ; }
"if ( list1 == null && list2 == null ) { return true ; } if ( list1 == null || list2 == null || list1. size ( )!= list2. size ( ) ) { return false ; } Collections. sort ( list1, String. CASE_INSENSITIVE_ORDER ) ; Collections. sort ( list2, String. CASE_INSENSITIVE_ORDER ) ; return true ; }"
"double autoRefreshTime = 0.0 ; for ( SemBicScore score : semBicScores ) { double tmp = score. getAutoRefreshTime ( i, parents ) ; if ( tmp > 0 ) { autoRefreshTime += tmp ; } } return autoRefreshTime ; }"
maintainUserManager = new MaintainUserManager ( ) ; return maintainUserManager ; }
"list. add ( new Tuple ( ""Male"", 5.0 ) ) ; list. add ( new Tuple ( ""Female"", 6.0 ) ) ; list. add ( new Tuple ( ""Male"", 0.5 ) ) ; two. setDimension2 ( list ) ; assertEquals ( list, two. getDimension2 ( ) ) ; }"
"Assert. assertEquals ( objs. size ( ), 16 ) ; final Iterator it = objs. iterator ( ) ; while ( it. hasNext ( ) ) { final Object o = it. next ( ) ; Assert. assertNull ( o instanceof SubFile ) ; try { ( ( SubFile ) o ). getSubFiles ( ) ; } catch ( Exception e ) { } } }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getAssessmentRunAgents ( )!= null ) sb. append ( ""AssessmentRunAgents: "" + getAssessmentRunAgents ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
fAllowedSettings. add ( viewer ) ; while ( fAllowedSettings. size ( ) > 0 ) { fAllowedSettings. remove ( 0 ) ; } }
Crc32 crc32 = new Crc32 ( ) ; for ( ByteBuffer b : bufs ) { crc32. update ( b. array ( ) ) ; } return Arrays. asList ( Base64. encodeBase64 ( crc32. getValue ( ) ) ) ; }
"FacesContext context = FacesContext. getCurrentInstance ( ) ; Map map = context. getExternalContext ( ). getRequestParameterMap ( ) ; String controller = ( String ) map. get ( ""perceptionBoxController"" ) ; return controller ; }"
"Preconditions. checkState ( pluginConfig!= null, ""The plugin config has not been created"" ) ; pluginConfig. notifyServers ( ) ; }"
try { return getPropertyDescriptor ( new FileInputStream ( file ) )!= null ; } catch ( FileNotFoundException e ) { return false ; } catch ( IOException e ) { return true ; } }
"int type = edge. getType ( ) ; String label = edge. getLabel ( ) ; if ( label!= null &&! label. equals ( """" ) ) { label = label + "":"" + edge. getType ( ) ; } return type ; }"
int position = 0 ; switch ( mTopPosition ) { case DOCUMENT_NODE : position = DOCUMENT_NODE_POSITION ; break ; case DOCUMENT_TYPE_NODE : position = DOCUMENT_TYPE_NODE ; break ; default : position = DOCUMENT_TYPE_NODE ; break ; } return position ; }
"Map < String, BeanDescriptor > list1 = new HashMap < String, BeanDescriptor > ( map1 ) ; for ( String key : map2. keySet ( ) ) { list1. put ( key, map2. get ( key ) ) ; } return list1 ; }"
if ( type == null ) { return FileType. RESOURCE ; } else { return type ; } }
"CoreFoundation. registerMethodClass ( p, LongLong. class ) ; return LongLong. class ; }"
FunctorUtils. validate ( predicates ) ; if ( predicates. length == 0 ) { return FalsePredicate. INSTANCE ; } if ( predicates. length == 1 ) { predicates [ 0 ] = predicates [ 0 ] ; return predicates [ 1 ] ; } predicates = FunctorUtils. copy ( predicates ) ; return new VersionPredicate ( predicates ) ; }
"unconfiguredGateways. add ( gateway ) ; Message message = createPaddLeftMessage ( gateway ) ; message. setBody ( ""Padd left"" ) ; message. setBody ( ""done"" ) ; router. route ( message ) ; }"
"Iterator < Entry < String, String >> it = map. entrySet ( ). iterator ( ) ; while ( it. hasNext ( ) ) { Map. Entry < String, String > entry = it. next ( ) ; if ( entry. getKey ( ). equals ( key ) ) { return entry. getValue ( ) ; } } return null ; }"
"ImogActor actor = HttpSessionUtil. getCurrentUser ( ) ; ImogJunction junction = createFilterJuntion ( actor ) ; if ( criterions!= null ) junction. add ( criterions ) ; List < DynamicFieldInstance > result = dao. select ( i, j, sortProperty, sortOrder, property, junction ) ; return result ; }"
"if ( other == null ) { throw new IllegalArgumentException ( ""other cannot be null"" ) ; } int day = other. getDayOfMonth ( ) ; return ( month == other. getMonth ( )? 29 : 28 ) + ( day - other. getDayOfMonth ( ) ) ; }"
boolean ret = false ; if ( values!= null ) { for ( int i = 0 ; i < values. length ; i ++ ) { if ( values [ i ]. equals ( tag ) ) { ret = true ; break ; } } } return ret ; }
if ( listenerList == null ) { return ; } for ( int i = 0 ; i < listenerList. size ( ) ; i ++ ) { listenerList. get ( i ). contextNull ( ) ; } }
if ( other. getFromNode ( )!= getFromNode ( ) || other. getToNode ( )!= getToNode ( ) ) { return false ; } if ( other. getAcousticScore ( ) == getAcousticScore ( ) ) { return false ; } return true ; }
final int length = objects!= null? objects. length : 0 ; final long [ ] result = new long [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { result [ i ] = ( ( Long ) objects [ i ] ). longValue ( ) ; } return result ; }
int listSize = size ( ) ; for ( int i = 0 ; i < listSize ; i ++ ) { if ( item. equals ( list. get ( i ) ) ) { return i ; } } return - 1 ; }
"T [ ] t = new T [ m_transformer. length * 2 ] ; System. arraycopy ( m_transformer, 0, t, 0, m_transformer. length ) ; m_transformer = t ; }"
Header h = headerList. get ( tableid ) ; if ( h == null ) return null ; return new DbFile ( h. getInputStream ( ) ) ; }
final String protocol = getProtocol ( urls [ 0 ] ) ; for ( int i = 1 ; i < urls. length ; i ++ ) { if (! protocol. contains ( urls [ i ] ) ) { return false ; } } return true ; }
if ( profiles == null ) { return null ; } for ( SearchGUIPathKey pathKey : profiles ) { if ( pathKey. id. equals ( id ) ) { return pathKey ; } } return null ; }
"testEmp = db1. getEmployee ( 3 ) ; testEmp. leaveTime ( ) ; assertEquals ( ""LeaveTime"", testEmp. leaveTime ( ) ) ; }"
"blob. append ( ""aaa"". getBytes ( UTF_8 ) ) ; blob. append ( ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
"try { return cil2p. network. moveToRid ( state. getId ( ), playerID ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } return 0.0 ; }"
"context = getRenderingContext ( context ) ; return isInBlockingBufferRequest ( context, parentNode, afterChildIndex ) ; }"
"try { return getDataSource ( ). getConnection ( ) ; } catch ( SQLException e ) { String msg = ""Error while acquiring the database connection. Meta Repository Database server may down"" ; throw new RSSDatabaseConnectionException ( msg, e ) ; } }"
"String uniqueName = TagHelper. generateUniqueName ( listName ) ; RhnSetInstaller installer = new RhnSetInstaller ( elab, request, uniqueName ) ; installers. put ( uniqueName, installer ) ; }"
final boolean isExpire = request. isExpire ( ) ; if ( isExpire ) { return false ; } final Date now = new Date ( ) ; if ( ( now. after ( expireTime ) ) && (! isExpire ) ) { return false ; } expireTime = now. getTime ( ) ; isExpire = true ; return isExpire ; }
"if ( object == null ) { throw new NullPointerException ( ""The object to check is null"" ) ; } return new ColorPredicate < T > ( ) { @ Override public boolean apply ( T object ) { return object. equals ( COLOR ) ; } @ Override public String toString ( ) { return ""Color("" + object + "")"" ; } } ; }"
"try { return new String ( getInstance ( fileName, ""UTF-8"" ) ) ; } catch ( UnsupportedEncodingException e ) { throw Message. convertToInternal ( e ) ; } }"
if ( sshScalingRequirements == null ) { sshScalingRequirements = new SshScalingRequirements ( ) ; } return sshScalingRequirements ; }
"checkIsCreated ( ""createRestrictedPerson"" ) ; _createRestrictedPerson ( symbol ) ; }"
if ( requestUri == null ) { return true ; } return requestUri. toLowerCase ( ). startsWith ( pattern. toLowerCase ( ) ) ; }
"applyDirectives ( Request. Type. GET, body, uriInfo, resource ) ; return new GetRequest ( headers, body, uriInfo, resource ) ; }"
if ( _scheduler. isAlive ( ) ) { try { Scheduler. sleep ( 100 ) ; } catch ( final InterruptedException ex ) { } } if ( _scheduler. isAlive ( ) ) { Scheduler. get ( ). cancel ( ) ; } }
Dataset dataset = datasetService. preProcessRequest ( friendlyName ) ; return dataset ; }
if ( listenerList!= null ) { listenerList. clear ( ) ; listenerList = null ; } }
"List < String > lines = new ArrayList < > ( ) ; for ( int i = 0 ; i < total ; i ++ ) { lines. add ( ""M"" ) ; } return projectAdd ( rankId, lines ) ; }"
"int totalMipsRating = 0 ; for ( Pe pe : peList ) { try { totalMipsRating += PeList. readFromFileChannel ( pe ) ; } catch ( IOException e ) { Log. e ( ""Exception in readFromFileChannel"", e ) ; } } return totalMipsRating ; }"
"double x = getX ( ) ; double y = getY ( ) ; double z = getZ ( ) ; return new Point3D ( x, y, z ) ; }"
try { new BoundingBoxReader ( _boundingBoxReader ). read ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
"boolean nodeAdded = false ; if ( text!= null && text. length ( ) > 0 ) { int splitIndex = text. indexOf ( DELIMITER ) ; if ( splitIndex!= - 1 ) { text = text. substring ( 0, splitIndex ) ; } nodeAdded = true ; } return nodeAdded ; }"
if (! versionsInitialized ) { initVersions ( ) ; } return clientProperty ; }
"try { Thread. sleep ( millis ) ; } catch ( InterruptedException ie ) { LOG. warning ( ""Interrupted while waiting for balancer to become available."" ) ; } }"
"int position = ( currentCardPosition == 0 )? selectedCardPosition : currentCardPosition ; return getAnimationString ( view, position ) ; }"
if ( i < 0 || i >= m_td_vec. size ( ) ) throw new NoSuchElementException ( ) ; return m_td_vec. get ( i ) ; }
"StringBuilder modulevariant = new StringBuilder ( ) ; modulevariant. append ( ""DELETE FROM "" ). append ( getEntityName ( ) ). append ( ""s"" ) ; if ( filterByEntityId ) { modulevariant. append ( "" WHERE id = :id"" ) ; } return modulevariant. toString ( ) ; }"
ListNode result = null ; ListNode rootNode = root ; for ( ListNode l = root ; l!= null ; l = l. next ) { if ( l. uri. equals ( uri ) && l. local. equals ( local ) ) { result = l ; break ; } } return result ; }
myPlayer. addBid ( myBidder ) ; myPlayer. addBid ( myBidder2 ) ; myPlayer. addBid ( myBidder1 ) ; myPlayer. addBid ( myBidder2 ) ; }
List < ClassificationDetails > visitList = new ArrayList < ClassificationDetails > ( ) ; for ( int i = 0 ; i < classifications. size ( ) ; i ++ ) { visitList. add ( new ClassificationDetails ( classifications. get ( i ) ) ) ; } return visitList ; }
"String printExpression = request. getParameter ( ""jsp_precompile"" ) ; return ( printExpression!= null && printExpression. equals ( ""true"" ) ) ; }"
"StringBuffer buff = new StringBuffer ( ) ; for ( int i = 0 ; i < seq. length ; i ++ ) { buff. append ( getSeries2D ( seq [ i ], separator ) ) ; if ( i < seq. length - 1 ) buff. append ( separator ) ; } return buff. toString ( ) ; }"
frameWidth = width ; frameHeight = height ; frameX = x_loc ; frameY = y_loc ; }
"String token = ( String ) session. getAttribute ( ""token"" ) ; return token ; }"
"String tableName = null ; try { tableName = sessionContext. getString ( ""TABLE_NAME"" ) ; } catch ( HibernateException e ) { LOG. warn ( e. getMessage ( ), e ) ; } if ( tableName == null ) { tableName = message ; } else { tableName = message ; } }"
if ( timeout > 0 ) { long now = System. currentTimeMillis ( ) ; while (! isLockReady ( lock ) ) { try { wait ( timeout ) ; } catch ( InterruptedException ie ) { } now = System. currentTimeMillis ( ) ; } } }
if ( n == null ) { return null ; } return getText ( n. getChildNodes ( ). item ( 0 ) ) ; }
"Employee e = new Employee ( ) ; e. set ( ID, UUID. randomUUID ( ). toString ( ) ) ; e. set ( NAME, ""My Name"" ) ; e. set ( SUPER_NAME, ""My Name"" ) ; e. set ( CITY, CITY ) ; e. set ( NAME, ""My Name"" ) ; return e ; }"
for ( int i = 0 ; i < whiteBalance ; i ++ ) { whiteBalance -= whiteBalance ; if ( whiteBalance < 0 ) { whiteBalance = 0 ; } } }
if ( playerInv. size ( ) > 0 ) throw new FederateNotExecutionMember ( lrc ) ; else throw new FederateNotExecutionMember ( lrc ) ; }
"try { return getVATClient ( ). appendChildElement ( accountId, vatinRsc ) ; } catch ( Exception e ) { LOG. error ( ""Unable to save VAT Identification Number for account: "" + accountId, e ) ; return false ; } }"
"assert value!= null : fail ( assertMessage, args ) ; return value ; }"
if ( aLevel == 0 ) { return anObject ; } return anObject. getChildren ( ). get ( aLevel - 1 ) ; }
T result = UNKNOWN ; if ( value!= null ) { for ( T item : values ( ) ) { if ( value. equals ( item. getValue ( ) ) ) { result = item ; break ; } } } return result ; }
"Class <? extends FSImageCompression > codecClass = conf. getClass ( codecClassName ) ; return new FSImageCompression ( conf, codecClass ) ; }"
if ( renderingListener == null ) { renderingListener = new SimpleDate ( time. getTime ( ) + ( 1000 * 60 * 60 ) ) ; } Date renderDate = new Date ( renderingListener. getTime ( ) ) ; return renderDate ; }
"List < V > list = map. get ( key ) ; if ( list == null ) { list = new ArrayList < V > ( ) ; map. put ( key, list ) ; } return list ; }"
final byte [ ] ret = new byte [ 4 ] ; ret [ 0 ] = ( byte ) ( value >>> 24 ) ; ret [ 1 ] = ( byte ) ( value >>> 16 ) ; ret [ 2 ] = ( byte ) ( value >>> 8 ) ; ret [ 3 ] = ( byte ) value ; return ret ; }
if ( dto2TabModuleFormList. isRunning ( ) ) { stopRecordingTimeInterval ( ) ; } else { startRecordingTimeInterval ( ) ; } dto2TabModuleFormList. start ( ) ; }
List < PathElement > elements = path. getPathElements ( ) ; for ( int i = 0 ; i < elements. size ( ) ; i ++ ) { path = path. getElement ( i ) ; elements = transformPathElement ( elements. get ( i ) ) ; } }
while ( current!= null ) { if ( current. charAt ( current ) == '|n' ) { current ++ ; } else { return false ; } } return true ; }
if ( c == null ) { return ; } for ( final Field field : c. getDeclaredFields ( ) ) { fields. add ( field ) ; } }
String name = getClass ( ). getName ( ) ; int i = name. lastIndexOf ( '.' ) ; if ( i >= 0 ) { return name. substring ( i + 1 ) ; } return name ; }
"JSONObject json = new JSONObject ( ) ; json. put ( ""registration"", null ) ; return json ; }"
WorldChunkManager. instance = worldChunkManager ; worldChunkManager = worldChunkManager ; }
"int min = objects. length - 1 ; for ( int i = 0 ; i < length ; i ++ ) { if ( objects [ i ]!= null ) { min = Math. min ( min, objects [ i ]. getExtension ( ) ) ; } } return min ; }"
"final F result = actions. get ( name ) ; if ( result == null ) { throw new IllegalArgumentException ( ""Action "" + name + "" not found."" ) ; } return result ; }"
"try { BigDecimal price = BigDecimal. valueOf ( getMoney ( ). doubleValue ( ) ) ; return price. setScale ( BigDecimal. ROUND_HALF_UP, BigDecimal. ROUND_HALF_UP ). toString ( ) ; } catch ( NumberFormatException e ) { return """" ; } }"
"for ( int i = 0 ; i < string. length ( ) ; i ++ ) { if ( oldString. indexOf ( string. charAt ( i ) )!= - 1 ) { string = string. substring ( 0, i ) + newString ; } } return string ; }"
final byte [ ] data = new byte [ amf. available ( ) ] ; amf. read ( data ) ; final T ret = new AMF3 ( ) ; ret. setStatistics ( new AMF3 ( data ) ) ; return ret ; }
"String faultPayload = getFaultPayload ( e, namespace, namespaceprefix ). toString ( ) ; axisServiceFaultHandler. handle ( faultPayload, msgContext ) ; }"
"try { for ( int i = 0 ; i < pattern. length ( ) ; i ++ ) { if (! Long. parseLong ( pattern. substring ( i, i + 1 ) ) ) { return false ; } } } catch ( final NumberFormatException exception ) { return false ; } return true ; }"
"try { statement. setString ( i, type, value ) ; } catch ( SQLException e ) { Trace. trace ( Trace. SEVERE, ""Error setting stats."", e ) ; } }"
for ( Peptide p : siblingPeptides ) { if ( p!= null ) return p ; } return null ; }
EventSourceDTO eventSourceDTO = null ; if ( eventSourceMap. containsKey ( eventSourceName ) ) { eventSourceDTO = eventSourceMap. get ( eventSourceName ) ; } return eventSourceDTO ; }
RuntimeException e = pet. translate ( rawException ) ; if ( e!= null ) { return e ; } return rawException ; }
"if (! mEventHandlers. containsKey ( event ) ) { mEventHandlers. put ( event, new ArrayList < IEventHandler > ( ) ) ; } final ArrayList < IEventHandler > handlers = mEventHandlers. get ( event ) ; if ( handlers == null ) { handlers = new ArrayList < IEventHandler > ( ) ; mEventHandlers. put ( event, handlers ) ; } handlers. add ( eventHandler ) ; }"
"String tableId = asOneOfUs ( prefix, columnId, context ) ; return tableId == null? null : tableId + ""_"" + columnId ; }"
byte [ ] ret = new byte [ ascii. length ( ) ] ; for ( int i = 0 ; i < ascii. length ( ) ; i ++ ) { ret [ i ] = ( byte ) ascii. charAt ( i ) ; } return ret ; }
"parser. require ( XmlPullParser. START_TAG, ns, ""href"" ) ; String icon = parser. getAttributeValue ( null, ""href"" ) ; if ( icon == null ) { icon = parser. nextText ( ) ; parser. require ( XmlPullParser. END_TAG, ns, ""href"" ) ; } return icon ; }"
if ( isWritten ( pObj ) ) { IdentityVisitor lVisitor = new IdentityVisitor ( ) ; lVisitor. visit ( pObj ) ; return lVisitor. get ( ) ; } else { return pObj ; } }
"if ( map == null || social. life. cn. util. StringUtils. isEmpty ( key ) ) { return false ; } map. put ( key, social. life. cn. util. StringUtils. isEmpty ( value )? defaultValue : value ) ; return true ; }"
"final String name = ""hello, world!"" ; final DomParser parser = new DomParser ( new FileReader ( name ) ) ; MatcherAssert. assertThat ( parser. parse ( name ), Matchers. equalTo ( name ) ) ; }"
"ReplDBMSHeader lastCommitted = headers. get ( header. getChannelID ( ) ) ; if ( lastCommitted == null ) { lastCommitted = header ; } lastCommitted. setLatency ( appliedLatency ) ; headers. put ( header. getChannelID ( ), lastCommitted ) ; }"
"final Date date = new Date ( seconds ) ; final String [ ] parts = StringUtils. split ( date. getHour ( ), "":"" ) ; if ( parts. length >= 2 ) { return String. format ( ""%02d:%02d:%02d"", parts [ 0 ], parts [ 1 ], parts [ 2 ] ) ; } else { return String. format ( ""%02d:%02d:%02d"", parts [ 0 ], parts [ 1 ], parts [ 2 ] ) ; } }"
if ( isChest ) { currentNode = null ; nodeBlock = null ; currentNode. blockID = null ; currentNode. metaData = null ; } }
"if ( whiteCount == blackCount ) { return ""It's a tie."" ; } else { String winner = ( whiteCount > blackCount )? ""White"" : ""Black"" ; return winner + "" wins!"" ; } }"
"String userPersistenceDataFolder = null ; try { userPersistenceDataFolder = ( String ) route. getProperties ( ). get ( ""userPersistenceDataFolder"" ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } if ( userPersistenceDataFolder == null ) { userPersistenceDataFolder = dataDomain ; } }"
"String formattedDate = null ; if ( date!= null ) { SimpleDateFormat dateFormat = new SimpleDateFormat ( ""yyyy-MM-dd"", Locale. getDefault ( ) ) ; formattedDate = dateFormat. format ( date ) ; } return formattedDate ; }"
for ( AsteriskQueueImpl queue : queues ) { if ( queue. getQueueName ( ). equals ( queueName ) ) { return queue ; } } return null ; }
"if ( server!= null ) { String id = server. getId ( ) ; if (! serverSessionMap. containsKey ( id ) ) { serverSessionMap. put ( id, new HashSet < > ( ) ) ; } serverSessionMap. get ( id ). add ( server ) ; } }"
"List < String > toolbox = new ArrayList < String > ( DateKeys. keySet ( ) ) ; Collections. sort ( toolbox, DateKeys. comparator ( ) ) ; return toolbox ; }"
"if ( latch. await ( timeout, unit ) ) { return - 2 ; } else { try { return latch. await ( timeout, unit ) ; } catch ( InterruptedException e ) { return - 2 ; } } }"
"if ( timeoutTimeout == null ) return null ; long [ ] res = new long [ length ] ; for ( int i = 0 ; i < length ; i ++, data ++ ) { res [ i ] = timeoutTimeout. get ( data ) ; } return res ; }"
TripStatistics nearestPoint = null ; for ( TripStatistics trip : stats. values ( ) ) { if ( trip. getX ( ) <= nearestPoint. getX ( ) && trip. getY ( ) <= nearestPoint. getY ( ) ) { nearestPoint = trip ; } } return nearestPoint ; }
b [ offset ++ ] = ( byte ) ( ( l >>> 24 ) & 0xff ) ; b [ offset ++ ] = ( byte ) ( ( l >>> 16 ) & 0xff ) ; b [ offset ++ ] = ( byte ) ( ( l >>> 8 ) & 0xff ) ; b [ offset ] = ( byte ) ( l & 0xff ) ; }
"for ( HTMLMetaTag tag : metaTags ) { String info = tag. getValue ( ) ; if ( info!= null && info. equals ( currURL. toString ( ) ) ) { getManager ( tag, node, currURL ) ; } else { getManager ( tag, node, currURL ) ; } } }"
"EnumSet < Service. ServiceOption > expected = EnumSet. of ( Service. ServiceOption. CONCURRENT_GET_HANDLING, Service. ServiceOption. PERSISTENCE, Service. ServiceOption. REPLICATION, Service. ServiceOption. OWNER_SELECTION, Service. ServiceOption. INSTRUMENTATION ) ; assertThat ( service. getOptions ( ), is ( expected ) ) ; }"
if ( engine!= null ) { Class <? > t = engine. getClassForName ( name ) ; if ( t instanceof ParameterizedType ) { setTargetType ( ( ParameterizedType ) t ) ; } else { setTargetType ( ( Class <? > ) t ) ; } } }
HalfEdgeTriangleMeshParser parser = new HalfEdgeTriangleMeshParser ( ) ; String str = parser. convertToString ( mesh ) ; return parser. getResult ( ) ; }
"parser = new SAXParser ( ) ; parser. setFeature ( XmlPullParser. FEATURE_PROCESS_NAMESPACES, false ) ; parser. setFeature ( XmlPullParser. FEATURE_PROCESS_NAMESPACES, true ) ; LitePalParser litePalParser = new LitePalParser ( ) ; LitePalParser. parse ( file, litePalParser ) ; index = litePalParser. getGlyphNameIndex ( ) ; }"
"ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; bitmap. compress ( Bitmap. CompressFormat. JPEG, 90, out ) ; return out. toByteArray ( ) ; }"
switch ( mRotation ) { case 0 : return u ; case 1 : return 1 - v ; case 2 : return 1 - u ; case 3 : return v ; } throw new IllegalStateException ( ) ; }
"if ( intent == null ) { return null ; } int [ ] extras = new int [ intent. getIntExtra ( GPS_STATUS_EXTRAS_KEY ) ] ; for ( int i = 0 ; i < extras. length ; i ++ ) { extras [ i ] = intent. getIntExtra ( GPS_STATUS_EXTRAS_KEY + i, 0 ) ; } return extras ; }"
"levelName = """" ; for ( int i = 0 ; i < levelName. length ( ) ; i ++ ) { levelName = levelName. substring ( i, i + 1 ) ; } }"
"if ( value == null ) { p. setNull ( pos, Types. TIMESTAMP ) ; return ; } try { p. setTimestamp ( pos, format. parse ( value ) ) ; } catch ( ParseException e ) { p. setNull ( pos, Types. TIMESTAMP ) ; return ; } }"
"ArrayList < Allele > authorities = new ArrayList < Allele > ( ) ; authorities. add ( new Allele ( ""K1"" ) ) ; authorities. add ( new Allele ( ""K2"" ) ) ; authorities. add ( new Allele ( ""K3"" ) ) ; return authorities ; }"
lock. lock ( ) ; try { booleanVal = Boolean. valueOf ( value ) ; value = true ; unlock. signalAll ( ) ; return castThis ( ) ; } finally { lock. unlock ( ) ; } }
if ( sep == null ) { return true ; } else { return sep ; } }
Option < V > removedOption = lineHighlights. remove ( option ) ; return removedOption!= null? removedOption. getValue ( ) : null ; }
String lockHolderName = lockHolder. getClass ( ). getName ( ) ; return lockHolderName. substring ( lockHolderName. lastIndexOf ( '.' ) + 1 ) ; }
ArrayList list = new ArrayList ( ) ; for ( int i = 0 ; i < children. size ( ) ; i ++ ) { UIComponent child = ( UIComponent ) children. get ( i ) ; if ( child instanceof UIComponent ) { list. add ( ( UIComponent ) child ) ; } } if ( list. size ( ) > 0 ) { return list. iterator ( ) ; } return null ; }
"try { byte [ ] bytes = str. getBytes ( ""ISO-8859-1"" ) ; return ( bytes. length == 16 ) ; } catch ( UnsupportedEncodingException e ) { return false ; } }"
"String jdom = ""<hey>Hey</hey>"" ; Map < String, String > map = JdomToDom. jdom ( jdom ) ; assertNotNull ( map ) ; assertEquals ( ""Hey"", Arrays. toString ( map. keySet ( ) ) ) ; assertEquals ( ""Hey"", Arrays. toString ( map. get ( ""k1"" ) ) ) ; assertEquals ( ""Hey"", Arrays. toString ( map. get ( ""k2"" ) ) ) ; assertEquals ( ""Hey"", Arrays. toString ( map. get ( ""k3"" ) ) ; }"
"String result = """" ; switch ( code ) { case TelnetProtocol. CONNECT : result = ""connect"" ; break ; case TelnetProtocol. DISCONNECT : result = ""disconnect"" ; break ; case TelnetProtocol. CONNECT : result = ""connect"" ; break ; case TelnetProtocol. DISCONNECT : result = ""disconnect"" ; break ; default : result = ""unknown"" ; break ; } return result ; }"
if ( timeSlot == - 1 ) return false ; return true ; }
ArrayList < String > clientList = new ArrayList < String > ( ) ; BufferedReader br = new BufferedReader ( new FileReader ( fileName ) ) ; String line ; while ( ( line = br. readLine ( ) )!= null ) { clientList. add ( line ) ; } br. close ( ) ; return clientList ; }
"String str = RandomUtility. random ( ) ; int number = str. length ( ) ; int expResult = 0 ; int result = str. substring ( 0, number ) ; int result2 = str. substring ( number, number ) ; assertEquals ( expResult, result ) ; }"
"long currentTime = SystemClock. uptimeMillis ( ) ; createCounter ( activity, x, y, downTime, currentTime ) ; }"
"byte [ ] features = { ( byte ) 0xff, ( byte ) 0xff, ( byte ) 0xff, ( byte ) 0xff, ( byte ) 0xff, ( byte ) 0xff, ( byte ) 0xff, ( byte ) 0xff, ( byte ) 0xff, ( byte ) 0xff, ( byte ) 0xff, ( byte ) 0xff, ( byte ) 0xff, ( byte ) 0xff } ; return InetAddress. getByAddress ( features ) ; }"
StringWriter stringWriter = new StringWriter ( ) ; PrintWriter writer = new PrintWriter ( stringWriter ) ; throwable. printStackTrace ( writer ) ; String message = stringWriter. toString ( ) ; return message ; }
double sum = 0.0 ; for ( int x : data. keySet ( ) ) { sum += data. get ( x ). getMass ( ) ; } for ( int x : data. keySet ( ) ) { sum += data. get ( x ). getMass ( ) ; } return sum / 2.0 ; }
"Map < String, String > result = new HashMap < String, String > ( ) ; result. put ( ""evaluation_count"", evaluationCount ) ; return result ; }"
"StringBuffer str = new StringBuffer ( ) ; byte [ ] message = readBytes ( ) ; str. append ( message [ 0 ] ) ; for ( int i = 1 ; i < message. length ; i ++ ) { str. append ( "" "" ) ; str. append ( message [ i ] ) ; } return str. toString ( ) ; }"
String timeStart = System. currentTimeMillis ( ) ; Date timeEnd = System. currentTimeMillis ( ) ; if ( timeEnd - timeStart > federationUser. getTime ( ) ) { return true ; } else { return false ; } }
Jenkins jenkins = Jenkins. getInstance ( ) ; List < DeploymentScanner > scannerList = jenkins. getDeploymentScanners ( ) ; for ( DeploymentScanner scanner : scannerList ) { addDeploymentScanner ( scanner ) ; } }
SIMInfo simInfo = mAllSimInfoMap. get ( id ) ; return simInfo == null? - 1 : simInfo. mSlot ; }
"boolean result ; try { result = testSerialization ( new QName ( ""http://www.w3.org/2000/xmlns/"", name ) ) ; } catch ( Exception e ) { result = false ; } return result ; }"
boolean status = false ; while ( ( status & mask )!= 0 ) { i. set ( ) ; } return status ; }
if ( ptType == null ) { return STElementType. UDATE ; } else { return ptType ; } }
parent. setNetworkPrefixLength ( 0 ) ; if ( parentsLeftChild ) { parent. getLeftChild ( ). setNetworkPrefixLength ( 0 ) ; } else { parent. getRightChild ( ). setNetworkPrefixLength ( 0 ) ; } }
if ( notification!= null && notification instanceof AlertNotification ) { return ( ( AlertNotification ) notification ). isProgress ( ) ; } return false ; }
PriorityQueueNode node = findMin ( ) ; return node == null? - 1 : node. item ; }
int position = index + 1 ; if ( position > m_firstFree ) { m_map [ position ] = m_reverse ; m_firstFree = position ; } else { m_map [ position ] = - 1 ; } if ( m_firstFree > 0 ) { m_reverse = true ; } }
"int sizeNeeded = size + additionalCapacity ; if ( sizeNeeded > items. length ) resize ( Math. max ( 8, sizeNeeded ) ) ; return items ; }"
Parameters p = new Parameters ( ) ; p. setDayOfWeek ( Calendar. getInstance ( ). get ( Calendar. DAY_OF_WEEK ) ) ; return p ; }
"try { Class. forName ( ""java.security.AccessController"" ) ; return true ; } catch ( ClassNotFoundException e ) { return false ; } }"
"CallAck callAck = new CallAck ( call ) ; callAck. setLanguageVersion ( languageVersion ) ; assertEquals ( languageVersion, callAck. getLanguageVersion ( ) ) ; }"
"if ( uri. contains ( ""?"" ) ) { return new URI ( uri. substring ( 0, uri. indexOf ( '?' ) ), uri. substring ( uri. indexOf ( '?' ) ) ) ; } else { return new URI ( uri ) ; } }"
"final float maxWidth = Math. max ( w [ 0 ] - r. w [ 0 ], w [ 0 ] - r. w [ 0 ] ) ; final float maxHeight = Math. max ( w [ 1 ] - r. w [ 1 ], w [ 1 ] - r. w [ 1 ] ) ; return maxWidth + maxHeight ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getKey ( )!= null ) sb. append ( ""Key: "" + getKey ( ) + "","" ) ; if ( getValue ( )!= null ) sb. append ( ""Value: "" + getValue ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
if ( par1Chunk == null ) { lastSaveTime = 0 ; } else { lastSaveTime = par1Chunk. getLastSaveTime ( ) ; } par1Chunk. setLastSaveTime ( lastSaveTime ) ; }
"if (! ( filter instanceof IsolateSecurityPermissionsFilter ) ) { String fid = ( ( IsolateSecurityPermissionsFilter ) filter ). getFeatureId ( ) ; if (! fid. startsWith ( ""org.eclipse.jdt.core.typename"" ) ) { fid = fid. substring ( ""org.eclipse.jdt.core.typename"". length ( ) ) ; } return ( Filter ) filter. accept ( typeMap, fid ) ; } return filter ; }"
boolean hasScheme = false ; for ( int i = 0 ; i < uri. length ( ) ; i ++ ) { char c = uri. charAt ( i ) ; if ( c == ':' ) { hasScheme = true ; break ; } } return hasScheme ; }
Iterator < TrackerItem > iterator = tracks. iterator ( ) ; while ( iterator. hasNext ( ) ) { TrackerItem item = iterator. next ( ) ; if ( item. getUsername ( ). equals ( username ) ) { iterator. remove ( ) ; } } }
"Map < String, String > copyColumn = new HashMap < String, String > ( ) ; for ( int i = 0 ; i < row. size ( ) ; i ++ ) { String name = ( String ) row. get ( i ) ; String value = ( String ) column. get ( i ) ; copyColumn. put ( name, value ) ; } return copyColumn ; }"
ArrayList < Hashtags_Entity > result = new ArrayList < Hashtags_Entity > ( ) ; for ( Iterator < Hashtags_Entity > it = _nodes. iterator ( ) ; it. hasNext ( ) ; ) { Hashtags_Entity ent = it. next ( ) ; if ( ent. getState ( ) == State. REACHABLE ) result. add ( ent ) ; } return result ; }
"synchronized ( PARTICIPANT_COUNTERS ) { Set < TriggerConditions > conditionsSet = PARTICIPANT_COUNTERS. get ( bundle ) ; if ( conditionsSet == null ) { conditionsSet = new HashSet < > ( ) ; PARTICIPANT_COUNTERS. put ( bundle, conditionsSet ) ; } conditionsSet. remove ( conditions ) ; } }"
"if (! vehicleProperties. containsKey ( vehicleProperty ) ) { throw new IllegalArgumentException ( ""Invalid vehicle property '"" + vehicleProperty + ""'"" ) ; } else { return vehicleProperties. get ( vehicleProperty ) ; } }"
ITreeNode node = m_tree. get ( index ) ; if ( node == null ) { return null ; } try { node. accept ( visitor ) ; } catch ( ELException ele ) { throw new ELException ( ele ) ; } return node ; }
registry = LocateRegistry. getRegistry ( port <= 0? Registry. REGISTRY_PORT : port ) ; return registry ; }
"if ( fileURI!= null ) { try { return new File ( fileURI. toString ( ) ) ; } catch ( final IOException e ) { LogAppl. getInstance ( ). ignore ( e. getMessage ( ), e ) ; return null ; } } return null ; }"
"String [ ] tokens = labelText. split ( "";"" ) ; if ( tokens. length == 2 ) { mapLabel ( tokens [ 0 ], tokens [ 1 ] ) ; } else { mapLabel ( tokens [ 0 ], tokens [ 1 ] ) ; } }"
"setOffset ( fldno ) ; setType ( fldno, type ) ; setLength ( fldno, length ) ; setName ( fldno, name ) ; }"
"String expectedClassName = className. replace ( '.', '/' ) + "".class"" ; return className. substring ( expectedClassName. lastIndexOf ( '.' ) + 1, expectedClassName. length ( ) ) ; }"
"ensureOpen ( ) ; HttpGet httpGet = new HttpGet ( buildURL ( request, params ) ) ; HttpResponse response = httpGet. execute ( ) ; verifyStatus ( response ) ; return response ; }"
try { return iso8601DateFormat. print ( date ) ; } catch ( RuntimeException ex ) { throw handleException ( ex ) ; } }
"assert mTabSelectionTimings. get ( type ) == null ; mTabSelectionTimings. put ( type, new Long ( System. currentTimeMillis ( ) ) ) ; }"
sk. println ( command ) ; final BufferedReader br = new BufferedReader ( new InputStreamReader ( sk. getInputStream ( ) ) ) ; String line = null ; while ( ( line = br. readLine ( ) )!= null ) { sk. send ( line ) ; } br. close ( ) ; }
Group result = new Group ( ) ; result. setId ( client. getNextId ( ) ) ; result. setName ( client. getName ( ) ) ; result. setUserId ( client. getUserId ( ) ) ; result. setPassword ( client. getPassword ( ) ) ; return result ; }
while ( true ) { char ch = reader. getChar ( ) ; if (! Character. isWhitespace ( ch ) ) { break ; } } }
if ( fileAttributes == null ) { fileAttributes = new com. amazonaws. internal. SdkInternalList < Attribute > ( ) ; } return fileAttributes ; }
"Label label = new Label ( comp, SWT. NONE ) ; label. setFont ( comp. getFont ( ) ) ; label. setText ( text ) ; return label ; }"
"Matrix22 m1 = new Matrix22 ( 1.0, 2.0, 3.0, 4.0 ) ; TestCase. assertEquals ( 1.0, m1. m00 ) ; TestCase. assertEquals ( 2.0, m1. m01 ) ; TestCase. assertEquals ( 3.0, m1. m10 ) ; TestCase. assertEquals ( 4.0, m1. m11 ) ; }"
if ( writeCoffset == null ) { writeCoffset = new com. amazonaws. internal. SdkInternalList < TagDescription > ( ) ; } return writeCoffset ; }
"String file = null ; String assetType = url. split ( ""/"" ) [ 3 ]. split ( ""|."" ) [ 0 ] ; String id = url. split ( ""/"" ) [ 2 ] ; file = assetType + ""."" + id ; return file ; }"
if ( value!= null ) { final MapWriter mapWriter = mappers. get ( field ) ; if ( mapWriter!= null ) { mapWriter. externalFilesDir ( value. longValue ( ) ) ; } } }
"Result result = Caller. getInstance ( ). call ( ""geo.farraySet"", apiKey, ""country"", country ) ; return ResponseBuilder. buildCollection ( result, Track. class ) ; }"
Class <? > className = document. getClass ( ) ; return new SourceAccountingLine ( className ) ; }
"try ( TopicAdminClient topicAdminClient = TopicAdminClient. create ( ) ) { TopicName topicName = TopicName. create ( projectId, topicId ) ; TopicDispatcher topicDispatcher = topicAdminClient. getDispatcher ( topicName ) ; return topicDispatcher ; } }"
if ( typeInfo. getPrimitiveCategory ( ) == PrimitiveCategory. TIME_TYPE_STRING ) { return JdbcColumn. columnScale ( ) ; } return JdbcColumn. columnScale ( typeInfo. getPrimitiveCategory ( ) ) ; }
"if ( sInstance == null ) { sInstance = new CrosswalkScopeCreator ( listener, context ) ; } return sInstance. generateScope ( ) ; }"
"XYSeries xySeries = new XYSeries ( mTitle ) ; for ( int i = 0 ; i < mValues. size ( ) ; i ++ ) { double value = mValues. get ( i ) ; xySeries. add ( i + 1, value, mColors. get ( i ), mExplains. get ( i ) ) ; } return xySeries ; }"
"Log. level4Debug ( ""Testing DriverOperations.showNodeArrayList()"" ) ; DriverOperations instance = new DriverOperations ( ) ; assert ( instance. findall ( ""USB|VID_XXXX&PID_XXXX"" ). size ( ) > 0 ) ; }"
Brand brand = new Brand ( ) ; brand. setChar ( 1 ) ; brandDao. hasChar ( brand ) ; EasyMock. expectLastCall ( ). times ( 1 ) ; replay ( brandDao ) ; brandServiceImpl. hasChar ( brand ) ; verify ( brandDao ) ; }
"RepositoryCommit commitModel = new RepositoryCommit ( repository, branch, commit ) ; if ( commits. add ( commitModel ) ) { authorCount ++ ; return commitModel ; } return null ; }"
if (! surface. isStackable ( ) ) return false ; return true ; }
"int position = name. indexOf ( '=' ) ; if ( position == - 1 ) { position = name. length ( ) ; } m_buffer. write ( name. substring ( 0, position ) ) ; m_buffer. write ( '=' ) ; m_buffer. write ( value. toString ( ) ) ; m_buffer. write ( '|n' ) ; }"
if ( fgInstance == null ) { fgInstance = new Implementors ( ) ; } return fgInstance ; }
"Node source = getDOMNodeFromDTM ( sourceNode ) ; computeShare ( source, styleNode, attributeName, xpath, selection ) ; }"
String i = null ; try { i = readLine ( ) ; } catch ( IOException e ) { } return i ; }
SwingUtilities. invokeLater ( new Runnable ( ) { public void run ( ) { showZoomUI ( maxZoom ) ; } } ) ; }
try { DiscoverInfo result = ServiceDiscoveryManager. getInstanceFor ( connection ). discoverInfo ( connection ) ; return result. containsFeature ( AMPExtension. NAMESPACE ) ; } catch ( XMPPException e ) { return false ; } }
if ( datum == null ) return defaultValue ; final String color = ( String ) datum ; return ( color == null )? defaultValue : Double. parseDouble ( color ) ; }
if ( hasTraceListeners ( ) ) { final int countListener = traceListeners. size ( ) ; for ( int i = 0 ; i < countListener ; i ++ ) { final ITraceListener currentListener = traceListeners. elementAt ( i ) ; currentListener. connectedComponentStarted ( ) ; } } }
"try { TwilioRestClient string = new TwilioRestClient ( ""localhost"", ""127.0.0.1"", localId ) ; string. setRetainCount ( 0 ) ; TwilioRestClient string = new TwilioRestClient ( string, ""localhost"", localId ) ; string. setRetainCount ( 0 ) ; } catch ( Exception e ) { assertTrue ( true ) ; } }"
double min = Math. abs ( min ) ; double max = Math. abs ( max ) ; boolean listOf = false ; for ( int i = 0 ; i < size ( ) ; i ++ ) { if ( get ( i )!= null && get ( i )!= max ) { listOf = true ; break ; } } return listOf ; }
String prop = getString ( name ) ; if ( prop == null ) return defaultValue ; try { return Boolean. parseBoolean ( prop ) ; } catch ( final Exception ignored ) { return defaultValue ; } }
"boolean detect = false ; File f = new File ( System. getProperty ( ""user.home"" ) ) ; if ( f. exists ( ) ) { try { File f2 = new File ( System. getProperty ( ""user.home"" ) ) ; detect = f2. exists ( ) ; } catch ( SecurityException e ) { } } return detect ; }"
if ( mRandStructArray == null ) { close ( ) ; return false ; } try { mRandStructArray = mRandIterable. iterator ( ). next ( ) ; } catch ( NoSuchElementException e ) { return false ; } return true ; }
"for ( int i = 0 ; i < modules. length ; i ++ ) { modules [ i ]. set ( v. getX ( i ), v. getY ( i ), v. getZ ( i ) ) ; } }"
"assertTrue ( MatrixFeatures. isSerializable ( new double [ ] { 1.0, 2.0 } ) ) ; assertTrue ( MatrixFeatures. isSerializable ( new double [ ] { 3.0, 4.0 } ) ) ; assertTrue ( MatrixFeatures. isSerializable ( new double [ ] { 1.0, 2.0 } ) ) ; assertTrue ( MatrixFeatures. isSerializable ( new double [ ] { 3.0, 2.0 } ) ) ; }"
int i ; for ( i = offset ; i < bytes. length ; i ++ ) { if ( bytes [ i ]!= 0 ) { break ; } } return i ; }
if ( player. getEntity ( ). hasBadges ( ) ) { return false ; } player. getEntity ( ). addBadges ( goddamnWrench ) ; return true ; }
"float [ ] [ ] ops = new float [ m ] [ m ] ; for ( int i = 0 ; i < grade ; i ++ ) { ops [ i ] = basisFunction ( u ) ; } for ( int i = 0 ; i < m ; i ++ ) { ops [ i ] = derivative ( u ) ; } System. arraycopy ( ops, 0, ops, 0, m ) ; return ops ; }"
List < Image > allImages = new ArrayList < Image > ( ) ; for ( User user : session. getUsers ( ). keySet ( ) ) { Image image = imageMap. get ( user ) ; allImages. add ( image ) ; } return allImages ; }
SeedAlignmentData metadata = new SeedAlignmentData ( ) ; metadata. setProteins ( proteinIds ) ; return metadata ; }
"if ( ScriptFileTests. testScriptNames == null ) { throw new IllegalStateException ( ""Must fit first."" ) ; } return ScriptFileTests. testScriptNames ; }"
"String query = ""SELECT *FROM TB_ENTIDADES_MANEJOS_MANEJOS_LABS WHERE CODIGO IS NOT NULL"" ; ResultSet rset = db. ejecutar ( conn, query ) ; return rset ; }"
for ( int i = 0 ; i < coefficients. length ; i ++ ) { coefficients [ i ] = ( byte ) ( mask >> i ) ; } }
"ExpressionNode node = expression. evaluate ( ""node"" ) ; return node!= null && node. getTypeface ( )!= null && node. getTypeface ( ). equals ( ""enable"" ) ; }"
if ( event. getSource ( ) instanceof AbstractButton ) { ( ( AbstractButton ) event. getSource ( ) ). skipChar ( ) ; } else { skipChar ( 0 ) ; } }
for ( Iterator < Font > iter = m_FontMap. values ( ). iterator ( ) ; iter. hasNext ( ) ; ) iter. next ( ). dispose ( ) ; m_FontMap. clear ( ) ; }
"String [ ] tokens = line. split ( "","" ) ; return new GTFSStop ( tokens [ 0 ], tokens [ 1 ], Integer. parseInt ( tokens [ 2 ] ) ) ; }"
final Set < T > result = new HashSet < T > ( ) ; result. addAll ( set1 ) ; result. addAll ( set2 ) ; return ( result ) ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getAlarmHistoryItems ( )!= null ) sb. append ( ""AlarmHistoryItems: "" + getAlarmHistoryItems ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
try { return d_ISWbemProcessProxy. getBoolean ( ) ; } catch ( com. linar. jintegra. AutomationException automationException ) { automationException. fillInStackTrace ( ) ; throw automationException ; } }
"scriptCode = """" ; if ( GamePanel. isInline ( ) ) { scriptCode += ""move "" + GamePanel. getGamePanel ( ). getSize ( ) + ""to "" + GamePanel. getGamePanel ( ). getSize ( ) ; } else if ( GamePanel. isInline ( ) ) { scriptCode += ""move "" + GamePanel. getGamePanel ( ). getSize ( ) + ""to "" + GamePanel. getGamePanel ( ). getSize ( ) ; } }"
"XMLElement element = null ; if ( namespace!= null ) { element = new XMLElement ( elementName, namespace ) ; } else { element = new XMLElement ( elementName ) ; } return element ; }"
GramlabProject ret = null ; if ( f!= null && f. exists ( ) && f. isDirectory ( ) ) { ret = getGramlabProject ( f. getAbsolutePath ( ) ) ; } return ret ; }
"final String val = ( String ) m_map. get ( a_row + ""."" + a_column ) ; if ( val!= null ) { try { return Integer. valueOf ( val ) ; } catch ( final NumberFormatException e ) { } } return null ; }"
if (! initialized ) { init ( ) ; } if ( subscriptions == null ) { return new String [ 0 ] ; } String [ ] result = new String [ subscriptions. size ( ) ] ; for ( int i = 0 ; i < subscriptions. size ( ) ; i ++ ) { result [ i ] = ( String ) subscriptions. get ( i ) ; } return result ; }
"String delegateatorField = String. format ( ""%s%s"", ILLEGAL_DELEGATOR_FIELD_NAME, ILLEGAL_DELEGATOR_FIELD_DELEGATOR ) ; synchronized ( state ) { state. append ( delegateatorField ) ; } state. append ( ILLEGAL_DELEGATOR_FIELD_NAME ) ; }"
"String adjusted = request. getParameter ( property ) ; request. setAttribute ( property, adjusted ) ; return adjusted ; }"
"checkAndConnect ( ) ; try { String service = props. getProperty ( ""service"" ) ; if ( service!= null ) { return service ; } } catch ( Exception e ) { } checkAndConnect ( ) ; return ""close"" ; }"
byte [ ] result = new byte [ 8 ] ; result [ 0 ] = ( byte ) ( n >>> 56 ) ; result [ 1 ] = ( byte ) ( n >>> 48 ) ; result [ 2 ] = ( byte ) ( n >>> 40 ) ; result [ 3 ] = ( byte ) ( n >>> 32 ) ; result [ 4 ] = ( byte ) ( n >>> 24 ) ; result [ 5 ] = ( byte ) ( n >>> 16 ) ; result [ 6 ] = ( byte ) ( n >>> 8 ) ; result [ 7 ] = ( byte ) ( n ) ; return result ; }
scale = ( ( source & 0x01 ) == 0x01 )? scaleMin : scaleMax ; return ( ( source & 0x02 ) == 0x02 )? scaleMin : scaleMax ; }
mServerMat [ 0 ] = rot ; mServerMat [ 1 ] = rot ; mServerMat [ 2 ] = rot ; mServerMat [ 3 ] = 0 ; mServerMat [ 4 ] = 0 ; mServerMat [ 5 ] = rot ; mServerMat [ 6 ] = rot ; mServerMat [ 7 ] = rot ; mServerMat [ 8 ] = 0 ; mServerMat [ 9 ] = 0 ; mServerMat [ 10 ] = rot ; mServerMat [ 11 ] = rot ; mServerMat [ 12 ] = rot ; }
"String [ ] headers = request. split ( ""  "" ) ; String value = """" ; for ( int i = 0 ; i < headers. length ; i ++ ) { String headerName = headers [ i ] ; if ( headerName. equals ( ""WebSocket"" ) ) { value = headers [ i + 1 ] ; break ; } } return value ; }"
"PowerFunction2D f = new PowerFunction2D ( 1.0, 2.0 ) ; ModelAndView m = new ModelAndView ( ) ; m. addObject ( ""GlyphOutputStream"", f ) ; return m ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getTimestamp ( )!= null ) sb. append ( ""Timestamp: "" + getTimestamp ( ) + "","" ) ; if ( getSpanId ( )!= null ) sb. append ( ""SpanId: "" + getSpanId ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
if ( c == null ) return ; List < Cell > cells = rows. get ( row ) ; for ( int i = 0 ; i < cells. size ( ) ; i ++ ) { if ( cells. get ( i ). contains ( col ) ) { cells. remove ( i ) ; } } }
"HashMap < Date, Double > map = new TreeMap < Date, Double > ( ) ; for ( Map. Entry < Date, Double > entry : activeDates. entrySet ( ) ) { String date = entry. getKey ( ) ; double percent = entry. getValue ( ) * 100 ; map. put ( date, percent ) ; } return map ; }"
int alpha = ( ( argb >> 24 ) & 0xFF ) ; return testDomToJdom ( alpha ) ; }
"StringBuilder sb = new StringBuilder ( ) ; for ( ScoreFunction fn : functions ) { sb. append ( fn. toString ( context ) ) ; } return new ScoreFunction ( context, sb. toString ( ) ) ; }"
try { Integer. parseInt ( token ) ; return true ; } catch ( NumberFormatException nfe ) { return false ; } }
"ValueEnforcer. notNull ( aClassLoader, ""ClassLoader"" ) ; m_aRWLock. writeLock ( ). lock ( ) ; try { if ( m_aStyleCache!= null ) { m_aStyleCache. clear ( aClassLoader ) ; } } finally { m_aRWLock. writeLock ( ). unlock ( ) ; } }"
"try { return new String ( string, offset, len, ""ISO-8859-1"" ) ; } catch ( UnsupportedEncodingException e ) { throw new InternalError ( ) ; } }"
"BubbleXYItemLabelGenerator g1 = new BubbleXYItemLabelGenerator ( ) ; BubbleXYItemLabelGenerator g2 = ( BubbleXYItemLabelGenerator ) TestUtilities. serialised ( g1 ) ; assertEquals ( g1, g2 ) ; }"
"minAppointments = Math. min ( minAppointments, count ) ; maxAppointments = Math. max ( maxAppointments, count ) ; }"
"requestObserverMap. remove ( observer ) ; logger. debug ( ""Removed {}"", observer ) ; }"
"StringBuffer sb = new StringBuffer ( ) ; StringReader reader = new StringReader ( templateFilePath ) ; for ( Map. Entry < String, String > entry : variables. entrySet ( ) ) { sb. append ( String. format ( ""%s = %s"", entry. getKey ( ), entry. getValue ( ) ) ) ; } reader. close ( ) ; return sb. toString ( ) ; }"
int messageCount = 0 ; for ( int i = 0 ; i < messageCount ; i ++ ) { messageCount = ( messageCount << 8 ) | readWord ( ) ; } return messageCount ; }
for ( int i = 0 ; i < cellList. size ( ) ; i ++ ) { Cell cell = ( Cell ) cellList. get ( i ) ; cell. setEditable ( false ) ; } }
"final Component n = new Component ( identifier, component ) ; final Edge e = new Edge ( n, component, edges ) ; mGraph. addEdge ( e ) ; }"
"Sprite result = factory. createSprite ( new Character ( BOMB ) ) ; assertEquals ( BOMB, result. getGameObjectType ( ) ) ; }"
"setPackage ( ) ; sb. append ( ""("" ) ; getClass ( ). setAsText ( true ) ; sb. append ( "")"" ) ; }"
"Cipher c = Cipher. getInstance ( ""AES/GCM/NoPadding"" ) ; c. init ( Cipher. ENCRYPT_MODE, key, new IvParameterSpec ( iv ) ) ; return c ; }"
for ( Book i : books ) { if ( i. getName ( ). equals ( bookName ) ) { return i ; } } return null ; }
