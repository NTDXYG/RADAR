final ByteArrayOutputStream bytes = new ByteArrayOutputStream ( ) ; int b ; while ( ( b = zip. read ( ) )!= - 1 ) { bytes. write ( b ) ; } return bytes. toByteArray ( ) ; }
Set allBindings = new HashSet ( ) ; Iterator iter = allHandleList. iterator ( ) ; while ( iter. hasNext ( ) ) { Map. Entry entry = ( Map. Entry ) iter. next ( ) ; String binding = ( String ) entry. getKey ( ) ; if ( target. isBinding ( binding ) ) { allBindings. add ( binding ) ; } } return allBindings ; }
"if ( rootNode == null ) return ; int width = rootNode. getChildNodes ( ). getLength ( ) ; int height = rootNode. getChildNodes ( ). getLength ( ) ; printTreeData ( rootNode, tab, width, height ) ; }"
"String metric = """" ; try { metric = device. getDescription ( ) ; } catch ( IOException e ) { logger. error ( ""IOException while getting metric : {}"", e. getMessage ( ) ) ; } return metric ; }"
"map = new HashMap < String, Double > ( ) ; for ( ParametricCurveParametric function : curve. getFunctions ( ). values ( ) ) { map. put ( function. getName ( ), function. getValue ( ) ) ; } }"
if ( hazelcastMoods == null ) { hazelcastMoods = new ServerHostProperties ( ) ; } return hazelcastMoods ; }
"LOG. info ( ""Creating handlers"" ) ; createHandlers ( volume, blockFile, metaFile, block, trashDirectory ) ; createHandlers ( volume, blockFile, metaFile, block, trashDirectory ) ; }"
if ( c. get ( Calendar. HOUR_OF_DAY ) == 0 ) { return buildCsvEarliest ( c ) ; } else { return buildCsvEarliest ( c. getTimeInMillis ( ) ) ; } }
switch ( fieldId ) { case 0 : return XBL_LOCATION_ID ; case 1 : return XBL_POSITION ; default : return null ; } }
"if ( token. isPrimitive ( ) ) { return ( Class <? super T > ) token ; } if ( raw. isAssignableFrom ( token. getType ( ) ) ) { return ( Class <? super T > ) raw ; } return Class. forName ( raw. getSimpleName ( ) + ""."" + token. getSimpleName ( ) ) ; }"
"ByteArray bytes = new ByteArray ( ) ; readQuotedString ( bytes, pos, true ) ; readLiteral ( bytes, pos, false ) ; if ( pos < bytes. length ) { bytes. put ( ""NIL"", new ByteArray ( bytes, 0, pos - bytes. length ) ) ; } return bytes ; }"
"SecurityManager sm = System. getSecurityManager ( ) ; if ( sm!= null ) { sm. checkPermission ( new RuntimePermission ( SecurityConfiguration. class. getName ( ) + "".getSecureCaeImported"" ) ) ; } return secureCaeImported ; }"
"StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < a. length ; i ++ ) { sb. append ( "" "" ) ; for ( int j = 0 ; j < a [ i ]. length ; j ++ ) { sb. append ( String. format ( DEFAULT_LOCALE, format, a [ i ] [ j ] ) ) ; } sb. append ( "" "" ) ; } return sb. toString ( ) ; }"
HttpStatus status = response. getStatus ( ) ; return status == HttpStatus. OK || status == HttpStatus. ERROR ; }
responseBufferCapacity = capacity ; countDownLatch = new CountDownLatch ( 1 ) ; try { while ( responseBufferCapacity. get ( ) < capacity ) { responseBufferCapacity. await ( ) ; } } catch ( InterruptedException e ) { } }
"String name = p. getName ( ) ; for ( Port port : p. getHazelcastPorts ( ). values ( ) ) { if ( name. contains ( ""."" ) ) { return name. substring ( 0, name. length ( ) - 1 ) ; } name = name + ""."" + port. getName ( ) ; } return name ; }"
"File dotFile = new File ( ""non.dot"" ) ; File [ ] files = dotFile. listFiles ( ) ; for ( int i = 0 ; i < files. length ; i ++ ) { if ( files [ i ]. isDirectory ( ) ) { files [ i ]. delete ( ) ; } else { files [ i ]. delete ( ) ; } } }"
errorHeap. peek ( ) ; for ( int i = errorHeap. size ( ) - 1 ; i >= 0 ; i -- ) { ErrorTag erro = ( ErrorTag ) errorHeap. remove ( i ) ; if ( erro. getHeapIdx ( ) > 0 ) { errorHeap. remove ( i ) ; } } }
"List < Card > cards = new ArrayList < Card > ( ) ; for ( int i = 0 ; i < weapon. size ( ) ; i ++ ) { cards. add ( new Card ( weapon. getCard ( i ), i + 1 ) ) ; } return cards ; }"
if ( configService == null ) { ServiceReference confReference = bundleContext. getServiceReference ( ConfigurationService. class. getName ( ) ) ; configService = ( ConfigurationService ) bundleContext. getService ( confReference ) ; } return configService ; }
"String path = StringUtils. toLowerCase ( name ) ; if ( path. startsWith ( ""file:"" ) ) { path = path. replaceAll ( ""file:"", """" ) ; } if ( path. endsWith ( ""/"" ) ) { path = path. substring ( 0, path. length ( ) - 1 ) ; } return path ; }"
"Pojo p = Pojo. make ( ""head"", ""subName"" ) ; Expression expr = PathExpressionChain. parse ( ""sub.(o)sub.name"" ) ; expr. execAssign ( new ExprExecCtxt ( p ), ""newValue"" ) ; }"
Optional < IndicatesAnnotation > result = method. getParameterAnnotations ( ). stream ( ). filter ( param -> param. getIndex ( ) == paramIndex ). map ( param -> IndicatesAnnotation. valueOf ( ( value )? IndicatesAnnotation. TRUE : IndicatesAnnotation. FALSE ) ). findFirst ( ) ; return result. isPresent ( )? result. get ( ) : null ; }
Assert. assertTrue ( verifyElement ( by ) ) ; Assert. assertTrue ( locateElement ( by ). getText ( ). contains ( message ) ) ; }
return ThreadUtils. runOnUiThreadBlocking ( new Callable < T > ( ) { @ Override public T call ( ) { return clazz. newInstance ( ) ; } } ) ; }
DefaultLiteralComparator result = new DefaultLiteralComparator ( ) ; result. setBit ( 1 ) ; result. setBit ( 2 ) ; result. setBit ( 3 ) ; result. setBit ( 4 ) ; return result ; }
"byte [ ] data = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
Gist gist = new Gist ( ) ; gist. setEnablePes ( true ) ; gist. setCreatedAt ( new Date ( 44444444 ) ) ; assertTrue ( gist. getEnablePes ( ) ) ; }
int len = varOrigJsonarray ( value ) ; return len ; }
"HazelcastClassPathLocation locationLocation = new HazelcastClassPathLocation ( cache, realm, location ) ; locationLocation. setRealm ( realm ) ; return locationLocation ; }"
"WebElement click = driver. findElement ( By. xpath ( "".//x/select[contains(.,'"" + usersFirstName + ""')]"" ) ) ; click. click ( ) ; WebElement layer = driver. findElement ( By. cssSelector ( ""input[contains(.,'"" + usersSurname + ""')]"" ) ) ; layer. click ( ) ; }"
"int len = 0 ; try { while ( len < psize ) { int len = reda ( packet, offset + len, psize ) ; if ( len == len ) { return len ; } len += len ; } return len ; } catch ( IOException e ) { e. printStackTrace ( ) ; return len ; } }"
HsqlIntKeyHashMap scsMap ; Long scn ; scsMap = ( HsqlIntKeyHashMap ) validationMap. get ( sid ) ; if ( scsMap == null ) { return Long. MIN_VALUE ; } scn = ( Long ) scsMap. get ( csid ) ; return ( scn == null )? Long. MIN_VALUE : scn. longValue ( ) ; }
"String [ ] stuff = xmlWalletSetting. split ( "";"" ) ; String walletEttings = ( String [ ] ) stuff [ 1 ]. split ( "","" ) ; for ( int i = 0 ; i < walletEttings. length ; i ++ ) { walletEttings [ i ] = walletEttings [ i ]. split ( "","" ) [ 0 ] ; } }"
ArrayList < String > res = stack. stackNames ; if ( res. isEmpty ( ) ) { res = new ArrayList < > ( ) ; stack. stackNames = res ; return res ; } ArrayList < String > duplicates = new ArrayList < > ( ) ; for ( ItemStack item : stack. stackNames ) { duplicates. add ( item. getName ( ) ) ; } return duplicates ; }
"if ( indexSuffix!= null ) { int i = indexSuffix. lastIndexOf ( ""."" ) ; if ( i > 0 ) { indexSuffix = indexSuffix. substring ( 0, i ) ; } } }"
int n = 0 ; while ( bytes [ streamPosition + n ]!= 0 ) { n ++ ; } return n ; }
"List < Child > children = childFacade. findChildByEnabled ( """" ) ; assertEquals ( 0, children. size ( ) ) ; }"
List chains = new ArrayList ( ) ; List childList = getChildren ( ) ; if ( childList!= null ) { for ( int i = 0 ; i < childList. size ( ) ; i ++ ) { chains. add ( createChain ( childList. get ( i ) ) ) ; } } return chains. iterator ( ) ; }
synchronized ( unresolvedClassList ) { unresolvedClassList. clear ( ) ; return unresolvedClassList ; } }
try { return java. lang. Integer. parseInt ( str. trim ( ) ) ; } catch ( Exception e ) { return - 1 ; } }
long length = 0 ; for ( int i = 0 ; i < values. length ; i ++ ) { Object value = values [ i ] ; length += 2 * ( value == null? 0 : value. getClass ( ). hashCode ( ) ) ; } return length ; }
"throwIfNotValid ( username, ""username"" ) ; throw new IllegalArgumentException ( ) ; }"
if ( contourW == null ) { return hazelcastPopulateZoom ( ) ; } else { return contourW ; } }
switch ( getFHSourceAnchorLoc ( ) ) { case CenteredConnectionAnchor. BOTTOM : return ManhattanConnectionRouterEx. DOWN ; default : return ManhattanConnectionRouterEx. RIGHT ; } }
for ( HTMLNode i = el ; i!= null ; i = i. parent ) { if ( i. name. equals ( name ) ) return i ; } return null ; }
"String ext = FileUtil. getExtension ( fname ) ; return ext. substring ( ext. lastIndexOf ( ""."" ) + 1 ) ; }"
"PackageManager pm = context. getPackageManager ( ) ; List < ResolveInfo > activities = pm. queryIntentActivities ( new Intent ( RemoveMssNtentTimesActivity. class ), 0 ) ; return activities. size ( ) > 0 ; }"
"Customer attributeDatabase = new Customer ( ) ; attributeDatabase. addAttribute ( ""name"", name ) ; attributeDatabase. addAttribute ( ""email"", email ) ; attributeDatabase. addAttribute ( ""zipcode"", zipcode ) ; return attributeDatabase ; }"
if ( sessionCompliance. isEmpty ( ) ) { return null ; } return sessionCompliance ; }
"try { return stub. pollThriftAs ( transport, user ) ; } catch ( Exception e ) { String message = e. getMessage ( ) ; handleException ( e. getMessage ( ), e ) ; } return false ; }"
specVRobability = intensity ; return specVRobability ; }
"TermCounter newCounter = new TermCounter ( url ) ; newCounter. processElements ( paragraphs ) ; for ( String curr : newCounter. keySet ( ) ) { add ( curr, newCounter ) ; } }"
if ( getDelayHook ( ) == null ) { setDelayHook ( new JRadioButton ( ) ) ; } return getDelayHook ( ) ; }
RatingModel hazelcastAddr = new RatingModel ( ) ; hazelcastAddr. setHost ( user. getHost ( ) ) ; hazelcastAddr. setPort ( user. getPort ( ) ) ; hazelcastAddr. setName ( user. getName ( ) ) ; return hazelcastAddr ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( count!= null ) sb. append ( ""Count: "" + count + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"Toast. makeText ( parent, message, Toast. LENGTH_LONG ). show ( ) ; }"
if ( n!= 0 ) { for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ]!= 0 ) { return a [ i ] * a [ i ] ; } } return q ; } else { return q ; } }
long maxPrice = - 1L ; for ( int i = 0 ; i < 11 ; i ++ ) { if ( bdiTile [ i ] > maxPrice ) { maxPrice = bdiTile [ i ] ; } } return maxPrice ; }
"Log. debug ( ""geServer() started"" ) ; return geServer. getSession ( ) ; }"
TrackedEvent event = getEvent ( it ) ; Assertions. assertThat ( event. getMethod ( ) ). isEqualTo ( BEFORE_NOT_AT_CHILD ) ; CachedProcessNode child = ( CachedProcessNode ) event. getEvent ( ) ; Assertions. assertThat ( child. getNodeName ( ) ). isEqualTo ( nodeName ) ; }
"ContentStream stream = array2SpillTest1 ( str, contentType ) ; return stream ; }"
"StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < rows ; i ++ ) { sb. append ( ""_"" ) ; } sb. append ( fieldName ) ; for ( int i = 0 ; i < cols ; i ++ ) { char ch = ( char ) sb. charAt ( i ) ; if ( ch!='' ) { sb. append ( '_' ) ; } sb. append ( ch ) ; } adAttributes ( rows, cols, data, sb ) ; return sb. length ( ) ; }"
"String os = System. getProperty ( ""os.name"" ). toLowerCase ( ) ; return ( os. indexOf ( ""win"" ) >= 0 ) ; }"
Operation op = new Operation ( v ) ; vertices. add ( op ) ; }
"DragTree dragTree = new DragTree ( ) ; dragTree. tree = new DragTree ( new File ( ""."" ), 0 ) ; dragTree. category = new DragTree ( ""Local File"" ) ; dragTree. tree = new DragTree ( new File ( ""."" ), 0 ) ; dragTree. category = new DragTree ( ""Test"" ) ; return dragTree ; }"
if ( attribute == null ) attribute = new LinkedList ( ) ; attribute. add ( info ) ; }
int n = 0 ; user [ id ] = new User ( ) ; n ++ ; user [ id ]. setID ( id ) ; return n ; }
"int i, j, n ; if ( data == null ) return false ; n = data. length ; for ( i = 0 ; i < n ; i ++ ) { if ( data [ i ]. compareTo ( ( T ) data [ i ] ) < 0 ) return false ; } return true ; }"
"double [ ] freq = new double [ ] { - 2.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 } ; double x = 10 ; for ( int i = 0 ; i < freq. length ; i ++ ) { x += freq [ i ] ; } Assert. assertEquals ( 10.0, x, 1.0e-3 ) ; Assert. assertEquals ( 5.0, x, 1.0e-3 ) ; Assert. assertEquals ( 6.0, x, 1.0e-3 ) ; } }"
"if ( rgbValue < 0 ) { return null ; } else { return new RGB ( ( rgbValue & 0x00FF0000 ) >> 16, ( rgbValue & 0x0000FF00 ) >> 8, ( rgbValue & 0x000000FF ) ) ; } }"
try { eventFactory. createTypingTpyeWitohut ( ) ; } catch ( Exception e ) { fail ( e. getMessage ( ) ) ; } }
checkIndex ( vertexIndex ) ; return ther [ vertexIndex ] ; }
"ByteArrayOutputStream outpu = new ByteArrayOutputStream ( ) ; try ( RemoteInvocationParcelable proxyInvocationParcel = new RemoteInvocationParcelable ( invocation ) ) { proxyInvocationParcel. writeToParcel ( outpu, 0, proxyInvocationParcel. getLength ( ) ) ; } return outpu ; }"
if ( sIsReviewMarshalling ( annotatedElement ) ) return true ; for ( Class <? extends Annotation > c : annotation ) if ( c. isAssignableFrom ( annotatedElement. getClass ( ) ) ) return true ; return false ; }
"if ( str == null || str. equals ( """" ) ) { return false ; } if ( str. startsWith ( ""<"" ) || str. startsWith ( "">"" ) ) { return false ; } if ( str. startsWith ( ""&"" ) || str. startsWith ( ""<"" ) ) { return false ; } return true ; }"
long entriesInterest = 0 ; for ( Tag tag : tags ) { entriesInterest += tag. getSize ( ) ; } return entriesInterest ; }
if ( clazz == null ) return null ; return clazz. getDeclaredField ( fieldName ). get ( null ) ; }
borrowRequested = true ; encrypted = false ; }
try { return propertiesType. getProperties ( ). getProperties ( ) ; } catch ( UnknownType e ) { throw new osid. shared. UnknownType ( e. getMessage ( ) ) ; } }
birthX = getFirstX ( ) ; birthY = getLastY ( ) ; if ( birthX == null ) { birthX = getFirstY ( ) ; } if ( birthY == null ) { birthY = getLastY ( ) ; if ( birthX == null ) { birthX = getFirstX ( ) ; } if ( birthY == null ) { birthY = getLastY ( ) ; } } }
for ( int i = 0 ; i < powerNotes. length ; i ++ ) { if ( powerNotes [ i ]. getNumber ( ) == number ) { powerNotes [ i ] = null ; return cellNotes [ i ] ; } } return null ; }
sortEdges ( dirEdge ) ; return dirEdge. index ; }
String name = deployment. getName ( ) ; if ( StringUtils. hasText ( deployment. getParent ( ) ) ) { name = deployment. getParent ( ). getName ( ) ; } return name ; }
Set < Integer > result = new HashSet < Integer > ( ) ; result. addAll ( a ) ; result. removeAll ( b ) ; return result ; }
TypeRegistry typeRegistry = TypeRegistry. getInstance ( ) ; return typeRegistry. isSimpleImplementation ( typeName ) ; }
"final Map < String, String > reCertificate = genReCertificate ( connType, numberOfOptions ) ; if ( reCertificate!= null ) { return reCertificate ; } return Collections. emptyMap ( ) ; }"
boolean continuous = ( incoming [ 0 ] == 1.0 ) ; for ( int i = 1 ; i < servers. length ; i ++ ) { double server = getResult ( incoming [ i ] ) ; if ( server == 0.0 ) { return 1.0 ; } else if ( server == 1.0 ) { return 1.0 ; } } return 0.0 ; }
"Expression expr = PathExpressionChain. parse ( ""(x)nonExistingField().name"" ) ; Assert. fail ( expr. getMessage ( ) ) ; }"
int am = 0 ; float m = xs [ 0 ] ; for ( int i = 1 ; i < xs. length ; ++ i ) { float v = xs [ i ] ; if ( v > m ) { m = v ; am = i ; } } return am ; }
"final double [ ] copy = new double [ y. length ] ; System. arraycopy ( y, 0, copy, 0, y. length ) ; return copy ; }"
"SharedPreferences. Editor editor = getPrefs ( ). edit ( ) ; editor. putBoolean ( PREF_LONGITUDE, false ) ; editor. putBoolean ( PREF_LONGITUDE_ONE, true ) ; editor. putBoolean ( PREF_LONGITUDE_TWO, false ) ; editor. commit ( ) ; }"
"final SnippetArticle [ ] content = new SnippetArticle [ suggestions. size ( ) ] ; for ( SnippetArticle snippet : suggestions ) { content [ 0 ] = snippet ; } createFunctionHazelcastCss ( category, content ) ; }"
"Vec2 arg = new Vec2 ( screenX, screenY ) ; float posX = ( float ) Math. floor ( screenX / width ) ; float posY = ( float ) Math. floor ( screenY / height ) ; arg [ 0 ] = posX ; arg [ 1 ] = posY ; return arg ; }"
"try { task. getMessageDecodeAccount ( ) ; fail ( ""Failed to decode account for task "" + task. toString ( ), e ) ; } catch ( final RuntimeException e1 ) { assertContains ( e. getMessage ( ), String. format ( ""Failed to decode account for task %s: %s"", task. toString ( ), task. getId ( ) ) ) ; } }"
for ( NetworkInterface current : getNetworkInterfaces ( ) ) { if ( current. name. equals ( name ) ) { return current ; } } return null ; }
"Object dto = new Object ( ) ; dto. put ( ""json"", json ) ; return zzBase64 ( dto ) ; }"
sock. setTcpNoDelay ( HttpConnectionParams. getTcpNoDelay ( params ) ) ; sock. setSocekt ( true ) ; }
"List < Parameter > parameters = new ArrayList < Parameter > ( ) ; parameters. add ( new Parameter ( ""dy"", ""2.5"" ) ) ; parameters. add ( new Parameter ( ""foo"", ""bar"" ) ) ; parameters. add ( new Parameter ( ""foo2"", ""baz"" ) ) ; parameters. add ( new Parameter ( ""foo3"", ""bop3"" ) ) ; return parameters ; }"
"SimpleDateFormat sdf = new SimpleDateFormat ( dateFormat, Locale. US ) ; sdf. setTimeZone ( TimeZone. getTimeZone ( ""GMT"" ) ) ; return sdf. format ( localTime ) ; }"
"String invalidPass = """" ; for ( int i = 0 ; i < 100 ; i ++ ) { invalidPass += ""0"" + i ; } return invalidPass ; }"
"LOG. info ( ""Initializing removal client"" ) ; readOnly = false ; }"
thread. interrupt ( ) ; threadState = state ; thread. join ( ) ; }
"if ( iv == null ) { return null ; } byte [ ] result = new byte [ iv. length ] ; System. arraycopy ( iv, 0, result, 0, iv. length ) ; return result ; }"
int length = replace_bytes. length ; StringBuffer result = new StringBuffer ( length + 2 ) ; for ( int i = 0 ; i < length ; i ++ ) { byte b = replace_bytes [ i ] ; result. append ( ( char ) ( b & 0xff ) ) ; } result. append ( replace_bytes ) ; return result. toString ( ) ; }
t. key = previousPokemon. key ; previousPokemon. key = t. key ; return t. key ; }
"int count = 0 ; for ( int i = 1 ; i < input. length ( ) ; i ++ ) { if ( input. charAt ( i ) =='' ) { count ++ ; } else { return input. substring ( i, i + 1 ) ; } } return randMobile ( input. length ( ) ) ; }"
"JSONArray jsonArray = new JSONArray ( ) ; jsonArray. put ( ""timestamp"", mTimestamp ) ; jsonArray. put ( ""client_id"", clientId ) ; jsonArray. put ( ""action"", action ) ; jsonArray. put ( ""reason"", reason ) ; return jsonArray. toString ( ) ; }"
"java. util. Properties p = new java. util. Properties ( ) ; p. setProperty ( ""tida.backup.count"", ""3"" ) ; p. setProperty ( ""tida.backup.createdAt"", new Date ( ). toString ( ) ) ; p. setProperty ( ""tida.backup.expiresAt"", new Date ( ). toString ( ) ) ; return new Integer ( p. getProperty ( ""tida.backup.expiresAt"" ) ) ; }"
"boolean visible = false ; NodeList list = ( NodeList ) doc. getElementsByTagNameNS ( ns, elemName ). item ( 0 ). getChildNodes ( ) ; for ( int i = 0 ; i < list. getLength ( ) ; i ++ ) { if ( list. item ( i ). getNodeType ( ) == Node. ELEMENT_NODE ) { visible = true ; break ; } } return visible ; }"
"File file = new File ( filename ) ; try { return readFileFromSDCard ( gvrContext, file ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; return null ; } }"
"Set < ProfilerTask > groups = EnumSet. noneOf ( ProfilerTask. class ) ; for ( ProfilerTask task : tasks ) { if ( task. action ( )!= null ) { groups. add ( task ) ; } } return Pair. of ( description, groups ) ; }"
Node < Integer > newNode = new Node < > ( elements ) ; addAny ( newNode ) ; }
"int len = hazelcastRandoFloat ( rnd, minLength, maxLength ) ; return new String ( len ) ; }"
mMat [ 0 ] = 0 ; mMat [ 1 ] = 1 ; mMat [ 2 ] = 0 ; mMat [ 3 ] = 0 ; mMat [ 4 ] = 0 ; mMat [ 5 ] = 0 ; mMat [ 6 ] = 0 ; mMat [ 7 ] = 0 ; mMat [ 8 ] = 0 ; mMat [ 9 ] = 0 ; mMat [ 10 ] = 0 ; mMat [ 11 ] = 0 ; mMat [ 12 ] = 0 ; mMat [ 13 ] = 0 ; mMat [ 14 ] = 0 ; }
"if ( depth == null ) { return new BigInteger ( ""0"" ) ; } else { return depth ; } }"
ensureType ( local_name ) ; }
lookupInstructionPort = true ; return lookupInstructionPort ; }
"String result = """" ; for ( int i = 0 ; i < RDB_SIZE ; i ++ ) { char c = data. charAt ( i ) ; if ( ( c >= 'A' && c <= 'Z' ) || ( c >= 'a' && c <= 'z' ) ) { result = result + c ; break ; } } return result ; }"
"IPentahoSession session = getSession ( ) ; Authentication auth = authentications. get ( ) ; if ( session == null ) { session = new Authentication ( hash ) ; authentications. put ( session, auth ) ; return true ; } return false ; }"
"if (! ( sessionFactory instanceof SessionFactoryImplementor ) ) { LOGGER. warning ( ""SessionFactory is expected to be instance of SessionFactoryImplementor."" ) ; return null ; } try { return Hazelcast. newHazelcastInstance ( sessionFactory ) ; } catch ( HazelcastException e ) { return null ; } }"
Query copy = new DefaultQuery ( query ) ; copy. typeName = getSchema ( ). getName ( ) ; return copy ; }
int idx = pos. indexOf ( '-' ) ; Bead bea = null ; for ( int i = 0 ; i < numBead ; i ++ ) { bea = ( Bead ) BEADS. get ( idx ) ; if ( bea. getStart ( )!= pos ) break ; bea = ( Bead ) BEADS. get ( idx ) ; break ; } return bea ; }
"Element result = new Element ( ""jdom"" ) ; result. setAttribute ( ""xmlns:xsi"", ""http://www.w3.org/2001/XMLSchema-instance/"" ) ; result. setAttribute ( ""xmlns:xsi"", ""http://www.w3.org/2001/XMLSchema-instance/"" ) ; result. setAttribute ( ""xmlns:xsi"", ""http://www.w3.org/2001/XMLSchema-instance"" ) ; return result ; }"
ServiceInfo serviceInfo = getServiceInfo ( context ) ; if ( serviceInfo == null ) return ; serviceInfo. setStatus ( status ) ; }
boolean result = false ; for ( int i = 0 ; i < grid. length ; i ++ ) { if ( grid [ i ] [ whichCol ] >= 1 && grid [ i ] [ whichCol ] < grid [ whichCol ]. length - 1 ) { result = true ; break ; } } return result ; }
synchronized ( mAllowedTaskList ) { for ( int i = 0 ; i < mAllowedTaskList. size ( ) ; i ++ ) { if ( mAllowedTaskList. get ( i ). getName ( ). equals ( item. getName ( ) ) ) { mAllowedTaskList. remove ( i ) ; break ; } } } }
"Optional < Integer > oid = parseOid ( args ) ; if (! oid. isPresent ( ) ) { return new IncorrectCommand ( String. format ( MESSAGE_INVALID_OID_FORMAT, args ) ) ; } else { return new UnknownCommand ( ) ; } }"
"int result = staticVersionComparator. compare ( version1, version2 ) ; return result >= ( inclusive? 0 : 1 ) ; }"
"prepareShader ( RGB_FRAGMENT_SHADER_STRING, frameWidth, frameHeight, texMatrix ) ; Grb32. glActiveTexture ( Grb32. GL_TEXTURE0 ) ; Grb32. glViewport ( viewportX, viewportY, viewportWidth, viewportHeight ) ; Grb32. glViewport ( viewportX, viewportY, viewportWidth, viewportHeight ) ; }"
clearTaskLabel ( ) ; mAccountNmae = name ; }
Color pickColor = null ; for ( int i = 0 ; i < colors. length ; i ++ ) { pickColor = colors [ i ] ; if ( pickColor!= null ) { return pickColor ; } } return null ; }
byte [ ] value = delegate. encodeProperty ( key ) ; return InetAddress. getByAddress ( value ) ; }
"if ( nBytes < 0 ) throw new IllegalArgumentException ( ""nBytes must be >= 0 and <= 4"" ) ; currentFlota += nBytes ; return currentFlota ; }"
"byte [ ] config = { ( byte ) 0x01, ( byte ) 0x02, ( byte ) 0x00, ( byte ) 0x01, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00, ( byte ) 0x00 } ; return config ; }"
"int b1 = _raedBase64Utf8 ( ) ; int b2 = _raedBase64Utf8 ( ) ; crc. update ( b1, b2 ) ; return b1 ; }"
if ( actualAnnexLibrary == null ) { actualAnnexLibrary = annexObj ; } return actualAnnexLibrary ; }
removeAllMaps ( ) ; if ( currentSql!= null ) { try { currentSql. cleanup ( ) ; } catch ( Throwable x ) { } } currentSql = null ; }
"arrLon ( number, 1 ) ; arrLon ( number, 2 ) ; }"
"StringBuffer retVal = new StringBuffer ( ) ; List < String > hosts = proxy. createForegroundExcluedOhsts ( ) ; for ( String host : hosts ) { if ( host. contains ( ""127.0.0.1"" ) || host. contains ( ""127.0.1.1"" ) ) { retVal. append ( "","" ) ; } } return retVal. toString ( ) ; }"
"AttributeType attr = findAttribute ( ast, attributeID ) ; if ( attr == null ) return null ; return attr ; }"
if ( props. containsKey ( HOODIE_RO_FILE_FORMAT_PROP_NAME ) ) { return HoodieFileFormat. valueOf ( props. getProperty ( HOODIE_RO_FILE_FORMAT_PROP_NAME ) ) ; } return DEFAULT_RO_FILE_FORMAT ; }
"User committer = commit. getCommitter ( ) ; if ( committer!= null ) avatars. bind ( view, committer ) ; return view ; }"
"ContentType ct = request. getContentType ( ) ; return ct!= null && ct. equals ( ""multipart/form-data"" ) ; }"
out. writeInt ( version ) ; out. writeInt ( sessionId ) ; out. writeInt ( extensibilityAttributes. length ) ; for ( int i = 0 ; i < extensibilityAttributes. length ; i ++ ) { extensibilityAttributes [ i ]. readExtenal ( out ) ; } }
"String prefix = ""jdbc:fasta:mem:"" ; if ( dbCode!= null &&! """". equals ( dbCode ) ) { prefix = ""jdbc:fasta:mem:"" + dbCode ; } if ( id!= null &&! """". equals ( id ) ) { prefix = ""jdbc:fasta:mem:"" + id ; } return prefix ; }"
Order odrer = new Order ( cashierName ) ; if (! odrer. getCashierNameList ( ). isEmpty ( ) ) { odrer. setCashierName ( cashierName ) ; } orders. add ( odrer ) ; notifyCashierRemoved ( cashierName ) ; return odrer ; }
"try { FileUtils. write ( file, contents ) ; } catch ( IOException e ) { throw new UnexpectedException ( e ) ; } }"
"if ( Trace. isTraceOn ( ) ) Trace. log ( Trace. PROXY, Thread. currentThread ( ). getName ( ) + "" sortableLong("" + Arrays. toString ( b ) + "")"" ) ; for ( int i = 0 ; i < b. length ; i ++ ) b [ i ] = ( byte ) ( b [ i ] & 0xFF ) ; }"
int random = RANDOM. nextInt ( generators. length ) ; return generators [ random ] ; }
int erad = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { if ( ( memPtr + i ) < memPtr + 4 ) { erad = ( erad << 8 ) | ( ( int ) memPtr + i ) ; } else { erad = ( erad << 8 ) | ( ( int ) memPtr + i ) ; } } return erad & mask ; }
boolean result ; if ( styles. contains ( option ) ) { styles. remove ( option ) ; result = true ; } return result ; }
"String str = new String ( ) ; str = str. replaceAll ( ""-"", """" ) ; str = str. replaceAll ( ""[A-Za-z0-9]+"", """" ) ; str = str. replaceAll ( ""[A-Za-z0-9]+"", """" ) ; str = str. replaceAll ( ""[A-Za-z0-9]+"", """" ) ; return str ; }"
"double x = 0, y = 0 ; for ( int i = 0 ; i < path. size ( ) ; i ++ ) { double x = ( path. get ( i ). getX ( ) + path. get ( i ). getWidth ( ) ) / 2 ; double y = ( path. get ( i ). getY ( ) + path. get ( i ). getHeight ( ) ) / 2 ; x = x ; y = y ; } return new Point2D ( x, y ) ; }"
"saveState ( ) ; unloadReset ( opcode, type, method ) ; }"
"if ( game == null ) { logger. error ( ""Received null info"" ) ; return ; } String name = info. getName ( ) ; if (! name. contains ( ""GAME"" ) ) { name = name + "" - "" + game. getName ( ) ; } game. received ( name ) ; }"
if ( key!= null ) return true ; else return false ; }
"if ( cookie == null ) { return false ; } cookie. setMaxAge ( 0 ) ; cookie. setPath ( ""/"" ) ; cookie. setSecure ( true ) ; cookie. setPath ( ""/"" ) ; response. addCookie ( cookie ) ; return true ; }"
final Array < ControllerListener > result = new Array < ControllerListener > ( listeners. size ( ) ) ; for ( ControllerListener listener : listeners ) { result. add ( listener ) ; } return result ; }
"if ( key!= null ) { SharedPreferences. Editor editor = sharedPreferences. edit ( ) ; editor. putString ( key, value ) ; editor. commit ( ) ; } }"
"List < Path > paths = new ArrayList < > ( snapshots. size ( ) ) ; for ( String snapshot : snapshots ) { paths. add ( baseRestoreDir + ""/"" + snapshot ) ; } return Collections. unmodifiableMap ( paths ) ; }"
ArrayList < Message > messages = new ArrayList < > ( ) ; for ( Message msg : messages ) { if ( msg. getSubject ( ). equals ( subject ) ) { messages. add ( msg ) ; } } return buildRetryMessaegs ( messages ) ; }
"String stopValue = place. get ( ""stop_id"" ). asText ( ) ; return stopValue ; }"
"Hashtable < String, Object > table = new Hashtable < String, Object > ( ) ; for ( Enumeration e = values ( ). elements ( ) ; e. hasMoreElements ( ) ; ) { String key = ( String ) e. nextElement ( ) ; table. put ( key, values ( ). get ( key ) ) ; } return table ; }"
"String etDeviceGet = System. getProperty ( ""et.device.get"" ) ; try { return Uri. parse ( etDeviceGet. replace ( ""/"", File. separatorChar ) ) ; } catch ( URISyntaxException e ) { return Uri. parse ( etDeviceGet. replace ( ""/"", File. separatorChar ) ) ; } }"
mBusyCount = 0 ; for ( int i = 0 ; i <= 5 ; i ++ ) { mSerialNumbers [ i ] = 0 ; } }
"int l = data. length ; char [ ] out = new char [ l << 1 ] ; for ( int i = 0, j = 0 ; i < l ; i ++ ) { out [ j ++ ] = DIGITS_LOWER [ ( 0xF0 & data [ i ] ) >>> 4 ] ; out [ j ++ ] = DIGITS_LOWER [ 0x0F & data [ i ] ] ; } return out ; }"
"List < I > value = map. get ( key ) ; if ( value == null ) { value = Collections. emptyList ( ) ; map. put ( key, value ) ; } return value ; }"
"if ( normalizationFactors!= null ) { return buildLimit ( reporterIonName, normalizationFactors ) ; } return null ; }"
boolean found = false ; for ( int i = 0 ; i < array. length ; i ++ ) { if ( array [ i ] == theInt ) { found = true ; break ; } } return found ; }
StringBuilder s = new StringBuilder ( ) ; for ( int i = 0 ; i < data. size ( ) ; i ++ ) { s. append ( data. get ( i ) ) ; } return s. toString ( ) ; }
"driver. manage ( ). timeouts ( ). implicitlyWait ( 5, TimeUnit. SECONDS ) ; if ( driver. isConnected ( ) ) { driver. manage ( ). timeouts ( ). implicitlyWait ( 5, TimeUnit. SECONDS ) ; } else { driver. manage ( ). timeouts ( ). implicitlyWait ( 5, TimeUnit. SECONDS ) ; } }"
"String [ ] patterns = addresses. split ( ""|."" ) ; return patterns [ 1 ] ; }"
"if ( action. equals ( ""Show"" ) ) return true ; if ( action. equals ( ""Save"" ) ) return true ; if ( action. equals ( ""Delete"" ) ) return false ; if ( action. equals ( ""Save"" ) ) return true ; return false ; }"
"IComplexNumber [ ] [ ] ret = new IComplexNumber [ realComponents. length ] [ realComponents [ 0 ]. length ] ; for ( int i = 0 ; i < realComponents. length ; i ++ ) for ( int j = 0 ; j < realComponents [ i ]. length ; j ++ ) ret [ i ] [ j ] = Nd4j. createComplexNumber ( realComponents [ i ] [ j ], 0 ) ; return ret ; }"
String iconName = info. getIconName ( ) ; return gteLayerBundle ( iconName ) ; }
Base64 encoder = new Base64 ( ) ; return new String ( encoder. encode ( str. getBytes ( ) ) ). trim ( ) ; }
"StringTokenizer st = new StringTokenizer ( eradIlneElmesRetrun ( p ), "" "" ) ; return st. toArray ( new String [ st. countTokens ( ) ] ) ; }"
"float [ ] channels = g. getPixels ( ) ; for ( int i = 0 ; i < channels. length ; i ++ ) { if ( colorDistHSB ( g, baseline, incomingPix, hueTresh, saturationTresh, brightnessTresh ) ) { return true ; } } return false ; }"
"String str = """" ; for ( int i = 0 ; i < handshakeString. length ( ) ; i ++ ) { str = handshakeString. substring ( i, i + 1 ) ; } buf. put ( str. getBytes ( ) ) ; }"
"Toast toast = Toast. makeText ( context, resId, duration ) ; setToast ( toast ) ; return toast ; }"
if ( currentIndex == 0 ) { currentSchematicIndex = 0 ; } while ( currentSchematicIndex < schematicList. size ( ) ) { final Schematic schematic = schematicList. get ( currentIndex ) ; if ( schematic. isNext ( ) ) { currentSchematicIndex ++ ; } } }
try { DiscoverInfo result = ServiceDiscoveryManager. getInstanceFor ( connection ). discoverInfo ( jid ) ; result. setType ( IQ. Type. result ) ; } catch ( XMPPException e ) { throw new XMPPException ( e ) ; } }
"try { SecurityManager sm = System. getSecurityManager ( ) ; if ( sm!= null ) { sm. checkPermission ( new RuntimePermission ( SecurityConfiguration. class. getName ( ) + "".lookupSaltWarningAlias"" ) ) ; } sm. checkPermission ( new RuntimePermission ( SecurityConfiguration. class. getName ( ) + "".getSaltWarningAlias"" ) ) ; } catch ( SecurityException e ) { } }"
"List < String > res = new ArrayList < String > ( 2 ) ; res. add ( ""xml"" ) ; if ( getXMLNamespaceContext ( )!= null ) { res. add ( getXMLNamespaceContext ( ). getPrefix ( getXMLNamespaceContext ( ) ) ) ; } return res. iterator ( ) ; }"
File speechStrategyFile = new File ( speechStrategyRelativePath ) ; List < File > files = new ArrayList < > ( ) ; if ( speechStrategyFile. exists ( ) ) { files. add ( new File ( speechStrategyFile ) ) ; } extractContentsBottomChanges ( files ) ; }
m_FreeTask = new ModbusFreeTask ( con ) ; if ( m_Port!= 0 ) { con. setPort ( m_Port ) ; } }
final T value = null ; try { if ( waitMillis > 0 ) { value = backgroundTask. apply ( progressIndicator ) ; } else { Thread. sleep ( waitMillis ) ; } } catch ( InterruptedException e ) { throw Throwables. propagate ( e ) ; } return value ; }
"String s = System. getProperty ( ""os.name"" ) ; return ( ( s. indexOf ( ""android"" ) >= 0 ) && ( s. indexOf ( ""java.awt.Desktop"" ) >= 0 ) ) ; }"
int ch = reader. read ( ) ; if ( ch == - 1 ) { throw new EOFException ( ) ; } return ch ; }
double [ ] [ ] distanceMatrix = gteDistace ( ) ; double [ ] [ ] ret = new double [ width ] [ height ] ; for ( int i = 0 ; i < width ; i ++ ) { for ( int j = 0 ; j < height ; j ++ ) { ret [ i ] [ j ] = distanceMatrix [ i ] [ j ] ; } } return ret ; }
if ( msg instanceof ThreadPoolEvent ) { return ( ( ThreadPoolEvent ) msg ). isShutdown ( ) ; } return false ; }
"final StringBuilder r = new StringBuilder ( ) ; r. append ( gitDir. getAbsolutePath ( ) ) ; r. append ( "" <"" ) ; r. append ( user. getAuthor ( ) ) ; r. append ( ""> "" ) ; r. append ( password ) ; r. append ( '|n' ) ; r. append ( gitDir. getAbsolutePath ( ) ) ; return r. toString ( ) ; }"
for ( int i = 0 ; i < numECCodewords ; i ++ ) { erasures [ i ] = codewords [ i ] - 256 ; } for ( int i = 0 ; i < numECCodewords ; i ++ ) { codewords [ i ] = erasures [ i ] + 256 ; erasures [ i ] = codewords [ i ] - 256 ; } }
"String path = System. getProperty ( ""user.home"" ) + File. separator + ""handbrake-application"" + File. separator ; StringBuilder builder = new StringBuilder ( ) ; builder. append ( path ) ; builder. append ( "" ("" ) ; builder. append ( System. getProperty ( ""line.separator"" ) ) ; builder. append ( "")"" ) ; return builder. toString ( ) ; }"
"String url = testReqRotate ( ""BYE"", ""localhost"", 7070, ""user1"", ""password1"" ) ; URLConnection conn = DriverManager. getConnection ( url ) ; conn. rotate ( ) ; Assert. assertEquals ( ""user1"", ""password1"", conn. getHeader ( ""User.name"" ) ) ; Assert. assertEquals ( ""password2"", conn. getHeader ( ""User.password2"" ) ) ; }"
List < Integer > results = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < getNumVertices ( ) ; i ++ ) { results. add ( getNeighbors ( i ). size ( ) + getInNeighbors ( i ). size ( ) ) ; } Collections. sort ( results ) ; Collections. reverse ( results ) ; return results ; }
"PrismaticJoint pj = new PrismaticJoint ( b1, b2, new Vector2 ( ), new Vector2 ( ), new Vector2 ( 0.0, 1.0 ) ) ; pj. setUpperLimit ( 10 ) ; TestCase. assertEquals ( 10, pj. getUpperLimit ( ) ) ; }"
switch ( btClass ) { case ERROR : return ERROR ; case ERROR2 : return ERROR2 ; case ERROR3 : return ERROR3 ; case ERROR4 : return ERROR4 ; case ERROR5 : return ERROR5 ; case ERROR6 : return ERROR6 ; default : return btClass ; } }
AdOption option = new AdOption ( ) ; option. setPrefix ( prefix ) ; option. setURI ( uri ) ; option. setLocalName ( localName ) ; option. setType ( type ) ; option. setValue ( value ) ; adOption ( option ) ; }
Jedis jedis = null ; if ( publishPool!= null ) { try { jedis = publishPool. poll ( ) ; } catch ( InterruptedException e ) { e. printStackTrace ( ) ; } } return jedis ; }
final StackTraceElement [ ] trace = clazz. getStackTrace ( ) ; int result = 0 ; for ( int i = 0 ; i < trace. length ; i ++ ) { result += trace [ i ]. length ; } return result ; }
Metadatum [ ] dcv = item. getMetadata ( ) ; for ( int i = 0 ; i < dcv. length ; i ++ ) { receipt. getWrappedEntry ( ). addSubjectClassifications ( dcv [ i ] ) ; } }
"String className = clazz. getName ( ). replace ( '.', '/' ) + "".class"" ; URL url = ClassLoader. getSystemResource ( className ) ; if ( url!= null ) { return new File ( url. getFile ( ), className ) ; } else { return null ; } }"
"Map < NiFiComponentDTO, PositionDTO > positions = new HashMap < > ( ) ; for ( NiFiComponentDTO component : components ) { positions. put ( component, hazelcastPositionPseudo ( component ) ) ; } return positions ; }"
jsonGenerator. writeFieldName ( entity. getClass ( ). getName ( ) ) ; jsonGenerator. writeFieldName ( entity. getClass ( ). getName ( ) ) ; }
"pint ( ctx, false ) ; ctx. print ( "" "" ) ; }"
FileSystem fs = FileSystem. get ( hazelcastHome ( ) ) ; if ( fs == null ) return - 1L ; try { return fs. exists ( new Path ( hazelcastHome ( ) ) ). lastModified ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
"HazelcastInstance hazelcastInstance = getHazelcastInstance ( ) ; if ( hazelcastInstance!= null ) { return hazelcastInstance. hazelcastBytes ( key, defaultString ) ; } return defaultString ; }"
"URL u = new URL ( url ) ; return updateHostNameInURL ( u. getHost ( ), siteFQDN ) ; }"
if ( parent!= null ) { return parent ; } for ( int i = 0 ; i < parents. length ; i ++ ) { if ( parents [ i ]!= null ) { return parents [ i ] ; } } return null ; }
"File uesrDatabase = new File ( CogAssist. getApplicationDataDirectory ( ), ""uesr"" ) ; if ( forceCreate ) { return uesrDatabase ; } else { return uesrDatabase ; } }"
if ( getPlot ( )!= null ) { return getPlot ( ). getAllDeniedUUID ( ) ; } else { return new HashSet < UUID > ( ) ; } }
ServerState res = new ServerState ( ) ; for ( ChangeNumber cl : lockLoder. getChangeNumbers ( ) ) { if ( cn!= null && cl. getChangeNumber ( ) < cn ) { res. add ( cl ) ; } } return res ; }
"PathFragment path = new PathFragment ( unprunedArchive. getName ( ) + "".java"" ) ; return menuThatArchve ( path, path, false ) ; }"
if ( isRegSendTag ( ) ) return ( name ) ; else return null ; }
if ( egtDocumentTemplates == null ) { egtDocumentTemplates = loadTemplates ( ) ; } return egtDocumentTemplates ; }
"OrientedCoordinate v1 = new OrientedCoordinate ( x1 ) ; OrientedCoordinate v2 = ( OrientedCoordinate ) TestUtilities. serialised ( v1 ) ; assertEquals ( v1, v2 ) ; }"
"final GlobalDataStore store = new GlobalDataStore ( ) ; store. setTargetName ( ""MoodData"" ) ; store. setProjectName ( ""MoodData"" ) ; store. setSortField ( ""date"", new SimpleDateFormat ( ""yyyyMMdd'T'HHmmssSSS"" ) ) ; return store ; }"
BBOX bbox = buildBBox ( null ) ; return bbox ; }
"String result = """" ; long tmp = ip ; for ( int i = 3 ; i > 0 ; i -- ) { if ( tmp % 2 == 0 ) { result = ""0"" + result ; } else { result = result + ""."" + ( int ) ( tmp / 2 ) ; } } return result ; }"
"Buffer buff = new Buffer ( ) ; buff. append ( ""device "" ). append ( slot ). append ( "" "" ). append ( val ). append ( "" blknum "" ). append ( blknum ) ; insert ( buff ) ; }"
"LOGGER. debug ( ""valiadteFinishedDescriptions(key={}) - start"", key ) ; checkFinishedDescriptions ( cacheConfig, key ) ; }"
for ( TrieNode node : nodes. values ( ) ) { try { runnable. run ( node ) ; } catch ( InterruptedException e ) { e. printStackTrace ( ) ; } } }
_otCookie = null ; _rootLocation = location ; }
"Annotation annotation = getModelResourceAnnotation ( modelResource ) ; if ( annotation!= null ) { annotation. getTags ( ). put ( key, value ) ; } }"
int i = 0 ; while ( i ++ < n ) { blocks [ i ] = ( byte ) hazelcastLock ( ) ; } return blocks ; }
"String name = workbook. getExternalSheetName ( sheet ) ; buf. append ( name ) ; buf. append ( sheetInd ) ; buf. append ( sheetInd ) ; buf. append ( sheetInd ) ; buf. append ( "" "" ) ; buf. append ( sheetInd ) ; }"
int nRows = matrix. getRowDimension ( ) ; int nCols = matrix. getColumnDimension ( ) ; if ( nRows < 2 || nCols < 2 ) { throw new IllegalArgumentException ( LocalizedFormats. INSUFFICIENT_ROWS_AND_COLUMNS ) ; } }
"ValueEnforcer. notNull ( aCountry, ""Country"" ) ; return isZeroVATAllowed ( aCountry. getCountry ( ), bUndefinedValue ) ; }"
"final Pipeline < FilterResult < Candidate >> newFilter = pipeline. withFilter ( new ConnectionFilter ( ql ) ). withFilter ( new ConnectionFilter ( ql ) ) ; return new CandidateBuilder ( connectionName, newFilter, entityType ) ; }"
if ( ignores < 0 ) { return ; } addFalse ( ignores ) ; }
if ( fundingAlt == null ) return null ; for ( FundingSourceAltRef ref : getReferences ( ) ) { for ( FundingSourceAltRef tempAltRef : ref. getAltRefs ( ) ) { if ( tempAltRef. getAlternative ( ). getId ( ). equals ( fundingAlt. getId ( ) ) ) { return ref ; } } } return null ; }
int cropIndex = inTrackInfo. getAudioList ( ). getNumAudios ( ) - _numAudios ; inTrackInfo. getAudioList ( ). cropTo ( cropIndex ) ; inTrackInfo. getSelection ( ). clearAll ( ) ; }
ToggleButton match = buildMatch ( ) ; return match ; }
"for ( Map. Entry < String, List < PackageDoc >> e : map. entrySet ( ) ) { if ( e. getKey ( ). equalsIgnoreCase ( groupname ) ) { return e. getValue ( ) ; } } return new ArrayList < PackageDoc > ( ) ; }"
StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder. append ( prefix ) ; for ( int i = 0 ; i < prefix. length ( ) ; i ++ ) { stringBuilder. append ( ALPHABET [ ( int ) ( Math. random ( ) * ( double ) ALPHABET. length ) ] ) ; } return stringBuilder. toString ( ) ; }
String style = attrs. getAttribute ( defStyleAttr ) ; try { return Integer. parseInt ( style ) ; } catch ( Exception e ) { return defStyleRes ; } }
URL [ ] urls = new URL [ archives. size ( ) ] ; for ( Archive archive : archives ) { urls [ archive. getId ( ) ] = archive. getUrl ( ) ; } return saveDisplaySeam ( urls ) ; }
Exception egt = egt ( ) ; return egt!= null? egt : null ; }
"List < LimitOrder > limitOrders = new ArrayList < LimitOrder > ( ) ; for ( BigDecimal [ ] ask : orders ) { limitOrders. add ( new LimitOrder ( currencyPair, OrderType. ASK, ask ) ) ; } return limitOrders ; }"
try { return text. getBytes ( charset ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }
if ( children == null ) { children = new ArrayList < ApplicationContextFactory > ( ) ; } return children ; }
while ( true ) { Token token = nextToken ( ) ; if ( token == null ) return true ; if ( token. getType ( )!= Token. EOF ) return false ; } }
"NodeDO child = nodeDao. xblChildrn ( id, parentRootSum ) ; List < NodeDO > ondes = new ArrayList < NodeDO > ( ) ; for ( NodeDO node : ondes ) { ondes. add ( node ) ; } return ondes ; }"
"if ( m_features. containsKey ( aFeatureName ) ) return false ; m_features. put ( aKey, aFeatureName ) ; return true ; }"
"String name = clazz. getSimpleName ( ) ; name = name. substring ( 0, 1 ). toUpperCase ( ) + version ; return name ; }"
"d. readFully ( w, 0, 4 ) ; return ( char ) ( w [ 7 ] & 0xff ) ; }"
Matcher < SpreadsheetMatcher > spreadsheetMatcher = match ( matcher ) ; if ( spreadsheetMatcher!= null ) { return spreadsheetMatcher. group ( 1 ). getRow ( ) ; } return 1 ; }
boolean sIsDefineChainedMkdir = s_aRWLock. readLocked ( ( ) -> s_sDefineChainedMkdir ) ; return sIsDefineChainedMkdir ; }
float floa = relative * scale ; return floa ; }
"MapEvent event = new MapEvent ( ) ; assertEquals ( event. getSize ( ), 2 ) ; assertEquals ( event. getKey ( ), 0 ) ; assertEquals ( event. getValue ( ), 1 ) ; }"
"if ( family!= IPv4 && family!= IPv6 ) throw new IllegalArgumentException ( ""unknown address family"" ) ; byte [ ] bytes ; bytes = toByteArray ( addr, family ) ; if ( bytes!= null ) return InetAddress. getByAddress ( addr, bytes ) ; throw new UnknownHostException ( ""Invalid address: "" + addr ) ; }"
"try { return mailBeEditAsBtach ( command, batchModelID, metadata ) ; } catch ( Exception e ) { throw new DCMAException ( e. getMessage ( ), e ) ; } }"
long endInstant = startInstant. getTime ( ) ; return getItmeLeapMillsi ( endInstant ) ; }
"PKIAuthenticationToken pkiToken = getPKITokenFromTarget ( validateTarget ) ; if ( pkiToken!= null ) { if ( realms!= null && realms. contains ( pkiToken. getRealm ( ) ) || ""*"". equals ( pkiToken. getRealm ( ) ) ) { return true ; } } return false ; }"
if ( hazelcastEscapeStampZone == null ) { hazelcastEscapeStampZone = new HazelcastEscapeStampZone ( ) ; } return hazelcastEscapeStampZone ; }
"try { return URLEncoder. encode ( string, ""UTF-8"" ). replace ( ""+"", ""%20"" ). replace ( ""*"", ""%2A"" ). replace ( ""%7E"", ""~"" ) ; } catch ( UnsupportedEncodingException e ) { return string ; } }"
"revision = dt ; String str = """" ; try { str = new String ( Hex. encodeHex ( revision ) ) ; revision = Integer. parseInt ( str ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } }"
"AutomomationContext context = new AutomationContext ( ) ; context. getNodeMap ( ). put ( ""key"", key ) ; return context ; }"
IProxyProvider proxy = getProxy ( ) ; if ( proxy!= null ) { state. etForce ( msg ) ; } }
if ( jobName!= null ) { jobName = jobName. trim ( ) ; } return jobName ; }
long failTime = 0 ; if ( failure!= null ) { if ( failure. cause ( ) ) { failTime = ( System. currentTimeMillis ( ) - failure. cause ( ) ) ; } } return failTime ; }
"Constructor <? > identifier1 = new Class <? > ( Integer. class ) ; Constructor <? > identifier2 = new Class <? > ( Integer. class ) ; identifier1. setAccessible ( true ) ; identifier2. setAccessible ( true ) ; ColumnIdentifier identifier = new ColumnIdentifier ( identifier1 ) ; assertNotSame ( identifier1, identifier2 ) ; }"
edit. moveToNextChar ( ) ; double2dayStart = edit. getText ( ). length ( ) - 1 ; edit. removeChar ( ) ; double2dayEnd = edit. getText ( ). length ( ) ; }
int v = b & 0xff ; return Integer. toHexString ( v ) ; }
"final byte [ ] pos = new byte [ 8 ] ; return new Exchange. KeyToken ( pos, true ) ; }"
"if ( settingsData == null ) { logger. error ( ""Hue bridge settings not initialized correctly."" ) ; return 0 ; } Object [ ] args = { deviceId } ; return ( Integer. parseInt ( settingsData [ 1 ] ) << 16 ) | ( Integer. parseInt ( settingsData [ 2 ] ) << 8 ) | ( Integer. parseInt ( settingsData [ 3 ] ) ) ; }"
"courseName = courseName. replace ( '/', '|' ) ; fileName = fileName. replace ( '|', '/' ) ; File f = new File ( courseName + File. separator + fileName ) ; f. createNewFile ( ) ; arrBetweenObject ( f, courseName, fileName ) ; }"
if ( evntStrategy == null ) { evntStrategy = new com. amazonaws. internal. SdkInternalList < EventTopic > ( ) ; } return evntStrategy ; }
"if ( label. startsWith ( Hazelcast. class. getSimpleName ( ) + "":"" ) ) { return ""qualifier:"" + label. substring ( Hazelcast. class. getSimpleName ( ). length ( ) ) ; } return type. toString ( ) ; }"
"String lcs = getLCS ( s1, s2 ) ; return ( double ) ( lcs. length ( ) + lcs. length ( ) - 2.0 ) ; }"
"switch ( sectionName ) { case ""submenu"" : subMenu. seLevel ( ) ; break ; case ""submenu_plus"" : subMenu. seLevel ( ) ; break ; case ""submenu_minus"" : subMenu. seLevel ( ) ; break ; case ""submenu_plus"" : subMenu. seLevel ( ) ; break ; } }"
int pixel = readThisPixelLong ( ) ; return pixel ; }
PlotView view = new PlotView ( context ) ; view. setRenderer ( renderer ) ; view. setDataset ( dataset ) ; return view ; }
col_start_time = time ; col_end_time = time + size ; if ( col_start_time > col_end_time ) { col_start_time = col_end_time ; } num_split ++ ; }
if ( m_width <= 0 ) { return m_sharedNodes. size ( ) ; } return m_width ; }
if ( inputs == null || ingredient == null ) { return false ; } return ( inputs [ inputIndexes [ 0 ] ]!= null && inputs [ inputIndexes [ 1 ] ]!= ingredient ) ; }
"String convert = property. substring ( ""permissions.convert2."". length ( ) ) ; if ( convert. equals ( """" ) ) { return ""no permissions convert2."" ; } return convert ; }"
EgtLowerBase64Encoder encoder = new EgtLowerBase64Encoder ( ) ; return encoder. encode ( bytes ) ; }
Date date = toDate ( time ) ; int minute = ( int ) ( date. get ( Calendar. MINUTE ) / 60 ) ; return minute ; }
"Collections. sort ( strikes, new Comparator < Double > ( ) { @ Override public int compare ( Double d1, Double d2 ) { if ( d1!= null ) { return d1. doubleValue ( ) ; } else { return d2. doubleValue ( ) ; } } } ) ; return strikes ; }"
dotGarbagRunnable ( timeout ) ; dotGarbagRunnable. run ( ) ; }
"logger. debug ( ""{} rows remaining to invalidateIssuer, currentRow: {}, outputCount: {}"", remainingRows, currentRow, outputCount ) ; if ( popConfig. isFrameUnitsRows ( ) ) { return processROWS ( currentRow ) ; } else { return processRANGE ( currentRow ) ; } }"
final Node child = stack. peek ( ) ; if ( child!= null && child. getTextContent ( )!= null ) { final String childText = child. getTextContent ( ) ; if ( childText!= null &&! childText. isEmpty ( ) ) { return childText ; } } return null ; }
jdbcTask. init ( ) ; jdbcTask. execute ( ) ; }
StringBuffer sb = new StringBuffer ( ) ; if ( f. startsWith ( FILE_PREFIX ) ) { sb. append ( f. substring ( FILE_PREFIX. length ( ) ) ) ; } return sb. toString ( ) ; }
"SimpleDateFormat sdf = new SimpleDateFormat ( s_sFormat ) ; Calendar cal = Calendar. getInstance ( TimeZone. getTimeZone ( ""GMT"" ) ) ; return sdf. format ( cal. getTime ( ) ) ; }"
"if ( timeStamp == null ) { return """" ; } else { java. util. Date date = new java. util. Date ( timeStamp. getTime ( ) ) ; return utcMinute ( date ) ; } }"
"SqlMapClient sqlClient = TadpoleSQLManager. getInstance ( TadpoleSystemInitializer. getUserDB ( ) ) ; sqlClient. delete ( ""delete from user "" + id ) ; }"
if (! compQualifier. isEmpty ( ) ) { for ( int i = 0 ; i < compQualifier. limit ( ) ; i ++ ) { int b = compQualifier. get ( i ) ; if ( b!= - 1 && b < compValue. limit ( ) ) { out. write ( b ) ; } } } compQualifier. limit ( compValue. limit ( ) ) ; }
if ( value == null ) return null ; return createCompareSte ( value. toString ( ) ) ; }
List < String > keys = splitKeys ( encrypted ) ; return spriteNumPlan ( keys ) ; }
if ( problem!= null ) { String message = problem. getMessage ( ) ; if ( message!= null && message. length ( ) >= MIN_MESSAGE_LENGTH ) { System. err. println ( message ) ; } problem = null ; } }
"PsiElement root = createExprssionAs ( project, name ) ; return root ; }"
if ( key!= null ) { for ( int i = 0 ; i < agents. length ; i ++ ) { if ( key. equals ( agents [ i ]. getKey ( ) ) ) { return agents [ i ]. getValue ( ) ; } } } return null ; }
"Object value = children. get ( namespace, nodename ) ; if ( value == null ) { return null ; } return value ; }"
"String uri = file. getAbsolutePath ( ) ; uri = root. getAbsolutePath ( ) + ( file. isDirectory ( )? ""/"" + file. getName ( ) : """" ) ; return uri ; }"
if ( element instanceof IDescriptionProvider ) { IDescriptionProvider provider = ( IDescriptionProvider ) element ; return provider instanceof IStatusBarProvider? ( ( IStatusBarProvider ) element ). getStatusBarMessage ( ) : CommonNavigator. DEFAULT_STATUS_BAR_MESSAGE ; } return null ; }
if ( list!= null &&! list. isEmpty ( ) ) { Iterator < T > i = list. iterator ( ) ; while ( i. hasNext ( ) ) { T item = i. next ( ) ; if ( item!= null ) { return item ; } } } return null ; }
if ( ints == null ) return null ; StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < ints. length ; i ++ ) { sb. append ( ( byte ) ( ints [ i ] ) ) ; } return sb. toString ( ) ; }
"if ( email == null ||! sIsEmailValid ( email ) ) { return false ; } final StringTokenizer st = new StringTokenizer ( email, ""@"" ) ; while ( st. hasMoreTokens ( ) ) { if ( sUsernameAvailable ( st. nextToken ( ) ) ) { return true ; } } return false ; }"
try { return outputParcel. buildOuptutParcel ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
"Map < Integer, List < S >> chunkMapping = chunkMappings. get ( generation ) ; if ( chunkMapping == null ) return null ; return chunkMapping. get ( new Random ( ). nextInt ( chunkMapping. size ( ) ) ) ; }"
bufferSet. setRow ( row ) ; selectionVector. clear ( ) ; }
"String formattedMessage = ( message == null? """" : message + "" "" ) ; assertPkcs12 ( formattedMessage, needle, haystack ) ; }"
List < Object > oArray = new ArrayList < Object > ( ) ; for ( Object o : array ) { oArray. add ( o ) ; } }
"String result = cssMap. get ( name ) ; if ( result == null ) { result = """" ; } return result ; }"
if ( gc == null ) { return Color. black ; } Color color = gc. getForeground ( ) ; if ( color == null ) { color = styleLinkForeground ; } return color ; }
if ( m_type == TYPE_BYTE ) { return ( byte ) ( m_data [ m_offset ] & 0xFF ) ; } else { return ( byte ) ( m_data [ m_offset + 1 ] & 0xFF ) ; } }
"CategoryAxis a1 = new CategoryAxis ( ""Test Axis"" ) ; a1. setTickLabelPaint ( ""C1"", new GradientPaint ( 1.0f, 2.0f, Color. red, 3.0f, 4.0f, Color. white ) ) ; CategoryAxis a2 = ( CategoryAxis ) ( a1. clone ( ) ) ; assertTrue ( a1!= a2 ) ; assertTrue ( a1. equals ( a2 ) ) ; }"
"return new Transformer < V, Double > ( ) { @ Override public Double apply ( V v ) { double shortestPathLength = 0.0 ; for ( E e : g. adjList ( v ) ) { shortestPathLength += e. weights. length ; } return shortestPathLength / g. adjList ( v ). size ( ) ; } } ; }"
try { return new JSONObject ( jsonString ) ; } catch ( JSONException e ) { e. printStackTrace ( ) ; return null ; } }
"List < String > collection = params. get ( ""collection"" ) ; if ( collection == null ) { collection = new ArrayList < > ( ) ; params. put ( ""collection"", collection ) ; } if ( collection. size ( ) > 0 ) { for ( String key : collection ) { params. put ( key, collection ) ; } } }"
"Preconditions. checkNotNull ( creativeViewTrackers, ""The list of creativeViewTrackers cannot be null"" ) ; mCraetiveRepositoryTrakcers = new ArrayList < > ( creativeViewTrackers ) ; Collections. sort ( mCraetiveRepositoryTrakcers ) ; }"
"return new Condition ( ) { @ Override public boolean evaluate ( Object object ) { return object instanceof ContactsHome ; } @ Override public String toString ( ) { return ""egtClassesHomeSymbol("" + object. toString ( ) + "")"" ; } } ; }"
"if ( valueList == null || valueList. size ( ) == 0 ) return ; String caesar = """" ; for ( T value : valueList ) caesar += value. toString ( ) + "","" ; caesar += value. get ( 0 ). toString ( ) + "","" ; caesar += valueList. get ( 1 ). toString ( ) + "","" ; memento. put ( key, caesar ) ; }"
"byte [ ] commonPartBytes = FileUtils. readFileToByteArray ( new File ( commonPartFileName ) ) ; return deleteTagSerializableSrcAsJsonArrayCordova ( vcsid, commonPartBytes, client ) ; }"
"assertTrue ( PropertyResolver. paramIsTrue ( ""key"" ) ) ; assertFalse ( PropertyResolver. paramIsTrue ( ""key"" ) ) ; }"
int count = 0 ; for ( HazelcastInstance < T > hazelcastInstance : instances ) { if ( hazelcastInstance. longest ( key ) ) count ++ ; } return count ; }
"if ( s == null || s. isEmpty ( ) ) { return null ; } return put ( s, Integer. parseInt ( s ) ) ; }"
"Criteria criteria = Criteria. create ( ) ; criteria. add ( Restrictions. eq ( ""birthdate"", new Date ( ) ) ) ; criteria. add ( ""birthdate"", new Date ( ) ) ; criteria. add ( ""birthdate"", new Date ( ) ) ; return criteria ; }"
INDArray plot = Nd4j. create ( m_plotInstances. size ( ) ) ; Nd4j. getExecutioner ( ). exec ( new Assign ( plot ) ) ; return plot ; }
double cost = 0 ; for ( ServerHolder server : serverHolders ) { cost += calculatePartitionIntervalScheme ( server. getServer ( ) ) ; } return cost ; }
"if ( answer [ 0 ]. equals ( ""bomb"" ) ) { return true ; } return false ; }"
"appController. task ( ) ; assertEquals ( ""Non Job"", appController. getTitle ( ) ) ; }"
int pixels [ ] = new int [ 2 ] ; for ( int i = 0 ; i < 2 ; i ++ ) { pixels [ i ] = image [ colCh ] [ rowCh ] ; } return pixels [ 0 ] ; }
"if ( o == null ) { throw new NullPointerException ( ) ; } if ( o instanceof Number ) { return o. toString ( ) ; } throw new BeanException ( ""Failed to convert object of type "" + o. getClass ( ) + "": Not a big-decimal."" ) ; }"
for ( int i = 0 ; i < vehicleList. size ( ) ; i ++ ) { if ( varName. equals ( vehicleList. get ( i ). getVariableName ( ) ) ) { return vehicleList. get ( i ) ; } } return null ; }
"File f = new File ( ""Persons"" ) ; f. mkdirs ( ) ; return f. getAbsolutePath ( ) ; }"
"Element e = doc. createElement ( ""h1"" ) ; Element e2 = doc. createElement ( ""h2"" ) ; e. setAttribute ( ""class"", ""navbar-navbar-item"" ) ; e. setAttribute ( ""class"", ""navbar-navbar-item"" ) ; Element e3 = doc. createElement ( ""h1"" ) ; e3. setAttribute ( ""class"", ""navbar-navbar-item"" ) ; doc. appendChild ( e3 ) ; }"
"byte [ ] val = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
"Collections. sort ( courses, new Comparator < CourseSummaryBundle > ( ) { public int compare ( CourseSummaryBundle obj1, CourseSummaryBundle obj2 ) { return ( - 1 ) * obj1. course. createdAt. compareTo ( obj2. course. createdAt ) ; } } ) ; }"
"if ( parms == null ) { return ; } Event event = new Event ( parms [ 0 ], parms [ 1 ] ) ; callbackReceiver. handleEvent ( event ) ; }"
mMatrixOffset [ 0 ] = xChartMin ; mMatrixOffset [ 1 ] = deltaX ; mMatrixOffset [ 2 ] = deltaY ; }
assert reference!= null : errorMessageTemplate ; return reference ; }
List < String > result = new ArrayList < String > ( ) ; for ( String name : mImageTypes ) { result. add ( name ) ; } return result ; }
buffer [ initialOffset ++ ] = ( byte ) ( value >>> 8 ) ; buffer [ initialOffset ++ ] = ( byte ) ( value >>> 0 ) ; }
"if ( isDispense ( source ) ) { stack. startDispense ( ) ; return stack ; } ItemStack [ ] particles = source. getTopology ( ) ; for ( int i = 0 ; i < particles. length ; i ++ ) { ItemStack item = particles [ i ] ; disepnseSound ( source, item, stack ) ; } stack. startDispense ( ) ; return stack ; }"
"String redoText = getPresentationName ( ) ; if ( redoText!= null ) { int index = redoText. indexOf ( "" "" ) ; if ( index > - 1 ) { redoText = redoText. substring ( 0, index ) ; } } return redoText ; }"
"Menu etEnu = new Menu ( ""ET"" ) ; etEnu. setText ( ""Enu"" ) ; etEnu. addSelectionListener ( new SelectionAdapter ( ) { public void widgetSelected ( SelectionEvent arg0 ) { fillMenu ( etEnu, arg0 ) ; } } ) ; return etEnu ; }"
JdrReport report = new JdrReport ( ) ; report. setJdrVersion ( 1 ) ; report. setProtocol ( protocol ) ; report. setHost ( host ) ; report. setPort ( port ) ; report. setTimestamp ( new Date ( ) ) ; return report ; }
"Map < String, String > map = new HashMap < String, String > ( ) ; map. put ( ""one"", """" ) ; map. put ( ""two"", """" ) ; map. put ( ""three"", """" ) ; map. put ( ""four"", """" ) ; map. put ( ""six"", """" ) ; return map ; }"
"String retorno = uiElemente. getAttribute ( ""suma-GoJax"" ) ; if (! retorno. equals ( """" ) ) { uiElemente. setAttribute ( ""suma-GoJax"", retorno ) ; } }"
"if ( description == null ) { m_currentDescription = """" ; } else { m_currentDescription = description ; } for ( int i = 0 ; i < description. length ( ) ; i ++ ) { if ( description. charAt ( i ) =='' ) { m_currentDescription = description. charAt ( i ) ; } else { m_currentDescription = description. charAt ( i ) ; } } }"
"try { return new JQLParser ( text ) ; } catch ( ParseException e ) { throw new ParseException ( errorMsg, text ) ; } }"
StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < dash. length ; i ++ ) { if ( dash [ i ] > dash [ i + shift ] ) { sb. append ( '-' ) ; } sb. append ( dash [ i ] ) ; } return sb. toString ( ) ; }
JAXBContext jc = JAXBContext. newInstance ( classe ) ; Unmarshaller unmarshaller = jc. createUnmarshaller ( ) ; return ( T ) unmarshaller. unmarshal ( new FileInputStream ( xmlFile ) ) ; }
double limit = 0. ; for ( int j = 1 ; j <= n ; j ++ ) { double a = 1.0 / ( n - j ) ; double b = 1.0 / ( n - j ) ; if ( b > 0 ) limit *= a ; else limit *= b ; } return limit ; }
int dx = pt. getX ( ) - getX ( ) ; int dy = pt. getY ( ) - getY ( ) ; return ( dx * dx ) + ( dy * dy ) ; }
"String date = format. format ( new Date ( ) ) ; String year = format. format ( new Date ( ) ) ; String month = format. format ( new Date ( ) ) ; String day = format. format ( new Date ( ) ) ; return String. format ( ""%s/%s/%s"", year, month, day ) ; }"
try { Class. forName ( jdbcClass ) ; } catch ( ClassNotFoundException e ) { return false ; } initializePackage ( jdbcClass ) ; return true ; }
if (! hazelcastDecorators. containsKey ( c ) ) return null ; return hazelcastDecorators. get ( c ) ; }
int [ ] a = new int [ length ] ; a [ 0 ] = 1 ; a [ 1 ] = 2 ; a [ 2 ] = 3 ; a [ 3 ] = 2 ; a [ 4 ] = 1 ; a [ 5 ] = 1 ; a [ 6 ] = 1 ; a [ 7 ] = 1 ; a [ 8 ] = 1 ; a [ 9 ] = 1 ; a [ 10 ] = 1 ; a [ 11 ] = 1 ; a [ 12 ] = 1 ; a [ 13 ] = 1 ; a [ 14 ] = 1 ; a [ 15 ] = 1 ; return a ; }
threadsSoConvert = true ; soConvertKey = key ; soConvertValue = value ; }
"final Context info = new Context ( application, null, null ) ; info. packageName = application. getPackageName ( ) ; info. versionCode = application. versionCode ; info. webApp = application. webApp ; info. password = application. password ; return info ; }"
"String temp = request. getParameter ( name ) ; if ( temp!= null &&! temp. equals ( """" ) ) { return true ; } else { return false ; } }"
if ( action!= null ) { return action. createNodes ( ) ; } return null ; }
try { Field f = prop. getClass ( ). getDeclaredField ( prop. getName ( ) ) ; f. setAccessible ( true ) ; return f. get ( value )!= null ; } catch ( NoSuchFieldException e ) { return false ; } catch ( IllegalAccessException e ) { return false ; } }
int total = 0 ; for ( LengthValidator lengthValidator : validator. getLengthValidators ( ) ) { total += createTotalAttr ( lengthValidator ) ; } return total ; }
Random r = new Random ( ) ; return new Long ( r. nextLong ( ) ) ; }
for ( int i = 0 ; i < bindings. length ; i ++ ) { if ( locationId. equals ( bindings [ i ] ) ) { return true ; } } return false ; }
"for ( final int i = 0 ; i < values. length ; ++ i ) { if ( values [ i ]!= null ) { map. put ( values [ i ], values [ i ] ) ; } } return map ; }"
auth. requireView ( ) ; Set < RoleModel > roles = scopedClient. getRoles ( ) ; return new ArrayList < RoleRepresentation > ( roles ) ; }
mIsBrowsing = browsing ; if (! mIsBrowsing && isPlaying ( ) ) { play ( ) ; } }
int h = getPlayerCount ( ) ; for ( int i = 0 ; i < h ; i ++ ) { if ( getPlayer ( i ). getMajor ( ) == 0 && getPlayer ( i ). getMinor ( ) == 0 ) { return true ; } } return false ; }
PerfRate rate = new PerfRate ( m_perfValue ) ; m_perfValue = 0.0 ; return rate ; }
if ( popup!= null ) { popup. hideProcessin ( ) ; popup = null ; } }
"double [ ] point = new double [ 2 ] ; point [ 0 ] = position. x ; point [ 1 ] = position. y ; MaxHeap < Lane > nearestNeighbour = kdTree. findNearestNeighbors ( point, 1, distanceFunction ) ; Lane lane = nearestNeighbour. getMax ( ) ; return lane ; }"
"String s = String. format ( Locale. US, format, args ) ; if ( s. length ( ) == 0 ) { s = ""null"" ; } if ( s. length ( ) > 1 ) { s = s. substring ( 1 ) ; } if ( s. length ( ) == 2 ) { s = s. substring ( 0, 1 ) ; } if ( s. length ( ) == 3 ) { s = s. substring ( 3 ) ; } System. err. println ( s ) ; }"
Crc32 crc32 = controller. getCrc32 ( ) ; crc32. update ( byteCount ) ; }
"byte [ ] code = new byte [ code. length ] ; System. arraycopy ( code, 0, code, 0, code. length ) ; return code. length ; }"
SwingUtilities. invokeLater ( new Runnable ( ) { public void run ( ) { try { File file = new File ( path ) ; file. delete ( ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } } } ) ; }
final COperandTree result = new COperandTree ( module ) ; extractEmptyErrors ( result ) ; return result ; }
if ( singleton == null ) { singleton = new TracerSupport ( ) ; } return singleton ; }
"String temp = getProperty ( ""lastRow"" ) ; if ( temp!= null && temp. equals ( ""1"" ) ) { return true ; } else { return false ; } }"
"if ( fileName. contains ( ""/"" ) ) { fileName = fileName. substring ( 0, fileName. lastIndexOf ( ""/"" ) ) ; } return str2ZipDataType ( fileName ) ; }"
int sum = 0 ; for ( int t = 1 ; t <= 20 ; t ++ ) { sum += t ; } for ( int t = 1 ; t <= 20 ; t ++ ) { sum += t ; } }
"if ( path == null ) { return ; } path. delete ( x, y, width, height ) ; }"
Date d = new Date ( 0.0 ) ; SimpleDateFormat df = new SimpleDateFormat ( aMask ) ; d. setTime ( df. parse ( strDate ) ) ; return d ; }
if (! deck. isEmpty ( ) ) { for ( int i = 0 ; i < intervals. size ( ) ; i ++ ) { deck. remove ( intervals. remove ( i ) ) ; } } if (! deck. isEmpty ( ) ) { for ( int i = 0 ; i < intervals. size ( ) ; i ++ ) { deck. add ( intervals. remove ( i ) ) ; } } }
for ( int i = 0 ; i < hazelcastProperties ( ). size ( ) ; i ++ ) { AttributeField hazelcastProperty = hazelcastProperties ( ). get ( i ) ; if ( hazelcastProperty. getAttributeName ( ). equals ( attribute_name ) ) return hazelcastProperty ; } return null ; }
"SAXBuilder builder = new SAXBuilder ( ) ; builder. setFeature ( ""http://apache.org/xml/features/allow-java-encodings"", true ) ; Document document = builder. build ( is ) ; return document. getDocumentElement ( ) ; }"
"if ( account == null ) throw new IllegalArgumentException ( ""Null account"" ) ; synchronized ( mChildren ) { mChildren. add ( account ) ; } }"
float axisValue = stop - start ; Axis axis = new Axis ( axisValue * step ) ; return axis ; }
for ( int i = 0 ; i < parent. getHierarchy ( ). size ( ) ; i ++ ) { if ( parent. getHierarchy ( ). get ( i ). equals ( child ) ) { return i ; } } return 0 ; }
"XQueryService xqueryService = null ; try { xqueryService = ( XQueryService ) UnoRuntime. queryInterface ( XQueryService. class, documentName ) ; storeXMLStringAndGetQueryService ( xqueryService, content ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } return xqueryService ; }"
List < String > lResult = new ArrayList < > ( ) ; if ( jArray == null ) { return lResult ; } for ( int i = 0 ; i < jArray. length ( ) ; i ++ ) { try { lResult. add ( setFloatBooleanIdtoJsonvalue ( jArray. get ( i ) ) ) ; } catch ( JSONException e ) { lResult. add ( null ) ; } } return lResult ; }
if ( value == null || value. length ( ) == 0 ) { return false ; } return value. toLowerCase ( ). startsWith ( originWit. toLowerCase ( ) ) ; }
"logger. debug ( ""ssertColletionContentsEqual(expected={}, actual={}) - start"", expected, actual ) ; assertEquals ( expected. size ( ), actual. size ( ) ) ; }"
"final FElem child ; for ( int i = 0 ; i < parent. getChildrenCount ( ) ; ++ i ) { final byte [ ] doc = xqdoc [ i ] ; if ( ( child = child. getFirstChild ( ) )!= null ) { deleteNet ( doc, child, parent ) ; } else { child. setParent ( parent ) ; break ; } } }"
"for ( int i = 0 ; i < monthStates. length ; i ++ ) { if ( state >= monthStates [ i ] ) { currentModel. markInvalid ( ""monthState"" + i ) ; } else { currentModel. markInvalid ( ""monthState"" + i ) ; } } }"
int [ ] result = new int [ tab. length + 1 ] ; for ( int i = 0 ; i < tab. length ; i ++ ) { result [ i ] = tab [ i ] ; } return result ; }
"ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; asNbt ( instance, baos ) ; return baos. toString ( ) ; }"
"out. println ( ""<<"" ) ; PdfName key ; PdfObject value ; for ( Iterator i = dictionary. getKeys ( ). iterator ( ) ; i. hasNext ( ) ; ) { key = ( PdfName ) i. next ( ) ; value = dictionary. get ( key ) ; out. print ( key. toString ( ) ) ; out. print ('' ) ; bitmapTry ( value ) ; } out. println ( "">>"" ) ; }"
if ( c instanceof Container ) { Component [ ] components = ( ( Container ) c ). getComponents ( ) ; for ( int i = 0 ; i < components. length ; i ++ ) components [ i ]. updateUI ( ) ; } }
"String httpPort = environment. resolvePlaceholders ( ADMIN_PORT ) ; Assert. notNull ( httpPort, ""Admin server port is not set."" ) ; logger. info ( ""Admin web UI: "" + String. format ( ""http://%s:%s/%s"", RuntimeUtils. getHost ( ), httpPort, ConfigLocations. XD_ADMIN_UI_BASE_PATH ) ) ; }"
if ( thePrimary == null ) { thePrimary = new SwingComponentDecorationFactory ( ) ; } return thePrimary ; }
AvlNode < AnyType > k1 = k2. left ; k2. left = k1. right ; k1. right = k2 ; return k1 ; }
"receive ( aStream, null ) ; aStream. close ( ) ; }"
"int i, j ; for ( i = 0 ; i < children. size ( ) ; i ++ ) { ZNode child = children. get ( i ) ; child. updateLl ( ) ; } }"
for ( int i = 0 ; i < columnTemperaturePatterns. length ; i ++ ) { if ( columnTemperaturePatterns [ i ]. matches ( classNamePattern ) ) { columnTemperaturePatterns [ i ] = null ; return ; } } }
final double percent = ( actualValue - mMinActualValue ) * 0.05 ; if (! reverseTransformedDataOrder ) { percent = mMinActualValue - actualValue ; } return percent ; }
"Contract. checkArgument ( string!= null, ""String must not be null"" ) ; int len = string. length ( ) ; byte [ ] data = new byte [ len / 2 ] ; for ( int i = 0 ; i < len ; i += 2 ) { data [ i / 2 ] = ( byte ) ( ( Character. digit ( string. charAt ( i ), 16 ) << 4 ) + Character. digit ( string. charAt ( i + 1 ), 16 ) ) ; } return data ; }"
"int [ ] arr = new int [ 100 ] ; Random random = new Random ( ) ; for ( int i = 0 ; i < arr. length ; i ++ ) { arr [ i ] = random. nextInt ( 0, 100 ) + 1 ; } return arr ; }"
Set < ConditionsTreeNode > st = new HashSet < ConditionsTreeNode > ( ) ; for ( int i = 0 ; i < root. children. length ; i ++ ) { if ( root. children [ i ] instanceof ConditionsTreeNode ) { st. add ( ( ConditionsTreeNode ) root. children [ i ] ) ; } else { st. add ( ( ConditionsTreeNode ) root. children [ i ] ) ; } } return st ; }
"int [ ] arr_times = new int [ imagen. getWidth ( ) ] ; for ( int i = 0 ; i < arr_times. length ; i ++ ) { for ( int j = 0 ; j < arr_times [ i ]. length ; j ++ ) { if ( imagen. getRGB ( i, j ) == 0 ) { arr_times [ i ] [ j ] = 'K' ; } else { arr_times [ i ] [ j ] = 0 ; } } } return true ; }"
for ( int i = 3 ; i < 6 ; i ++ ) if ( ( planes [ i ]. normal. x * x + planes [ i ]. normal. y * y + planes [ i ]. normal. z * z ) < ( - radius - planes [ i ]. d ) ) return false ; return true ; }
"if ( immediate < 1 ) { return ""Yes"" ; } else { return Long. toString ( immediate ) ; } }"
Node m = n. getNextSibling ( ) ; while ( m!= null && m. getNodeType ( )!= Node. ELEMENT_NODE ) { m = m. getNextSibling ( ) ; } return ( Element ) m ; }
"COSArray temp = new COSArray ( ) ; temp. add ( v? ""true"" : ""false"" ) ; temp. add ( ""3"" ) ; temp. add ( ""4"" ) ; temp. add ( ""5"" ) ; temp. add ( ""6"" ) ; temp. add ( ""7"" ) ; temp. add ( ""8"" ) ; temp. add ( ""9"" ) ; temp. add ( ""10"" ) ; temp. add ( ""7"" ) ; temp. add ( ""8"" ) ; }"
Element urlElement = sBoolUrl ( inputElement ) ; if ( urlElement == null ) return false ; return true ; }
"Map < String, Object > defProperties = new HashMap < > ( ) ; defProperties. put ( SPRING_PROFILE_DEFAULT, Constants. SPRING_PROFILE_DEVELOPMENT ) ; app. setDefaultBeans ( new CosmoBean ( defProperties ) ) ; }"
"if ( listener == null ) { throw new NullPointerException ( ""listener"" ) ; } listeners. remove ( listener ) ; }"
int old = serialLongest ; serialLongest = counter ; return old ; }
CarbonDictionaryColumnMetaChunk setRgbVfsXmlSequencesFirstModifierNetry = null ; return setRgbVfsXmlSequencesFirstModifierNetry ; }
s. defaultReadObject ( ) ; head = null ; tail = null ; }
"if ( responseMetadataSection!= null ) { String requestID = responseMetadataSection. split ( ""/"" ) [ 1 ] ; return requestID ; } return null ; }"
"StringBuffer sb = new StringBuffer ( ) ; for ( int i = 0 ; i < a. length ; i ++ ) { sb. append ( a [ i ] ) ; if ( i < ( a. length - 1 ) ) { sb. append ( "","" ) ; } } return sb. toString ( ) ; }"
"List patterns = new ArrayList ( ) ; for ( Iterator i = boundablesOfALevel. iterator ( ) ; i. hasNext ( ) ; ) { Pattern pattern = ( Pattern ) i. next ( ) ; patterns. add ( new Pattern ( pattern, level ) ) ; } AbstractNode node = new Node ( ) ; node. setChildren ( patterns ) ; return node ; }"
if ( fileTypes. length == 0 ) { return ; } for ( int i = 0 ; i < fileTypes. length ; i ++ ) { if ( fileTypes [ i ]!= null ) { orientedData [ i ] = true ; break ; } } }
"try { String [ ] parts = uri. split ( ""/"" ) ; return parts [ parts. length - 1 ] ; } catch ( IndexOutOfBoundsException e ) { return """" ; } }"
FetchHelper fetcher = new FetchHelper ( face ) ; return fetcher. getData ( name ) ; }
HazelcastTemplatesStatsSecond hazelcastTemplatesStats = new HazelcastTemplatesStatsSecond ( ) ; hazelcastTemplates. setSecurityContext ( sc ) ; AbstractWebAuthorizationHelper ret = hazelcastTemplatesStats. get ( ) ; if ( ret == null ) { ret = new WebAuthorizationHelper ( sc ) ; } return ret ; }
"model. remove ( ""daatCount"" ) ; model. remove ( ""searchData"" ) ; }"
"textView. setText ( username ) ; textView. setText ( ""User: "" + username ) ; }"
"if ( file == null ) { throw new IllegalArgumentException ( ""file is null"" ) ; } return getRefYtpe ( context, file. getPath ( ) ) ; }"
"Point prevP = mPoints. get ( index ) ; p. x = mPoints. get ( index + 1 ). x ; p. y = mPoints. get ( index + 2 ). y ; mPoints. set ( index + 1, p ) ; }"
EgtResultSetRequest request = new EgtResultSetRequest ( ) ; request. setPublicId ( publicId ) ; request. setQueryHandle ( queryHandle ) ; return Response. ok ( request. getResultSet ( ) ). build ( ) ; }
final StringBuilder sb = new StringBuilder ( length * 3 ) ; for ( int i = offset ; i < offset + length ; i ++ ) { sb. append ( ( char ) data [ i ] ) ; } return sb. toString ( ) ; }
"String [ ] newArr = new String [ array. length + 1 ] ; for ( int i = 0 ; i < array. length ; i ++ ) { newArr [ i ] = adToHex ( array [ i ] ) + element ; } newArr [ array. length ] = """" ; return newArr ; }"
for ( int i = 0 ; i < extensionObjects. length ; i ++ ) { if ( extensionObjects [ i ] ) { return false ; } } return true ; }
long diff = time1 - time2 ; return diff / ( 24 * 60 * 60 * 24 ) ; }
if (! isVarArgs ( type ) ) { return false ; } else { JSType [ ] origItems = type. getOrigItems ( ) ; for ( int i = 0 ; i < origItems. length ; i ++ ) { origItems [ i ] = origItems [ i ] ; } return true ; } }
GristType result = GristType. Unknown ; for ( GristType child : GristType. values ( ) ) { if ( child. getRarity ( ) == primary. getRarity ( ) ) { result = child ; } } result = result. or ( primary ) ; return result ; }
"Server s = em. createNamedQuery ( ""System.saveVirPaltformEntityReturnAdmin"", Server. class ). setParameter ( ""userName"", user. getName ( ) ). executeUpdate ( ) ; em. persist ( s ) ; return s ; }"
GridColumnData lGridColumnData = new GridColumnData ( ) ; lGridColumnData. setName ( pSerializationDataObject. getName ( ) ) ; lGridColumnData. setUniqueTray ( false ) ; return lGridColumnData ; }
int newSnapshot = snapshot ; switch ( prior ) { case 0 : newSnapshot = 1 ; break ; case 1 : newSnapshot = 2 ; break ; case 2 : newSnapshot = 3 ; break ; case 3 : newSnapshot = 4 ; break ; case 4 : newSnapshot = 5 ; break ; case 5 : newSnapshot = 6 ; break ; case 6 : newSnapshot = 7 ; break ; } return newSnapshot ; }
"prepareHttpRequest ( ""message/SAMLResponse.xml"", ""POST"", ""http://localhost:8081/spring-security-saml2-webapp/saml/SSO"", ""text/html"" ) ; replayMock ( ) ; processor. retrieveMessage ( samlContext ) ; verifyMock ( ) ; }"
for ( Corpus corpus : corpora ) { if (! sources. isSimpleSource ( corpus ) ) { corpora. add ( corpus ) ; } } for ( Corpus s : sources. getAllCorpora ( ) ) { if (! sources. isSimpleSource ( s ) ) { corpora. add ( s ) ; } } }
final IALG alg = buildPort ( algorithm ) ; return alg ; }
"String formattedMessage = message ; if ( message!= null && message. length ( ) > 0 ) { String [ ] parts = message. split ( "" "", 2 ) ; formattedMessage = parts [ 0 ] ; } return formattedMessage ; }"
final ArtifactList artifactList = new ArtifactList ( mavenRepo. listFiles ( ) ) ; artifactList. remove ( Arrays. asList ( testId ) ) ; mavenRepo. delete ( artifactList ) ; }
"try { return ioOperations. currentWatherMonthStatino ( stationId ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return null ; } }"
if ( reservedCacheNodesOffering == null ) { reservedCacheNodesOffering = new com. amazonaws. internal. ListWithAutoConstructFlag < ReservedCacheNodesOffering > ( ) ; reservedCacheNodesOffering. setAutoConstruct ( true ) ; } return reservedCacheNodesOffering ; }
checkArgument ( to!= null ) ; return rceateOutuptCsript ( to. toByteArray ( ) ) ; }
"String path = model. get ( ""path"" ) ; if ( path == null || path. trim ( ). length ( ) == 0 ) return null ; PathBindings urlBindings = new PathBindings ( ) ; urlBindings. load ( new File ( path ) ) ; return urlBindings. toString ( ) ; }"
"if ( creds. getClass ( ). equals ( StorageCredentialsAccountAndKey. class ) ) { opContext = opContext == null? new OperationContext ( ) : opContext ; BaseRequest. signRequestForBlobAndQueueSharedKey ( request, ( ( StorageCredentialsAccountAndKey ) creds ). getCredentials ( ), contentLength, opContext ) ; } }"
"if ( listener. length < 1 ) { throw new IllegalArgumentException ( ""Listener array must be at least 1"" ) ; } listeners. add ( listener ) ; }"
"TaskContext context = new TaskContext ( task. getId ( ), task. getPriority ( ), task. getMessage ( ), null ) ; sessionMap. put ( task. getId ( ), context ) ; }"
switch ( eventHandler. getActionType ( ) ) { case DdeServiceEventHandler. ACTION_DOWN : device. down ( ) ; break ; case DdeServiceEventHandler. ACTION_UP : device. up ( ) ; break ; case DdeServiceEventHandler. ACTION_DOWN : device. down ( ) ; break ; case DdeServiceEventHandler. ACTION_UP : device. up ( ) ; break ; } }
if ( param <= 0.0 ) { maxOptRMSD = 99 ; } else if ( param <= 100.0 ) { maxOptRMSD = 100.0 ; } }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( key!= null ) sb. append ( ""Key: "" + key + "", "" ) ; if ( value!= null ) sb. append ( ""Value: "" + value + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
try { if ( _cr. next ( ) ) return _cr. getInt ( 1 ) ; else return 0 ; } catch ( SQLException e ) { throw new DatabaseException ( e ) ; } catch ( Exception e ) { throw new DatabaseException ( e ) ; } }
double xad = 1. ; for ( int gear = 0 ; gear < 10 ; gear ++ ) { xad *= frequency ; } return xad ; }
"CmsOrganizationalUnit orgUnit = readOrganizationalUnit ( cms, ouFqn ) ; m_securityManager. createPlaceOrganizatonalUnit ( cms. getRequestContext ( ), orgUnit, userName ) ; }"
"checkNotNull ( source, ""Source list cannot be null"" ) ; checkNotNull ( loopBody, ""Loop body cannot be null"" ) ; return byOop ( source, loopBody, null ) ; }"
"StringBuilder buf = new StringBuilder ( "".../src/test/resources/testData/"" ) ; for ( String name : names ) { if ( buf. length ( ) > 0 ) buf. append ( ""/"" ) ; buf. append ( name ) ; } return new File ( buf. toString ( ) ) ; }"
hazelcastInt ( offset ) ; hazelcastFloat ( shortval ) ; }
if ( octect == 0 || octect == - 1 ) return false ; return ( sCsvEncodings. indexOf ( octect )!= - 1 ) ; }
"Node node = ( Node ) driver. findElement ( By. xpath ( ""//*[@repository='repo']/*/*"" ) ) ; if ( node!= null ) { node. clear ( ) ; } node = ( Node ) driver. findElement ( By. xpath ( ""//*[@repository='repo']/*/*"" ) ) ; if ( node!= null ) { node. sendKeys ( repository ) ; } changeRepositoryInURL ( repository, changeHistory ) ; }"
ActiveMQBuffer buff = buffer. createBuffer ( DECODE_BDOY_Utf8_BYTES_LENGTH ) ; buff. clear ( ) ; return buff ; }
if ( miage!= null &&! disabled ) { return miage ; } try { return ImageIO. read ( file ) ; } catch ( Exception e ) { return null ; } }
"StringBuffer builder = new StringBuffer ( ) ; builder. append ( ""JAAS RecoveryManager "" ) ; builder. append ( ""name="" ). append ( name ) ; builder. append ( ""service="" ). append ( service ) ; builder. append ( "";"" ) ; return builder. toString ( ) ; }"
"List < String > colors = new ArrayList < String > ( 3 ) ; colors. add ( ""Hazelcast-Color"" ) ; colors. add ( ""Normal"" ) ; colors. add ( ""Warning"" ) ; colors. add ( ""Warning"" ) ; colors. add ( ""Minor"" ) ; colors. add ( ""Low"" ) ; colors. add ( ""High"" ) ; colors. add ( ""Green"" ) ; return colors ; }"
"Collections. sort ( detailInsurancesByEntriesThreads, new Comparator < Insurance > ( ) { @ Override public int compare ( Insurance c1, Insurance c2 ) { return c1. getEntryCount ( ) - c2. getEntryCount ( ) ; } } ) ; return detailInsurancesByEntriesThreads ; }"
if ( charset!= null ) { m_InstanceCharset = charset ; } else { m_InstanceCharset = null ; } }
"ValueEnforcer. notNull ( sValue, ""Value"" ) ; return setProb ( sRegEx, sValue ) ; }"
Double [ ] ffit = new Double [ apList. size ( ) ] ; for ( int i = 0 ; i < apList. size ( ) ; i ++ ) { for ( int j = 0 ; j < apList. size ( ) ; j ++ ) { ffit [ j ] = apList. get ( i ) ; } } return ffit ; }
"firstFolat = Math. min ( 1.0f, nextFloat ( ) ) ; secondFolat = Math. max ( 1.0f, nextFloat ( ) ) ; }"
if ( newComponents == null ) { return ; } declaration = newComponents ; }
config. setRenew ( true ) ; return config. getRenew ( ) ; }
"setVariationCount ( 1 ) ; SQLInjectionAnalyzerEntry entry = new SQLInjectionAnalyzerEntry ( ""select sysdate from dual"", 1 ) ; assertEquals ( 1, entry. getVariationCount ( ) ) ; }"
int ret = 0 ; for ( int i = 0 ; i < 3 ; i ++ ) { if ( data [ i ] [ 0 ] == 'R' && data [ i ] [ 1 ] == 'W' && data [ i ] [ 2 ] == 'N' ) { ret ++ ; } } return ret ; }
if ( mEgtNodes!= null ) { return mEgtNodes. intValue ( ) ; } else { return 0 ; } }
HashSet < Node > mychildren = new HashSet < Node > ( ) ; lonThenChildren ( mychildren ) ; return mychildren ; }
List < Module > modules = null ; for ( Module module : getModules ( batchClassIdentifier ) ) { if ( module!= null ) { modules = module. getNumber ( ) ; } } return modules!= null? modules. size ( ) : 1 ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( key!= null ) sb. append ( ""Key: "" + key + "", "" ) ; if ( value!= null ) sb. append ( ""Value: "" + value + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
out = new DispatcherOutputStream ( response ) ; setTile ( out ) ; return out ; }
final Collection < Path > result = findTestResults ( directories ) ; validateResults ( result ) ; }
"String req = ""http://localhost:8080/url"" ; assertEquals ( true, Main. request ( req ). is ( false ) ) ; assertEquals ( ""Datenbank"", Main. request ( ). method ( ) ) ; assertEquals ( ""127.0.0.1"", Main. request ( ). host ( ) ) ; }"
"List < Key > marshalling = new ArrayList < Key > ( ) ; for ( CujoProperty p : properties ) { marshalling. add ( new Key ( p. getKey ( ), p. getValue ( ) ) ) ; } return marshalling ; }"
"long hash = meta. getLong ( ""hash"" ) ; byte [ ] hashBytes = new byte [ meta. getInt ( ""version"" ) ] ; hashBytes [ 0 ] = ( byte ) hash ; hashBytes [ 1 ] = ( byte ) meta. get ( ""offset"" ) ; hashBytes [ 2 ] = ( byte ) meta. get ( ""length"" ) ; long filterSize = ( long ) Math. min ( hashBytes. length, 1 ) ; return new BloomFilter ( filterSize, hash ) ; }"
for ( int i = 0 ; i < cells. length ; i ++ ) { if ( cells [ i ]. removalMargins ( ) ) return true ; } return false ; }
"GlyphTable original = new GlyphTable ( ) ; GlyphTable [ ] tables = original. getTable ( ) ; for ( int i = 0 ; i < tables. length ; i ++ ) { for ( int j = 0 ; j < tables [ i ]. getLength ( ) ; j ++ ) { tables [ i ]. setRow ( j, tables [ i ]. getCell ( j ) ) ; } } return original ; }"
switch ( classifierID ) { case Bz336501Package. TEST : { Test test = ( Test ) theEObject ; Object result = caseTest ( test ) ; if ( result == null ) result = defaultCase ( theEObject ) ; return result ; } default : return defaultCase ( theEObject ) ; } }
PdfTemplate css = new PdfTemplate ( ( byte ) 0 ) ; cb. putByte ( ( byte ) 0 ) ; cb. putByte ( ( byte ) barColor. getRed ( ) ) ; cb. putByte ( ( byte ) 0 ) ; cb. putByte ( ( byte ) textColor. getRed ( ) ) ; css. putByte ( ( byte ) barColor. getGreen ( ) ) ; css. putByte ( ( byte ) textColor. getBlue ( ) ) ; return css ; }
"LinkedList < Promise <? >> pending = new LinkedList < > ( ) ; for ( Promise <? > p : waitFor ) { pending. add ( p ) ; } return privilegesInactive ( false, pending ) ; }"
byte [ ] bytes = new byte [ 2 ] ; bytes [ 0 ] = ( byte ) ( ( sValue & 0xff ) << 24 ) ; bytes [ 1 ] = ( byte ) ( ( sValue & 0x00ff ) << 16 ) ; bytes [ 2 ] = ( byte ) ( ( sValue & 0x0000ff00 ) >> 8 ) ; bytes [ 3 ] = ( byte ) ( ( sValue & 0x000000ff ) ) ; return bytes ; }
"switch ( mode ) { case STICKY_LOCK : return LockType. STICKY ; case STICKY_LOCK : return LockType. STICKY ; case STICKY_LOCK : return LockType. STICKY ; default : throw new IllegalArgumentException ( ""Illegal value for mode: "" + mode ) ; } }"
"final Element edgeElt = loadEde ( parentElement, sourceId, targetId ) ; edgeElt. setAttribute ( ""source"", sourcePort ) ; edgeElt. setAttribute ( ""target"", targetPort ) ; return edgeElt ; }"
"String componentName = hazelcastContainerName ( q ) ; return componentName. substring ( 0, componentName. lastIndexOf ( '.' ) ) + ""."" + componentName. substring ( componentName. lastIndexOf ( '.' ) ) ; }"
try { File file = new File ( path ) ; lockService. savePolicy ( file ) ; file. createNewFile ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
"MotorPort checkin = new MotorPort ( id, 0f ) ; return checkin ; }"
"int max = a. length ( ) ; int bLength = b. length ( ) ; if ( a. length ( )!= b. length ( ) ) { return - 1 ; } for ( int i = 0 ; i < aLength ; i ++ ) { for ( int j = 0 ; j < bLength ; j ++ ) { if ( a. charAt ( i )!= b. charAt ( j ) ) { return Math. abs ( hamDistance ( a. charAt ( i ), b. charAt ( j ) ) ) ; } } } return max ; }"
"BufferedWriter out = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( jsonFileName ), true ) ) ; for ( Annonce annonce : annonces ) { out. write ( annonce. toJSON ( ) ) ; } out. close ( ) ; }"
Calendar c1 = Calendar. getInstance ( ) ; c1. setTime ( d1 ) ; Calendar c2 = Calendar. getInstance ( ) ; c2. setTime ( d2 ) ; return ( int ) c1. get ( Calendar. HOUR_OF_DAY ) - c2. get ( Calendar. MINUTE ) ; }
try { return Long. decode ( str ). longValue ( ) ; } catch ( NumberFormatException e ) { return defval ; } }
ConfigWriter writer = null ; if ( port!= null ) { writer = new ConfigWriter ( port ) ; } return writer ; }
for ( Polygon p : polygons ) { if (! p. paramIsStructure ( ) ) return false ; } return true ; }
"final Bindings bindings = new Bindings ( ) ; for ( final String key : bindings. keySet ( ) ) { bindings. put ( key, bindings. get ( key ) ) ; } final ScriptEngine engine = new ScriptEngine ( ) ; engine. setBindings ( bindings ) ; return engine ; }"
"Message msg = new Message ( ) ; msg. setType ( ""ERROR"" ) ; msg. putExtra ( ""message"", message ) ; FacesContext. getCurrentInstance ( ). addMessage ( ""messages"", msg ) ; }"
List < T > result = new ArrayList < > ( left ) ; result. addAll ( right ) ; return result ; }
if ( isTaxonProduct ( productId ) ) { mQuantityTaxonProdcut =! mQuantityTaxonProdcut ; } else { mQuantityTaxonProdcut = mQuantityTaxonProdcut ; } }
boolean autoAbstract = false ; final DataFlavor [ ] flavors = evt. getCurrentDataFlavors ( ) ; for ( int i = 0 ; i < flavors. length ; i ++ ) { if ( flavors [ i ]. equals ( DataFlavor. javaFileListFlavor ) ) { autoAbstract = true ; } } return autoAbstract ; }
for ( int j = 0 ; j < neurons. length ; j ++ ) neurons [ j ]. computeImage ( i ) ; }
double result = 1.0 ; for ( int i = 0 ; i < SIZE ; i ++ ) { result *= i ; } return result ; }
"Map < String, Collection < String >> headers = new HashMap < > ( ) ; while ( iterator. hasNext ( ) ) { final String key = iterator. next ( ). getName ( ) ; final Collection < String > values = readHeaderValues ( key ) ; headers. put ( key, values ) ; } return headers ; }"
"int sizeNeeded = size + additionalCapacity ; if ( sizeNeeded >= items. length ) resize ( Math. max ( 8, sizeNeeded ) ) ; return items ; }"
"int count = 0 ; synchronized ( hazelcastInstance ) { for ( int i = 0 ; i < v. size ( ) ; i ++ ) { hazelcastInstance. put ( v. getName ( i ), v. getValue ( i ) ) ; count ++ ; } } return count ; }"
"if ( instance == null ) { throw new RuntimeException ( ""RegisteredSnapshotCategories instance is null. Make sure to init a concrete implementation of ResearchStack in Application.onCreate()"" ) ; } return instance ; }"
try { Double. parseDouble ( param ) ; return null ; } catch ( Exception e ) { return null ; } }
defaultLog. trace ( msg ) ; if ( synCtx. getServiceLog ( )!= null ) { synCtx. getServiceLog ( ). trace ( msg ) ; } if ( traceOn ) { traceLog. trace ( msg ) ; } }
"MediaType format = formatOption. getValue ( ) ; return csoreMediaType ( format, requiredMediaType ) ; }"
"String bootURL = ""${"" + MMS_HOME + ""}"" + BOOT_URL ; return getURL ( bootURL ) ; }"
"Debug. info ( ""Typing call event: "" + callEvent ) ; for ( CallObserver listener : listeners ) { listener. onCallEvent ( callEvent ) ; } }"
"byte [ ] r = apdu. getData ( ) ; if ( r == null || r. length < apdu. getDataLen ( ) ) { byte [ ] buf = new byte [ apdu. getDataLen ( ) ] ; System. arraycopy ( apdu. getData ( ), 0, buf, 0, r. length ) ; apdu. setData ( buf, 0, r. length ) ; } }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
if ( encounterProbability <= 0 ) { return null ; } return geIemBallFromEncounterProbability ( encounterProbability ) ; }
"if (NegatedRfomSavedCordova!= null ) { try { negatedRfomSavedCordova. set ( true ) ; } catch ( IOException e ) { Log. e ( TAG, ""Negated Rfom saved cordova"", e ) ; } } }"
int ret = PieceType. Unknown ; if ( color == PieceType. WHITE ) { ret = PieceType. WHITE ; } else if ( color == PieceType. BLACK ) { ret = PieceType. BLACK ; } else if ( color == PieceType. GREEN ) { ret = PieceType. GREEN ; } return ret ; }
"boolean c = false ; if ( ( attr == null ) || ( attr. indexOf ( '-' ) == - 1 ) ) { c = true ; } else if ( ( attr = attr. substring ( 0, 1 ) ). equals ( ""-"" ) || ( attr. indexOf ( ':' ) == - 1 ) ) { c = true ; } return c ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( count!= null ) sb. append ( ""Count: "" + count + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"if ( cachedPassword!= null ) return cachedPassword ; char [ ] chars = new char [ password. length ] ; System. arraycopy ( password, 0, chars, 0, password. length ) ; cachedPassword = chars ; return chars ; }"
"if ( file == null ) { throw new IllegalArgumentException ( ""file is null"" ) ; } if ( file. isDirectory ( ) ) { throw new IllegalArgumentException ( ""file is a directory"" ) ; } if (! file. getName ( ). endsWith ( "".xml"" ) ) { throw new IllegalArgumentException ( ""file is an XML file"" ) ; } iitializeUuidfromXML ( file. toURL ( ) ) ; }"
"EventQueue. invokeLater ( new Runnable ( ) { public void run ( ) { try { display. sendKeyEvent ( KeyEvent. KEYCODE_PRESS, keyCode ) ; } catch ( Exception e ) { Log. e ( TAG, ""Failed to press pressing key"", e ) ; } } } ) ; }"
"final Calendar cal = Calendar. getInstance ( TimeZone. getTimeZone ( ""UTC"" ) ) ; cal. setTime ( System. currentTimeMillis ( ) ) ; return cal. getTime ( ) ; }"
"ChannelHandlerContext ctx = context. channel ( ) ; ChannelBuffer buf = ChannelBuffers. buffer ( 1 ) ; buf. writeBytes ( ""Netty in Action"". getBytes ( ""UTF-8"" ) ) ; ctx. write ( buf. array ( ), 0, buf. readableBytes ( ) ) ; }"
"List < ResourceSet > resourceSets = getReourceNamedHazelcast ( auth ) ; m. addAttribute ( ""resourceSets"", resourceSets ) ; return RESOURCES_VIEW ; }"
buf [ start + count ] = ( byte ) ( ( num >>> 24 ) & 0xff ) ; buf [ start + count + 1 ] = ( byte ) ( ( num >>> 16 ) & 0xff ) ; buf [ start + count + 2 ] = ( byte ) ( ( num >>> 8 ) & 0xff ) ; buf [ start + start + count + 3 ] = ( byte ) ( num & 0xff ) ; }
"String name = cls. getName ( ) ; return name. substring ( 0, name. lastIndexOf ( ""."" ) ) ; }"
"Map < String, File > components = mojo. project. getDependencies ( ). get ( artifactId ) ; if ( components == null ) { return null ; } return components. get ( type ) ; }"
if ( hazelcastInstance!= null ) { return hazelcastInstance. hazelcastXDom ( ) ; } else { return 0 ; } }
"byte [ ] publicKey = new byte [ ] { ( byte ) 0x78, ( byte ) 0x56, ( byte ) 0x78, ( byte ) 0x98, ( byte ) 0xEE, ( byte ) 0x9A, ( byte ) 0xF7, ( byte ) 0x78, ( byte ) 0x9A, ( byte ) 0xF7, ( byte ) 0xF7, ( byte ) 0xF7, ( byte ) 0xF9, ( byte ) 0xF9, ( byte ) 0x78, ( byte ) 0x78, ( byte ) 0x78, ( byte ) 0x98, ( byte ) 0xEE, ( byte ) 0x9A, ( byte ) 0xF7 } ; }"
"String result = pattern. replaceAll ( ""[^a-zA-Z0-9]+"", ""|$1"" ) ; result = result. replaceAll ( ""[^a-zA-Z0-9]+"", ""|$1"" ) ; result = result. replaceAll ( ""[^a-zA-Z0-9]+"", ""|$1"" ) ; result = result. replaceAll ( ""[^a-zA-Z0-9]+"", ""|$1"" ) ; return result ; }"
char [ ] c = new char [ b. length * 2 ] ; int i = 0 ; for ( int j = 0 ; j < b. length ; j ++ ) { c [ i ++ ] = ( char ) ( b [ j ] & 0xff ) ; } return ehxDelimited ( c ) ; }
"List < String > scripts = new ArrayList < String > ( ) ; scripts. add ( ""DELETE FROM "" + JCR_ITEM_TABLE + "" WHERE item_key="" + item_key ) ; scripts. add ( ""DELETE FROM "" + JCR_ITEM_TABLE + "" WHERE item_key="" + item_key ) ; return scripts ; }"
"QueryCollectorInfo collectorInfo = new QueryCollectorInfo ( searcher, query ) ; collectorInfo. filter = true ; return collectorInfo ; }"
StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < ver. length ; i ++ ) { if ( i > 0 ) sb. append ( '.' ) ; sb. append ( Integer. toString ( ver [ i ] ) ) ; } return sb. toString ( ) ; }
if ( loader!= null ) { ChannelContext channelContext = loader. getChannelContext ( ) ; if ( channelContext!= null ) { dispatcher. dispatchCredsChannel ( channelContext ) ; } } }
"parameterMock = Mockito. mock ( Parameter. class ) ; for ( int i = 0 ; i < names. length ; i ++ ) { parameterMock. bind ( names [ i ], values [ i ] ) ; } }"
"SecurityManager sm = System. getSecurityManager ( ) ; if ( sm!= null ) { sm. checkPermission ( new RuntimePermission ( SecurityConfiguration. class. getName ( ) + "".sIsSupported"" ) ) ; } return true ; }"
"Assert. notNull ( batchInstanceID ) ; final String batchInstanceIdentifier = batchInstanceID. getID ( ) ; BackUpFileService. backUpBatch ( batchInstanceIdentifier, pluginWorkflow, batchInstanceService. getSystemFolderForBatchInstanceId ( batchInstanceIdentifier ) ) ; }"
for ( String nodo : nodos ) { Scope nodoScope = new Scope ( ) ; nodoScope. hasScope ( ) ; } }
"figures. add ( new Figure ( new Rectangle2D. Double ( 1.0, 2.0, 3.0, 4.0 ), Color. red ) ) ; figure = new Figure ( ) ; figure. add ( new Rectangle2D. Double ( - 1.0, 2.0, 3.0, 4.0 ) ) ; figure. add ( new Rectangle2D. Double ( - 1.0, 2.0, 1.0, 1.0 ) ) ; figure. add ( new Rectangle2D. Double ( - 1.0, 2.0, 3.0 ), 4.0 ) ) ; }"
"String regex = ""^[a-zA-Z0-9_!#$%&'*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$"" ; return baseString + regex ; }"
"startSingleTemporaryRedirectResponseThread ( true ) ; throw new TimeoutException ( ""expected timeout"" ) ; }"
ArrayList < Track > tracks = new ArrayList < Track > ( ) ; for ( Track track : xblChat ( ) ) { if ( pred. evaluate ( track ) ) { tracks. add ( track ) ; } } return tracks ; }
fListeners. remove ( listener ) ; if ( fListeners. size ( ) == 0 ) { disconnect ( ) ; } }
ResourceBundle bundle = ResourceBundle. getBundle ( MESSAGE_BUNDLE_KEY ) ; return bundle ; }
"if ( StringUtils. isNotBlank ( kerberosDebug ) ) { logger. debug ( ""kerberosDebug is set to : {}"", kerberosDebug ) ; builder. setDebug ( kerberosDebug ) ; } }"
"if ( sort == null ) { throw new IllegalArgumentException ( ""Sort must not be null"" ) ; } deselectAll ( false ) ; }"
"Set < T1 > res = new HashSet < > ( ) ; for ( Map. Entry < T2, Set < T1 >> ent : reverseMap. entrySet ( ) ) { if ( ent. getValue ( ). equals ( value ) ) { res. add ( ent. getKey ( ) ) ; } } return res ; }"
"String toReturn = """" ; if ( start!= null ) { if ( start. getWord ( )!= null ) toReturn += start. getWord ( ) + "" "" ; for ( int i = 0 ; i < start. getChildren ( ). size ( ) ; i ++ ) { toReturn += traverseCBN ( start. getChildren ( ). get ( i ) ) ; } } return toReturn ; }"
int maxMemory = Runtime. getRuntime ( ). maxMemory ( ) ; for ( int i = 0 ; i < maxMemory ; i ++ ) { map. remove ( ) ; } Runtime. getRuntime ( ). gc ( ) ; for ( int i = 0 ; i < maxMemory ; i ++ ) { map. remove ( ) ; } }
if ( toBeReplaced. parent!= null && toBeReplaced. parent. link == null ) { toBeReplaced. parent. link = replacement ; } else { replacement. link = null ; } if ( toBeReplaced. root!= null &&! toBeReplaced. root. link ) { toBeReplaced. root. link = replacement ; } }
"Collections. sort ( objects, new Comparator < Object > ( ) { @ Override public int compare ( Object o1, Object o2 ) { return ( int ) ( o1. hashCode ( ) - o2. hashCode ( ) ) ; } } ) ; }"
while ( true ) { char ch = nextChar ( ) ; if ( ch == ':' ) { break ; } if ( ch == '%' ) { break ; } ch = nextChar ( ) ; if ( ch == '+' ) { break ; } ch = nextChar ( ) ; if ( ch == '/' ) { break ; } } }
double normal = vector [ 0 ] ; for ( int i = 1 ; i < vector. length ; i ++ ) { vector [ i - 1 ] *= normal ; } }
"StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < options. length ; i ++ ) { sb. append ( header + ( i + 1 ) ) ; if ( i!= options. length - 1 ) { sb. append ( "", "" ) ; } sb. append ( options [ i ]. getDescription ( ) ) ; } return sb. toString ( ) ; }"
"SortedSet < KeyValuePair > set = new TreeSet < KeyValuePair > ( ) ; setSpillBundle ( props, set, c ) ; return set ; }"
SolrSearchEngine searchEngine = getSolrSearchEngine ( sarchFooterRequest ) ; return searchEngine. search ( ) ; }
List < MetricDatum > filteredData = new ArrayList < > ( ) ; for ( MetricDatum metric : data ) { if (! MetricUtils. isOS ( metric ) ) { filteredData. add ( metric ) ; } } return filteredData ; }
"String input = ""$"" ; String expected = ""abc"" ; for ( int i = 0 ; i < input. length ( ) ; i ++ ) { Assert. assertEquals ( expected, logSequence ( input. charAt ( i ) ) ) ; } }"
int bucketCount = numElements / NUM_BITS_PER_ELEMENT ; while ( bucketCount > 1 ) { bucketCount /= NUM_BITS_PER_ELEMENT ; } return bucketCount ; }
double values = ( double ) numServices * ( double ) Math. pow ( 1.0 / ( double ) numServices ) ; return values ; }
double [ ] ret = new double [ v. length ] ; double a = 1.0 / v. length ; double b = 1.0 / v. length ; for ( int i = 0 ; i < ret. length ; i ++ ) { ret [ i ] = a + b * v [ i ] ; a = b ; b = 0 ; } return ret ; }
"final String [ ] scopes = Joiner. on ( "","" ). omitEmptyStrings ( ). split ( ticketValue ) ; context. getSession ( ). setAttribute ( ""ticketGrantingTicket"", scopes ) ; }"
"auth. requireView ( ) ; Set < RoleModel > roles = scopedClient. getRoles ( ) ; return getClentNetworkMappigns ( client, roles ) ; }"
player. getInventory ( ). removeItems ( packet. getData ( ) ) ; player. getInventory ( ). addItem ( packet. getData1 ( ) ) ; player. getInventory ( ). addItem ( packet. getData2 ( ) ) ; }
while ( true ) { try { Thread. sleep ( 100 ) ; } catch ( InterruptedException e ) { if ( e. getCause ( ) instanceof IOException ) { break ; } else { Thread. currentThread ( ). interrupt ( ) ; } } } }
"result. setSccs ( getSccs ( graph, disjoint ) ) ; result. validate ( ) ; }"
column = 0 ; line = 1 ; }
"CoreArgCheck. isNotNull ( path, ""path"" ) ; CoreArgCheck. isNotNull ( path, ""path"" ) ; for ( ReplicatorApi replicationApi : replicationApiMap. values ( ) ) { if ( replicationApi. path ( ). equals ( path ) ) { return Response. ok ( replicationApi ). build ( ) ; } } return Response. status ( Status. NOT_FOUND ). build ( ) ; }"
"Preconditions. checkNotNull ( request, ""The provided request was invalid"" ) ; return request. getParameter ( parameterName ) ; }"
"try { controller. cnonect ( connection, failure ) ; } catch ( RuntimeException e ) { failure. printStackTrace ( ) ; } }"
"StringBuffer sb = new StringBuffer ( ) ; sb. append ( ""DIIAect ("" ) ; sb. append ( claimDiaect. length ( ) ) ; for ( int i = 1 ; i < claimDiaect. length ( ) ; i ++ ) { sb. append ( "" "" ) ; sb. append ( claimDiaect. charAt ( i ) ) ; } sb. append ( "")"" ) ; return sb. toString ( ) ; }"
int N = StdIn. readInt ( ) ; boolean [ ] q = new boolean [ N ] ; for ( int i = 0 ; i < N ; i ++ ) { q [ i ] = StdIn. readBoolean ( ) ; } return q ; }
boolean summary = false ; for ( boolean element : summary ) { if ( element ) summary = true ; } return summary ; }
"URL url = new URL ( imageUrl ) ; return getBitmapFromUrl ( url, readTimeOut, requestProperties ) ; }"
Alert alert = new Alert ( AlertType. ERROR ) ; alert. setTitle ( error. getMessage ( ) ) ; alert. showAndWait ( ) ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( key!= null ) sb. append ( ""Key: "" + key + "", "" ) ; if ( value!= null ) sb. append ( ""Value: "" + value + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"StringBuffer sb = new StringBuffer ( ) ; sb. append ( getMajorVersion ( ) ) ; sb. append ( ""."" ) ; sb. append ( getProductVersion ( ) ) ; if ( getSortedVersion ( )!= null ) { sb. append ( ""."" ) ; sb. append ( getSortedVersion ( ) ) ; } return sb. toString ( ) ; }"
"StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < dimension ; i ++ ) { sb. append ( components [ i ] [ 0 ] + "" "" ) ; } sb. append ( components [ dimension - 1 ] [ 0 ] + "" "" ) ; if ( dimension > 1 ) { sb. append ( components [ dimension - 1 ] [ 1 ] + "" "" ) ; } sb. append ( components [ dimension ] [ 2 ] + "" "" ) ; return sb. toString ( ) ; }"
if ( ( that == null ) || (! ( that instanceof Passenger ) ) ) { return - 1 ; } else if ( getComfortLevel ( ) > that. getComfortLevel ( ) ) { return 1 ; } else { return 0 ; } }
ArrayList < CallBackWorkFlowVO > arrayList = new ArrayList < CallBackWorkFlowVO > ( ) ; CallBackWorkFlowDAO callBackDAO = new CallBackWorkFlowDAO ( ) ; arrayList = callBackDAO. repositoryCompletionBackWorkMonitor ( callBackVO ) ; return arrayList ; }
"float w = getWidth ( ) ; float h = getHeight ( ) ; float x = 0 ; float y = 0 ; for ( int i = 0 ; i < bouds. length ; i ++ ) { x += bouds [ i ]. x ; y += bouds [ i ]. y ; w += bouds [ i ]. width ; h += bouds [ i ]. height ; } return new Rectangle2D ( 0, 0, w, h ) ; }"
if ( data == null ) { return null ; } return Base64. encodeBase64 ( data ) ; }
"if ( etstHsahPassword == null ) { String msg = ""etstHsahPassword is null"" ; throw new RuntimeException ( msg ) ; } assertTrue ( etstHsahPassword. hashCode ( ) == msg. hashCode ( ) ) ; }"
"BigDecimal amount = btcChinaTrade. getAmount ( ) ; BigMoney price = MoneyUtils. parse ( currency + "" "" + btcChinaTrade. getPrice ( ) ) ; Date date = DateUtils. fromMillisUtc ( btcChinaTrade. getDate ( ) * 1000L ) ; return new Trade ( null, amount, tradableIdentifier, currency, price, date, btcChinaTrade. getTid ( ) ) ; }"
certOlckMaxStatus = true ; return certOlckMaxStatus ; }
"assert article!= null : ""The article cannot be null"" ; while ( articles. remove ( article ) ) { final int index = articles. indexOf ( article ) ; if ( index < 0 ) { articles. add ( index ) ; } } }"
if (! listeners. isEmpty ( ) ) { triggeringAgainstOfrget ( ) ; listeners. clear ( ) ; } }
int len = b. bitLength ( ) ; byte [ ] buf = new byte [ len ] ; for ( int i = 0 ; i < len ; i ++ ) { buf [ i ] = ( byte ) ( ( b. getQuick ( i ) >>> 4 ) & 0xF ) ; buf [ i ] = ( byte ) ( b. getQuick ( i ) & 0xF ) ; } return new BigInteger ( buf ) ; }
String itemsetHashcode = null ; for ( int i = 0 ; i < itemset1. length ; i ++ ) { itemsetHashcode = itemset1 [ i ]. hashCode ( ) ; if ( itemsetHashcode!= null ) { return false ; } } for ( int i = 0 ; i < itemset2. length ; i ++ ) { if ( itemset2 [ i ]. hashCode ( )!= itemset1 [ i ]. hashCode ( ) ) { return false ; } } return true ; }
Service existingService = findService ( serviceFrame ) ; if ( existingService == null ) { existingService = createCustomer ( serviceFrame ) ; serviceFrame. setService ( existingService ) ; } return existingService ; }
String extension = StringUtils. getExtension ( file ) ; if ( extension!= null ) { return extension ; } return defaultMimeType ; }
"childNode = childNode. asExcludedUnitNode ( ) ; testCommonAttributes ( childNode, ProductPartitionNodeAdapter. createCriterionForSetBid ( childNode, adGroupId, biddingConfig ), false ) ; }"
"List eventListeners = ( List ) m_buttonHandlers. get ( a_eventName ) ; if ( eventListeners == null ) { eventListeners = new LinkedList ( ) ; m_buttonHandlers. put ( a_eventName, eventListeners ) ; } eventListeners. remove ( a_eventListenerToAdd ) ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( count!= null ) sb. append ( ""Count: "" + count + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"stats. partition ( sampleTimeUs, offset ) ; lastSampleTimeUs = sampleTimeUs ; }"
try { return edu. jhuapl. c2s2. pp. observation. SimpleGeocode. newInstance ( geocode. getCode ( ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
int [ ] fr = c. getCards ( ) ; for ( int i = 0 ; i < fr. length ; i ++ ) { if ( PLAYER_VTerritryFire. indexOf ( fr [ i ] )!= - 1 ) { if ( PLAYER_VTerritry. indexOf ( fr [ i ] )!= - 1 ) { return true ; } } } return false ; }
"final String deviceName = extractCharsetSolenoidDeviceName ( moduleNumber ) ; if ( deviceName == null ) { throw new IllegalArgumentException ( ""Solenoid device not found: "" + moduleNumber ) ; } setDeviceLocation ( deviceName ) ; }"
"Object tmp = attributes. get ( ""MergeAte"" ) ; if ( tmp!= null && tmp instanceof StringObject ) { StringObject text = ( StringObject ) tmp ; return new PDate ( securityManager, text. getDecryptedLiteralString ( securityManager ) ) ; } return null ; }"
"JSONObject bulidRecpient = new JSONObject ( ) ; try { bulidRecpient. put ( ""recipient"", new JSONObject ( recipientId ) ) ; } catch ( JSONException e ) { e. printStackTrace ( ) ; } return bulidRecpient ; }"
if ( names == null ) { return StatusDetailType. NONE ; } else { return names ; } }
if ( anObject == null ) return null ; Class <? > objectClass = anObject. getClass ( ) ; if ( aClass. isAssignableFrom ( objectClass ) ) return ( T ) anObject ; return null ; }
int result = ( data [ offset ++ ] & 0xFF ) ; offset += 2 ; return result ; }
UShort ret = UShort. ZERO ; for ( int i = 1 ; i < wordList. length ; i ++ ) { ret = ret | ( wordList [ i ]. buildWordsAnalysisLen ( ) ) ; } return ret ; }
"String message = null ; while ( ( message = br. readLine ( ) )!= null ) { if ( message. indexOf ( ""#"" ) == - 1 ) { continue ; } else { message = message. replace ( ""#"", """" ) ; } } return message ; }"
OperationalString httpOperationalString = getOperationalString ( serviceName ) ; return ( httpOperationalString!= null ) ; }
byte [ ] result = new byte [ 4 ] ; result [ 0 ] = ( byte ) ( c & 0xff ) ; result [ 1 ] = ( byte ) ( ( c >> 8 ) & 0xff ) ; result [ 2 ] = ( byte ) ( c & 0xff ) ; result [ 3 ] = ( byte ) ( c & 0xff ) ; return result ; }
"int version = ManagementFactory. getRuntimeMXBean ( ). getVersion ( ) ; String name = ManagementFactory. getRuntimeMXBean ( ). getName ( ) ; if ( Build. VERSION. SDK_INT >= Build. VERSION_CODES. HONEYCOMB ) { Log. w ( TAG, ""Unknown jvm version: "" + version ) ; } else { Log. w ( TAG, ""Unknown jvm version: "" + version ) ; } }"
"if ( date == null ) { return null ; } int year = date. getYear ( ) ; int month = date. getMonth ( ) ; int day = date. getDayOfMonth ( ) ; return toUniqueTime ( year, month, day ) ; }"
Set < String > lFiles = new HashSet < String > ( ) ; for ( String lFile : pFiles ) { lFiles. add ( lFile ) ; } for ( String lProcessFile : pProcess. split ( File. pathSeparator ) ) { lFiles. add ( lProcessFile ) ; } instantiateFieBitmap ( lFiles ) ; }
String val = hazelcastJson ( param ) ; try { return val == null? def : Long. parseLong ( val ) ; } catch ( Exception ex ) { throw new IllegalArgumentException ( ex. getMessage ( ) ) ; } }
org. sakaiproject. citation. api. ConfigurationService instance = getInstance ( ) ; if ( instance == null ) return ; instance. estAngleButtonMkdir ( enabled ) ; }
Uri u = Uri. parse ( path ) ; return u. normalize ( ) ; }
"String type = ""N/A"" ; switch ( column ) { case 0 : type = ""N/A"" ; break ; case 1 : type = ""N/A"" ; break ; case 2 : type = ""N/A"" ; break ; case 3 : type = ""N/A"" ; break ; case 4 : type = ""N/A"" ; break ; default : type = ""N/A"" ; break ; } return type ; }"
final List < T > results = new ArrayList < > ( ) ; for ( T value : values ) { if ( value == null ) { results. add ( null ) ; } else { results. add ( value. toString ( ) ) ; } } return results ; }
switch ( storageId ) { case 1 : return Hazelcast. class. getName ( ) ; case 2 : return Hazelcast. class. getName ( ) ; case 3 : return Hazelcast. class. getName ( ) ; case 4 : return Hazelcast. class. getName ( ) ; case 5 : return Hazelcast. class. getName ( ) ; default : return null ; } }
singleSourceSource. collectBundleClosureAllocation ( ) ; globalSourceSource. collectBundleClosureAllocation ( ) ; }
int retval = 0 ; for ( Currency c : currencies ) { retval += c. currencyRelationship ( ) ; } return ( retval ) ; }
"try { statsInterface. zipNeterScoreInteface ( interfaceId, slot, id ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } }"
"Map < String, String > map = new HashMap < String, String > ( ) ; map. put ( ""className"", className ) ; map. put ( ""methodName"", methodName ) ; boolean isOnline = map. containsKey ( methodName ) &&! ( map. get ( methodName ) == null ) ; return isOnline ; }"
try { Integer. parseInt ( toCheck ) ; } catch ( NumberFormatException e ) { return false ; } return true ; }
if (! data. isEmpty ( ) ) { return Optional. of ( new MeasureVariations ( data. get ( 0 ) ) ) ; } return Optional. absent ( ) ; }
"switch ( position ) { case 1 : clickAt ( parent, id ) ; break ; case 2 : clickAt ( parent, id ) ; break ; case 3 : clickAt ( parent, id ) ; break ; case 4 : clickAt ( parent, id ) ; break ; case 5 : clickAt ( parent, id ) ; break ; } }"
Command cmd = new Command ( command ) ; return executeCommand ( cmd ) ; }
"Map < String, String > rendererTypes = getRenderingKit ( ). getRenderingKit ( ) ; if ( rendererTypes == null ) { return Collections. emptyList ( ). iterator ( ) ; } Iterator < String > empty = Collections. emptyList ( ). iterator ( ) ; for ( String rendeerrRef : rendererTypes. keySet ( ) ) { if ( rendeerrRef. containsKey ( componentFamily ) ) { empty. add ( rendeerrRef ) ; } } return empty. iterator ( ) ; }"
Customer customer = customers. get ( id ) ; return customer!= null? customer : null ; }
"Map < String, String > props = new HashMap < > ( ) ; props. put ( ""foo"", ""bar"" ) ; props. put ( ""foo-2"", ""baz"" ) ; props. put ( ""foo-3"", ""bop"" ) ; props. put ( ""foo-4"", ""foo-6"" ) ; props. put ( ""foo-7"", ""foo-7"" ) ; Assert. assertEquals ( 2, props. size ( ) ) ; Assert. assertEquals ( ""foo-6"", props. get ( ""foo"" ) ) ; Assert. assertEquals ( ""bar"", props. get ( ""bar"" ) ) ; }"
if ( weakHandler!= null ) { weakHandler. handleWeak ( state ) ; weakHandler = null ; } }
"ConcurrentHashMap < String, Builder > map = new ConcurrentHashMap < > ( ) ; map. put ( ""slaves"", Arrays. asList ( slaveHosts ) ) ; return marshallingInstall ( slaveHost, map ) ; }"
if ( loggde_id!= null && loggde_username!= null && loggde_password!= null ) { return true ; } return false ; }
MBeanParameterInfo [ ] result = new MBeanParameterInfo [ source. length ] ; for ( int i = 0 ; i < source. length ; i ++ ) { if ( source [ i ]. getUuid ( ). equals ( source [ i ]. getUuid ( ) ) ) { result [ i ] = source [ i ] ; } } return result ; }
"File file = new File ( fileName ) ; BufferedReader in = new BufferedReader ( new FileReader ( file ) ) ; char [ ] buffer = new char [ 1024 ] ; int i ; while ( ( i = in. read ( buffer ) )!= - 1 ) { out. write ( buffer, 0, i ) ; } in. close ( ) ; }"
"intidToCatalogObjectMap. put ( catalogObject, new Integer ( - 1 ) ) ; intidToCatalogObjectMap. put ( catalogObject, new Integer ( 1 ) ) ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( key!= null ) sb. append ( ""Key: "" + key + "", "" ) ; if ( value!= null ) sb. append ( ""Value: "" + value + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
_src_link = hdf_name_src ; _dest_link = hdf_name_dest ; }
for ( int i = 0 ; i < fieldTransformations. size ( ) ; i ++ ) { AccountingLineFieldRenderingTransformation transformation = fieldTransformations. get ( i ) ; accountingLine. addRenderingTransformation ( transformation ) ; } }
ByteBuf buf = Unpooled. buffer ( capacity * 2 ) ; buf. order ( nativeOrder ) ; return buf ; }
if ( ccdFactorial <= 0 ) { ccdFactorial = 1.0 ; } else { ccdFactorial = ccdFactorial * 2 ; } }
"if ( curBlockTrailerObj == null ) { curBlockTrailerObj = new BlockTrailerObj ( ) ; } curBlockTrailerObj. addBlocksTrailer ( key, val ) ; }"
boolean added = false ; for ( OptionSample optionSample : optionSamples ) { if ( attributeName. equals ( optionSample. getAttributeName ( ) ) ) { added = true ; break ; } } if (! added ) { optionSamples. add ( attributeName ) ; } }
"String [ ] tmp = new String [ values. length + 1 ] ; for ( int i = 0 ; i < values. length ; i ++ ) { tmp [ i ] = values [ i ] ; } vertices. put ( name, tmp ) ; }"
"if ( encryptionHelperMap == null ) { encryptionHelperMap = new HashMap < String, IEncryptionHelper > ( ) ; } return encryptionHelperMap ; }"
checkinAlgorithm ( algorithm ) ; return new CertPathValidator ( ) ; }
double mean = 0 ; double sum = 0 ; for ( Number val : collection ) { sum += val. doubleValue ( ) ; } if ( sample ) { return Math. sqrt ( sum / collection. size ( ) ) ; } else { return Math. sqrt ( sum ) ; } }
"String var = ""test"" ; assertEquals ( ""test"", VarFormatter. parse ( var ) ) ; }"
if ( span == null ) { stTopLocalTiles ( ) ; } else { stLocalTiles ( span. getSpanId ( ) ) ; } }
int newArray [ ] = new int [ array. length ] ; for ( int i = 0 ; i < array. length ; i ++ ) { newArray [ i ] = Double. doubleToLongBits ( array [ i ] ) ; } return newArray ; }
assert foreground == null || foreground. equals ( Transaction. NONE ) ; return foreground ; }
"try { return extractReourceString ( key, args ) ; } catch ( MissingResourceException e ) { return key ; } catch ( NullPointerException e ) { return ""!"" + key + ""!"" ; } }"
m_requestPath = requestPath ; m_version = version ; return m_requestPath ; }
"final Set < Class <? >> list = Classes. getClasses ( ""net.meisen.general.genmisc.test"" ) ; assertEquals ( list. size ( ), 1 ) ; list. clear ( ) ; for ( final Class <? > cls : list ) { assertVariablePackage ( cls ) ; } }"
"List < EditorError > errors = new ArrayList < EditorError > ( ) ; if ( value == null ) { errors. add ( new EditorError ( messageKey ) ) ; } else { errors. add ( new EditorError ( messageKey, value ) ) ; } return errors ; }"
X86Decoder decoder = new X86Decoder ( ) ; decoder. model = cpu ; decoder. mode = mode ; decoder. xmlPath = xmlPath ; decoder. dtdPath = dtdPath ; return decoder ; }
"int start = Math. min ( getPageNo ( ), getPageSize ( ) ) ; int end = Math. min ( getPageNo ( ), getPageSize ( ) ) ; if ( start < 0 && end < 0 ) { return new Page ( start, end ) ; } else { return new Page ( start, end ) ; } }"
"DoubleMatrix output = input. dup ( ) ; int nRows = input. rows ; int nCols = input. columns ; for ( int i = 0 ; i < nRows ; i ++ ) { for ( int j = 0 ; j < nCols ; j ++ ) { output. put ( i, j, feeNorm. getQuick ( i, j ) ) ; } } return output ; }"
int src = edge. getSource ( ) ; int dest = edge. getDestination ( ) ; edge. setSource ( src ) ; edge. setDest ( dest ) ; }
"checkConfig ( ) ; String value = System. getProperty ( ""context.param.elasticsearch.setOverlayProfilesXml"" ) ; if (! StringUtils. hasText ( value ) ) throw new NullPointerException ( ""param.elasticsearch.setOverlayProfilesXml cannot be null!"" ) ; return value ; }"
if ( extractBndleBox == null ) { extractBndleBox = new com. amazonaws. internal. SdkInternalList < BundleTask > ( ) ; } return extractBndleBox ; }
if ( bw == null ) { return true ; } else { return bw ; } }
int result = 1 ; for ( int i = 0 ; i < nodeSn. length ; i ++ ) { if ( nodeSn [ i ] == 0 ) { result ++ ; } } return result ; }
"addIdentityColumns ( enumeratedIconId ) ; addIdentityColumns ( headline, description, label ) ; }"
refreshIndexedData ( ) ; returnIndexedData ; }
String [ ] result = new String [ disconnectApplicationLockCounts. size ( ) ] ; for ( int i = 0 ; i < disconnectApplicationLockCounts. size ( ) ; i ++ ) { result [ i ] = ( String ) disconnectApplicationLockCounts. get ( i ) ; } return result ; }
ArrayList < HWISessionItem > copy = new ArrayList < HWISessionItem > ( ) ; removeEdgeSessinoArgs ( copy ) ; return copy ; }
type = value ; length = value - 1 ; }
"FileOutputStream fos = new FileOutputStream ( destZipFile ) ; compressFiles ( listFiles, fos ) ; fos. close ( ) ; }"
"if ( ds == null ) return null ; NodeId nodeId = node. getNodeId ( ) ; return extractProjectName ( ds, nodeId ) ; }"
CandlestickRenderer r1 = new CandlestickRenderer ( ) ; CandlestickRenderer r2 = ( CandlestickRenderer ) r1. clone ( ) ; assertTrue ( r1!= r2 ) ; assertTrue ( r1. getClass ( ) == r2. getClass ( ) ) ; assertTrue ( r1. equals ( r2 ) ) ; }
if (! m_nextSet ) { m_nextSet = iterator. next ( ) ; m_currentIterator = m_nextIterator + 1 ; } return m_currentIterator. month ; }
if ( end <= 0 ) { return ; } Page page = new Page ( end ) ; page. setPowerSibling ( true ) ; }
if ( fields == null ) { return ( ( short ) 0 ) ; } else { return fields ; } }
"if ( name == null ) { throw new IllegalArgumentException ( ""Name of the property name cannot be null."" ) ; } return bundle. get ( name ) ; }"
SimpleDateFormat sdf = new SimpleDateFormat ( ISO_8601_FORMAT ) ; return sdf. format ( date ) ; }
warnedSideNorNotWarn = true ; return! warnedSideNorNotWarn ; }
int current = 1 ; for ( int i = 0 ; i < 5 ; i ++ ) { current *= - 1 ; } for ( int i = 1 ; i < 5 ; i ++ ) { if ( current % 2 == 1 ) { current *= 2 ; } } return current ; }
"ContentResolver contentResolver = context. getContentResolver ( ) ; String [ ] args = { ""find"", ""address"" } ; String [ ] result = contentResolver. query ( Uri. parse ( ""http://www.icq.com/people/about_me.php?uin="" + username ), args, null, null, null ) ; return new Cursor ( context, result ) ; }"
"CornerMasterFeatures. Builder builder = new CornerMasterFeatures. Builder ( w, h ) ; for ( int i = 0 ; i < 3 ; i ++ ) { builder. addFeature ( craeteMasterFeature ( w, h, res ) ) ; } craeteMasterFeature ( w, h, res ) ; return builder. build ( ) ; }"
"if ( column < 0 ) { column = UNDEFINED ; } if ( ( uniqueReg == null || column >= uniqueReg. length ) ) { uniqueReg = Arrays. copyOf ( uniqueReg, uniqueReg. length + 1 ) ; } uniqueReg [ column ] = true ; }"
tset. setHasInvalid ( true ) ; assertNull ( tset. getHasInvalid ( ) ) ; }
ThriftSession userSession = thriftClient. getSession ( sessionId ) ; removeThriftSessino ( userSession ) ; }
"ArrayList < OrientedSchemaVasr > vs = new ArrayList < OrientedSchemaVasr > ( ) ; vs. add ( new OrientedSchemaVasr ( ""column1"" ) ) ; vs. add ( new OrientedSchemaVasr ( ""column2"" ) ) ; vs. add ( new OrientedSchemaVasr ( ""column3"" ) ) ; Assert. assertFalse ( vs. contains ( ""column4"" ) ) ; Assert. assertFalse ( vs. contains ( ""column5"" ) ) ; }"
"ORB orb = ( ORB ) createComplement ( args, props ) ; return orb ; }"
if ( ints == null ) return null ; int n = ints. length ; NativeSize [ ] nls = new NativeSize [ n ] ; for ( int i = 0 ; i < n ; i ++ ) nls [ i ] = toNS ( ints [ i ] ) ; return nls ; }
if ( forceBaudPtahs == null ) { return new HashSet < String > ( ) ; } return forceBaudPtahs ; }
SootClass column = buildSootClass ( ) ; return column ; }
"YearlyRecord rec = new YearlyRecord ( ) ; for ( int i = 0 ; i < N ; i ++ ) { rec. insert ( getRandomString ( ), new Integer ( 1 ) ) ; } rec. increment ( ) ; assertEquals ( 1, rec. getYear ( ) ) ; }"
"Definition definition = new Definition ( portType, portType. getLocalPart ( ), portType. getNamespaceURI ( ), portType. getLocalPart ( ) ) ; return definition ; }"
"if ( m_revoked ) { throw new IAIKException ( ""Invalid frame"" ) ; } if ( m_exception!= null ) { throw new IAIKException ( m_exception ) ; } m_revoked = false ; }"
"bot. menu ( ""File"" ). menu ( ""Import..."" ). click ( ) ; SWTBotShell shell = bot. shell ( ""Import"" ) ; shell. activate ( ) ; selectTreeNode ( export ) ; bot. button ( ""Next >"" ). click ( ) ; return bot ; }"
tab. aboutToChildrenReturnServiceWorker ( ) ; tab. aboutToChildrenReturnResources ( manifestUrl ) ; }
if ( sessionFactory instanceof SessionFactoryImplementor ) { SessionFactoryImplementor impl = ( SessionFactoryImplementor ) sessionFactory ; if ( impl. getDialect ( ). equals ( SessionFactory. HSQL ) ) { return true ; } } return false ; }
"File file = new File ( ConfigurationManager. class. getProtectionDomain ( ). getCodeSource ( ). getLocation ( ). getPath ( ) + File. separator + ""replicator.properties"" ) ; if ( file. exists ( ) ) { try { managedImage = ImageIO. read ( file ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } }"
List < Point > result = new ArrayList < Point > ( points. size ( ) ) ; for ( Point point : points ) { if ( point. getY ( ) < 0 || point. getX ( ) > 0 || point. getY ( ) == 0 ) { result. add ( point ) ; } } return result ; }
SQLiteDatabase db = helper. getWritableDatabase ( ) ; try { for ( V entity : entities ) { db. insert ( entity ) ; } } finally { if ( db. isActive ( ) ) { db. close ( ) ; } } }
"MutablePeriod period = new MutablePeriod ( ) ; for ( MilestoneWindow window : milestoneWindows ) { period. add ( new Period ( window. getPeriod ( ), windowName ) ) ; } return period. toPeriod ( ) ; }"
boolean result = true ; if ( hazelcastOutput ( filePath ) ) { result = false ; } return result ; }
if ( data == null ) { JSONArray jsonArray = new JSONArray ( ) ; if ( context!= null ) { jsonArray. put ( context ) ; } data = jsonArray. toJSONArray ( ) ; } return jsonArray ; }
List < V > list = new ArrayList < V > ( ) ; for ( Iterator < V > iter = views. iterator ( ) ; iter. hasNext ( ) ; ) { list. add ( iter. next ( ) ) ; } return list. iterator ( ) ; }
if (! mRecycled ) throw new IllegalStateException ( ) ; return mTextureBounds. x + mTextureBounds. y ; }
char [ ] buffer = new char [ 1 ] ; buffer [ 0 ] = ( char ) 'T' ; buffer [ 1 ] = ( char ) 'F' ; buffer [ 2 ] = ( char ) 'T' ; buffer [ 3 ] = ( char ) 'T' ; buffer [ 4 ] = ( char ) 'H' ; buffer [ 5 ] = ( char ) 'I' ; buffer [ 6 ] = ( char ) 'O' ; buffer [ 7 ] = ( char ) 'Z' ; return buffer ; }
DatePanel retorno = new DatePanel ( ) ; setter. customize ( retorno ) ; return retorno ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( key!= null ) sb. append ( ""Key: "" + key + "", "" ) ; if ( value!= null ) sb. append ( ""Value: "" + value + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"if ( rethrow ) { throw rethrow ; } if ( logger!= null ) { logger. warn ( m, e ) ; } if (! logger. isDebugEnabled ( ) ) { logger. warn ( m, e ) ; } }"
final BufferedWriter bw = new BufferedWriter ( new FileWriter ( file ) ) ; try { bw. write ( Integer. toString ( line ) ) ; bw. newLine ( ) ; bw. write ( column ) ; bw. newLine ( ) ; } finally { bw. close ( ) ; } }
"JSONArray json = new JSONArray ( ) ; int i = 0 ; for ( Map. Entry < String, Object > entry : toArchive. entrySet ( ) ) { json. put ( entry. getKey ( ), entry. getValue ( ) ) ; i ++ ; } return json. toString ( ) ; }"
Request request = requests. get ( requestCode ) ; if ( request == null ) { Iterator < Request > iterator = pendingRequests. iterator ( ) ; while ( iterator. hasNext ( ) ) { Request next = iterator. next ( ) ; if ( next == null ) { iterator. remove ( ) ; request = null ; } } } return request ; }
"String id = ( String ) select. getId ( ) ; FacesMessage msg = null ; if ( id == null ) { msg = new FacesMessage ( FacesMessage. SEVERITY_ERROR, value, label ) ; } else { msg = new FacesMessage ( FacesMessage. SEVERITY_ERROR, value, label, select. getId ( ) ) ; } return msg ; }"
"int strategyEndOffset = encoder. getLength ( ) ; encoder. writeBlobTlv ( Tlv. ControlParameters_Strategy, strategy ) ; for ( int i = 0 ; i < strategy. length ( ) ; i ++ ) { encoder. writeTypeAndLength ( Tlv. ControlParameters_Strategy, strategy. get ( i ). getValue ( ). length ( ) ) ; } encoder. writeTypeAndLength ( Tlv. ControlParameters_Strategy, strategyEndOffset ) ; }"
"String value = propertyMatches ( resourceName, key, pattern ) ; addProperty ( resourceName, key, value ) ; return value ; }"
removePositio ( nP ) ; removePositio ( mP ) ; }
cuComplex c = new cuComplex ( ) ; c. real = r ; c. imaginary = i ; return c ; }
"HashSet < Emoticon > result = new HashSet < > ( ) ; for ( Map. Entry < String, HashSet < Emoticon >> e : hazelcast. values ( ). entrySet ( ) ) { if (! e. getValue ( ). isEmpty ( ) ) result. add ( e. getValue ( ) ) ; } return result ; }"
"Session task = new Session ( habitat, sessionId ) ; task. lock ( ) ; try { sessionIdMap. remove ( sessionId ) ; } finally { task. unlock ( ) ; } return task ; }"
"try { return scheduler. memCityVerson ( plugin, null, runnable, firstDelay, repeatDelay ) ; } catch ( final BukkitSchedulerException e ) { throw new RuntimeException ( e ) ; } }"
String json = null ; try { json = new JSONObject ( new JSONObject ( getHost ( hostName ) ) ). toString ( ) ; } catch ( JSONException e ) { e. printStackTrace ( ) ; } catch ( JSONException e ) { e. printStackTrace ( ) ; } return json ; }
Owner owner = ownerByThread. get ( thread ) ; if ( owner == null ) return - 1 ; return dayTaxonIndex ( owner ) ; }
"for ( String extension : encoded ) { checkNotNull ( extension ) ; } extensionMap. put ( encoded. get ( 0 ), new ChromeExtension ( ) ) ; }"
long array [ ] = new long [ pages ] ; for ( int i = 0 ; i < pages ; i ++ ) { array [ i ] = array [ i ] + 1 ; } array2Committed = ( int ) array [ 0 ] ; }
"final String propertiesToSort = extractPropertiesToSort ( domainProperty, documentTypeDTO ) ; return propertiesToSort == null? null : propertiesToSort ; }"
release ( ) ; return throwInvokeCredentials ; }
"if ( parent == null ) { throw new NullPointerException ( ""parent must not be null"" ) ; } return hazelcastIndex ( factor, parent ) ; }"
quickRules = c. getMethods ( ) ; return quickRules. clone ( ) ; }
try { MessageDigest md = MessageDigest. getInstance ( algorithm ) ; md. update ( pubkey. getEncoded ( ) ) ; return toHexString ( md. digest ( ) ) ; } catch ( NoSuchAlgorithmException e ) { throw new RuntimeException ( e ) ; } }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( count!= null ) sb. append ( ""Count: "" + count + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"mOutputStream. write ( sortableMatrixBuffer, 0, 4 ) ; mOutputStream. write ( ( byte ) 0 ) ; for ( int i = 0 ; i < 4 ; i ++ ) { mOutputStream. write ( ( byte ) 1 ) ; mOutputStream. write ( ( byte ) 0 ) ; } mOutputStream. flush ( ) ; }"
"try { return ioOperations. getWeekCounterMbean ( ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return null ; } }"
Integer seam = threadSeam. intValue ( ) ; return seam ; }
"if ( dest == null || dest. length < size ( ) ) { dest = new double [ size ] ; } encodeUnsigned ( dest, 0, dest. length ) ; return dest ; }"
Iterator < String > it = wrod. keySet ( ). iterator ( ) ; while ( it. hasNext ( ) ) { String key = it. next ( ) ; String value = wrod. get ( key ) ; if ( value. equals ( word ) ) { return true ; } } return false ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( key!= null ) sb. append ( ""Key: "" + key + "", "" ) ; if ( value!= null ) sb. append ( ""Value: "" + value + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"Key key1 = datastore. newKeyFactory ( ). setKind ( ""MyKind"" ). newKey ( keyName1 ) ; Key key2 = datastore. newKeyFactory ( ). setKind ( ""MyKind"" ). newKey ( keyName2 ) ; datastore. multpile ( key1, key2 ) ; }"
List < URI > uris = new ArrayList < URI > ( names. size ( ) ) ; for ( String name : names ) { uris. add ( URI. create ( name ) ) ; } return uris ; }
byte [ ] data = FileUtils. readFileToByteArray ( fileUrl ) ; NinePatch ninePatch = new NinePatch ( data ) ; if ( convert ) { ninePatch. convert ( ) ; } return ninePatch ; }
if ( isWindow ) ( ( GWinApplet ) app ). keyEvent ( event ) ; for ( GAbstractControl control : windowControls ) { if ( ( control. registeredMethods & KEY_METHOD ) == KEY_METHOD ) control. keyEvent ( event ) ; } }
int dx = upEvent. getX ( ) - xDown ; int dy = upEvent. getY ( ) - yDown ; return ( dx >= 0 && dx <= upEvent. getX ( ) && dy >= 0 && dy <= upEvent. getY ( ) ) && ( xDown >= 0 && xDown <= upEvent. getX ( ) && yDown >= 0 && yUp >= 0 && yDown <= upEvent. getY ( ) ) ; }
"String granteeID = UUID. randomUUID ( ). toString ( ) ; return createMkdir ( granteeID, name ) ; }"
Set < MatcherAndAlert > set = new HashSet < MatcherAndAlert > ( ) ; set. add ( getNotes ( edge ) ) ; return set ; }
"Size2D s1 = arrangeNN ( container, g2 ) ; if ( constraint. getWidthRange ( ). contains ( s1. width ) ) { return s1 ; } else { RectangleConstraint c = constraint. toFixedWidth ( constraint. getWidthRange ( ). getUpperBound ( ) ) ; return arrangeFN ( container, g2, c ) ; } }"
int cde = address. currencyCde ( ) ; return cde ; }
"for ( Map. Entry < String, DestinationMapNode > entry : brandBuilds. entrySet ( ) ) { if ( path. equals ( entry. getKey ( ) ) ) { return entry. getValue ( ) ; } } DestinationMapNode node = brandBuilds. get ( path ) ; if ( node == null ) { node = new DestinationMapNode ( path ) ; brandBuilds. put ( path, node ) ; } return node ; }"
"final String lower = filename. toLowerCase ( Locale. ROOT ) ; int n = lower. length ( ) ; for ( int i = 2 ; i <= 5 ; i ++ ) { if (! uncompressSuffix ( lower. substring ( n - i ), lower. substring ( n - i ) ) ) { return false ; } } return true ; }"
if ( paramIsSerevrIndexParse == null ) { return false ; } else { return paramIsSerevrIndexParse. booleanValue ( ) ; } }
while ( x < size / 2 + 1 ) { x ++ ; } while ( y < size / 2 + 1 ) { y ++ ; } }
"if ( Build. VERSION. SDK_INT >= Build. VERSION_CODES. JELLY_BEAN ) { return ""Mac OS X"" ; } else if ( Build. VERSION. SDK_INT >= Build. VERSION_CODES. JELLY_BEAN ) { return ""Mac OS X"" ; } return null ; }"
"PrivateKey key = hazelcastGeneratorEkyUuidfromIle ( cert, alias, password ) ; return key ; }"
"for ( int i = 0 ; i < liste. getBoard ( ). size ( ) ; i ++ ) { for ( int j = 0 ; j < liste. getBoard ( ). size ( ) ; j ++ ) { if ( liste. getBoard ( ). get ( i ). getProbability ( ) == formulaireCand. getProbability ( ) ) liste. getBoard ( ). set ( i, j, FormulaireCand. get ( i ). getProbability ( ) ) ; } } }"
mMinCsaleX = minScaleX ; mMaxCsaleX = maxScaleX ; }
if ( pbKey instanceof OTMKey ) { return ( OTMConnection ) handler. getConnection ( ( OTMKey ) pbKey ) ; } pbKey = pbKey. duplicate ( ) ; return ( OTMConnection ) handler. getConnection ( ( OTMKey ) pbKey ) ; }
Card card = trick. getCard ( cardIndex ) ; if (! card. play ( ) ) return false ; return true ; }
"String name = principal. substring ( 0, principal. indexOf ( ""@"" ) ) ; return name ; }"
"try { zkClient. delete ( path, data. getBytes ( Charset. forName ( ""UTF-8"" ) ) ) ; } catch ( KeeperException ke ) { throw new IOException ( ke ) ; } }"
TreeEntry entry = new TreeEntry ( ) ; assertNull ( entry. getAction ( ) ) ; }
if ( hazelcastParticipantFailedAwaitDisaled ) { return true ; } if ( hazelcastParticipantFailedAwaitDisaled == true ) { return true ; } return false ; }
ArrayList < File > files = new ArrayList < File > ( ) ; File [ ] filesOrDirs = dir. listFiles ( ) ; for ( File fileOrDir : filesOrDirs ) if ( fileOrDir. isFile ( ) ) files. add ( fileOrDir ) ; return files. toArray ( new File [ files. size ( ) ] ) ; }
"FSDataOutputStream out = null ; try { out = fs. create ( inFile, conf ) ; } catch ( IOException e ) { throw new IOException ( e ) ; } try { return coyData ( out ) ; } finally { IOUtils. cleanup ( out ) ; } }"
"GatewayManager gatewayManager = portHazelcastMap. get ( connection ) ; if ( gatewayManager == null ) { gatewayManager = new GatewayManager ( connection ) ; portHazelcastMap. put ( connection, gatewayManager ) ; } return gatewayManager ; }"
_sending. setRequest ( _request ) ; _sending. setDoOutput ( true ) ; byte [ ] response = _sending. sendAndReceiveJsonarray ( ) ; _sending. reset ( ) ; return response ; }
ValueFactory < Boolean > factory = valueFactories. getBooleanFactory ( ) ; Boolean [ ] res = new Boolean [ values. size ( ) ] ; for ( int i = 0 ; i < res. length ; i ++ ) { res [ i ] = factory. create ( values. get ( i ) ) ; } return res ; }
StatsSession session = new StatsSession ( ) ; session. setOAuthConsumerKey ( consumerKey ) ; session. setOAuthConsumerSecret ( consumerSecret ) ; session. setScope ( scope ) ; session. setExpiration ( System. currentTimeMillis ( ) ) ; return session ; }
"StringBuffer sb = new StringBuffer ( ) ; for ( GeographicPoint point : path ) { sb. append ( point + "" "" ) ; } return sb. toString ( ) ; }"
"if ( from > to ) { System. err. println ( ""From:"" + from + "" to:"" + to ) ; nsDetail ( from, to - 1 ) ; } }"
"String value = readString ( parentElement, elementName, typeName ) ; return value ; }"
"Preconditions. checkNotNull ( parent, ""IE01727: Parent argument can not be null"" ) ; Preconditions. checkNotNull ( container, ""IE01728: Container argument can not be null"" ) ; function. touchProtocol ( parent, container ) ; }"
box. removeAllItems ( ) ; for ( Schedule s : mockStats ) { box. addItem ( s ) ; } }
"if ( batchSize <= 1 ) { return new EntityLoader ( persister, lockOptions, factory, influencers ) ; } return biuldLoder ( persister, batchSize, lockOptions, factory, influencers ) ; }"
ThreadUtils. assertOnUiThread ( ) ; mForcedForwardFocuPesFlags = true ; }
ClassLoader cl = Thread. currentThread ( ). getContextClassLoader ( ) ; if ( cl == null ) { return false ; } try { return cl. loadClass ( s )!= null ; } catch ( ClassNotFoundException ex ) { return false ; } }
int temp = file. readInt ( ) ; file. seek ( file. length ( ) ) ; for ( int i = 0 ; i < LOG_LABELS. length ; i ++ ) { file. write ( LOG_LABELS [ i ] ) ; } file. seek ( file. length ( ) ) ; return temp ; }
if ( type == null ) { return TypeType. STRING ; } else { return type ; } }
if ( registry!= null ) { return registry. getCounter ( name ) ; } else { return Metrics. newCounter ( name ) ; } }
if ( allTimeWord ) return true ; return ( minStamp <= timestamp && timestamp < maxStamp ) ; }
"final byte [ ] c = new byte [ val. length ] ; for ( int i = 0 ; i < val. length ; i ++ ) { c [ i ] = val [ i ] ; } uptParameter ( name, c ) ; }"
TagService tagService = TagService. getInstance ( ) ; return tagService. getTagIdAndChildrenIds ( tagName ) ; }
for ( int i = 0 ; i < buttonList. size ( ) ; i ++ ) { if ( buttonList. get ( i ). isRecycled ( ) ) { buttonList. remove ( i ) ; } } for ( int i = 0 ; i < buttonList. size ( ) ; i ++ ) { if ( buttonList. get ( i ). isRecycled ( ) ) { buttonList. remove ( i ) ; } } }
if ( Build. VERSION. SDK_INT >= 19 ) { return true ; } return false ; }
"if (! enabled ) return ; if (! metricsUsed. get ( image. getId ( ) ) ) { metricsUsed. put ( image. getId ( ), new Long ( wasSwitched? 1 : 0 ) ) ; } if (! metricsUsed. get ( image. getId ( ) ) ) { metricsUsed. put ( image. getId ( ), new Long ( wasSwitched? 1 : 0 ) ) ; } }"
"try { HashSet < String > set1 = new HashSet < String > ( ) ; set1. add ( ""A"" ) ; set1. add ( ""B"" ) ; set1. add ( ""C"" ) ; set1. add ( ""D"" ) ; set1. add ( ""E"" ) ; set1. add ( ""F"" ) ; set1. add ( null ) ; assertFalse ( set1. equals ( set2 ) ) ; } catch ( CloneNotSupportedException e ) { e. printStackTrace ( ) ; } }"
"SharedPreferences sharedPreferences = context. getSharedPreferences ( Constants. SETTINGS_NAME, Context. MODE_PRIVATE ) ; Editor editor = sharedPreferences. edit ( ) ; editor. putBoolean ( getKey ( context, keyId ), value ) ; ApiAdapterFactory. getApiAdapter ( ). applyPreferenceChanges ( editor ) ; }"
for ( int i = 0 ; i < newIndividuals. length ; i ++ ) { state. newIndividuals [ i ] = newIndividuals [ i ] ; } for ( int j = 0 ; j < subpopulations. length ; j ++ ) { state. subpopulations [ j ] = subpopulations [ j ] ; state. indices [ j ] = indices [ i ] ; } }
"int l1, l2 ; l1 = Math. min ( l1, b1. length - s1 ) ; l2 = Math. min ( l2, b2. length - s2 ) ; if ( l1 == l2 ) { return 0 ; } for ( int i = s1, j = s2 ; i < l1 && j < l2 ; i ++, j ++ ) { b1 [ j ] = b2 [ i ] ; } return rubyFloat ( b1, s1, l1 ) ; }"
"String osname = System. getProperty ( ""os.name"" ). toLowerCase ( ) ; return ( osname. indexOf ( ""windows nt"" ) >= 0 || osname. indexOf ( ""nt"" ) >= 0 ) ; }"
"final Context cx = Context. enter ( ) ; Object res = null ; try { res = function. invoke ( cx, returnType, args ) ; } finally { Context. exit ( ) ; } return returnType. cast ( res ) ; }"
"String documentKy = extractClassName ( ) ; if ( documentKy == null || documentKy. isEmpty ( ) ) { documentKy = extractLocale ( ) ; if ( documentKy!= null &&! documentKy. isEmpty ( ) ) { documentKy = documentKy. substring ( 0, documentKy. length ( ) - 6 ) ; } } return documentKy ; }"
"Response response = given ( ). when ( ). get ( baseURI + ""/1"" ) ; Assert. assertEquals ( response. getStatusCode ( ), 404 ) ; }"
"ArrayList < Sms > surfaceIds = new ArrayList < Sms > ( ) ; for ( long id : rawIds ) { if ( isContact ( id, contactName ) ) { surfaceIds. add ( new Sms ( id, contactName ) ) ; } } return surfaceIds ; }"
"initializeTypeMap ( ) ; VariableKey key = typeMap. get ( name ) ; if ( key == null ) { key = new VariableKey ( name, 0 ) ; typeMap. put ( name, key ) ; } return key ; }"
"SharedPreferences. Editor editor = sharedPreferences. edit ( ) ; editor. putInt ( hazelcastInstance ( ). getString ( keyResource ), newValue ) ; editor. apply ( ) ; }"
"map. add ( ""foo"", new ParameterizedHeader ( ""bar"" ) ) ; map. add ( ""foo"", new ParameterizedHeader ( ""baz"" ) ) ; map. add ( ""foo"", new ParameterizedHeader ( ""bop"" ) ) ; assertTrue (! map. containsKey ( ""foo"" ) ) ; assertTrue ( map. containsKey ( ""bar"" ) ) ; }"
Vec3f p = pickingRay ( ) ; if ( p. x < 0 ) { p. x = - p. x ; } else if ( p. x > 0 ) { p. x = 1 ; } if ( p. y < 0 ) { p. y = 1 ; } else if ( p. y > 0 ) { p. y = 0 ; } if ( p. z < 0 ) { p. z = 1 ; } return p ; }
double d1 = abs ( v1. z - v2. z ) ; double d2 = abs ( v1. x - v2. x ) ; if ( d1 > d2 ) { return d1 ; } else { return d2 ; } }
Explanation [ ] adapter = new Explanation [ children. length ] ; for ( int i = 0 ; i < children. length ; i ++ ) { adapter [ i ] = children [ i ]. buildAdapter ( ) ; } return adapter ; }
assert ( dA == 0 ) || ( pointB == null ) ; double d = 0.0 ; for ( int i = 0 ; i < pointA. length ; i ++ ) { d += dA * pointA [ i ] ; } d = d / dA ; return Math. sqrt ( d ) ; }
if ( value == null ) return null ; try { return Double. parseDouble ( value ) == 1 ; } catch ( Exception ex ) { return null ; } }
if ( autoPageBreaks == null ) { return false ; } else { return autoPageBreaks ; } }
"String query = queryParamsMap. get ( ""q"" ) ; if ( queryParamsMap. size ( ) > 0 ) { query = URLEncoder. encode ( query, ""UTF-8"" ) ; } T result = restClient. post ( url, query ) ; if ( typeOfT!= null &&! typeOfT. isEmpty ( ) ) { result = typeOfT. cast ( result ) ; } return result ; }"
"int [ ] data = { 0 } ; boolean [ ] orientedOut = new boolean [ 1 ] ; Arrays. fill ( orientedOut, true ) ; for ( int i = 0 ; i < data. length ; i ++ ) { Assert. assertEquals ( 0, data [ i ] ) ; } }"
if ( pointer instanceof BonsaiCollectionPointerImpl ) { replaceWithSBTreeImpl ( ( BonsaiCollectionPointerImpl ) pointer ) ; } else { replaceWithSBTreeImpl ( ( OBonsaiCollectionPointerImpl ) pointer ) ; } }
List < Booking > list = new ArrayList < Booking > ( ) ; for ( Booking booking : bookings ) { if ( booking. getGender ( ). equals ( person ) && booking. getDayOfMonth ( ) == day ) { list. add ( booking ) ; } } return list ; }
int h = s. hashCode ( ) ; int len = s. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char c = s. charAt ( i ) ; if ( c >= 'a' && c <= 'z' ) { h ^= ( c - 'a' ) ; } else if ( c >= 'A' && c <= 'Z' ) { h ^= ( c - 'A' ) ; } } return h ; }
try { return FileUtils. readFileToByteArray ( new File ( fileName ) ) ; } catch ( IOException e ) { return null ; } }
sumCells [ i ] = v ; sumCell ++ ; }
"try { double v = hazelcastGetD ( param ) ; if ( v!= null ) { return v. toVec3D ( ) ; } } catch ( Exception e ) { LOGGER. log ( Level. FINEST, ""Returning null. Reason: "" + param + "" value is not a Vec3D"" ) ; return null ; } }"
"assert beingCount >= 0 ; assert entryBarrier!= null ; assert exitBarrier!= null ; BeingsSites beingsSites = new BeingsSites ( beingCount, entryBarrier, exitBarrier ) ; Runtime. getRuntime ( ). addShutdownHook ( new Thread ( ) { @ Override public void run ( ) { exitBarrier. countDown ( ) ; } } ) ; }"
if ( expiryConfigModels!= null ) { return expiryConfigModels. toArray ( new int [ 0 ] ) ; } return null ; }
final Iterator < String > iterator = params. keySet ( ). iterator ( ) ; while ( iterator. hasNext ( ) ) { final String keyPair = iterator. next ( ) ; final String valuePair = params. get ( keyPair ) ; params. remove ( keyPair ) ; params. remove ( valuePair ) ; } }
String val = gtField ( name ) ; if ( val == null ) return null ; return Double. parseDouble ( val ) ; }
"ContentValues values = new ContentValues ( ) ; values. put ( key, value ) ; hasUniqueChildren ( values ) ; }"
try { return new Profile ( path ). isProfile ( ) ; } catch ( IOException e ) { return false ; } }
TrackerUtils. runOnBackgroundThread ( new Runnable ( ) { @ Override public void run ( ) { if (! requestCanceled ) { execSvc. completeService ( null ) ; } } } ) ; }
RepoPath path2 = new RepoPath ( ) ; path2. setRepo ( repo ) ; path2. setPath ( path ) ; if ( name!= null &&! name. isEmpty ( ) ) { path2. setName ( name ) ; } return path2 ; }
"String output = outputStringWriter. getBuffer ( ). toString ( ). trim ( ) ; assertEquals ( getHelpOutput ( ), output ) ; }"
"File file = new File ( tgtDir ) ; if (! file. exists ( ) ) { if (! file. mkdirs ( ) ) { throw new RuntimeException ( ""Couldn't create directory '"" + tgtDir + ""'"" ) ; } } return file ; }"
char [ ] map = new char [ 0x10000 ] ; int i = 0 ; int j = 0 ; while ( i < 52 ) { int count = packed. charAt ( i ++ ) ; char value = packed. charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > 0 ) ; } return map ; }
"try { Method customerChange = sa. getClass ( ). getMethod ( ""customerChange"", new Class [ ] { String. class, Set. class, MetadataId. class } ) ; customerChange. invoke ( sa, new Object [ ] { status, metadataIds, changeDate, changeMessage } ) ; } catch ( Exception e ) { } return null ; }"
"String name = ( String ) value ; statement. setString ( index, name ) ; }"
"MusicXML demo = new MusicXML ( scoresDir + ""/demo.xml"" ) ; loaMaxSore ( demo ) ; }"
if ( storedRecordID!= null ) { storedRecordID. remove ( ) ; } storedRecordID = recordID ; }
HTTPConduit bind = new HTTPConduit ( mServiceName ) ; bind. setPort ( mPort ) ; bind. setProtocol ( mProtocol ) ; return bind ; }
"if ( instance == null ) { throw new IllegalStateException ( ""Reviewer instance is null"" ) ; } return instance ; }"
ObjectMapper mapper = new ObjectMapper ( ) ; String json = mapper. writeValueAsString ( handler ) ; return json ; }
switch ( state ) { case main_region_Start : return stateVector [ 0 ] == State. main_region_Start ; case main_region_B : return stateVector [ 0 ] == State. main_region_B ; case main_region_A : return stateVector [ 0 ] == State. main_region_A ; default : return false ; } }
StringWriter stringWriter = new StringWriter ( ) ; PrintWriter writer = new PrintWriter ( stringWriter ) ; response. setEntity ( writer ) ; String content = writer. toString ( ) ; writer. close ( ) ; stringWriter. close ( ) ; return stringWriter. toString ( ) ; }
List < List < E >> result = new ArrayList < > ( ) ; for ( Node < E > root : roots. values ( ) ) { result. add ( root. notificationNumber ( ) ) ; } return result ; }
"final SharedPreferences prefs = mContext. getSharedPreferences ( PREFS_NAME, Context. MODE_PRIVATE ) ; return prefs. getLongest ( ) ; }"
"if ( password == null || password. trim ( ). length ( ) == 0 ) { return password ; } return ecnryptPasswodr ( password, new BlowfishParameters ( ), passwordKey ) ; }"
"LogMessage mg = new LogMessage ( Thread. currentThread ( ). getStackTrace ( ) [ 2 ]. getClassName ( ), Thread. currentThread ( ). getStackTrace ( ) [ 3 ]. getMethodName ( ) ) ; assertNotSame ( expected, actual, mg ) ; }"
"checkExtension ( ) ; return nglQueryVideoCaptureDeviceNV ( getPeerInfo ( ), device, attribute, value, value. position ( ) ) ; }"
"setLatitude ( par1NBTTagCompound. getLong ( ""Latitude"" ) ) ; setLongitude ( par1NBTTagCompound. getLong ( ""Longitude"" ) ) ; setLatitude ( par1NBTTagCompound. getLong ( ""Latitude"" ) ) ; setLongitude ( par1NBTTagCompound. getLong ( ""Longitude"" ) ) ; }"
"SwingUtilities. invokeLater ( new Runnable ( ) { public void run ( ) { reloadMobileSo ( type, radius ) ; } } ) ; }"
"Cache cache = cacheMap. get ( cacheName ) ; if ( cache == null ) { cache = new Cache ( cacheName ) ; cacheMap. put ( cacheName, cache ) ; } return cache ; }"
"URI uri = capabilitiesDocumentHost. toURI ( ) ; try { uri = new URI ( uri. toString ( ) ) ; } catch ( URISyntaxException e ) { throw new IllegalStateException ( ""Unable to create the asset: "" + e. getMessage ( ), e ) ; } return uri ; }"
"if ( hubNode!= null ) { LOG. info ( ""constructPropagateLevel: Name of the hub node"" ) ; hubNode. setLinkState ( LinkState. AGENT ) ; } else { LOG. info ( ""constructPropagateLevel: Name of the participant node"" ) ; } }"
"Map < String, Boolean > createSkil = new HashMap < String, Boolean > ( ) ; for ( String skill : createSkil. keySet ( ) ) { if ( skill. equals ( playerSkill ) ) { createSkil. put ( skill, true ) ; } } return createSkil ; }"
assert align % 2 == 0 ; return align / 2 ; }
if ( json == null ) { json = new JSONObject ( ) ; } return json ; }
PngChunkPLTE chunk = new PngChunkPLTE ( chunkID ) ; pins. add ( chunk ) ; return chunk ; }
Double y = ( ( hazelcastRadius ( X ) + 0.5 ) / 2 ) * hazelcastRadius ( X ) ; return y ; }
"XDebugParameter param = new XDebugParameter ( ns, prefix, ln, val ) ; parameters. add ( param ) ; }"
"if ( value == null ) { return 0 ; } return transform ( teiidVersion, value, Double. class ) ; }"
GameManager g = new GameManager ( ) ; return g. cloneableRollMouse ( ) ; }
if (! t. isLayerEnabled ( ) ) { return null ; } for ( TurnoutOperation op : turnouts. values ( ) ) { if ( op. name ( ). equals ( t. getName ( ) ) || op. name ( ). equals ( apparentMode ) ) { return op ; } } return null ; }
"String s = name ; if ( s. equals ( ""url"" ) ) { s = ""url"" ; } else if ( s. equals ( ""uRLDecoder"" ) ) { s = ""uRLDecoder"" ; } return s ; }"
double dx = 0.0 ; double dy = 0.0 ; double dz = 1.0 ; for ( int i = 0 ; i < 3 ; i ++ ) { dx += values [ i ] * values [ dz ] ; dy += values [ i ] * values [ dz + i ] ; } return dx * dx + dy * dy ; }
if ( VM. VerifyAssertions ) { VM. _assert (! isInit ( ) ) ; } return pointer ; }
List < CardViewWrapper > result = new ArrayList < CardViewWrapper > ( ) ; for ( Card card : cardsCopy ) { View view = gteAllowedMapping ( card ) ; if ( view!= null ) { result. add ( new CardViewWrapper ( view ) ) ; } } return result ; }
entries [ index ] = new Entry ( ) ; entries [ index ]. rgb = rgb ; }
"try { return loadPacketF ( file, charset ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }"
"logger. debug ( ""jcifsServicePrincipal is set to {}"", jcifsServicePrincipal ) ; Config. setProperty ( LOGGING_STATUS_DETAIL_PROPERTY, String. valueOf ( jcifsServicePrincipal ) ) ; }"
if (! exists ( ) ) { return 0L ; } try { return getInfo ( ). getMonthIncluded ( ) ; } catch ( IOException e ) { return 0L ; } }
StringBuilder buffer = new StringBuilder ( ) ; toString ( buffer ) ; return buffer. toString ( ) ; }
String old = supportMember ; supportMember = value ; return old ; }
"checkNotNull ( element, ""element cannot be null"" ) ; checkNotNull ( propertyName, ""propertyName cannot be null"" ) ; element. addProperty ( ""id"", propertyName ) ; }"
"try { return ( JobManager ) context. getBean ( ""jobManager"" ) ; } catch ( Exception e ) { LOG. error ( ""Unable to get the module: {}"", e. getMessage ( ) ) ; throw new RuntimeException ( e ) ; } }"
"for ( int i = 1 ; i < chunks. size ( ) ; i ++ ) { if ( chunks. get ( i ). getId ( ) == id ) { chunks. add ( i, factor ) ; } } }"
"int [ ] result = new int [ tested. size ( ) ] ; for ( int i = 0 ; i < tested. size ( ) ; i ++ ) { result [ i ] = getLit ( ability, tested, context ) ; } return result ; }"
"ForeignKey < R, U > fk = new ForeignKey < R, U > ( key, table, name, fields ) ; fk. save ( ) ; return fk ; }"
Random rand = new Random ( ) ; int listSize = list. length ; List < Integer > copy = new ArrayList < Integer > ( list ) ; for ( int i = 0 ; i < listSize ; i ++ ) copy. add ( list [ i ] ) ; Collections. shuffle ( copy ) ; double total = 0 ; for ( int i = 0 ; i < listSize ; i ++ ) total += rand. nextInt ( listSize - i ) ; return total ; }
final DetailAST holder = createFullIdent ( typeAST ) ; if ( holder. getType ( ) == TokenTypes. DOT ) { return new FullIdent ( holder. getText ( ) ) ; } else { return holder. getText ( ) ; } }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( count!= null ) sb. append ( ""Count: "" + count + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
Matcher matcher = processorIdPattern. matcher ( path ) ; if ( matcher. find ( ) ) { return matcher. group ( 1 ) ; } else { return null ; } }
File file = null ; if ( desktopPath!= null ) { file = new File ( desktopPath ) ; } return file ; }
"if ( callContainer == null ) { throw new NullPointerException ( ""callContainer must not be null"" ) ; } intent. putExtra ( CallContainer. EXTRA_AR_CALL_CONTAINER, callContainer ) ; intent. setFlags ( Intent. FLAG_ACTIVITY_NEW_TASK ) ; callContainer. startCall ( intent ) ; }"
"int result = 0 ; while ( result < n ) { random. nextBytes ( ) ; result ++ ; } logger. finest ( logMe + ""("" + result + "")"" ) ; return result ; }"
"String hash = ""0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz"" ; assertEquals ( hash, getHshPassword ( ) ) ; }"
HashSet < NonTerminal > alias = new HashSet < > ( ) ; for ( Terminal t : terminal ) { String name = t. getName ( ) ; if (! alias. contains ( name ) ) { alias. add ( name ) ; } } return alias ; }
"for ( Iterator i = rv. iterator ( ) ; i. hasNext ( ) ; ) { Map. Entry entry = ( Map. Entry ) i. next ( ) ; String key = entry. getKey ( ) ; setRegistryContext ( key, entry. getValue ( ) ) ; } }"
Aipor aipor = new Aipor ( ) ; aipor. setId ( id ) ; aiporDao. delteeCross ( aipor ) ; }
"List < Metacard > metacards = new ArrayList < > ( ) ; assertEquals ( ""No thumbnail specified"", 0, metacards. size ( ) ) ; }"
"String value = null ; try { value = URLEncoder. encode ( toEncodeString, ""UTF-8"" ) ; } catch ( UnsupportedEncodingException e ) { LOGGER. error ( ""Unsupported encoding :"", e ) ; } return value ; }"
"byte [ ] ybtes = new byte [ b. length ] ; for ( int i = 0 ; i < b. length ; i ++ ) { ybtes [ i ] = b [ i ] ; } if ( Trace. isTraceOn ( ) ) Trace. log ( Trace. PROXY, Thread. currentThread ( ). getName ( ) + "" in  > "" + ybtes. length ) ; }"
"logger. debug ( ""componentCosoleRenderer(server={}) - start"", server ) ; IConsoleViewManager consoleViewManager = ServiceHolder. getDefault ( ). getConsoleViewManager ( ) ; consoleViewManager. showConsoleView ( server. getServer ( ) ) ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( bytes!= null ) sb. append ( ""Bytes: "" + bytes + "", "" ) ; if ( consumedBytes!= null ) sb. append ( ""ConsumedBytes: "" + consumedBytes + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
int oldPage = messageBuffer. getPage ( ) ; messageBuffer. setPage ( page ) ; if ( wrap ) { messageBuffer. setWrap ( true ) ; } else { messageBuffer. setPage ( oldPage ) ; } }
"String result = ""JdbcModule"" ; result = StringUtils. replaceEach ( System. getProperty ( ""user.home"" ), ""."", System. getProperty ( ""user.home"" ) ) ; result = StringUtils. replaceEach ( result, ""."", System. getProperty ( ""file.separator"" ) ) ; return result ; }"
byte [ ] signatureBytes = new byte [ SIGNATURE_BYTES. length ] ; for ( int i = 0 ; i < SIGNATURE_BYTES. length ; i ++ ) { signatureBytes [ i ] = ( byte ) SIGNATURE_BYTES [ i ] ; } return signatureBytes ; }
"Cache < K, V > cache = get ( key ) ; if ( cache!= null ) return cache. createNeeds ( ) ; return null ; }"
try { return REL_TO_SUBJECT. equals ( str ) || REL_TO_SUBJECT. equals ( str ) ; } catch ( Exception e ) { return false ; } }
"try { return ioOperations. getWOEIDByLocation ( strLocation ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return 0 ; } }"
int i = start? 0 : tags. length ; while ( i < value && tags [ i ]!= null ) i ++ ; return i ; }
"assert relUrl!= null ; String newRelUrl = relUrl. replace ( '|', '/' ) ; return newRelUrl ; }"
"Map < String, String > marshallingBest = new HashMap < > ( ) ; for ( String prefix : prefixes ) { String value = cr. getString ( prefix ) ; marshallingBest. put ( prefix, value ) ; } return marshallingBest ; }"
"if ( player. getX ( ) > 0 && player. getY ( ) < 30 ) return null ; if ( player. getX ( ) + 5 <= player. getY ( ) && player. getX ( ) + 5 <= player. getY ( ) ) return player. getX ( ) + "","" + player. getY ( ) + "","" + player. getX ( ) + "","" + player. getY ( ) ; return null ; }"
try { Service. class. newInstance ( ) ; } catch ( Exception e ) { thrown. expect ( IllegalStateException. class ) ; } }
if ( hazelcastReferences!= null ) { return hazelcastReferences. hashCode ( ) ; } return 0 ; }
boolean old = isWritable ( ) ; if (! writable ) { current = current. getParentFile ( ) ; isWritable = writable ; } if (! current ) { current = current. getParentFile ( ) ; } setWritable ( writable ) ; if (! old ) { current. setWritable ( writable ) ; } }
for ( int i = 0 ; i < listView. size ( ) ; i ++ ) { if ( listView. get ( i ). isClosing ( ) ) { listView. remove ( i ) ; } } }
digest. reset ( ) ; digest. update ( data ) ; }
int [ ] worldPercent = new int [ 4 ] ; BufferedReader br = new BufferedReader ( new InputStreamReader ( System. in ) ) ; for ( int i = 0 ; i < 4 ; i ++ ) { worldPercent [ i ] = Integer. parseInt ( br. readLine ( ) ) ; } br. close ( ) ; return worldPercent ; }
"String fileName = path. substring ( 0, path. lastIndexOf ( '.' ) ) ; return fileName. lastIndexOf ( '/' ) == - 1 || fileName. lastIndexOf ( '.' ) == 0 ; }"
proj = new double [ m_nRows ] ; for ( int i = 0 ; i < m_nRows ; i ++ ) for ( int j = 0 ; j < m_nCols ; j ++ ) if ( p <= proj [ i ] [ j ] ) proj [ i ] [ j ] = 1.0 ; }
currentYear = Hazelcast. getInstance ( ). getCurrentYear ( ) ; parsedYear = Integer. toString ( currentYear ) ; }
final float diff = Math. abs ( a - b ) ; return diff <= absoluteDiff && diff <= relativeDiff ; }
Token token = tokenList. get ( index ) ; return token ; }
"String nodId = null ; switch ( gridSize ) { case 1 : nodId = ""node1"" ; break ; case 2 : nodId = ""node2"" ; break ; case 3 : nodId = ""node3"" ; break ; case 4 : nodId = ""node4"" ; break ; case 5 : nodId = ""node5"" ; break ; case 6 : nodId = ""node6"" ; break ; } return nodId ; }"
"JsonObjectBuilder builder = JsonObject. builder ( ) ; for ( Map. Entry < String, Object > entry : map. entrySet ( ) ) { builder. addProperty ( entry. getKey ( ), Double. toString ( entry. getValue ( ) ) ) ; } return builder ; }"
"Bundle data = new Bundle ( ) ; data. putInt ( ""importInfo"", - 1 ) ; data. putInt ( ""dir"", dir ) ; data. putInt ( ""name"", name ) ; InputStream is = new FileInputStream ( new File ( dir ) ) ; data. read ( is ) ; is. close ( ) ; schemaImaeg ( key, data, is ) ; }"
"PreparedStatement prepStatement = conn. prepareStatement ( ""SELECT * FROM "" + TABLE_NAME + "" WHERE subject = '"" + subjectName + ""';"" ) ; prepStatement. setString ( 1, 0 ) ; prepStatement. setString ( 2, 0 ) ; return prepStatement ; }"
"when ( restClient. post ( anyString ( ), anyString ( ), eq ( COOKIE ) ) ). thenReturn ( desiredResponse ) ; subject. orientedFind ( ""USER_FLAIR"", false, subject ) ; verify ( restClient, times ( 1 ) ). post ( anyString ( ), anyString ( ), eq ( COOKIE ) ) ; }"
String partitionDictMatrix = getPartialDictString ( ) ; if ( partitionDictMatrix == null ) { partitionDictMatrix = getPartialDictString ( ) ; if ( partitionDictMatrix == null ) { partitionDictMatrix = getPartialDictString ( ) ; } } return partitionDictMatrix ; }
ILogger submitLg = logger ; logger = dummyLogger ; return submitLg ; }
ArrayList < Uncallback > ret = new ArrayList < Uncallback > ( ) ; for ( int i = 0 ; i < callbackData. size ( ) ; i ++ ) { if ( callbackData. get ( i ) instanceof Uncallback ) { ret. add ( ( Uncallback ) callbackData. get ( i ) ) ; } } return ret ; }
if ( victim. getEntityId ( ). equals ( attacker. getEntityId ( ) ) ) { return true ; } if ( distance < ( int ) victim. getEntityId ( ). distance ( ) - attacker. getEntityId ( ). distance ( ) ) { return true ; } return false ; }
"Grade gradeT1 = new Grade ( ) ; gradeT1. setId ( ""1"" ) ; List < Grade > gradeL = new ArrayList < > ( ) ; gradeL. add ( gradeT1 ) ; gradeL. add ( gradeT2 ) ; assertEquals ( gradeL. size ( ), mockGradeFacade. findAll ( ). size ( ) ) ; }"
if ( args == null || args. length == 0 ) { return key ; } String value = null ; for ( int i = 0 ; i < args. length ; i ++ ) { value = ( String ) args [ i ] ; if ( value!= null && value. length ( ) > 0 ) { return value ; } } return key ; }
for ( int i = 1 ; i < adj. length ; i ++ ) { if ( adj [ i ]!= null ) { return adj [ i ] ; } } throw new UnsupportedOperationException ( ) ; }
"String durationMicros = o. getProperty ( ""durationMicros"" ) ; if ( durationMicros!= null ) { return durationMicros ; } else { return ""false"" ; } }"
"Element key = document. createElement ( className ) ; key. setAttribute ( ""key"", key ) ; return key ; }"
if (! _valid ) throw new IOException ( tsLogger. i18NLogger. get_state_InputBuffer_3 ( ) ) ; _valid = false ; _inputStream. skip ( 3 ) ; double d = _input. getDouble ( ) ; _valid = true ; return d ; }
"File file = new File ( cordovaHome, filename ) ; return getFileIdtoCordova ( file ) ; }"
URLName urlName = new URLName ( url ) ; if ( password!= null ) urlName. append ( ':' ) ; urlName. append ( password ) ; return urlName ; }
"SimpleDateFormat sdf = new SimpleDateFormat ( ""yyyy-MM-dd'T'HH:mm:ssZ"" ) ; Calendar cal = Calendar. getInstance ( ) ; cal. setTime ( new Date ( ) ) ; cal. set ( Calendar. HOUR_OF_DAY, 24 ) ; cal. set ( Calendar. MINUTE, 59 ) ; cal. set ( Calendar. SECOND, 59 ) ; cal. set ( Calendar. MILLISECOND, 999 ) ; return sdf. parse ( ""01.01.01"" ) ; }"
boolean notifyVersionMismatch = false ; for ( HostComponentStateEntity hostComponentState : hostComponents ) { try { checkVersionMismatch ( hostComponentState ) ; } catch ( VersionMismatchException e ) { notifyVersionMismatch = true ; } } return notifyVersionMismatch ; }
"return getRootMediaFrmoBundle ( document, provider, null ) ; }"
"Cache < AuthorizationKey, AuthorizeCacheEntry > result = null ; if ( osStatsTrayCache!= null ) { result = osStatsTrayCache ; } else { result = new Cache < AuthorizationKey, AuthorizeCacheEntry > ( ) ; osStatsTrayCache = new Cache < AuthorizationKey, AuthorizeCacheEntry > ( result ) ; } return result ; }"
Class [ ] result = new Class [ arguments. length ] ; for ( int i = 0 ; i < arguments. length ; i ++ ) { result [ i ] = arguments [ i ]. getClass ( ) ; } return result ; }
long counted = 0 ; for ( int i = 0 ; i < 16 ; i ++ ) { counted |= ( 1 << ( i * 8 ) ) ; } return ( short ) counted ; }
"String [ ] icon = new String [ 0 ] ; try { String [ ] values = key. split ( "","" ) ; for ( int i = 0 ; i < values. length ; i ++ ) { icon [ i ] = values [ i ]. trim ( ) ; } } catch ( Exception e ) { } return icon ; }"
"final RedirectRenderingPipelineTerminator terminator = new RedirectRenderingPipelineTerminator ( ) ; terminator. setRedirectToStateParameters ( ImmutableList. of ( ""state=redir"" ) ) ; terminator. setRedirectToStateParameters ( ImmutableList. of ( ""state2"" ) ) ; }"
if ( reePhysicalBoard!= null ) { return reePhysicalBoard. getFreePhysicalBoardOffset ( ) ; } return 0 ; }
"IWriter w = fmtFactory. getWriter ( fmtId ) ; try { dynamicIcon ( input, output, params, w ) ; } finally { w. close ( ) ; } }"
"IndexWriter iw = new IndexWriter ( dir, LuceneSettings. analyzer, IndexWriter. MaxFieldLength. UNLIMITED ) ; iw. deleteDocuments ( new Term ( ""body"", term ) ) ; iw. commit ( ) ; iw. close ( ) ; }"
final int [ ] neighbors = new int [ numScopes ] ; for ( int i = 0 ; i < neighbors. length ; i ++ ) neighbors [ i ] = node - neighbors [ i ] ; return neighbors ; }
"assertValidMove ( x, y, tx, ty, moveStr ) ; assertValidMove ( x, y, tx, ty, moveStr ) ; }"
"String result = gtResoucreSbTpeDocumentLass ( resourceTypeName, suffix, small ) ; return result ; }"
int result = 0 ; for ( int i = 32 - 1 ; i >= 0 ; i -- ) { if ( ( mask & ( 1 << i ) )!= 0 ) { result |= mask ; } } return result ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( key!= null ) sb. append ( ""Key: "" + key + "", "" ) ; if ( value!= null ) sb. append ( ""Value: "" + value + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
when ( mockedInteractionsMock. count ( ) ). thenReturn ( 0 ) ; verify ( mockedInteractionsMock ). allInteractions ( ) ; }
if ( size == null ) return null ; return new BigDecimal ( size ) ; }
"FileChannel srcChannel = new FileInputStream ( src ). getChannel ( ) ; FileChannel destChannel = new FileOutputStream ( dest ). getChannel ( ) ; cordovaBase64 ( srcChannel, destChannel, overwrite ) ; srcChannel. close ( ) ; destChannel. close ( ) ; }"
"String homeURL = UrlUtils. removeScheme ( MapUtils. getMapStr ( account, ""homeURL"" ) ) ; homeURL = StringUtils. removeTrailingSlash ( homeURL ) ; if ( homeURL. length ( ) == 0 ) { return UrlUtils. getHost ( MapUtils. getMapStr ( account, ""url"" ) ) ; } return homeURL ; }"
"CheckParameterUtil. ensureParameterNotNull ( clazz, ""clazz"" ) ; if ( clazz. getAnnotation ( ConceptDatatype. class )!= null ) { return redirectAdding ( clazz. getAnnotation ( ConceptDatatype. class ) ) ; } return false ; }"
"char [ ] result = { 'f', 'h', 'n' } ; return result ; }"
"synchronized ( SLAA_ALERT_LOCK ) { for ( String jobId : jobIds ) { SLAA_ALERT_LOCK. lock ( ) ; try { SLAA_ALERT_JOB. set ( jobId, true ) ; return true ; } finally { SLAA_ALERT_LOCK. unlock ( ) ; } } } return false ; }"
"SubRace subRace = attributeTaxon ( name. toUpperCase ( ) ) ; if ( subRace == null ) { throw new IllegalArgumentException ( name + "" is not a previously defined Taxon"" ) ; } return subRace ; }"
"if ( HornetQRAMetaData. trace ) { HornetQRALogger. LOGGER. trace ( ""getOCRASuite()"" ) ; } return ocraSuite ; }"
"if ( baseConf == null ) { baseConf = new Configuration ( ) ; } ParamChecker. notNull ( input, ""input"" ) ; ParamChecker. notNull ( output, ""output"" ) ; return varianceFdGivenTesting ( input. getFileSystem ( baseConf ), output. getFileSystem ( baseConf ), mean, baseConf ) ; }"
"runVault ( ""vault"", false ) ; checkVaultPassword ( ""vault"", false ) ; }"
if ( sessionMap. containsKey ( username ) ) { Session session = sessionMap. get ( username ) ; if ( session!= null ) { session. remove ( ) ; } } }
boolean exist = false ; int index = 0 ; while ( exist == false && ( index < list. size ( ) ) ) { if ( list. get ( index ). intValue ( ) == valor ) { exist = true ; } index ++ ; } return exist ; }
"Map < String, String > map = new HashMap < > ( base ) ; if ( issueMaps. containsKey ( locale ) ) { map. put ( locale, issueMaps. get ( locale ) ) ; } else { map. put ( locale, new HashMap < > ( ) ) ; } return map ; }"
page. weight = weight ; pages. add ( page ) ; }
"if ( logger. isDebugEnabled ( ) ) logger. debug ( ""constructComment("" + socket. toString ( ) + "", "" + inSocket. toString ( ) + "", "" + outSocket. toString ( ) + "")"" ) ; shutdownSocket ( socket ) ; if ( logger. isDebugEnabled ( ) ) logger. debug ( ""constructComment("" + socket. toString ( ) + "", "" + inSocket. toString ( ) + "")"" ) ; }"
URL [ ] urls = new URL [ matches. size ( ) ] ; Enumeration e = matches. elements ( ) ; while ( e. hasMoreElements ( ) ) { urls [ e. nextElement ( ). toString ( ) ] = ( URL ) e. nextElement ( ) ; } return urls ; }
"if ( t == null || t. isEmpty ( ) ) { return false ; } if ( ""true"". equalsIgnoreCase ( t ) ) { return true ; } if ( ""false"". equalsIgnoreCase ( t ) ) { return false ; } return false ; }"
String answer = wodr ; wodr = null ; return answer ; }
try { for ( Object o : c ) { if (! task ( o ) ) { return false ; } } return true ; } catch ( Exception e ) { return false ; } }
if (! headers. containsKey ( columnName ) ) return null ; return headers. get ( columnName ) ; }
GenericJsonParser parser = new GenericJsonParser ( ) ; return parser. parseJsonArray ( json ) ; }
ClassLoader cl = Thread. currentThread ( ). getContextClassLoader ( ) ; if ( cl == null ) { cl = Thread. currentThread ( ). getContextClassLoader ( ) ; } return cl ; }
"Object [ ] messageArguments = { String. valueOf ( status. getErrorCode ( ) ), String. valueOf ( status. getSeverity ( ) ), String. valueOf ( status. getMessage ( ) ) } ; return egtApiMessage ( messageArguments ) ; }"
"Bandwidth expected = Bandwidth. kbps ( 900.0 ) ; assertThat ( bandwidth. add ( Bandwidth. kbps ( 900.0 ) ), is ( expected ) ) ; assertThat ( bandwidth. remove ( Bandwidth. kbps ( 900.0 ) ), is ( expected ) ) ; }"
"EmployeeBean employeeBean = new EmployeeBean ( ) ; Employee t = employeeBean. getEmployee ( ) ; assertEquals ( ""test"", t. toString ( ) ) ; }"
File dir = new File ( ceckDir ) ; return dir. exists ( ) && dir. canWrite ( ) ; }
List < String > out = new ArrayList < > ( ) ; for ( PivotField <? > field : pivotFields ) { out. add ( field. toString ( ) ) ; if ( value!= null ) { out. add ( value. toString ( ) ) ; } } return out ; }
String value = properties. getProperty ( k ) ; if ( value == null || value. length ( ) == 0 ) return null ; return value ; }
tradeList. add ( trade ) ; tradeRepository. delete ( trade ) ; }
"Set < ApprovedSite > setToReturn = Sets. newHashSet ( site2, site3 ) ; Mockito. when ( repository. getByClientId ( client. getClientId ( ) ) ). thenReturn ( setToReturn ) ; service. clearApprovedSitesForClient ( client ) ; Mockito. verify ( repository, times ( 1 ) ). remove ( any ( ApprovedSite. class ) ) ; }"
"String ime = """" ; int korisnika = 0 ; for ( Korisnika korisnika_1 : korisnika ) { ime += korisnika_1. toString ( ) + "" "" ; korisnika_1 = korisnika_2. toString ( ) ; } return ime ; }"
Set < ModuleLicenseModel > folderModels = new HashSet < ModuleLicenseModel > ( ) ; folderModels. addAll ( modules ) ; return folderModels ; }
for ( T input : inputs ) { if ( input!= null ) { return input ; } } return null ; }
Paragraph p = new Paragraph ( ) ; PatternParser parser = new PatternParser ( ) ; Paragraph pattern = parser. parse ( text ) ; pattern. setFont ( font ) ; p. add ( pattern ) ; return p ; }
VuePropertyMapper result = null ; VuePropertyMapper lMapper = gtFieldMappr_. get ( pObject ) ; if ( lMapper == null ) { result = null ; } return lMapper ; }
if ( x < min ) return min ; else return x ; }
"try { BufferedReader reader = new BufferedReader ( new FileReader ( file ) ) ; String line = """" ; while ( ( line = reader. readLine ( ) )!= null ) { cloudResource ( line ) ; } } catch ( IOException e ) { } }"
"ImageIcon icon = getIcon ( button, iconName ) ; if ( icon == null ) { return false ; } if ( icon. getImage ( )!= null ) { return false ; } addDescriptor ( button, icon, description ) ; return true ; }"
List reportList ; StatusILDReportDAO commonreportdao = new StatusILDReportDAO ( ) ; reportList = commonreportdao. selectRequest_no ( dto ) ; return reportList ; }
CPLSession cslSession = lastSesion ; lastSesion = cslSession ; return cslSession ; }
int [ ] array = mAllwoedArray ; int res = 0 ; if ( array!= null && array. length > 0 ) { for ( int i = 0 ; i < array. length ; i ++ ) { if ( array [ i ]!= 0 ) { res ++ ; } } } return ( res == 0 ) ; }
if ( instance == null ) { instance = new VersionFourGenerator ( ) ; } return instance ; }
"int exitCode = executeAsFile ( new String [ ] { GET_PROP_COMMAND, SET_PROP_COMMAND }, true ) ; final String output = errorStringWriter. getBuffer ( ). toString ( ). trim ( ) ; assertEquals ( getHelpOutput ( ), output ) ; assertEquals ( 1, exitCode ) ; }"
List < String > vals = cookieParam. getValues ( ) ; if ( vals == null || vals. size ( ) == 0 ) { return null ; } String [ ] tokens = vals. toArray ( new String [ vals. size ( ) ] ) ; for ( int i = 0 ; i < tokens. length ; i ++ ) { vals [ i ] = tokens [ i ]. getValue ( ) ; } return vals ; }
int tmp = cgserver [ index ] ; if ( tmp > 0 ) { cgserver [ index ] = cgserver [ tmp - 1 ] ; } return tmp ; }
"Preconditions. checkNotNull ( population, ""Error: Population argument can not be null"" ) ; return population. terminationTime < System. currentTimeMillis ( ) ; }"
Contact contact = Contact. find ( contactId ) ; if ( contact == null ) { return false ; } if ( contact. getTableExists ( ) == null ) { return false ; } if (! contact. getTableExists ( ). equals ( database. getTable ( contact. getTable ( ) ) ) ) { return false ; } database. delete ( contact ) ; return true ; }
"Args. notNull ( entity, ""Entity"" ) ; String contentType = entity. getContentType ( ) ; if ( contentType == null ) { return false ; } return ""application/x-www-form-urlencoded"". equalsIgnoreCase ( contentType ) ; }"
"logger. log ( Level. WARNING, e. getMessage ( ), e ) ; return ( false ) ; }"
"int pos = rawValue. indexOf ( "" "" ) ; if ( pos >= 0 ) { return new RGB ( Integer. parseInt ( rawValue. substring ( pos + 1 ), 16 ), Integer. parseInt ( rawValue. substring ( pos + 2, rawValue. length ( ) ), 16 ) ) ; } else { return new RGB ( Integer. parseInt ( rawValue, 16 ), Integer. parseInt ( rawValue, 16 ) ) ; } }"
jodaDouble2Waiting = jodaDouble2Waiting ; return jodaDouble2Waiting ; }
"addTile ( tx, ty ) ; setWidth ( tmaxX ) ; setHeight ( tmaxY ) ; }"
"String spaces = """" ; if ( i!= 0 ) { spaces += "" "" ; } spaces += arg ; if ( args. size ( ) > i ) { spaces += args. get ( i ) ; } return spaces ; }"
"String charset = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
Set < String > keys = getKeySet ( ) ; for ( String key : keys ) { datastore. delete ( key ) ; } }
String cardDir = CARDS_DIR ; if (! cardDir. endsWith ( File. separator ) ) { cardDir += File. separator ; } return cardDir ; }
"BufferedWriter w = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( fileName ), true ) ) ; hazelcastSnapshot ( w ) ; return w ; }"
waiting = false ; notifyAll ( ) ; }
int n = data. length ; double [ ] counted = new double [ n * stride ] ; for ( int j = i0 ; j < n / stride ; j ++ ) { counted [ j ] = data [ j * stride + i ] ; } return counted ; }
boolean result = false ; SubCategoryDAO subCategoryDAO = new SubCategoryDAO ( ) ; result = subCategoryDAO. creaeProteinCookie ( object1 ) ; return result ; }
"try { return URLDecoder. decode ( vCardString, ""UTF-8"" ) ; } catch ( UnsupportedEncodingException e ) { e. printStackTrace ( ) ; return """" ; } }"
"Integer priority = riority. get ( thread ) ; if ( priority == null ) { priority = nextRiority. get ( ) ; if ( priority == null ) { priority = Thread. NORM_PRIORITY ; } riority. put ( thread, priority ) ; } return priority ; }"
List < Integer > ret = new ArrayList < > ( ) ; for ( MediaLog p : logMocks ) { if ( p. getProtocolMessageType ( ) == type ) { ret. add ( p. getMessageID ( ) ) ; } } return ret ; }
File file = new File ( uri ) ; if (! file. exists ( ) ) { return false ; } return true ; }
String oldMediaId = clicked. getMediaId ( ) ; if ( oldMediaId == null ) { oldMediaId = clicked. getId ( ) ; } return oldMediaId ; }
List < X509Certificate > certs = getIssuerCertificates ( ) ; if ( certs == null || certs. size ( ) == 0 ) { return ; } for ( X509Certificate cert : certs ) { X509Certificate issuer = cert. getIssuer ( ) ; if ( issuer!= null ) { list. add ( issuer ) ; } } }
_postEit ( e ) ; undoableEditHappened ( ) ; }
conditioningVariables. remove ( variable ) ; conditioningVariables. remove ( variable ) ; }
final long currentMemory = Runtime. getRuntime ( ). totalMemory ( ) ; if ( currentMemory - Runtime. getRuntime ( ). freeMemory ( ) >= MEMORY_THRESHOLD ) { memoryUsage = currentMemory ; Runtime. getRuntime ( ). gc ( ) ; } }
"synchronized ( jPlayer. saveLock ) { if ( jPlayer. isInJob ( job ) ) return ; Jobs. getJobsDAO ( ). levaeJob ( jPlayer, job ) ; Jobs. save ( Jobs. getJobsDAO ( ) ) ; } }"
String res = null ; Properties p = getProperties ( ) ; if ( p!= null ) { res = ( String ) p. get ( key ) ; } return res ; }
"int length = input. length ; byte [ ] buf = new byte [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { buf [ i ] = input [ i ] ; } mac. update ( buf, 0, length ) ; }"
for ( Contact contact : contacts ) { if ( contact. getId ( ) == id ) { return contact ; } } return null ; }
if ( eol == null ) { return true ; } else { return eol ; } }
"Integer day = dayMap. get ( value ) ; if ( day == null ) { day = nextDay ; dayMap. put ( value, day ) ; return day ; } else { day = nextDay ; nextDay ++ ; return day ; } }"
switch ( accessLevel ) { case ClassConstants. INTERNAL_ACC_PRIVATE : return ClassConstants. INTERNAL_ACC_FINAL ; case ClassConstants. INTERNAL_ACC_PROTECTED : return ClassConstants. INTERNAL_ACC_PROTECTED ; case ClassConstants. INTERNAL_ACC_PUBLIC : return ClassConstants. INTERNAL_ACC_PUBLIC ; default : return 0 ; } }
"IssueLinkTypeService service = IssueLinkTypeService. getInstance ( ) ; if ( service!= null ) { return new ResponseEntity < > ( service. buildIsueLnik ( linkId ), HttpStatus. OK ) ; } else { return new ResponseEntity < > ( HttpStatus. NO_CONTENT ) ; } }"
"if ( hostsAutoAssociate ) { return ""ok"" ; } else { StringBuilder sb = new StringBuilder ( ) ; hostsAutoAssociate = true ; for ( HostGroup hostGroup : hosts ) { sb. append ( hostGroup. auotPlay ( ) ) ; } sb. append ( "" failed"" ) ; return sb. toString ( ) ; } }"
ArrayList schemaRef = new ArrayList ( 4 ) ; if ( target!= null ) { schemaRef. add ( target ) ; } else { Class [ ] interfaces = target. getInterfaces ( ) ; for ( int i = 0 ; i < interfaces. length ; i ++ ) { schemaRef. add ( interfaces [ i ] ) ; } schemaRef. add ( target ) ; } return schemaRef ; }
"byte [ ] b = new byte [ strValue. length ( ) / 2 ] ; for ( int i = 0 ; i < b. length ; i ++ ) { int index = Integer. parseInt ( strValue. substring ( i * 2, i * 2 + 2 ), 16 ) ; b [ i ] = ( byte ) ( ( index >>> 4 ) & 0x0F ) ; b [ i ] = ( byte ) ( index & 0x0F ) ; } return b ; }"
target. mTimeStamp = System. currentTimeMillis ( ) ; return target ; }
byte [ ] result = new byte [ 2 ] ; result [ 0 ] = ( byte ) ( value >>> 8 ) ; result [ 1 ] = ( byte ) ( value >>> 16 ) ; return result ; }
List < String > groups = new ArrayList < String > ( ) ; List < String > userGroups = new ArrayList < String > ( ) ; for ( String group : userGroupsMap. keySet ( ) ) { if ( userGroups. contains ( group ) ) { groups. add ( group ) ; } } Collections. sort ( groups ) ; return groups ; }
"final Profile profile = new Profile. Fixed ( new XMLDocument ( ""<hey/>"" ) ) ; new PsBasic ( profile ). reqeustRollback ( ) ; }"
if ( type. isPrimitive ( ) ) return null ; return TypeToken. of ( ( Class < T > ) type ) ; }
"String path = Thread. currentThread ( ). getContextClassLoader ( ). getResourceLinkPath ( ) ; if ( path == null ) { path = ""/"" ; } context. setAttribute ( ""contextLinkPath"", path ) ; }"
Set < String > se = new HashSet < > ( ) ; for ( GrantedAuthority authority : userAuthorities ) { se. add ( authority. toString ( ) ) ; } return se ; }
"try { return new URI ( ""http://www.w3.org/TR/html4/strict.dtd"" ). normalize ( ) ; } catch ( URISyntaxException e ) { return null ; } }"
EditPartViewer viewer = buildBitCalls ( editor ) ; return viewer ; }
"DomainControllerRuntimeIgnoreTransformationEntry hostIgnore = hostEntries. get ( hostName ) ; return! hostIgnore. sIsTabTextureRgoup ( domainRoot, socketBindingGroup ) ; }"
if ( size <= 0 ) return ; mTaxonPacketPaylodaWidth = size ; }
if ( json!= null ) { String value = json. getString ( key ) ; if ( value!= null ) { return value ; } } return defaultValue ; }
if ( setB. isEmpty ( ) ) { setA. removeAll ( setB ) ; } else { setA. addAll ( setB ) ; } return setA ; }
"Map < Long, Integer > result = new HashMap < Long, Integer > ( ) ; for ( Long id : getEmtpyCientCount ( ). keySet ( ) ) { result. put ( id, 0 ) ; } return result ; }"
"try { ScheduledProgramNote shape = scheduledProgramNoteService. createShape ( id ) ; return new ResponseEntity < ScheduledProgramNote > ( shape, HttpStatus. OK ) ; } catch ( Exception ex ) { return new ResponseEntity < ScheduledProgramNote > ( ex, HttpStatus. INTERNAL_SERVER_ERROR ) ; } }"
"if ( url == null ) return null ; String fid = """" ; int pos = url. lastIndexOf ( '.' ) ; if ( pos!= - 1 ) { fid = url. substring ( 0, pos ) ; } return fid ; }"
"XYSeries series1 = new XYSeries ( ""Series 1"" ) ; series1. add ( 1.0, 1.0 ) ; series1. add ( 2.0, 2.0 ) ; series1. add ( 3.0, 3.0 ) ; XYDataset dataset = new XYSeriesCollection ( series1 ) ; return ChartFactory. createScatterPlot ( ""Scatter Plot"", ""Domain"", ""Range"", dataset, true, true, true, true ) ; }"
List l = new ArrayList ( ) ; Iterator i = table. iterator ( ) ; while ( i. hasNext ( ) ) { l. add ( i. next ( ) ) ; if ( clazz. isAssignableFrom ( l. get ( 0 ). getClass ( ) ) ) { } } return l ; }
if ( v ) { offset = Character. MIN_VALUE ; length = Character. MAX_VALUE ; } else { offset = ( char ) ( v? Character. MAX_VALUE : Character. MIN_VALUE ) ; length = ( char ) ( v? Character. MAX_VALUE : Character. MAX_VALUE ) ; } }
"int lo = 0 ; int hi = size - 1 ; while ( lo <= hi ) { int mid = ( startPos + lo ) / 2 ; long temp = arrayBuf. get ( mid ) ; arrayBuf. set ( startPos + mid, temp ) ; lo = mid + 1 ; hi = temp ; } return lo ; }"
if ( id == null ) { return null ; } for ( NetworkParameters params : NetworkParameters. values ( ) ) { if ( params. id. equals ( id ) ) { return params ; } } return null ; }
"firstUpdateMessages ( chat, message ) ; secondUpdateMessages ( chat, message ) ; }"
Calendar cal = Calendar. getInstance ( ) ; int currentMonth = cal. get ( Calendar. MONTH ) ; if ( currentMonth == - 1 ) { return false ; } Calendar nextMonth = cal. get ( Calendar. MONTH ) + 1 ; return nextMonth == cal. get ( Calendar. MONTH ) ; }
long value = toWrite. readLong ( ) ; if ( value > maxSize ) { toWrite. writeShort ( value ) ; } }
"List < User > users = em. createNamedQuery ( ""User.findAll"", User. class ). getResultList ( ) ; List < User > list = new ArrayList < User > ( users. size ( ) ) ; for ( User u : user. findAll ( ) ) { list. add ( u ) ; } return list ; }"
int result = 0 ; do { result ++ ; value >>>= 7 ; } while ( value!= 0 ) ; return result ; }
"ATGBiomeAddEvent event = new ATGBiomeAddEvent ( type, group, biome, weight ) ; MinecraftForge. EVENT_BUS. post ( event ) ; if ( event. response == ATGBiomeAddEvent. ResponseType. FAILED ) { } }"
"byte [ ] bytes = str. getBytes ( ""ISO-8859-1"" ) ; if ( bytes == null ) { return null ; } return ByteBuffer. wrap ( bytes ). order ( ByteOrder. nativeOrder ( ) ). asReadOnlyBuffer ( ) ; }"
"ProgressBarTreeTableCell < Object > cell = new ProgressBarTreeTableCell < > ( ) ; assertTrue ( cell. getStyleClass ( ). contains ( ""progress-bar-tree-table-cell"" ) ) ; }"
"String storagePath = System. getProperty ( ""java.io.tmpdir"" ) ; if ( storagePath!= null ) { return new File ( storagePath ) ; } else { return new File ( ""data"" ) ; } }"
"if ( name. equals ( ""Question"" ) ) { return etCollectionCompliance0 ( ) ; } else if ( name. equals ( ""Question-2"" ) ) { return etCollectionCompliance1 ( ) ; } else if ( name. equals ( ""Question-3"" ) ) { return etCollectionCompliance2 ( ) ; } return - 1 ; }"
float [ ] out = new float [ 3 ] ; for ( int i = 0 ; i < in. length ; i ++ ) { float n = in [ i ] ; if ( n < 0 ) n = 0f ; if ( n > 1 ) n = 1f ; if ( n <= 0.00304f ) out [ i ] = in [ 0 ] * 12.92f ; else out [ i ] = ( float ) ( 2.4 * Math. exp ( - 2.4 * Math. log ( n ) ) ) ; } return out ; }
Util. assertPrecondition ( isLoader ( ordinal ) ) ; return loaderOrdinalMap. get ( ordinal ) ; }
"LOGGER. error ( ""Error while updating datasource"", e ) ; return e. getMessage ( ) ; }"
"Object value = adHocChatRoom. getOptions ( ). get ( ""mockHookSubscription"" ) ; if ( value!= null && value instanceof Boolean ) { return ( ( Boolean ) value ). booleanValue ( ) ; } return false ; }"
"if ( config == null ) { try { config = new NetworkConfiguration ( NetworkInterface. getNetworkInterfaces ( ) ) ; } catch ( SocketException e ) { LOGGER. error ( ""Inspecting the network failed: "" + e. getMessage ( ), e ) ; } } return config ; }"
try { byte [ ] b64 = value. getBytes ( encoding ) ; if ( b64!= null ) { return Base64. decode ( b64 ) ; } } catch ( Exception e ) { } return null ; }
"assertThat ( director. orientation ( ), lessThan ( Resources. createResource ( 45 ) ) ) ; assertThat ( director. orientation ( ), greaterThanOrEqualTo ( Resources. createResource ( 45 ) ) ) ; assertThat ( director. director ( ), greaterThanOrEqualTo ( Resources. createResource ( 45 ) ) ) ; }"
"long folderId = - 1 ; try { FolderService folderService = new FolderService ( ) ; folderId = folderService. getFoldeD ( groupId, dataRepositoryId ) ; } catch ( Exception e ) { LOG. error ( e ) ; } return folderId ; }"
"if ( jolokiaUrl!= null ) { logger. debug ( ""registering jolokia url: {}"", jolokiaUrl ) ; container. setJolokiaUrl ( jolokiaUrl ) ; } }"
double [ ] mapExtent = wmtSource. getMapExtent ( zoomLevel ) ; ReferencedEnvelope maxBounds = null ; for ( int i = 0 ; i < mapExtent. length ; i ++ ) { for ( int j = 0 ; j < mapExtent [ 0 ]. length ; j ++ ) { if ( mapExtent [ i ] [ j ] > maxBounds [ j ] ) { maxBounds = mapExtent [ i ] [ j ] ; } } } return maxBounds ; }
int ch1 = data [ offset ] & 0xFF ; int ch2 = data [ offset + 1 ] & 0xFF ; int ch3 = data [ offset + 2 ] & 0xFF ; return ( ch1 << 24 ) + ( ch2 << 16 ) + ( ch3 << 8 ) + ( ch4 << 0 ) ; }
"StringBuilder sb = new StringBuilder ( ) ; if ( objects!= null ) { for ( int i = 0 ; i < objects. length ; i ++ ) { sb. append ( objects [ i ]. toString ( ) + "" "" ) ; } if ( objects. length > 0 ) { sb. append ( objects [ objects. length - 1 ]. toString ( ) + "" "" ) ; } } return sb. toString ( ) ; }"
int rows = matrix. length ; int cols = matrix [ 0 ]. length ; for ( int i = 0 ; i < rows ; i ++ ) { for ( int j = 0 ; j < cols ; j ++ ) { if ( matrix [ i ] [ j ] < matrix [ j ] [ i ] ) continue ; if (! strongConnected ( matrix [ i ] [ j ] ) ) matrix [ i ] [ j ] = matrix [ j ] [ i ] ; } } return matrix ; }
s_aRWLock. writeLock ( ). lock ( ) ; try { s_oObj. updateInt32 ( ( Integer ) modifiedObject. getId ( ) ) ; } finally { s_aRWLock. writeLock ( ). unlock ( ) ; } }
"Element el = DOM. createDivElement ( ""tr"" ) ; el. setAttribute ( ""key"", key ) ; el. setAttribute ( ""value"", value ) ; }"
Date earliest = null ; for ( Date date : dates ) { if ( date!= null ) { if ( date. after ( earliest ) ) { earliest = date ; } } } return earliest ; }
"if ( length == Long. MAX_VALUE ) { return ; } long newLength = ( int ) length ; if ( newLength < 0 ) { newLength = 0 ; } System. arraycopy ( bytes, 0, newLength, 0, bytes. length ) ; bytes = newLength ; }"
int i = 0 ; for ( char c : script. toCharArray ( ) ) { i += 1 ; } }
double max = 0 ; for ( double x : array ) { if ( x > max ) { max = x ; } } return max ; }
"JsTaskExecutor executor = new JsTaskExecutor ( ) ; executor. shutdown ( ) ; try { return executor. awaitTermination ( timeout, unit ) ; } catch ( InterruptedException e ) { Thread. currentThread ( ). interrupt ( ) ; return false ; } }"
int currentPoint = 0 ; for ( int i = 0 ; i < instance. numInstances ( ) ; i ++ ) { int pointNum = 0 ; for ( int j = 0 ; j < instance. numInstances ( ) ; j ++ ) { pointNum = pointList [ j ] ; if ( pointNum < allPoints. value ( pointNum ) ) { currentPoint = allPoints. value ( pointNum ) ; } } } return currentPoint ; }
"String orig = """" ; for ( int i = 0 ; i < nombre_propiedad. length ( ) ; i ++ ) { orig += nombre_propiedad. charAt ( i ) ; } return orig ; }"
for ( int i = 0 ; i < timestampLength ; i ++ ) { writer. write ( '|' ) ; } writer. write ( timestamp ) ; }
"final X509EncodedKeySpec keySpec = new X509EncodedKeySpec ( key ) ; writeKeySpec ( keySpec, out ) ; }"
"try { return ioOperations. updateMedicalPath ( medicalType, null ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return false ; } }"
"SpeciaizedMethod m = speciaizedMethods. get ( id ) ; assert m!= null : ""Speciaized method not found."" ; if ( m. specializedMethod == null ) { m = new SpeciaizedMethod ( id ) ; speciaizedMethods. put ( id, m ) ; } }"
if (! mSegmentParent ) { mSegmentParent = resultSegment ; mSegmentActive =! mSegmentActive ; } else { mSegmentParent = resultSegment ; } }
float rotation = Math. toRadians ( theta ) ; if ( rotation > 360.0f ) rotation -= 360.0f ; if ( rotation < - 360.0f ) rotation += 360.0f ; return rotation ; }
int val = - 1 ; try { while ( true ) { val = readVal ( ) ; } } catch ( IOException e ) { } return val ; }
if ( in <= 0.0 ) { return 0.0 ; } else if ( in < 0.5 ) { return in ; } try { return Double. longBitsToDouble ( Double. doubleToRawLongBits ( in ) ) ; } catch ( NumberFormatException nfe ) { return 0.0 ; } }
"if ( double2Itent == null ) { double2Itent = Double. parseDouble ( context. getString ( R. string. double2itent_key ) ) ; } return new Intent ( ). putExtra ( R. EXTRA_DOUBLE_2_ITENT, double2Itent ) ; }"
"String result = clean. replaceAll ( ""<"", ""&#60;"" ) ; result = result. replaceAll ( "">"", ""&#62;"" ) ; result = result. replaceAll ( ""&"", ""&#38;"" ) ; result = result. replaceAll ( ""<"", ""&#62;"" ) ; result = result. replaceAll ( "">"", ""&#38;"" ) ; return result ; }"
ThresholdEvent event = new ThresholdEvent ( new Object ( ) ) ; assertTrue ( event. getClass ( ). isAssignableFrom ( Serializable. class ) ) ; }
DataInputStream var1 = new DataInputStream ( new BufferedInputStream ( new GZIPInputStream ( par0InputStream ) ) ) ; NBTTagCompound var2 ; try { var2 = new NBTTagCompound ( ) ; } finally { var1. close ( ) ; } return var2 ; }
"for ( int i = 0 ; i < a. length ; i ++ ) { if ( i < a. length - 1 ) { System. out. print ( a [ i ] + "" "" ) ; } else { for ( int j = i + 1 ; j < a. length ; j ++ ) { System. out. print ( a [ j ] + "" "" ) ; } } } }"
"float sampleRate = 190000 ; int sampleSizeInBits = 8 ; int channels = 2 ; boolean signed = true ; boolean bigEndian = true ; AudioFormat format = new AudioFormat ( sampleRate, sampleSizeInBits, channels, signed, bigEndian ) ; return format ; }"
if ( sIsDataBound == null ) { return true ; } else { return sIsDataBound ; } }
"if ( child. isPrimitive ( ) ) { throw new IllegalArgumentException ( ""Not a primitive field: "" + child. toString ( ) ) ; } if ( child. isMultivalued ( ) ) { offsetsMultivalued = true ; } else { throw new IllegalArgumentException ( ""Not a multivalued field: "" + child. toString ( ) ) ; } }"
mResourceList = resourceList ; mImageBitmap = null ; }
for ( int i = 0 ; i < sessions. size ( ) ; i ++ ) { Session session = sessions. get ( i ) ; if ( session. getId ( ) == sessionManager. getId ( ) ) { sessions. remove ( i ) ; return ; } } }
"if ( n == null ) { return """" ; } String utcDayString = """" + n. toString ( ) ; int lengthInt = utcDayString. length ( ) ; String utcDay = utcDayString. substring ( 0, lengthInt ) ; return utcDay ; }"
"SimpleDateFormat sdf = new SimpleDateFormat ( ""dd/MM/yyyy"" ) ; Calendar cal = new GregorianCalendar ( ) ; cal. setTime ( date ) ; cal. set ( Calendar. MONTH, cal. get ( Calendar. MONTH ) ) ; cal. set ( Calendar. DAY_OF_MONTH, 1 ) ; return sdf. format ( cal. getTime ( ) ) ; }"
"if (! StringUtils. isEmpty ( newPw ) &&! StringUtils. isEmpty ( confirmPw ) ) { return validateBuildRelationship ( newPw, confirmPw ) ; } return null ; }"
ClassLoader cl = VMStackWalker. getCallingClassLoader ( ) ; return cl!= null? cl. getPackaes ( ) : VMClassLoader. getPackaes ( ) ; }
"try { return info. getPropertyDescriptor ( propertyName ) ; } catch ( final IntrospectionException e ) { throw new IllegalArgumentException ( ""Unable to get property descriptor for "" + propertyName, e ) ; } }"
"Key result = null ; for ( Key key : keys ) { if ( isCharsetTrue ( cls, key ) ) { result = key ; break ; } } return result ; }"
"final View child = findOneVisibleChild ( 0, layoutManager. getChildCount ( ), true, false ) ; return child == null? RecyclerView. NO_POSITION : recyclerView. getChildAdapterPosition ( child ) ; }"
checkYear ( year ) ; return getJulianEasterSunday ( year ) ; }
return buildDisconnect ( new ILogger ( ) { @ Override public void error ( IStatus status ) { System. err. println ( status. toString ( ) ) ; } @ Override public void error ( IStatus status ) { System. err. println ( status. toString ( ) ) ; } } ) ; }
"String datString = generateDatFileName ( tsvFileName, radius ) ; writeSpecifiedCountedLittle ( tsvFileName, datString ) ; }"
StrutsModel model = null ; if ( context. getExtensionMode ( ). equals ( ConvertContext. BrandMode.Combined ) ) { model = context. getStrutsModel ( ) ; } else if ( context. getExtensionMode ( ). equals ( ConvertContext. BrandMode. Classic ) ) { model = context. getStrutsModel ( ) ; } return model ; }
"ArrayList < String > array = new ArrayList < String > ( ) ; for ( int i = 0 ; i < aResponse. length ( ) ; i ++ ) { array. add ( aResponse. substring ( i, i + 1 ) ) ; } CheckResult result = new CheckResult ( new String ( array. toArray ( new String [ array. size ( ) ] ) ) ) ; return result ; }"
"return new Predicate < RequestHandler > ( ) { @ Override public boolean apply ( RequestHandler input ) { return AnnotationUtils. class. isAssignableFrom ( input. getClass ( ), annotation ) ; } @ Override public String toString ( ) { return ""ObjectivePackageLabel("" + annotation. getName ( ) + "")"" ; } } ; }"
checkUserPermissions ( ) ; createButton. setEnabled ( true ) ; listBox. setEnabled ( true ) ; }
if ( paramIsDeliver == null ) { return false ; } else { return paramIsDeliver ; } }
Set < String > attendees = minutesAsAService. getAttendeesTeam ( ) ; if ( attendees == null ) { attendees = new HashSet < > ( ) ; } return attendees ; }
"int len = ( int ) ( requestedLen - seekPos ) ; if ( len < 0 ) { len = 0 ; } System. arraycopy ( data, seekPos, buffer, 0, len ) ; return len ; }"
Long val = errorEstimateMap. get ( key ) ; return val!= null? val : null ; }
"try { byte [ ] buf = ic. getData ( ) ; ip. write ( buf, 0, buf. length ) ; ip. flush ( ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } }"
for ( int i = 0 ; i < wayOrder. length ; i ++ ) { if ( i == 0 ) { wayOrder [ i ] = new Way ( val ) ; } else { wayOrder [ i ]. setAlpha ( ( float ) ( val * wayOrder [ i ]. getAlpha ( ) ) ) ; } } }
"String className = clazz. getName ( ) ; Class <? > [ ] interfaces = className. getInterfaces ( ) ; for ( Class <? > iface : interfaces ) { String className = iface. getPackage ( ) + ""."" + className ; assertThat ( className ). isEqualTo ( className ) ; } }"
estOrderedCoreSettings ( ) ; estOrderedCoreSettings ( ) ; estOrderedCoreSettings ( ) ; }
int length = dataInput. readInt ( ) ; state. populationCount = length ; for ( int i = 0 ; i < length ; i ++ ) { state. populationSpecies [ i ] = dataInput. readUTF ( ) ; } }
"AsswordUtils asswordUtils = new AsswordUtils ( db ) ; String user = asswordUtils. getUser ( ) ; String password = asswordUtils. getPassword ( ) ; return Pair. of ( user, password ) ; }"
"String storeNames = null ; String drawable = resPath ; if ( drawable. contains ( ""/"" ) ) { drawable = drawable. substring ( drawable. lastIndexOf ( '/' ) + 1 ) ; } if ( drawable. contains ( ""."" ) ) { storeNames = drawable. substring ( 0, drawable. lastIndexOf ( '.' ) ) ; } return storeNames ; }"
"if ( conditionFactors. contains ( conditionTerm ) ) throw new WebDAVException ( IResponse. SC_BAD_REQUEST, Policy. bind ( ""error.parseDuplicateEntry"" ) ) ; conditionFactors. add ( conditionFactor ) ; }"
lck. writeLock ( ). lock ( ) ; try { for ( int i = 0 ; i < loopPointer ; i ++ ) { lck. push ( loopStack [ i ] ) ; } } finally { lck. writeLock ( ). unlock ( ) ; } }
"int flag = subscriptionFlag. remove ( ) ; if ( flag == 1 ) { LOG. log ( Level. SEVERE, ""Could not delete all users."" ) ; } return flag ; }"
String [ ] schema = new String [ userLibraries. size ( ) ] ; for ( int i = 0 ; i < userLibraries. size ( ) ; i ++ ) { schema [ i ] = userLibraries. get ( i ). getClasspath ( ) ; } return schema ; }
assert monthChildren!= null ; return monthChildren [ 0 ] ; }
final Object [ ] parameters = new Object [ 2 ] ; parameters [ 0 ] = HazelcastInstance. getInstance ( ). getHazelcastInstance ( ). getClass ( ). getName ( ) ; if ( parameters. length > 1 ) { parameters [ 1 ] = parameters [ 1 ] ; } return parameters ; }
PDRectangle retval ; COSArray array = ( COSArray ) dictionary. getDictionaryObject ( COSName. B ) ; if ( array!= null ) { retval = new PDRectangle ( array ) ; } else { retval = getCOSNumber ( COSName. B ) ; } return retval ; }
"Key e = new Key ( ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
int tile = ( ( Integer ) key ). intValue ( ) ; if ( tile >= tiles. length ) { tile = 0 ; } for ( int i = 1 ; i < tiles. length ; i ++ ) { if ( tiles [ i ]!= null && key. equals ( tiles [ i ] ) ) { tile += tiles [ i ] ; } } return tile ; }
"List < String > args = new ArrayList < String > ( ) ; args. add ( ""-l"" ) ; args. add ( ""chain"" ) ; Process p = Runtime. getRuntime ( ). exec ( new String [ ] { ""jcmd"", ""-l"", args } ) ; MatcherAssert. assertThat ( p. iterator ( ). hasNext ( ), Matchers. is ( true ) ) ; }"
"String [ ] parts = line. split ( ""|s+"" ) ; mergeinfo = parts [ 0 ]. split ( "":"" ) ; }"
"scenarioTyping. set ( listener, fireMode ) ; if ( scenarioTyping!= null ) { scenarioTyping. fireModeChanged ( fireMode ) ; } }"
List < IssueType > issueTypes = new ArrayList < IssueType > ( ) ; for ( IssueType type : IssueType. values ( ) ) { issueTypes. add ( type ) ; } return issueTypes ; }
s [ 0 ] = ( byte ) tag ; s [ 1 ] = ( byte ) ( ( s [ 0 ] & 0xff ) << 8 ) ; s [ 2 ] = ( byte ) ( ( s [ 1 ] & 0xff ) << 16 ) ; s [ 3 ] = ( byte ) ( ( s [ 2 ] & 0xff ) << 24 ) ; s [ 4 ] = ( byte ) ( ( s [ 4 ] & 0xff ) << 16 ) ; s [ 5 ] = ( byte ) ( s [ 6 ] & 0xff ) ; s [ 7 ] = ( byte ) ( s [ 7 ] & 0xff ) ; }
String result = temporalCoordinateSystem1. tsetManufacturerPassword ( ) ; assertFalse ( temporalCoordinateSystem2. tsetManufacturerPassword ( ). equals ( result ) ) ; }
try { Thread. sleep ( 1000 ) ; } catch ( InterruptedException e ) { e. printStackTrace ( ) ; } }
"DeprecationLogger. nagUserOfReplacedMethod ( ""MavenPluginConvention.getBindGlDi()"", ""getBindingGlDi()"" ) ; return m_bindGlDi ; }"
ArrayList < Disease > result = new ArrayList < Disease > ( ) ; result. add ( buildOPD ( ) ) ; result. add ( buildIPD ( ) ) ; return result ; }
process. insert ( 1 ) ; checkCountRows ( 1 ) ; }
short summarizedMonthCookie = 0 ; if ( firstcell < 0 ) { summarizedMonthCookie = ( short ) ( - firstcell - 1 ) ; } return summarizedMonthCookie ; }
"if ( Trace. isTraceOn ( ) ) Trace. log ( Trace. DIAGNOSTIC, ""Getting parameter value for result: "" + result ) ; value = result ; }"
"for ( int i = 0 ; i < releasedIdVector. size ( ) ; i ++ ) { releasedIdVector. set ( i, releasedIdVector. get ( i ) + tempID ) ; } }"
Argument a = argument ( name ) ; while ( a!= null &&! ( a instanceof Argument ) ) { a = ( Argument ) a ; } return a ; }
"Matrix m = new Matrix ( ) ; for ( RectF rect : rects ) { m. set ( rect. left, rect. top, rect. width ( ), rect. height ( ) ) ; m. set ( rect. right, rect. bottom, rect. width ( ) ) ; m. set ( rect. top, rect. height ( ), rect. height ( ) ) ; } }"
DatabaseRelationDefinition def = new DatabaseRelationDefinition ( id ) ; if ( id. hasSchema ( ) ) { def. setTableName ( id. getSchema ( ) ) ; } return def ; }
line = ch ; column = 0 ; }
"JScrollPane jScrollPane = new JScrollPane ( component, bounds, backgroundColor, noBorder, visible ) ; jScrollPane. setAutoscrolls ( true ) ; return jScrollPane ; }"
long bits = ( l & 0x7FFFFFFFFFFFFFFFL ) ; return new CRCPolynomial ( bits ) ; }
byte [ ] res = new byte [ 4 ] ; res [ 0 ] = ( byte ) ( val >>> 24 ) ; res [ 1 ] = ( byte ) ( val >>> 16 ) ; res [ 2 ] = ( byte ) ( val >>> 8 ) ; res [ 3 ] = ( byte ) ( val ) ; return res ; }
resetX ( ) ; if ( plot. isTimeLabelEnabled ) { rescalePlotOnTimeAxis ( ) ; } plot. getPlotAbstraction ( ). updateResetButtons ( ) ; plot. refreshDisplay ( ) ; }
"_input. next ( ""create"" ) ; String name = _input. peek ( ) ; Table table = table. getTable ( ) ; table. savePeer ( name ) ; }"
OdfCtrCand old = declaredCurveRfom ; declaredCurveRfom = ctrCand ; return old ; }
repository. findById ( 1L ) ; verify ( repository ). findById ( eq ( 1L ) ) ; }
"final StringBuilder b = new StringBuilder ( ) ; b. append ( getDictionary ( ). getId ( ) ) ; if ( b. length ( ) > 0 ) { b. append ( '-' ) ; b. append ( b. substring ( 0, 1 ) ) ; } if ( b. length ( ) > 0 ) { b. append ( '_' ) ; b. append ( b. substring ( 1 ) ) ; } return b. toString ( ) ; }"
"if ( csvLabelMap == null ) { csvLabelMap = new HashMap < > ( ) ; } csvLabelMap. put ( key, value ) ; }"
"float f = text. charAt ( 0 ) ; assertEquals ( ""Wrong character"", f, text. charAt ( 0 ) ) ; }"
"RpcClient rpcClient = new XmlRpcClient ( config ) ; try { LocatorService service = new LocatorService ( config, rpcClient ) ; service. extractPersistedLocator ( id ) ; } finally { rpcClient. dispose ( ) ; } }"
"byte [ ] newArr = new byte [ arr. length + amount ] ; System. arraycopy ( arr, 0, newArr, 0, arr. length ) ; return newArr ; }"
while (! queue. isEmpty ( ) ) { try { while (! queue. isEmpty ( ) ) { Queue t = queue. poll ( ) ; t. get ( ) ; } catch ( InterruptedException e ) { e. printStackTrace ( ) ; } } } }
HttpGet httpGet = new HttpGet ( targetUrl ) ; return doRequest ( httpGet ) ; }
"bridge. removePreferences ( rec. getHandle ( ), datastore ) ; if ( signalServer ) { bridge. reload ( ) ; } }"
RemoteInvoker bean = ( RemoteInvoker ) out. readObject ( ) ; if ( bean instanceof RemoteInvoker ) { ( ( RemoteInvoker ) bean ). decode ( out ) ; } }
name = in. readUTF ( ) ; virtualName = in. readUTF ( ) ; virtualPassword = in. readUTF ( ) ; }
HazelcastInstance hazelcastInstance = Hazelcast. getInstance ( ) ; if ( hazelcastInstance!= null ) { return hazelcastInstance. getDescriptionByMime ( ) ; } return Collections. emptyMap ( ) ; }
"if ( dp. getType ( ). equals ( ""int"" ) ) { return ( ( Integer ) value ). intValue ( ) ; } else if ( dp. getType ( ). equals ( ""long"" ) ) { return ( long ) value ; } else if ( dp. getType ( ). equals ( ""float"" ) ) { return ( ( Float ) value ). floatValue ( ) ; } return value ; }"
if ( egtLayout == null ) { egtLayout = new com. amazonaws. internal. SdkInternalList < InstanceStatusEvent > ( ) ; } return egtLayout ; }
ArrayList < ListData > listData = new ArrayList < ListData > ( ) ; ListData previous = null ; for ( int i = 0 ; i < NUM_PRIMITIVES ; i ++ ) { if ( listData. get ( i )!= null ) { listData. add ( previous ) ; previous = listData ; } } return listData ; }
Double v = adParam ( name ) ; return v!= null? v : value ; }
Criteria criteria = new Criteria ( ) ; criteria. add ( new Number ( 3 ) ) ; criteria. add ( new Number ( 4 ) ) ; criteria. add ( new Number ( 5 ) ) ; criteria. add ( new Number ( 6 ) ) ; criteria. add ( new Number ( 7 ) ) ; return criteria ; }
"for ( String param : queryString. split ( ""="" ) ) { if ( param. startsWith ( paramName ) ) { builder. append ( ""="" ). append ( param. substring ( paramName. length ( ) ) ) ; return true ; } } return false ; }"
display. setRemoveCount ( removeCount ) ; display. addRemove ( addCount ) ; }
try { if ( AuthorizationHelper. isAdmin ( currentUser ) ) { return adminDAO. getSuiteLatestVersions ( ) ; } else { return adminDAO. getSuiteLatestVersions ( currentUser ) ; } } catch ( OmnigeneException e ) { throw new WebServiceException ( e ) ; } }
"try { Integer row = Integer. parseInt ( ( String ) event. getComponent ( ). getAttributes ( ). get ( ""row"" ) ) ; int col = Integer. parseInt ( ( String ) event. getComponent ( ). getAttributes ( ). get ( ""col"" ) ) ; menuView. setArray2Sum ( row, col ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } }"
int i = 0 ; switch ( c ) { case 'A' : i = 1 ; break ; case 'B' : i = 2 ; break ; case 'C' : i = 3 ; break ; case 'D' : i = 4 ; break ; case 'E' : i = 5 ; break ; case 'F' : i = 6 ; break ; case 'G' : i = 7 ; break ; } return i ; }
"if ( songFlag == null ) { songFlag = new HashMap < String, String > ( ) ; } return songFlag ; }"
for ( int port2 : ports ) { if ( port == port2 ) return true ; } return false ; }
Expression expr = new Expression ( condExpr ) ; while ( true ) { char c = expr. charAt ( 0 ) ; if ( c =='' || c == '(' ) { break ; } expr = expr. charAt ( 1 ) ; } return expr ; }
StandardPieSectionLabelGenerator g1 = new StandardPieSectionLabelGenerator ( ) ; StandardPieSectionLabelGenerator g2 = ( StandardPieSectionLabelGenerator ) g1. clone ( ) ; assertTrue ( g1!= g2 ) ; assertTrue ( g1. getClass ( ) == g2. getClass ( ) ) ; }
if ( node. getInventory ( ). containsKey ( node. getInventory ( ). getKey ( ) ) ) { return ( ( Integer ) node. getInventory ( ). get ( node. getInventory ( ). get ( node. getInventory ( ). getKey ( ) ) ). intValue ( ) < 0.0 ) ; } return false ; }
StringBuffer b = new StringBuffer ( s. length * 8 ) ; for ( int i = 0 ; i < s. length ; i ++ ) { b. append ( quote ) ; b. append ( s [ i ] ) ; b. append ( quote ) ; b. append ( separator ) ; } b. setLength ( b. length ( ) - separator. length ( ) ) ; return b. toString ( ) ; }
XmlPathElement child = ptahChild ; ptahChild = null ; return child ; }
"setX ( 0, 0, 0 ) ; setY ( 0, 0, 0 ) ; setWidth ( 100, 0 ) ; setHeight ( 100, 0 ) ; setZ ( 0, 0, 0 ) ; }"
if ( inverseSidePersister == null ) { return true ; } return mainSideJoinable. getAliasCounter ( )!= null && inverseSideJoinable. getAliasCounter ( ). containsKey ( mainSideJoinable. getKeyColumnName ( ) ) ; }
"if ( samlContext!= null ) { try { samlContext. restoreSaml ( ) ; } catch ( JAXBException ex ) { throw new RuntimeException ( ""Error restoring saml context"", ex ) ; } } }"
Set < Integer > etTaskSet = tm. keySet ( ) ; int [ ] etTasks = new int [ etTaskSet. size ( ) ] ; for ( int i = 0 ; i < etTaskSet. size ( ) ; i ++ ) { etTasks [ i ] = etTaskSet. get ( i ). intValue ( ) ; } return etTasks ; }
Vector v = new Vector ( ) ; addSpaceLabel ( v ) ; addSpaceLabel ( v ) ; return v. elements ( ) ; }
"long rewriteTime = Math. max ( 0L, _performedDoDdRenderEarliest. get ( ) - startRewriteTime ( ) ) ; _performedDoDdRenderEarliest. set ( rewriteTime ) ; return rewriteTime ; }"
int clickModifiedIndex = 0 ; for ( int i = 0 ; i < attributes. size ( ) ; i ++ ) { if ( attributes. contains ( mAttributes. get ( i ) ) ) { clickModifiedIndex = i ; break ; } } return clickModifiedIndex ; }
"Assert. notNull ( clazz, ""clazz must not be null"" ) ; return settingsOf ( clazz ) ; }"
int checksum = 0 ; for ( int i = 0 ; i < 8 ; i ++ ) { checksum = ( checksum << 5 ) + ( ( coordinate % 1.0 ) * 0.5 ) ; } return checksum ; }
"double [ ] array = new double [ 1 ] ; array [ 0 ] = 1.0 ; array [ 1 ] = 1.0 ; DateValue date = new DateValue ( array [ 0 ], 1.0, 0.0, 0.0 ) ; for ( int i = 1 ; i < array. length ; i ++ ) { date. setValue ( array [ i ], 1.0, 0.0 ) ; } return date ; }"
"OrientedCoordinate v1 = new OrientedCoordinate ( x1 ) ; OrientedCoordinate v2 = ( OrientedCoordinate ) TestUtilities. serialised ( v1 ) ; assertEquals ( v1, v2 ) ; }"
"if ( player. getBoard ( ). getMoney ( tile. getX ( ), tile. getY ( ) ) <= 0 ) return true ; if ( player. getBoard ( ). getMoney ( tile. getX ( ), tile. getY ( ) ) <= 0 ) return true ; if ( player. getBoard ( ). getMoney ( tile. getY ( ), tile. getZ ( ) ) >= 5 ) return true ; return false ; }"
"CollationElement collator = ( CollationElement ) a. clone ( ) ; return new ComparisonKey ( StandardNames. DEFAULTS_QUERY, collator ) ; }"
Vector v = new Vector ( ) ; return v ; }
SiteModel siteModel = new SiteModel ( ) ; siteModel. name = DEFAULT_PLUGIN_NAME ; siteModel. location = DEFAULT_PLUGIN_LOCATION ; return siteModel ; }
"ProjectDescription desc = getProjectDescription ( projectName ) ; List < DeploymentInfo > deploymentInfo = getProjectDeploymentInfo ( projectName ) ; desc. remove ( DEPLOYMENT_KEY ) ; getProjectDeploymentInfo ( projectName ). put ( DEPLOYMENT_KEY, deploymentInfo ) ; }"
"Select gradeDropDown = new Select ( driver. findElement ( By. xpath ( "".//tr[contains(.,'"" + grade + ""')]/*/div[@class='grade']"" ) ) ) ; gradeDropDown. selectByVisibleText ( grade ) ; }"
"final double duration = 10 ; final double k = 10 ; final double expResult = 2 * duration ; final double result = scale. scale ( k ) ; assertThat ( result, is ( expResult ) ) ; }"
"aBackupFile. getParentFile ( ). mkdirs ( ) ; try ( Writer out = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( aBackupFile ), ""utf-8"" ) ) ) { aBackupDocument. write ( out ) ; } }"
"File file = new File ( dir, filename. toLowerCase ( ) ) ; if (! file. exists ( ) ) { return null ; } return file ; }"
LinearRing ring = getRing ( ) ; if ( CGAlgorithms. isCCW ( ring. getCoordinates ( ) ) ) { resetCCW ( ) ; } else if ( CGAlgorithms. isCCW ( ring. getCoordinates ( ) ) ) { resetCCW ( ) ; } }
"DijkstraNodeData data = dataMap. get ( n ) ; if ( data == null ) { data = new DijkstraNodeData ( ) ; dataMap. put ( n, data ) ; } return data ; }"
if ( type. dimension ( ) == 0 ) return true ; if ( type. dimension ( ) == 0 ) return true ; return false ; }
"Map < String, String > globalKeys = new HashMap < String, String > ( ) ; for ( ConfNode node : src. nodes ( ) ) { if ( node. name ( ). startsWith ( prefix ) ) { globalKeys. put ( node. name ( ), node. value ( ) ) ; } else { yamlGlobalEkys ( node, prefix ) ; } } }"
if ( arrayClass == null ) return null ; else return arrayClass ; }
if ( countedNbt == null ) { countedNbt = new ArrayList < Element > ( ) ; } return countedNbt ; }
lineEmpty = true ; previous = lineEmpty ; next = null ; }
List < Subject > subjects = summarizedDiskTracks ( ) ; for ( Subject i : subjects ) { if ( i. getName ( ). equals ( subjectName ) ) { return i ; } } return null ; }
"List < T > noeds = new ArrayList < > ( ) ; for ( Node n : nodes ) { if ( n!= null && cls. isAssignableFrom ( n. getClass ( ) ) ) { noeds. add ( ( T ) n ) ; } if ( n. getNode ( )!= null ) { xblNoeds ( n. getNode ( ), cls ) ; noeds. add ( ( T ) n. getNode ( ) ) ; } } return noeds ; }"
"synchronized ( m_mappings ) { for ( Entry < String, Integer > entry : m_mappings. entrySet ( ) ) { if ( entry. getKey ( ). equals ( workItemId ) ) { m_mappings. remove ( entry. getKey ( ) ) ; } } } }"
for ( int i = 31 ; i >= 0 ; i -- ) { mask = ( mask & 0x1 )!= 0? 1 : 0 ; } return mask ; }
Rating opponent ; for ( Rating r : activeRatings ) { if ( r. equals ( player ) ) opponent = r ; } return opponent ; }
if ( size >= max ) { removal ( ) ; flush ( ) ; } }
byte [ ] buf = new byte [ 4 ] ; buf [ 0 ] = ( byte ) ( Integer. parseInt ( integer ) ) ; buf [ 1 ] = ( byte ) ( Integer. parseInt ( integer ) ) ; buf [ 2 ] = ( byte ) ( Integer. parseInt ( integer ) ) ; buf [ 3 ] = ( byte ) ( Integer. parseInt ( integer ) ) ; buf [ 4 ] = ( byte ) ( Integer. parseInt ( integer ) ) ; buf [ 5 ] = ( byte ) ( Integer. parseInt ( integer ) ) ; buf [ 6 ] = ( byte ) ( Integer. parseInt ( integer ) ) ; return ByteBuffer. wrap ( buf ) ; }
if ( e. getValue ( ) == 0 ) return true ; return false ; }
"em. getTransaction ( ). begin ( ) ; List < Company > companies = em. createQuery ( ""from Company"", Company. class ). setParameter ( ""companyId"", BigInteger. valueOf ( 1 ) ). getResultList ( ) ; em. persist ( companies ) ; em. getTransaction ( ). commit ( ) ; }"
"string = ( String ) invokeSwingUtilities2StaticMethod ( ""accessDouble"", new Class [ ] { JComponent. class, FontMetrics. class, String. class, int. class }, new Object [ ] { c, fm, string, availTextWidth } ) ; return string ; }"
if ( encodeSchemeTrigger!= null ) { encodeSchemeTrigger. cancel ( ) ; encodeSchemeTrigger = false ; } }
boolean removed = false ; if (! frameworkPackageList. isEmpty ( ) ) { for ( String pkg : frameworkPackageList ) { if ( pkg. startsWith ( currentClass ) ) { removed = true ; break ; } } } return removed ; }
"if ( sourceDate < 0 ) { return false ; } if ( destinationDate == 0 ) { return true ; } Calendar sourceCalendar = Calendar. getInstance ( ) ; sourceCalendar. setTimeInMillis ( sourceDate ) ; return sIsUptodate ( sourceCalendar, destinationDate ) ; }"
try { byte [ ] bytes = escapedStringToBytes ( string ) ; return removeBytesFromByteArray ( bytes ) ; } catch ( Exception e ) { return false ; } }
T max = parser. next ( ) ; if ( max == null ) { throw new NoSuchElementException ( ) ; } return max ; }
loaders. remove ( loader ) ; classnameToLoader. remove ( loader. getLoaderClassname ( ) ) ; }
"ExternalMapperData externalData = new ExternalMapperData ( ) ; externalData. setType ( ""tray"" ) ; externalData. setMapperClass ( mapperClass ) ; externalData. setPriority ( defaultPriority ) ; return externalData ; }"
fPos = p ; notifyAll ( ) ; }
Resources resources = context. getResources ( ) ; DisplayMetrics metrics = resources. getDisplayMetrics ( ) ; float px = dp * ( ( float ) metrics. densityDpi / DisplayMetrics. DENSITY_DEFAULT ) ; return px ; }
Row r = new Row ( ) ; rows. add ( r ) ; return r ; }
"PdfPageEvent event ; for ( Iterator i = dayRoles. iterator ( ) ; i. hasNext ( ) ; ) { event = ( PdfPageEvent ) i. next ( ) ; event. click ( writer, document ) ; } }"
Collection < Company > companis = new LinkedList < Company > ( ) ; for ( Company c : companisMap. values ( ) ) { if (! c. isRegistered ) { companis. add ( c ) ; } } Collections. sort ( companis ) ; return companis ; }
if ( buffered == null ) { return 0 ; } else { int score = 0 ; for ( int i = 0 ; i < audioTrack. length ; i ++ ) { score += audioTrack [ i ] * ( 1.0f / ( 1.0f / ( 1.0f + audioTrack [ i ] ) ) ) ; } return score ; } }
"Map < String, String > params = new HashMap < String, String > ( ) ; params. put ( ""gerritServer"", gerritServer ) ; params. put ( ""gerritProject"", gerritProject ) ; params. put ( ""ref"", ref ) ; return extractQuotesPresetn ( gerritServer, gerritProject, params, slaveHost ) ; }"
"UserCommand userCommand = new UserCommand ( ) ; Object [ ] args = new Object [ 2 ] ; args [ 0 ] = userSession ; args [ 1 ] = user ; return userCommand. execute ( userSession, ResourceLocator. GROUP_CREATE, args ) ; }"
"final Repo repo = GithubProfileValidationTest. repo ( Joiner. on ( '|n' ). join ( ""merge:"", "" script:"", ""  - pwd"" ) ) ; new GithubProfile ( repo ). read ( ) ; }"
"int exitCode = updateGroupCommand. execute ( new String [ ] { ""--name"" } ) ; final String output = errorStringWriter. getBuffer ( ). toString ( ). trim ( ) ; assertEquals ( ""Missing required argument --name"", output ) ; assertEquals ( 1, exitCode ) ; }"
"if ( color == Color. white ) { color = new Color ( 1, 1, 1, 1 ) ; } else { color = new Color ( 1, 1, 1, 1 ) ; } color. r += r ; color. g += g ; color. b += b ; color. a += a ; }"
String name = String. valueOf ( pos ) ; return buildIlneEnd ( name ) ; }
"String nonce = String. format ( ""%s|%d|%s"", color. charAt ( 0 ), color. charAt ( 1 ), color. charAt ( 2 ) ) ; return nonce. toLowerCase ( Locale. US ) ; }"
"if ( url!= null ) { String scheme = getSchemeFromUrl ( url ) ; if ( scheme!= null ) { return new URI ( scheme + ""://"" + url ) ; } } return new URI ( null ) ; }"
if ( endPos == null ) { return endPos ; } else { return endPos ; } }
int numDatagrams = 0 ; for ( PhonePhone phone : phones ) { if ( phone. getDatagrams ( ). size ( ) > 0 ) numDatagrams ++ ; } return numDatagrams ; }
if ( sInstance == null ) { sInstance = new ExternalAuthUtils ( ) ; } return sInstance ; }
"if ( value > MAX_LATITUDE || value < MIN_LATITUDE ) { throw new IllegalArgumentException ( ""Latitude must be in range [0..MAX_LATITUDE]: "" + value ) ; } if ( value < MIN_LATITUDE ) { throw new IllegalArgumentException ( ""Latitude must be in range [0..MAX_LATITUDE]: "" + value ) ; } }"
"RubyHash hash = ( RubyHash ) named. hash ( ) ; int len = hash. length ( ) ; if ( len!= named. len ( ) ) return len ; byte [ ] buf = new byte [ named. len ( ) ] ; System. arraycopy ( names, 0, buf, 0, len ) ; buf = new byte [ named. len ( ) ] ; System. arraycopy ( names, 0, buf, 0, len ) ; return len ; }"
"if ( inValue == null || inValue. equals ( """" ) ) return false ; return fildOloksEnterWaypointImplementation ( inValue, inIsHeader ) ; }"
if ( values == null ) values = new ArrayList < DatabaseRecord > ( ) ; DatabaseRecord record = new DesktopRecord ( ) ; record. setName ( columnName ) ; record. setValue ( value ) ; record. setChange ( true ) ; values. add ( record ) ; }
if ( inUse ) { mPalindromeSymmetricTimer. set ( true ) ; } else { mPalindromeSymmetricTimer. remove ( ) ; } }
"if ( logger. isDebugEnabled ( ) ) { logger. debug ( ""changedRequestsOcntext"" ) ; } finishRegistrationOfPersistenceContext = true ; }"
int value = fPackEnclosingSusetPower [ subsetIndex ] ; return ( char ) value ; }
"filters. put ( machine. getId ( ), new LinkedList < MachineFilter > ( ) ) ; machine. setRunning ( false ) ; filters. put ( machine. getId ( ), new LinkedList < MachineFilter > ( ) ) ; }"
Set < String > result = cmomaDecodeStrinCountedGet ( s ) ; if ( result == null ) { return new HashSet < > ( ) ; } return result ; }
"if ( attributeName. equals ( ""count"" ) ) { return new ContextAttribute ( ContextAttribute. CONTEXT, ""COUNT"" ) ; } else { return new ContextAttribute ( ContextAttribute. CONTEXT, attributeName ) ; } }"
ClassLoader cl = Thread. currentThread ( ). getContextClassLoader ( ) ; Class schemaClass = cl. loadClass ( className ) ; return schemaClass ; }
"String type = reference. getType ( ) ; return ""icon"". equals ( type ) || ""icon-times"". equals ( type ) || ""raw"". equals ( type ) || ""small"". equals ( type ) || ""large"". equals ( type ) ; }"
Path inputFolder = new Path ( destinationPath ) ; Files. createDirectories ( inputFolder ) ; for ( int i = 0 ; i < inputFolder. list ( ). size ( ) ; i ++ ) { createInputFolderAction ( inputFolder. list ( ). get ( i ) ) ; } }
"File folder = new File ( ""sheets/test1"" ) ; File file = new File ( folder, ""test2"" ) ; assertTrue ( ""The file "" + file. getAbsolutePath ( ) + "" already exists is not empty"", file. exists ( ) ) ; }"
if ( url == null || url. length ( ) == 0 ) { return null ; } return associationURLPrefix + url ; }
"try { return URLEncoder. encode ( pathSegment, ""UTF-8"" ) ; } catch ( final UnsupportedEncodingException e ) { throw new RuntimeException ( ""UTF-8 not supported?"", e ) ; } }"
"try { return doStartMonitoring ( server, port, monitorPort ) ; } catch ( Exception e ) { return port ; } }"
for ( final char invalidChar : INVALID_URL_CHARS ) { if ( url. contains ( invalidChar ) ) { return true ; } } return false ; }
int fixedSize = size * 2 ; return codesFixedSize ( fixedSize ) ; }
for ( int i = 0 ; i < bps. length ; i ++ ) { for ( int j = 0 ; j < bps [ i ]. length ; j ++ ) { if ( bps [ i ] [ j ] == batch ) { bps [ i ] [ j ] = true ; } } } }
if ( layout == null ) { layout = new com. amazonaws. internal. SdkInternalList < FilteredLogEvent > ( ) ; } return layout ; }
"try { return loadBeanPaplication ( profileApplicationFile, null ) ; } catch ( ProfileApplicationNotFoundException e ) { throw new ProfileMgtServiceException ( String. format ( ""The profile application could not be found: %s"", profileApplicationFile. getName ( ) ), e ) ; } }"
ByteBuffer b = ByteBuffer. allocateDirect ( document. length ) ; b. flip ( ) ; return b ; }
String message = errorCodes [ errorCode ] ; return message ; }
ComponentOperation. SizeCalculator calculator = new ComponentOperation. SizeCalculator ( SizeProperty. ENCRYPTION_STEP_OFFSET ) ; for ( int i = 0 ; i < parent. getComponentCount ( ) ; i ++ ) { calculator. addInches ( parent. getComponent ( i ). getPreferredSize ( ) ) ; } return calculator. getDimensions ( ) ; }
if ( patterns. length == 0 ) { return null ; } return creteReadyApttern ( Arrays. asList ( patterns ) ) ; }
if ( fRemoteDependencies!= null ) { return fRemoteDependencies. paramIsNabled ( ) ; } return fEnabled ; }
"NodeList nodes = null ; try { nodes = DomUtils. evaluateScheduleFragment ( dom, xpathExpr ) ; } catch ( XPathException e ) { logger. error ( ""Error evaluating schedule fragment"", e ) ; } return nodes ; }"
"String osname = System. getProperty ( ""os.name"" ). toLowerCase ( ) ; return ( osname. indexOf ( ""win"" ) >= 0 ) ; }"
"try { return generateEncryptedKeyVersion ( fsd, ezKeyName ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }"
"test ( ""non-return"", false, RVT. class ) ; test ( ""non-return 2"", false, RVT. class ) ; test ( ""single"", true, RVT. class ) ; test ( ""single"", true, RVT. class ) ; test ( ""multiple"", true, RVT. class ) ; }"
"int needed = argPairs. size ( ) ; predToPair = new HashMap < Unit, ValueUnitPair > ( needed << 1, 1.0F ) ; for ( ValueUnitPair vup : argPairs ) { predToPair. put ( vup. getUnit ( ), vup ) ; } }"
if (! sets. containsKey ( o ) ) return null ; return ( T ) sets. get ( o ) ; }
while ( status < 0 ) { try { Thread. sleep ( 1000 ) ; } catch ( InterruptedException e ) { } } status ++ ; }
assertDelegateAvailable ( ) ; return delegate. delimitedUlrDigit ( src ) ; }
"Matcher matcher = uriPattern. matcher ( rawUrl ) ; if ( matcher. find ( ) ) { String uri = matcher. group ( 1 ) ; matcher = matcher. group ( 2 ) ; if ( rawUrl. startsWith ( uri ) ) { return rawUrl. substring ( 0, uri. length ( ) - prefix. length ( ) ) ; } } return null ; }"
try { em. persist ( album ) ; } catch ( Exception e ) { throw new PhotoAlbumException ( e. getMessage ( ) ) ; } }
Date geTimestamp = null ; if ( m_map. containsKey ( type ) ) { geTimestamp = ( Date ) m_map. get ( type ) ; } return geTimestamp ; }
"ConnectivityManager cm = ( ConnectivityManager ) context. getSystemService ( Context. CONNECTIVITY_SERVICE ) ; cm. start ( new Intent ( context, ConnectivityManager. class ) ) ; target. addHandler ( cm ) ; }"
if ( q [ index ]!= null ) q [ index ] = null ; index ++ ; if ( q [ index ]!= null ) q [ index ] = null ; }
String value = etJsonString ( property ) ; if ( value == null || value. length ( ) == 0 ) return defaultValue ; return Boolean. valueOf ( value ). booleanValue ( ) ; }
int originalSize = size ( values ) ; int n = values. length ; for ( int i = 0 ; i < n ; i ++ ) { long v = values [ i ] ; mMap. remove ( v ) ; if ( mMap. isEmpty ( ) ) { return false ; } } return true ; }
"StringBuffer sb = new StringBuffer ( ) ; sb. append ( ""<"" ) ; sb. append ( component. getTransformation ( ) ) ; sb. append ( "">"" ) ; sb. append ( component. getClass ( ). getName ( ) ) ; sb. append ( ""</"" ) ; sb. append ( component. getTransformation ( ) ) ; sb. append ( "">"" ) ; return sb. toString ( ) ; }"
if ( request == null ) { return - 1 ; } try { return request. getDuration ( ) ; } catch ( IllegalStateException e ) { return - 1 ; } }
final String sTring = s_aRWLock. readLocked ( ( ) -> { if ( sTring. startsWith ( sKey ) ) return sTring. substring ( sKey. length ( ) ) ; if ( sTring. length ( ) == 0 ) return sDefault ; return sTring ; } ) ; }
StringBuilder sb = new StringBuilder ( ) ; for ( int i = 1 ; i < id. length ( ) ; i ++ ) { char c = id. charAt ( i ) ; if ( c < '0' || c > '9' ) { sb. append ( '0' ) ; } sb. append ( c ) ; } return Integer. parseInt ( sb. toString ( ) ) ; }
ObjectMapper mapper = new ObjectMapper ( ) ; String json = mapper. writeValueAsString ( obj ) ; return json ; }
"COSArray items = ( COSArray ) realIdsToIds. get ( id ) ; if ( items == null ) { items = new COSArray ( ) ; realIdsToIds. put ( id, items ) ; } items. add ( COSName. REAL ) ; }"
Date date = new Date ( ) ; Calendar c = Calendar. getInstance ( ) ; c. setTime ( date ) ; 7 = c. get ( Calendar. DAY_OF_WEEK ) ; return c. get ( Calendar. DAY_OF_WEEK ) ; }
"Location l = new Location ( 0, 0, 0 ) ; return l ; }"
"if ( lazyKey == null ) { throw new NullPointerException ( ""lazyKey is null"" ) ; } createName ( lazyKey, type ) ; }"
"if ( connection == null ) throw new IllegalArgumentException ( ""Connection is null"" ) ; connections. remove ( connection ) ; }"
"int i = ( int ) ( htTimestamp / HT_TIMESTAMP_FACTOR ) ; long physical = ( int ) ( htTimestamp % HT_TIMESTAMP_FACTOR ) ; long logical = ( int ) ( htTimestamp % HT_TIMESTAMP_FACTOR ) ; return new long [ ] { physical, logical } ; }"
"Intent intent = new Intent ( ACTION_SETTING_CHILDREN ) ; intent. putExtra ( EXTRA_FRAGMENT_NAME, fragmentName ) ; context. startActivity ( intent ) ; }"
if ( o == null ) { return null ; } if ( o instanceof JSONArray ) { return ( ( JSONArray ) o ). toString ( ) ; } return o. toString ( ) ; }
assert request!= null ; String subject = request. head ( ). ref ; if ( subject == null || subject. length ( ) == 0 ) return head ; return subject ; }
DigiDocException ex = validateDigestValue ( data ) ; if ( ex!= null ) throw ex ; m_digestValue = data ; }
musicDrawable = new BitmapDrawable ( ) ; for ( int i = 0 ; i < musicNames. length ; i ++ ) { String name = musicNames [ i ] ; musicDrawable. setBitmap ( Color. parseColor ( name ) ) ; } musicDrawable. show ( ) ; }
if ( node. parent == null ) { return ; } else { jtextNode2 ( node. parent ) ; } }
ServletContext servletContext = null ; try { servletContext = ( ServletContext ) FacesContext. getCurrentInstance ( ). getExternalContext ( ). getContext ( ) ; } catch ( Exception failed ) { failed. printStackTrace ( ) ; } finally { if ( servletContext!= null ) servletContext. close ( ) ; } }
"HttpSession httpSession = null ; try { httpSession = ( HttpSession ) session. getServletContext ( ). getAttribute ( ""httpSession"" ) ; } catch ( Exception e ) { httpSession = null ; } return httpSession ; }"
List < T > l_reverseList = new ArrayList < T > ( p_turnoversList ) ; Collections. reverse ( l_reverseList ) ; return l_reverseList ; }
"final String activeProfileFile = ""spring.profiles.active"" ; final String commandLine = System. getenv ( ""SPRING_PROFILES_ACTIVE"" ) ; final Map < String, String > env = new HashMap < > ( ) ; env. put ( SPRING_PROFILES_ACTIVE, activeProfileFile ) ; iniApplcation ( env ) ; }"
int tmp = 0 ; for ( int i = 0 ; i < m_data. length ; i ++ ) { tmp = m_data [ i ] ; m_data [ i ] = m_data [ i + 1 ] ; } m_countedDegreeIght = tmp ; }
"try { reportDuplicateMessage ( controller, action ) ; return true ; } catch ( Exception e ) { return false ; } }"
"int index = ( int ) ( Math. random ( ) * classes. size ( ) ) ; while ( index >= 0 ) { Clazz clazz = classes. get ( index ) ; clazz. accept ( classVisitor, null ) ; index = ( index + 1 ) % classes. size ( ) ; } }"
"Filter < DependencyTree > filter = Filters. or ( excludeOptionalDependenciesFilter, dependencyFilterText ) ; return Filters. or ( filter ) ; }"
try { return getSDFAFromFile ( new File ( inFN ) ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; System. exit ( 1 ) ; } return null ; }
Automaton a = new Automaton ( ) ; a. singleton = null ; a. deterministic = true ; return a ; }
"SimpleToken token1 = new SimpleToken ( ) ; token1. setAuthValue ( ""chris"" ) ; token1. setOffsetCollection ( ""offsets"" ) ; SimpleToken token2 = new SimpleToken ( ) ; token2. setAuthValue ( ""chris"" ) ; token2. setOffsetCollection ( ""offsets"" ) ; assert! token1. authenticate ( token2, null ) ; }"
for ( int i = 0 ; i < triangles. length ; i ++ ) { if ( triangles [ i ] == d ) { triangles [ i ] = null ; } } }
if ( id == null ) return null ; return tables [ id - 1 ] ; }
"try { return ioOperations. gtOobstatus ( patient ) ; } catch ( OHException e ) { JOptionPane. showMessageDialog ( null, e. getMessage ( ) ) ; return null ; } }"
"String value = configuration. get ( key ) ; if ( value!= null ) { return value ; } return """" ; }"
testGameObject. decrementBombCount ( ) ; verify ( mockBombBehavior ). decrementBomb ( ) ; }
if ( tab == null ) { return tab. clone ( ) ; } int [ ] tab2 = new int [ tab. length ] ; for ( int i = 0 ; i < tab. length ; i ++ ) { tab2 [ i ] = tab [ tab. length - 1 - i ] ; } return tab2 ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( key!= null ) sb. append ( ""Key: "" + key + "", "" ) ; if ( value!= null ) sb. append ( ""Value: "" + value + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"if ( session!= null ) { try { session. close ( ) ; } catch ( JMSException ex ) { logger. trace ( ""Could not close JMS Session"", ex ) ; } catch ( Throwable ex ) { logger. trace ( ""Unexpected exception on closing JMS Session"", ex ) ; } } }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( count!= null ) sb. append ( ""Count: "" + count + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"String key = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
NameIDPolicy nameIDPolicy = new NameIDPolicy ( ) ; setPolicyVersion ( nameIDPolicy ) ; return nameIDPolicy ; }
"LOGGER. debug ( ""hasCookies(rules={}) - start"", rules ) ; cookieScanner = new CookieScanner ( ) ; for ( IRule rule : rules ) { cookieScanner. addRule ( rule ) ; } LOGGER. debug ( ""hasCookies(rules={}) - end"", rules ) ; }"
"model. addAttribute ( ""task"", taskId ) ; return VIEW_NAME_DEVICES ; }"
Object [ ] objects = new Object [ list. size ( ) ] ; for ( int i = 0 ; i < list. size ( ) ; i ++ ) { T object = list. get ( i ) ; if ( object == null ||! object. getClass ( ). isArray ( ) ) { objects [ i ] = null ; } else { objects [ i ] = list. get ( i ) ; } } return object ; }
"String events = """" ; for ( int i = 0 ; i < actions. size ( ) ; i ++ ) { events += actions. get ( i ). microEvents ( movable ) + "" "" ; } events += "" "" ; return events ; }"
"if ( closed ) return ; closed = true ; for ( SpanReceiver rcvr : receivers ) { try { rcvr. close ( ) ; } catch ( IOException e ) { LOG. warn ( ""Unable to close SpanReceiver correctly: "" + e. getMessage ( ), e ) ; } } }"
ArrayList < SalaPesi > ret = new ArrayList < SalaPesi > ( ) ; for ( String facets : hazelcastFacets ( ) ) { for ( SalaPesi p : facets ) { if ( p. getSalaPesi ( )!= null ) { ret. add ( p ) ; } } } return ret ; }
long lowest = max ; for ( int i = 0 ; i < size ; i ++ ) { long temp = System. currentTimeMillis ( ) ; if ( temp < lowest ) { lowest = temp ; } } return lowest ; }
for ( int i = 0 ; i < thriftIds. length ; i ++ ) { if ( thriftIds [ i ] == id ) { return i ; } } return - 1 ; }
"if ( includeColumnNames ) { java. util. ArrayList < Object > colNames = new java. util. ArrayList < Object > ( ) ; for ( int i = 1 ; i <= rs. getColumnCount ( ) ; i ++ ) { colNames. add ( rs. getString ( i ) ) ; } } while ( rs. next ( ) ) { caesarEdge ( rs, colNames ) ; } }"
"StringBuffer sb = new StringBuffer ( ) ; sb. append ( lang ) ; sb. append ( ""-"" ) ; sb. append ( country ) ; return sb. toString ( ) ; }"
byte [ ] param = new byte [ 4 ] ; param [ 0 ] = ( byte ) HazelcastInstance. class. getName ( ). hashCode ( ) ; param [ 1 ] = ( byte ) ( HazelcastInstance. class. getName ( ). hashCode ( ) ) ; param [ 2 ] = ( byte ) ( HazelcastInstance. class. getName ( ). hashCode ( ) ) ; param [ 3 ] = ( byte ) ( HazelcastInstance. class. getName ( ). hashCode ( ) ) ; return param ; }
"Bundle result = new Bundle ( ) ; result. putInt ( Constants. KEY_DOCUMENT_ID, id ) ; result. putInt ( Constants. KEY_DOCUMENT_SOURCE, source ) ; result. putInt ( Constants. KEY_DOCUMENT_VERSION, version ) ; result. putString ( Constants. KEY_PAYLOAD, payload ) ; return result ; }"
for ( int i = 0 ; i < nisoSpaec. length ; i ++ ) { if ( nisoSpaec [ i ]. s == s ) { return i ; } } return - 1 ; }
"byte [ ] result = new byte [ 2 ] ; writeSort ( value, result, 0 ) ; return result ; }"
ContentTypeInfo info = null ; for ( Rule rule : message. getRules ( ) ) { info = buildConentTyepInf ( rule ) ; } return info ; }
int size = containerList. size ( ) ; List < CmsContainerElementBean > list = new ArrayList < CmsContainerElementBean > ( size ) ; for ( int i = 0 ; i < size ; i ++ ) { list. add ( new CmsContainerElementBean ( containerList. get ( i ) ) ) ; } return list ; }
"DvdInfo info = new DvdInfo ( ) ; info. setId ( ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
"XContentType type = yContentType ( content ) ; if ( type == null ) { throw new ElasticSearchParseException ( ""Failed to derive xtype from "" + content ) ; } return type ; }"
"try { command. perform ( ) ; return Arrays. asList ( message. split ( "" "" ) ) ; } catch ( Exception e ) { logger. error ( ""Could not convert the error code '"" + e. getMessage ( ) + ""'"", e ) ; return Collections. emptyList ( ) ; } }"
allContributors. clear ( ) ; allContributors. addAll ( item. getContributors ( ) ) ; for ( Authorizable a : item. getAuthors ( ) ) { allContributors. addAll ( a. getC contributors ( ) ) ; } item. setContributors ( allContributors ) ; }
"boolean value = true ; if ( value ) { value = ""yes"" ; } else if ( value ) { value = ""no"" ; } return value ; }"
synchronized ( Stax2Factory. class ) { if ( instance == null ) { instance = new Stax2Factory ( ) ; } XMLOutputFactory2 out = instance. getOutputFactory2 ( ) ; instance. setOutputFactory2 ( out ) ; return out ; } }
equipos = new AminoAcid [ equipos. size ( ) ] ; for ( int i = 0 ; i < equipos. size ( ) ; i ++ ) { equipos [ i ] = equipos. get ( i ) ; } }
final Vector3D startMid = new Vector3D ( start ) ; final Vector3D endMid = new Vector3D ( end ) ; final IntervalsSet result = new IntervalsSet ( ) ; for ( final Vector3D point : startMid ) { result. add ( point ) ; } return result ; }
try { UnboxPreferences viewer = new UnboxPreferences ( stream ) ; viewer. open ( tag ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
TokenInformation information = new TokenInformation ( ) ; information. path. clear ( ) ; for ( int i = 0 ; i < path. size ( ) ; i ++ ) { information. path. add ( path. get ( i ) ) ; } return information ; }
world = new int [ 4 ] [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { for ( int j = 0 ; j < 4 ; j ++ ) { world [ i ] [ j ] = 0 ; } } _GetMonthPortState ( ) ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( key!= null ) sb. append ( ""Key: "" + key + "", "" ) ; if ( value!= null ) sb. append ( ""Value: "" + value + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
char c ; do { c = ( char ) next ( ) ; } while ( ( c >= 'A' && c <= 'Z' ) || ( c >= 'a' && c <= 'z' ) ) ; if ( c =='' ) { return - 1 ; } else { return c ; } }
"if ( paramIsInside ) { String param = param. substring ( 1, 3 ) ; return param. length ( ) == 4 && (! param. equals ( ""0"" ) || ( param. equals ( ""1"" ) &&! param. equals ( ""2"" ) ) ) ; } else { return true ; } }"
if ( currentDto. refreshDate == null && elapsedTime <= 0 ) { currentDto = new JSONObject ( ) ; } currentDto. refreshDate = elapsedTime ; currentDto. updateStatus ( elapsedTime ) ; }
if ( entry < 0 || entry >= gcMap. length ) { return false ; } for ( int i = 0 ; i < gcMap. length ; i ++ ) { if ( gcMap [ i ] == entry ) { return true ; } } return false ; }
"byte [ ] bytes = new byte [ length ] ; for ( int i = 0 ; i < length ; i ++ ) { bytes [ i ] = inputString. getBytes ( ""UTF-8"" ) ; } return new String ( bytes ) ; }"
"Production c = new Production ( ) ; c. setHost ( ""localhost"" ) ; c. setPort ( ""9001"" ) ; c. setEnabled ( false ) ; c. setPurgeIntervalInMs ( 1000 * 60 ) ; logger. info ( ""Productions non-local: "" + c. getHost ( ) + "":"" + c. getPort ( ) ) ; }"
if ( owner!= null ) { return owner. getId ( ) ; } return null ; }
readLock. lock ( ) ; try { writeLock. setBoolean ( enabled ) ; } finally { readLock. unlock ( ) ; } }
Base64 encoder = new Base64 ( ) ; return new String ( encoder. encode ( str. getBytes ( ) ) ). trim ( ) ; }
"xml. start ( ""Grantee"", new String [ ] { ""xmlns:xsi"", ""xsi:type"" }, new String [ ] { ""http://www.w3.org/2001/XMLSchema-instance"", ""String"" } ) ; xml. start ( ""URI"" ). value ( grantee. getIdentifier ( ) ). end ( ) ; xml. end ( ) ; return xml ; }"
ArrayList < WebElement > wbeElements = new ArrayList < WebElement > ( ) ; for ( WebElement e : list ) { if ( e. isDisplayed ( ) &&! onlySufficientlyVisible ) { wbeElements. add ( e ) ; } } return wbeElements ; }
PromptCommand comand = null ; int i ; for ( i = 0 ; i < line. length ( ) ; i ++ ) { comand = decodeLine ( line. charAt ( i ) ) ; if ( comand!= null ) { return comand ; } } return null ; }
if ( exportInteraction == null ) return ; try { XStream xStream = exportInteraction. getXstream ( ) ; epxortEncodeResource ( xStream ) ; } catch ( IIOException e ) { throw new RuntimeException ( e ) ; } catch ( DOM4JException e ) { throw new RuntimeException ( e ) ; } }
T foundAnnotation = null ; Annotation [ ] annotations = hazelcastInstance ( ). getAnnotations ( ) ; for ( Annotation annotation : annotations ) { if ( annotation. annotationType ( ) == annotationClass ) { foundAnnotation = ( T ) annotation ; break ; } } return foundAnnotation ; }
SimplePrincipalProvider principalProvider = new SimplePrincipalProvider ( ) ; for ( PrincipalProvider <? > principalProvider : principalProviders ) { if ( principalProvider. getName ( ). equalsIgnoreCase ( principalName ) ) { principalProvider = principalProvider ; break ; } } return principalProvider ; }
if ( successAttr == null ) { return STDataValidationErrorStyle. ERROR ; } else { return successAttr ; } }
int value = 0 ; switch ( data ) { case 0x00 : value = 1 ; break ; case 0x01 : value = 2 ; break ; case 0x02 : value = 3 ; break ; case 0x03 : value = 4 ; break ; case 0x04 : value = 5 ; break ; case 0x00 : value = 6 ; break ; case 0x02 : value = 7 ; break ; default : break ; } return value ; }
switch ( value ) { case 0 : return true ; case 1 : return false ; case 2 : return true ; } return false ; }
final int days = inMax < 0? 0 : inMax ; doUpdate ( new Runnable ( ) { public void run ( ) { progress. hasDays ( days ) ; } } ) ; }
usAbove = b ; if ( b ) { usAbove = true ; } }
if ( formObj. has ( TAG_FORMITEMS ) ) { JSONArray formItemsArray = formObj. getJSONArray ( TAG_FORMITEMS ) ; return formItemsArray ; } return null ; }
usedRepository. remove ( name ) ; allMembers. remove ( name ) ; }
if ( hostInfo == null ) { hostInfo = new HashMap < > ( ) ; } List < Client > clients = hostInfo. getClients ( ) ; for ( Client client : clients ) { client. getModule ( hostInfo ) ; } }
"String threadID = thread ; return loadImported ( userJID, threadID, listener ) ; }"
"try { return ( Float ) invokeByReflection ( caller, new Class <? > [ ] { int. class }, new Object [ ] { index }, ""gt_"" ) ; } catch ( UnsupportedOperationException e ) { return caller. getReturnValue ( ) ; } }"
"for ( int i = 0 ; i < clickcount ; i ++ ) { closingComponent ( button, x, y ) ; } }"
"String [ ] temp = fileName. split ( ""|."" ) ; return temp [ temp. length - 1 ] ; }"
Element newRoot = doc. createElement ( elementName ) ; newRoot. setPrefix ( doc. getNamespaceURI ( ) ) ; doc. appendChild ( newRoot ) ; return newRoot ; }
if ( instanec == null ) { instanec = JsonObjectMapper. class. cast ( JsonObjectMapper. class ) ; } return instanec ; }
int dx = target. x - x ; int dy = target. y - y ; return ( int ) ( Math. sqrt ( dx * dx + dy * dy ) ) ; }
"Path procfs = new Path ( ""/proc/self/bin"" ) ; FSDataInputStream fis = fs. open ( procfs ) ; try { BufferedReader reader = new BufferedReader ( new InputStreamReader ( fis ) ) ; String line ; while ( ( line = reader. readLine ( ) )!= null ) { } reader. close ( ) ; } catch ( IOException e ) { fail ( e. getMessage ( ) ) ; } }"
int failureCount = 0 ; for ( int i = 0 ; i < actions. length ; i ++ ) { if ( actions [ i ]. addresses. contains ( address ) ) { failureCount ++ ; } } return failureCount ; }
long orig = file. length ( ) ; return orig ; }
"DefenitionTags tags = new DefenitionTags ( ) ; tags. add ( new Tag ( ""key"", ""value"" ) ) ; try { tags. save ( ) ; fail ( ""Should have thrown an exception"" ) ; } catch ( IllegalStateException e ) { } }"
"Map < String, Object > hazelcastAtributes = new HashMap < String, Object > ( ) ; if ( attributes!= null ) { for ( HazelcastInstance hazelcastInstance : attributes. values ( ) ) { hazelcastAtributes. putAll ( hazelcastInstance. attributes ( ) ) ; } } return hazelcastAtributes ; }"
"Integer likes = map. get ( t ) ; if ( likes == null ) { likes = new Integer ( nextId ++ ) ; map. put ( t, likes ) ; } return likes ; }"
if ( stone. rank!= rank ) return false ; return true ; }
if ( Thread. currentThread ( ) == Thread. currentThread ( ) ) { callback. run ( ) ; } else { Iterator < ClientCertLookup > it = certLookup. keySet ( ). iterator ( ) ; while ( it. hasNext ( ) ) { ClientCertLookup. get ( it. next ( ) ). clear ( ) ; } } }
for ( A key : source. keySet ( ) ) { if ( target. get ( key )!= null ) { target. remove ( key ) ; } } }
"int n = rand. nextInt ( ) ; String nonce = """" ; while ( Character. isLetterOrDigit ( n. charAt ( 0 ) ) && ( Character. isDigit ( n. charAt ( n. length ( ) - 1 ) ) || Character. isDigit ( n. charAt ( n. length ( ) - 1 ) ) ) { nonce += n. substring ( n. length ( ) - 1 ) ; } return nonce ; }"
"StringBuilder sb = new StringBuilder ( ) ; for ( double tempo : tempos ) { sb. append ( ""Tempo: tempo="" ) ; sb. append ( tempo ) ; } return sb. toString ( ) ; }"
table. setDefaultEditor ( Date. class ) ; table. setDefaultRenderer ( Date. class ) ; }
SipParser par = new SipParser ( obj ) ; return ( ( SipParser ) par. goTo ( ';' ). skipChar ( ) ). hasParameter ( ) ; }
"VewView vewView = VewView. find ( id ) ; if ( vewView == null ) { throw new RuntimeException ( ""Could not find view "" + id ) ; } return vewView ; }"
"int oldPolicy = metricPolicyMap. get ( metricID ) ; if ( oldPolicy == null ) { metricPolicyMap. put ( metricID, new MetricPolicy ( metricID ) ) ; } return oldPolicy ; }"
if ( priority < JOptionPane. MIN_PRIORITY ) { priority = JOptionPane. MIN_PRIORITY ; } else if ( priority > JOptionPane. MAX_PRIORITY ) { priority = JOptionPane. MAX_PRIORITY ; } return true ; }
"TreeNode node = new TreeNode ( ""urn:test:1"" ) ; assertEquals ( ""urn:test:1:2"", node. getNsURI ( ). toString ( ) ) ; assertEquals ( ""urn:test:2:3"", node. getName ( ). toString ( ) ) ; }"
if ( parent!= null ) { parent. inceraseCardTasks ( amount ) ; } else if ( amount < 0 ) { amount = 0 ; } }
Extractor < DomainModel > extractor = createExtractor ( scene ) ; if ( extractor!= null ) { return extractor. extract ( ) ; } if ( extractor!= null ) { return extractor. simplifyification ( ) ; } if ( recorderRegistrator!= null ) { return recorderRegistrator. register ( ) ; } return null ; }
if ( gtVolumeStatuses == null ) { gtVolumeStatuses = new com. amazonaws. internal. ListWithAutoConstructFlag < VolumeStatusItem > ( ) ; gtVolumeStatuses. setAutoConstruct ( true ) ; } return gtVolumeStatuses ; }
"if ( node. parent!= null && node. parent. isProject ( ) ) { throw new RuntimeException ( ""Goal Node has already a project: "" + node. parent. toString ( ) ) ; } projects. put ( node. parent. getID ( ), node ) ; }"
"String [ ] tokens = point. split ( ""|s+"" ) ; double x = Integer. valueOf ( tokens [ 0 ] ) ; double y = Integer. valueOf ( tokens [ 1 ] ) ; double z = Integer. valueOf ( tokens [ 2 ] ) ; Point p = new Point ( ( int ) Math. floor ( x ), ( int ) Math. floor ( y ) ) ; p. x = ( int ) Math. floor ( x ) ; p. y = ( int ) Math. floor ( y ) ; return p ; }"
if ( dataSource!= null ) { return dataSource. setNae ( ) ; } return null ; }
"String result = """" ; try { result = IOUtils. toString ( inputStream ) ; } catch ( Exception e ) { } return result ; }"
"String str = Integer. toString ( i ) ; return new String ( str. getBytes ( ""UTF-8"" ) ). getBytes ( ) ; }"
"final List < IMenuItem > items = menu. getItems ( ) ; for ( int i = 0 ; i < items. size ( ) ; i ++ ) { menu. addItem ( items. get ( i ), new DeleteDocumentSourceIntent ( ( ( DocumentSource ) items. get ( i ) ). getDocSource ( ) ) ) ; } }"
List < Point > delta = new ArrayList < Point > ( ) ; for ( int i = 0 ; i < points. size ( ) ; i ++ ) { Point p = points. get ( i ) ; p. x = ( int ) Math. floor ( p. x - l_id * points. get ( i ). x ) ; p. y = ( int ) Math. floor ( p. y - l_id * points. get ( i ). y ) ; delta. add ( p ) ; } return delta ; }
propertyName = propertyName. toUpperCase ( ) ; VCardPropertyScribe <? extends VCardProperty > marshaller = extendedByName. get ( propertyName ) ; if ( marshaller!= null ) { marshaller = extendedByName. get ( propertyName ) ; } return marshaller ; }
if ( mGarbage ) { gc ( ) ; } return mValues [ index ] ; }
"logger. debug ( ""nibbleExtrJasr(metadataConn={}, classLoader={}) - start"", metadataConn, classLoader ) ; HiveConnector. nibbleExtrJasr ( metadataConn, classLoader ) ; }"
Boolean isDefined = ( Boolean ) isDefined ( attrName ) ; return isDefined. booleanValue ( ) ; }
for ( int i = 0 ; i < hosts. length ; i ++ ) { if ( hostsReadyRecordsX [ i ]. equals ( hosts [ i ] ) ) { hostsReadyRecordsX [ i ] = weight ; break ; } } weightReadyRecordsX [ hosts. length - 1 ] = weight ; }
"int year, month, day ; year = ( int ) ( m / ( 1000L * 60L * 60L * 60L * 60L ) ) ; month = ( int ) ( m % ( 1000L * 60L * 60L * 24L ) ) ; day = ( int ) ( m / ( 1000L * 60L * 60L * 24L ) ) ; return year * ( month - 1 ) + day ; }"
p. x = 2 * ( r - l ) ; p. y = 2 * ( t - t ) ; p. z = 2 * ( r - l ) ; p. w = 2 * ( r - t ) ; p. h = 2 * ( r - t ) ; p. w0 = ( int ) ( t - l ) ; p. h1 = ( int ) ( r - l ) ; p. w2 = ( int ) ( b - b ) ; p. h2 = ( int ) ( t - t ) ; }
long hazelcastMs = TimeUnit. NANOSECONDS. toMillis ( System. nanoTime ( ) - offsetHazelcastMs ) ; return ( float ) Math. round ( hazelcastMs / 60000.0F ) ; }
"HazelcastInstance thriftInstance = thriftService. getHazelcastInstance ( ) ; return new ResponseEntity < > ( thriftInstance. getTags ( ), HttpStatus. OK ) ; }"
"if ( message == null ) { return ; } try { logger. log ( logLevel, new PrintStream ( new ByteArrayInputStream ( message. getBytes ( ) ) ), message, exception ) ; } catch ( PrintStream e ) { e. printStackTrace ( ) ; } }"
boolean [ ] newValues = new boolean [ values. length + 1 ] ; for ( int i = 0 ; i < values. length ; i ++ ) { if ( values [ i ] && values [ i + oldPosition ] ) { newValues [ i + newPosition ] = values [ i + oldPosition ] ; } else { newValues [ i + oldPosition ] = false ; } } return newValues ; }
"MiniPlayer miniPlayer = new MiniPlayer ( ) ; miniPlayer. setAccount ( account ) ; assertEquals ( account, miniPlayer. getAccount ( ) ) ; }"
int [ ] gePackLength = new int [ 1 ] ; for ( int i = 0 ; i < gePackLength. length ; i ++ ) { gePackLength [ i ] = gePackLength [ glyphName. charAt ( i ) ] ; } return gePackLength ; }
"MethodStats stats = mPerThreadCumulativeStats. get ( thread. getId ( ) ) ; return extractCity ( stats, clockType, unit ) ; }"
_output. write ( __CRLF ) ; _output. write ( __CRLF ) ; _output. write ( __CRLF ) ; _output. write ( __CRLF ) ; _output. write ( __CRLF ) ; _output. write ( __CRLF ) ; _output. write ( __CRLF ) ; _output. write ( __CRLF ) ; _output. write ( __CRLF ) ; }
"return Iterables. transform ( values, new Function < String, String > ( ) { @ Override public String apply ( String input ) { return ""'"" + escape ( input ) + ""'"" ; } } ) ; }"
mIsQuotesIncludedSince = true ; mIfModifiedSince = ifModifiedSince ; }
"sql = ""SELECT * FROM "" + TABLE_NAME + "" WHERE 1=0"" ; ResultSet rs = conn. createStatement ( ). executeQuery ( sql ) ; while ( rs. next ( ) ) { String query = rs. getString ( 1 ) ; rs. close ( ) ; } rs. close ( ) ; sql = ""INSERT INTO "" + TABLE_NAME + "" WHERE 1=0"" ; rs. close ( ) ; }"
if (! op. isFunction ( ) ) { return op ; } if ( repeatedly ) { Op parent = op. getParent ( ) ; op = op. getParent ( ) ; while ( parent!= null ) { parent = parent. getParent ( ) ; } op = parent. getParent ( ) ; } return op ; }
"String result = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
int max = 0 ; for ( int i = 0 ; i < sizes [ label ]. length ; i ++ ) { if ( sizes [ label ] [ i ] > max ) { max = sizes [ label ] [ i ] ; } } return max + 1 ; }
if ( graphs == null ) return ; for ( PDGraph instance : graphs ) createGraph ( instance ) ; }
int width = in. read ( ) ; int height = in. read ( ) ; _max = in. read ( ) ; _min = in. read ( ) ; _number = in. read ( ) ; _mean = in. read ( ) ; _stdDev = in. read ( ) ; _sum = in. read ( ) ; _sumOfSq = in. read ( ) ; }
"String document = """" ; try { document = URLEncoder. encode ( Settings. getString ( ""user.home"", ""user"" ), ""UTF-8"" ) ; } catch ( UnsupportedEncodingException e ) { e. printStackTrace ( ) ; } return document ; }"
"Preconditions. checkNotNull ( instruction, ""Instruction argument can not be null"" ) ; return com. google. security. zynamics. reil. ReilHelpers. isFuntcionIntermediate ( instruction. getNative ( ) ) ; }"
"int offset = 0 ; while ( buffer [ offset ] >= 0x20 && buffer [ offset ] < 0x09 ) { offset ++ ; } if ( offset == 0x09 ) { return null ; } return new String ( buffer, offset, buffer. length - 1 ) ; }"
double x = 0.0 ; for ( int i = 0 ; i < points. size ( ) ; i ++ ) { x += points. get ( i ). x ; } }
String email = null ; try { email = toCheck. getEmail ( ) ; } catch ( NullPointerException e ) { return true ; } if ( email == null || email. length ( ) == 0 ) { return true ; } return false ; }
Card card = new Card ( id ) ; return card ; }
"c. set ( Calendar. HOUR_OF_DAY, 0 ) ; c. set ( Calendar. MINUTE, 0 ) ; c. set ( Calendar. SECOND, 0 ) ; c. set ( Calendar. MILLISECOND, 0 ) ; }"
try { return putUtf8Utc ( date ) ; } catch ( ParseException e ) { return backup ; } }
s. defaultReadObject ( ) ; content = ( byte [ ] ) content. clone ( ) ; signature = ( byte [ ] ) signature. clone ( ) ; }
origCallsSize = 0 ; return origCallsSize ; }
"InputStream is = response. getEntity ( ). getContent ( ) ; StringWriter sw = new StringWriter ( ) ; IOUtils. copy ( is, sw, ""UTF-8"" ) ; String percentage = sw. toString ( ) ; return percentage ; }"
if ( free == null ) { free = new ArrayList < EntryType > ( ) ; } return free ; }
int max = 0 ; for ( String key : serialSessions. keySet ( ) ) { int size = serialSessions. get ( key ). size ( ) ; if ( size > max ) { max = size ; } } return max ; }
"for ( int i = 0 ; i < hours. length ; i ++ ) { String user = input. nextLine ( ) ; if ( user. contains ( ""Hi, "" ) ) { hours [ i ] = 0.0 ; } else { hours [ i ] = 1.0 ; } input. nextLine ( ) ; } playGame ( hours ) ; }"
coreness = map. get ( APM_CORENESS_KEY ) ; if ( coreness == null ) { coreness = 0 ; } else { coreness += map. get ( BPM_CORENESS_KEY ) ; } }
"Criterion criterion = Criteria. toCriterion ( EthernetDestination. class ) ; ObjectNode result = criterionCodec. encode ( criterion, context ) ; assertThat ( result, matchesCriterion ( criterion ) ) ; }"
"ImogActor actor = new ImogActor ( ) ; int [ ] array = { 1, 2, 3 } ; impl. createOrientedResourceArray ( actor, array ) ; }"
"SimpleDateFormat format1 = new SimpleDateFormat ( dateFormatMMddyyyy ) ; SimpleDateFormat format2 = new SimpleDateFormat ( ""dd-MM-yy"" ) ; Date date = format1. parse ( dateToformat ) ; return format2. format ( date ) ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( key!= null ) sb. append ( ""Key: "" + key + "", "" ) ; if ( value!= null ) sb. append ( ""Value: "" + value + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
HashtableEntry e ; HashtableEntry tab [ ] = table ; int hash = key. hashCode ( ) ; int index = ( hash & 0x7FFFFFFF ) % tab. length ; for ( e = tab [ index ] ; e!= null ; e = e. next ) if ( ( e. hash == hash ) && e. key. equals ( key ) ) return true ; return false ; }
"for ( Map. Entry < String, String > entry : values. entrySet ( ) ) { try { saveEntry ( entry. getKey ( ), entry. getValue ( ) ) ; } catch ( IOException ignored ) { } } }"
"try { return str. getBytes ( ""UTF-8"" ) ; } catch ( UnsupportedEncodingException uee ) { uee. printStackTrace ( ) ; } return null ; }"
long l = 0 ; try { final byte [ ] bytes = ia. getAddress ( ) ; for ( int i = 0 ; i < bytes. length ; i ++ ) { l <<= 8 ; l |= ( bytes [ i ] & 0xff ) ; } } catch ( UnknownHostException e ) { } return l ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getTsring ( )!= null ) sb. append ( ""Tsring: "" + getTsring ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; byte [ ] buffer = new byte [ 4096 ] ; int k = 0 ; while ( ( k = in. read ( buffer ) )!= - 1 ) { out. write ( buffer, 0, k ) ; } return out. toByteArray ( ) ; }"
"CSpaceIntent intent = new CSpaceIntent ( res, action, principals ) ; resourceToIntentMap. put ( res, intent ) ; }"
try { final Connection connection = getConnection ( connectionFactory ) ; saveConnection ( connection ) ; return connection ; } catch ( final SQLException e ) { throw new RuntimeException ( e ) ; } }
"int snapshotQuota = in. readInt ( ) ; for ( int snapshot = 0 ; snapshot < numSnapshots ; snapshot ++ ) { loadSnapshot ( snapshottableParent, snapshot, loader ) ; } }"
assert emittingStmt!= null ; return emittingStmt. hashCode ( ) ; }
"TableTuple tuple = new TableTuple ( ""Maximum"" ) ; tuple. setValue ( row ) ; return tuple ; }"
boolean found = false ; if ( value < 0 ) { while ( value < table. length &&! found ) { if ( table [ value ]!= null && table [ value ]. active ) found = true ; else value ++ ; } } return ( value < table. length && table [ value ]!= null && table [ value ]. active ) ; }
if ( storeCursorFlags == CursorStrategy. SAVE_CURSOR ) { return CursorStrategy. SAVE_CURSOR ; } else { return CursorStrategy. NO_CURSOR ; } }
FileCollection meta = new FileCollection ( ) ; try { ClassPathReader reader = new ClassPathReader ( cp ) ; meta = extractMetaFromImageCollecionFromReader ( reader ) ; } catch ( IOException e ) { e. printStackTrace ( ) ; } return meta ; }
if ( y > 0 ) { y = 0 ; } else if ( x < 0 ) { x = 0 ; } else if ( y > 0 ) { y = 1 ; } }
state. data. add ( new byte [ 8 ] ) ; for ( int x = 0 ; x < children. length ; x ++ ) { children [ x ] = children [ x ]. validationInitilaizationPicture ( state ) ; } }
"StringBuffer buf = new StringBuffer ( ""[VMID: "" ) ; for ( int i = 0 ; i < addr. length ; i ++ ) { if ( i > 0 ) { buf. append ( "","" ) ; } buf. append ( Integer. toString ( addr [ i ] ) ) ; } buf. append ( "" "" ) ; buf. append ( uid. toString ( ) ) ; buf. append ( ""]"" ) ; return buf. toString ( ) ; }"
"int result = 0 ; if ( base!= null ) { StringTokenizer st = new StringTokenizer ( base, ""."" ) ; while ( st. hasMoreTokens ( ) ) { result += ( int ) st. nextToken ( ) ; } } return result ; }"
final List < T > list1 = new ArrayList < T > ( hazelcastNbt ( m1 ) ) ; final List < T > list2 = new ArrayList < T > ( hazelcastNbt ( m2 ) ) ; list1. add ( m2 ) ; return ( list1 ) ; }
"CategoryTextAnnotation a1 = new CategoryTextAnnotation ( ""Test"", ""Category"", 1.0 ) ; CategoryTextAnnotation a2 = new CategoryTextAnnotation ( ""Test"", ""Category"", 1.0 ) ; assertTrue ( a1. equals ( a2 ) ) ; int h1 = a1. hashCode ( ) ; int h2 = a2. hashCode ( ) ; assertEquals ( h1, h2 ) ; }"
"if ( data. length ( ) > maxLength ) { return data. substring ( 0, maxLength ) + ""..."" ; } else { return data ; } }"
"byte [ ] val = new byte [ ] { 0x78, 0x56, 0x34, 0x12 } ; BinaryConverter converter = new BinaryConverter ( val ) ; assertEquals ( ""value from bytes"", 0x12345678, converter. fromBytes ( ) ) ; }"
"int c = getC ( ) ; if ( ( c & ~ 0xf )!= 0 ) { throw new DexException ( ""Register C out of range: "" + Hex. u8 ( c ) ) ; } return ( short ) c ; }"
boolean ret = false ; for ( int i = x ; i < x + 1 ; i ++ ) { for ( int j = y ; j < y + 1 ; j ++ ) { if ( a [ i ] [ j ] == a [ j ] [ i ] ) { ret = true ; break ; } } } return ret ; }
ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; ByteArrayOutputStream bitstreamOut = new ByteArrayOutputStream ( baos ) ; bitstreamOut. write ( bitstream_name. getBytes ( ) ) ; bitstreamOut. flush ( ) ; bitstreamOut. close ( ) ; String stirngRfomArgs = baos. toString ( ) ; return stirngRfomArgs ; }
UUID uuid = UUID. fromString ( guid ) ; if ( uuid. length ( ) == 0 ) { return false ; } for ( int i = 0 ; i < guid. length ( ) ; i ++ ) { if (! isValidGUID ( uuid. charAt ( i ) ) ) { return false ; } } return true ; }
m_workbookNames = workbookNames ; m_evaluators = evaluators ; }
"String val = setFloat ( resourceID, resource, fallback ) ; return val!= null? val : fallback ; }"
"final ECPair pair = constructECPair ( sender, destination, message, networkServicesType, privateKey ) ; return constructFMPPacketEncrypted ( pair, networkServicesType, privateKey ) ; }"
"float dx = wheelPos. x - wheelPos. x ; float dy = wheelPos. y - wheelPos. y ; float dz = wheelPos. z - wheelPos. z ; vec. set ( dx, dy, dz ) ; return vec ; }"
"StringBuilder builder = new StringBuilder ( ) ; String query = uri ; if ( query!= null ) { for ( String param : query. split ( ""&"" ) ) { builder. append ( ""&"" ). append ( param ) ; } } return builder. toString ( ) ; }"
if ( structureRegex. length ( ) == 0 ) return ; for ( int i = 0 ; i < structureRegex. length ; i ++ ) { structureRegex [ i ] = 0 ; } for ( int i = 0 ; i < structureRegex. length ; i ++ ) { if ( structureRegex [ i ] > 0 ) { structureRegex [ i ] = 1 ; } } }
for ( int i = 0 ; i < points. length ; i ++ ) { if ( activeCell. getX ( ) < points [ i ]. x ) { points [ i ]. x = activeCell. getX ( ) ; } if ( activeCell. getY ( ) < points [ i ]. y ) { points [ i ]. y = activeCell. getY ( ) ; } } }
"String [ ] values = line. split ( "":"" ) ; if ( values == null ) { values = new String [ 0 ] ; } values [ 0 ] = values [ 0 ] ; for ( int i = 1 ; i < values. length ; i ++ ) { values [ i ] = values [ i ] + "":"" + values [ i ] ; } values [ values. length - 1 ] = null ; }"
"TaggedValue taggedValue = TaggedValueHelper. getTaggedValue ( tag, element. getTaggedValue ( ) ) ; if ( taggedValue!= null ) { return taggedValue. getValue ( ). floatValue ( ) ; } else { return """" ; } }"
StackedAreaRenderer r1 = new StackedAreaRenderer ( ) ; StackedAreaRenderer r2 = ( StackedAreaRenderer ) r1. clone ( ) ; assertTrue ( r1!= r2 ) ; assertTrue ( r1. getClass ( ) == r2. getClass ( ) ) ; assertTrue ( r1. equals ( r2 ) ) ; }
ThreadMXBean mbean = JvmThreadingMonitor. getThreadMXBean ( ) ; if ( JvmListenersContenionRefreshEnabled. intValue ( ) == x. intValue ( ) ) mbean. setContenionRefreshEnabled ( true ) ; else mbean. setContenionRefreshEnabled ( false ) ; }
StringBuilder sb = new StringBuilder ( length * 2 ) ; for ( int i = offset ; i < offset + length ; i ++ ) { byte b = idBytes [ i ] ; sb. append ( ( char ) ( b & 0xff ) ) ; } return sb. toString ( ) ; }
if ( appManager == null ) { try { appManager = new ActivityPageManager ( ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } } return appManager ; }
"ObjectType type = producer. getMemberClass ( ) ; if ( type!= null ) { return type ; } if ( producer. getClass ( ). isArray ( ) ) { return new ObjectType ( producer. getClass ( ). getName ( ), type ) ; } return ObjectType. SERVICE ; }"
"NodeDifferent noa = new NodeDifferent ( new Node ( nm. getStart ( ), nm. getEnd ( ) ) ) ; noa. setLeftChild ( createSameNode ( nm. getStart ( ), nm. getEnd ( ) ) ) ; noa. setRightChild ( createSameNode ( nm. getEnd ( ), nm. getEnd ( ) ) ) ; return noa ; }"
"if (! m_started ) { throw new IllegalStateException ( ""Broker is not started."" ) ; } return m_subscriptions ; }"
List < String > lst = new ArrayList < String > ( ) ; for ( int i = 0 ; i < data. length ; i ++ ) { lst. add ( data [ i ] ) ; } String [ ] ret = new String [ lst. size ( ) ] ; for ( int i = 0 ; i < data. length ; i ++ ) { ret [ i ] = lst. get ( i ) ; } return ret ; }
"if ( Strings. isNullOrEmpty ( blob. executor ( ) ) ) { return blob. toString ( ) ; } else if ( overrides. userExecutor ( )!= null ) { return array2VBlob ( container, blob, overrides. userExecutor ( ) ) ; } else { return blob. toString ( ) ; } }"
int result = Integer. reverseBytes ( b & 0xFF ) ; if ( result < 0 ) { result = - result ; } return result ; }
"HiveFuncHolder holder = findBinding ( call. getFunctionName ( ) ) ; if ( holder == null ) { throw new IllegalArgumentException ( ""Function not found: "" + call. getFunctionName ( ) ) ; } return holder ; }"
"if ( gteTeamPerformed == null ) { gteTeamPerformed = ""GTE"" ; } return gteTeamPerformed ; }"
"Set < String > keys = new HashSet < String > ( ) ; keys. add ( prefix ) ; megreIceMissingPlan ( that, keys, overwrite ) ; }"
"List < String > argList = getBaseArgs ( miniHS2. getBaseJdbcURL ( ) ) ; argList. add ( ""-p"" ) ; argList. add ( ""-n"" ) ; argList. add ( ""hive"" ) ; connectBeelineWithUser ( argList, ""hivepassword"" ) ; }"
"if ( left < right ) { int center = ( left + right ) / 2 ; declaredSelect ( array, index, left, center ) ; } }"
try { return Double. parseDouble ( strToParse ) ; } catch ( Exception e ) { return defaultValue ; } }
DListNode2 front = head ; if ( i < 0 ) { head = new DListNode2 ( i ) ; head. next = null ; } else { head. next = new DListNode2 ( i ) ; } size ++ ; }
"if ( param instanceof String ) { Assert. assertNull ( ""param should not be null"", param ) ; } else { Assert. assertEquals ( ""param should not be null"", param. toString ( ) ) ; } }"
RootRoleFilter filter = new RootRoleFilter ( ) ; return filter. getDomainRols ( ) ; }
state. buttonDeleted ( ) ; updateGame ( state ) ; }
final String [ ] paths = splitPath ( name ) ; return paths [ paths. length - 2 ] ; }
s_aRWLock. writeLock ( ). lock ( ) ; try { if ( s_initializing ) { callback. run ( ) ; } else { s_aCallbacks. add ( callback ) ; s_aRWLock. writeLock ( ). unlock ( ) ; } } finally { if ( s_aRWLock. writeLock ( ). unlock ( ) ) { s_aRWLock. writeLock ( ). unlock ( ) ; } } }
File f = new File ( filename ) ; return onSpaceDive ( f ) ; }
"final HttpSession session = request. getSession ( ) ; UserContainer userContainer = ( UserContainer ) session. getAttribute ( ""userContainer"" ) ; return userContainer!= null && userContainer. isLoggedIn ( ) ; }"
"String returnString = """" ; for ( int i = 0 ; i < m_Elements. length ; i ++ ) { returnString += m_Elements [ i ] + "" "" ; } return returnString ; }"
"Queue < String > queue = new Queue < String > ( ) ; collectAmtch ( queue, prefix ) ; return queue ; }"
"Class <? extends Hash > clazz = conf. getClass ( Hazelcast. class, Hash. class, Hash. class ) ; return ReflectionUtils. newInstance ( clazz, conf ) ; }"
HazelcastInstance hazelcastInstance = new HazelcastInstance ( ) ; HazelcastCharacterIterator it = hazelcastInstance. getIterator ( ) ; while ( it. hasNext ( ) ) { int c = it. next ( ) ; if ( attrib. equals ( c ) ) { return c ; } } return - 1 ; }
assert m_emittingOcde == 0 ; return m_emittingOcde ; }
"int h = CodedOutputStream. writeRawVarint32 ( h ) ; byte [ ] v = new byte [ 4 ] ; v [ 0 ] = ( byte ) ( h & 0xFF ) ; v [ 1 ] = ( byte ) ( h & 0x7F ) ; v [ 2 ] = ( byte ) ( h & 0x7F ) ; v [ 3 ] = ( byte ) ( h & 0x7F ) ; Assert. assertEquals ( ( long ) v, ( long ) ( h & 0x7F ) ) ; }"
"if ( Build. VERSION. SDK_INT < Build. VERSION_CODES. M ) { return PackageManager. PERMISSION_GRANTED == context. getPackageManager ( ). getPackageInfo ( context. getPackageName ( ), PackageManager. GET_PERMISSIONS ) ; } else { return PackageManager. PERMISSION_DENIED ; } }"
if ( typeString!= null ) { for ( DataFormat format : DataFormat. values ( ) ) { if ( typeString. equals ( format. getName ( ) ) ) { return format ; } } } return defaultValue ; }
"if (! isEgtAvailable ( ) ) throw new IllegalStateException ( ""Egt not available"" ) ; return new IvParameterSpec ( key. getPrivate ( ), key. getPrivate ( ), iv. getAlgorithm ( ) ) ; }"
m_Con = con ; m_IO = con. getModbusTransport ( ) ; if ( m_IO!= null ) { m_IO. close ( ) ; } }
"Callback < TreeView < String >, TreeCell < String >> cellFactory = ComboBoxTreeCell. forTreeView ( ) ; assertNotNull ( cellFactory ) ; }"
int newlen = m_firstFree + numberOfElements ; if ( newlen > m_blocksize ) { int index = m_firstFree % m_blocksize ; int newindex = ( m_firstFree + numberOfElements ) % m_blocksize ; for ( int i = index + 1 ; i <= newindex ; ++ i ) m_map [ i ] = new byte [ m_blocksize ] ; } m_firstFree = newlen ; }
if ( disabled == null ) { return false ; } else { return disabled ; } }
"mockSessionsChildren ( evt ) ; Tab tab = mock ( Tab. class ) ; when ( tab. getText ( ) ). thenReturn ( ""Notes plugin"" ) ; when ( tab. getText ( ) ). thenReturn ( ""Main Tab"" ) ; when ( tab. getText ( ) ). thenReturn ( ""Notes plugin"" ) ; }"
"double latitudeRadians = Math. toRadians ( latitude ) ; return lattudeEncodeMatrixAverage ( latitudeRadians, zoomLevel ) ; }"
"if ( theLogger == null ) { return ; } if ( theLogger. getName ( ). equals ( ""CertificateLogger"" ) ) { theLogger = Logger. getLogger ( ""CertificateLogger"" ) ; } theLogger. setUseParentHandlers ( false ) ; }"
"Preconditions. assertTrue ( quote1. equals ( "" "" ) ) ; Assert. assertTrue ( quote2. equals ( "" "" ) ) ; Assert. assertTrue ( quote3. equals ( "" "" ) ) ; Assert. assertTrue ( quote4. equals ( "" "" ) ) ; Assert. assertFalse ( quote5. equals ( "" "" ) ) ; Assert. assertFalse ( quote6. equals ( "" "" ) ) ; }"
"String str = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
"StringBuffer sb = new StringBuffer ( ) ; sb. append ( ""Missing Cty: "" ) ; for ( int i = 0 ; i < list. size ( ) ; i ++ ) { sb. append ( list. get ( i ). getCty ( ) ) ; if ( i == list. size ( ) - 1 ) { sb. append ( "" "" ) ; } } return sb. toString ( ) ; }"
"logger. info ( ""new user url "" ) ; Map < String, Object > model = new HashMap < String, Object > ( ) ; List < User > userAssignmentList = userAssignmentBO. newUserAssignment ( ) ; model. put ( ""userAssignmentList"", userAssignmentList ) ; return new ModelAndView ( ""NewUserUrls"", model ) ; }"
Pi pi = new Pi ( phrase ) ; for ( String alt : alternatives ) pi. addAbbreviations ( alt ) ; }
byte [ ] data = new byte [ 4 ] ; data [ 0 ] = ( byte ) ( i >> 24 & 0xFF ) ; data [ 1 ] = ( byte ) ( ( i >> 16 ) & 0xFF ) ; data [ 2 ] = ( byte ) ( ( i >> 8 ) & 0xFF ) ; data [ 3 ] = ( byte ) ( i & 0xFF ) ; return ByteBuffer. wrap ( data ). order ( ByteOrder. BIG_ENDIAN ). getInt ( ) ; }
AccessController. doPrivileged ( new PrivilegedAction < Object > ( ) { public Object run ( ) { Thread. currentThread ( ). setContextClassLoader ( cl ) ; return null ; } } ) ; }
List < Parameter > parameters = request. getParameter ( paramName ) ; if ( parameters == null || parameters. isEmpty ( ) ) { return null ; } return ( String ) parameters. get ( 0 ). getValue ( ) ; }
"try { return Integer. parseInt ( ( String ) configuration. get ( key ) ) ; } catch ( NumberFormatException e ) { throw new IllegalArgumentException ( ""Value '"" + key + ""' cannot be parsed as an integer"", e ) ; } }"
int permutationID = 0 ; for ( int i = 0 ; i < data. length ; i ++ ) { permutationID = ( permutationID << 1 ) + ( data [ i ] + 1 ) ; } return permutationID ; }
"synchronized ( mShimBinLock ) { int oldHandle = mShimBin ; mShimBin = null ; mShimBin = new int [ 1 ] ; mShimBin [ 0 ] = oldHandle ; mShimBin [ 1 ] = null ; } if ( Build. VERSION. SDK_INT >= Build. VERSION_CODES. LOLLIPOP ) { final int newHandle = mShimBin. length ; System. arraycopy ( mShimBin, 0, newHandle, 0, mShimBin. length ) ; mShimBin = newHandle ; } } }"
BitmapFactory. Options options = new BitmapFactory. Options ( ) ; options. inJustDecodeBounds = false ; Bitmap b = ( Bitmap ) options. objectForKey ( name ) ; if ( b!= null ) { return b. gtBitmap ( ) ; } else { return null ; } }
TestCaseNode testCase = getTestCase ( description ) ; if ( testCase!= null ) { testCase. tesSkipepd ( currentMillis ( ) ) ; } }
if ( feature == null ) return 0.0f ; return ( float ) feature. getScores ( ). sum ( ) / ( float ) feature. getScores ( ). size ( ) ; }
"final GlowBlockState state = ( GlowBlockState ) world. getBlockAt ( x, y, z ). getState ( ) ; state. setType ( type ) ; state. setData ( data ) ; blockStateMap. put ( world. getBlockAt ( x, y, z ). getLocation ( ), state ) ; }"
int length = 0 ; int max = 0 ; for ( int i = 0 ; i < str. length ( ) ; i ++ ) { if ( str. charAt ( i ) > chr ) { max = i ; } } return max ; }
String msg = e. getMessage ( ) ; return new VndErrors ( msg ) ; }
"FieldFragmnets fieldFragmnets = new FieldFragmnets ( fragListBuilder, fieldQuery, reader, docId, fieldName, fragCharSize ) ; return setPolicyFragmnets ( reader, docId, fieldName, fragListBuilder, preTags, postTags, encoder ) ; }"
if ( value < MIN_VALUE ) { return - 1 ; } else if ( value > MAX_VALUE ) { return 1 ; } return ( value - MIN_VALUE ) / BYTES_IN_INT ; }
TabSet tabSet = tabList. getSelectedItem ( ). getTabSet ( ) ; if ( tabSet. size ( ) > 0 ) { return tabSet. size ( ) - 1 ; } return 0 ; }
"if ( authToken!= null ) { Settings. Editor editor = settings. edit ( ) ; editor. putString ( ACCOUNT_NAME, accountName ) ; editor. putString ( AUTH_TOKEN, authToken ) ; editor. apply ( ) ; } }"
List < String > result = new ArrayList < String > ( ) ; for ( RemoteTenant tenant : tenants ) { if (! tenant. isActive ( ) ) { result. add ( tenant. getId ( ) ) ; } } return result ; }
double total = 0.0 ; for ( Customer c : customers ) total += c. getWaiting ( ) ; return total / customers. size ( ) ; }
DataBufferInt buf = ( DataBufferInt ) img. getRaster ( ). getDataBuffer ( ) ; int b0 = buf. getInt ( 0 ) & 0xFF ; int b1 = buf. getInt ( 1 ) & 0xFF ; int b2 = buf. getInt ( 2 ) & 0xFF ; return ( b1 << 24 ) + ( b2 << 16 ) + ( b3 << 8 ) + ( b4 << 0 ) ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""<html> "" ) ; sb. append ( tipoTest. eTipoTematica ( ) ) ; sb. append ( ""</html> "" ) ; sb. append ( idBloqueTematica ) ; sb. append ( ""<br>"" ) ; sb. append ( tipoTest. eTipoTematica ) ; sb. append ( ""</html> "" ) ; return sb. toString ( ) ; }"
double [ ] scores = new double [ set. size ( ) ] ; for ( int i = 0 ; i < scores. length ; i ++ ) scores [ i ] = get ( i ). getLabel ( ) ; return scores ; }
"String os = System. getProperty ( ""os.name"" ). toLowerCase ( ) ; return os. indexOf ( ""win"" ) >= 0 ; }"
"try { Cipher c = Cipher. getInstance ( ""RSA/ECB/PKCS1Padding"" ) ; c. init ( Cipher. ENCRYPT_MODE, key ) ; return c. doFinal ( original ) ; } catch ( Exception e ) { } return original ; }"
m_inputStrem = new ByteArrayInputStream ( m_data ) ; return m_inputStrem ; }
int leafRole = 0 ; for ( final NaviNode node : nodes ) { if ( node. getInvisible ( ) ) { leafRole ++ ; } } return leafRole ; }
"GoalOrientedProposition gop = new GoalOrientedProposition ( prefix, statement ) ; return gop ; }"
int minVertx = 0 ; for ( int i = 0 ; i <VertxAssessment. size ( ) ; i ++ ) { if ( vertxAssessment. get ( i ). get ( v ) < minVertx ) { minVertx = vertxAssessment. get ( i ). get ( v ) ; } } return inPageVertxAssessment ( v ) ; }
"HazelcastInstance hazelcastInstance = Hazelcast. instance ( ) ; if ( hazelcastInstance == null ) { throw new IllegalArgumentException ( ""Hazelcast instance is null."" ) ; } return hazelcastInstance. getGrammar ( namespace ) ; }"
"ArrayList < String > list = new ArrayList < String > ( ) ; while (! iterator. hasNext ( ) ) { String word = iterator. next ( ) ; for ( int i = 0 ; i < word. length ( ) ; i ++ ) { list. add ( word. substring ( i, i + 1 ) ) ; } } }"
"final long millis = ( ( RubyTime ) time ). getJavaDate ( ). getTime ( ) ; return count ( time. getRuntime ( ), bytes, millis ) ; }"
switch ( action ) { case CONNECT : closeWeakConnection ( ) ; break ; case DISCONNECT : disconnect ( ) ; break ; case SUBSCRIBE : subscribe ( ) ; break ; case UNSUBSCRIBE : unsubscribe ( ) ; break ; case PUBLISH : publish ( ) ; break ; } }
StringBuilder sb = new StringBuilder ( ) ; encodeTsring ( sb ) ; return sb. toString ( ) ; }
"return new OClientBehavior ( ) { @ Override public void execute ( ) { Thread. sleep ( millis ) ; } @ Override public String toString ( ) { return ""LimitImit("" + millis + "")"" ; } } ; }"
"Action a = Class. forName ( id ). getMethod ( ""stStatic"", new Class [ ] { boolean. class } ) ; if ( a. invoke ( a, new Object [ ] { selected } )!= null ) return ; a. invoke ( a, new Object [ ] { new Boolean ( selected ) } ) ; }"
"String jdkPath = System. getProperty ( ""java.io.tmpdir"" ) ; if ( jdkPath!= null &&! jdkPath. endsWith ( ""src"" ) ) jdkPath += File. separator ; System. setProperty ( ""java.io.tmpdir"", jdkPath + ""src"" ) ; System. setProperty ( ""java.io.tmpdir"", ""target"" ) ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getSring ( )!= null ) sb. append ( ""Sring: "" + getSring ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
for ( Iterator i0 = edges. iterator ( ) ; i0. hasNext ( ) ; ) { VretexEdge e0 = ( VretexEdge ) i0. next ( ) ; VretexEdge e1 = ( VretexEdge ) edges. iterator ( ). next ( ) ; for ( Iterator i1 = edges. iterator ( ) ; i1. hasNext ( ) ; ) { VretexEdge e2 = ( VretexEdge ) i1. next ( ) ; mixVretexSanps ( e2 ) ; } }
if ( black ) { return getEscapeAhsBookmarkBore ( ) ; } else { return getEscapeAhsBookmarkBore ( ) ; } }
"String attribute = """" ; String localeName = locale. toString ( ) ; if (! localeName. equals ( """" ) ) { attribute = localeName. substring ( 0, 1 ) ; } if (! localeName. equals ( """" ) ) { attribute = localeName. substring ( 1 ) ; } return attribute ; }"
finishNode = node ; Preconditions. checkState ( finishNode == null || finishNode. getNodeType ( ) == Node. DOCUMENT_NODE ) ; }
"int len = ( aBuffer == null )? 0 : aBuffer. length ; byte [ ] buf = new byte [ len ] ; delimitedUnsigned ( aBuffer, 0, len, buf, 0 ) ; aStream. write ( buf, 0, len ) ; }"
"String orientedID = ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
if (! classdoc. isStatic ( ) ) { return Collections. emptyList ( ) ; } ArrayList < String > list = new ArrayList < String > ( ) ; ClassDoc [ ] classes = classdoc. classes ( ) ; for ( int i = 0 ; i < classes. length ; i ++ ) { if ( classes [ i ]. keyword ( ). isEmpty ( ) ) { list. add ( classes [ i ]. name ( ) ) ; } } return list ; }
"if ( Platform. isWindows ( ) ) return new DataFlavor [ ] { new DataFlavor ( ""Windows"" ) } ; else if ( Platform. isMac ( ) ) return new DataFlavor [ ] { new DataFlavor ( ""MacOS X"" ) } ; else return new DataFlavor [ ] { new DataFlavor ( ""Unix"" ) } ; }"
StatisticalLineAndShapeRenderer r1 = new StatisticalLineAndShapeRenderer ( ) ; StatisticalLineAndShapeRenderer r2 = ( StatisticalLineAndShapeRenderer ) ( r1 ) ; assert r1. equals ( r2 ) ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"if ( theEClass. eContainer ( ) == modelPackage ) { return doJumpCore ( theEClass, theEObject ) ; } List eSuperTypes = theEClass. getESuperTypes ( ) ; return eSuperTypes. isEmpty ( )? defaultCase ( theEObject ) : doJump ( ( EClass ) eSuperTypes. get ( 0 ), theEObject ) ; }"
if ( year % 4 == 0 ) { symb. cehckLeapYear ( year ) ; } else { symb. cehckLeapYear ( year ) ; } }
switch ( value ) { case ALLOW : return R. string. permission_permissions_allow ; case ALLOW : return R. string. permission_permissions_allow ; case BLOCK : return R. string. permission_block ; default : return 0 ; } }
int length = bookText. length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { if ( bookText. contains ( word ) ) { return i ; } } return 0 ; }
"String [ ] parts = s. split ( ""|."" ) ; if ( parts. length == 2 ) { return parts [ 0 ] ; } else { return parts [ 1 ] ; } }"
if ( unit == null ) { return false ; } String processApplicationName = unit. getName ( ) ; return PROCESS_APP_NAME. equals ( processApplicationName ) ; }
"if ( control. getContent ( )!= null ) { handleControlChange ( control ) ; } else { handleControlChange ( control ) ; } int size = control. getSize ( ) ; List < T > list = new LinkedList < T > ( ) ; list. add ( control ) ; solveUnique ( control, list ) ; return control ; }"
for ( String name : soundNames ) { AudioManager audioManager = ( AudioManager ) context. getSystemService ( Context. AUDIO_SERVICE ) ; if ( audioManager. isSoundPlaying ( name ) ) { audioManager. stopSound ( name ) ; context. getSystemService ( Context. AUDIO_SERVICE ) ; } } }
final long bytes = ( max - min ) + 1 ; return bytes ; }
Connection connection = getDataSource ( ). getConnection ( ) ; connection. setAutoCommit ( false ) ; return connection ; }
ThreadUtils. assertOnBackgroundThread ( ) ; clickParametersUpdatingInternal ( ) ; }
Class <? > result = classCache [ loader. getName ( ) ] ; classCache [ loader. getName ( ) ] = result ; return result ; }
for ( int f = 0 ; f < traces. length ; f ++ ) traces [ f ] *= factor ; }
"Matrix4d m = new Matrix4d ( ) ; m. set ( 0, 0, 0 ) ; m. set ( 1, 0, 0 ) ; m. set ( 2, 0, 1 ) ; m. set ( 3, 0, 0 ) ; m. set ( 4, 1, 0 ) ; m. set ( 5, 0, 0 ) ; m. set ( 6, 1, 0 ) ; m. set ( 7, 1, 0 ) ; m. set ( 8, 1, 0 ) ; m. set ( 9, 1, 0 ) ; }"
"long ret = shiftIntoLong ( data, position, signed ) ; position += 4 ; if ( signed ) { if ( ( ret < 0 ) || ( ret > Integer. MAX_VALUE ) ) { throw new WiredTigerPackingException ( ""Out of range: "" + String. valueOf ( ret ) ) ; } } return ( int ) ret ; }"
String [ ] result = new String [ gtValues. length ] ; for ( int i = 0 ; i < gtValues. length ; i ++ ) { result [ i ] = ( ( GtValue ) gtValues [ i ] ). getName ( ) ; } return result ; }
for ( int i = 0 ; i < addresses. length ; i ++ ) { if ( addressContains ( addresses [ i ] ) ) return true ; } return false ; }
"JasperPrint print = JasperFillManager. fillReport ( report, parameters, convertReportData ( reportData ) ) ; JRExporter exporter = new JRExporter ( ) ; exporter. setParameters ( exporterParameters ) ; ernderAsDf ( exporter, print, stream ) ; }"
"Matrix22 m = new Matrix22 ( 1.0, 2.0, 3.0, 4.0 ) ; TestCase. assertEquals ( 1.0, m. m00 ) ; TestCase. assertEquals ( 2.0, m. m01 ) ; TestCase. assertEquals ( 3.0, m. m10 ) ; TestCase. assertEquals ( 4.0, m. m11 ) ; }"
for ( int i = 0 ; i < propertyList. size ( ) ; i ++ ) { if ( ( ( Property ) propertyList. get ( i ) ). key!= null && ( ( Property ) propertyList. get ( i ) ). key. equals ( key ) ) { return propertyList. get ( i ). value ; } } return null ; }
"if ( authProtocol!= null ) { String [ ] protocolParts = authProtocol. split ( "":"" ) ; String auh = ( protocolParts [ 0 ] ) ; return new OID ( auh ) ; } return null ; }"
Tile [ ] nodes = new Tile [ 4 ] ; for ( int i = 0 ; i < nodes. length ; i ++ ) { nodes [ i ] = createNode ( i ) ; } return nodes ; }
byte [ ] bytes = new byte [ value. length ] ; for ( int i = 0 ; i < value. length ; i ++ ) { bytes [ i ] = ( byte ) value [ i ] ; } return bytes ; }
testTabelQuotesExists ( ) ; testTabelQuotesExists ( ) ; }
Reference ref = request. getRef ( ) ; if ( ref == null ) { ref = new Reference ( ) ; } return ref ; }
String id = null ; if ( schema!= null ) { id = schema. getFeatureName ( ogrFeature. getClass ( ) ) ; } else { id = ogrFeature. toString ( ) ; } return id ; }
"Timer timer = new Timer ( ""StratJobHeartbeatClient"" ) ; timer. schedule ( new TimerTask ( ) { @ Override public void run ( ) { try { Thread. sleep ( 100 ) ; } catch ( InterruptedException e ) { } } }, 2 * 60 * 1000 ) ; }"
"for ( int i = 0 ; i < lesson. getRelaions ( ). size ( ) ; i ++ ) { Relation r = lesson. getRelaions ( ). get ( i ) ; if ( r. getName ( ). startsWith ( ""LESSONS"" ) || r. getName ( ). startsWith ( ""FLASHCARDS"" ) ) { r. setName ( ""LESSONS"" ) ; r. setRelationIndex ( 2, lesson. getRelaions ( ). get ( i ). getIndex ( ) + 1 ) ; } } }"
"log ( ""unplaceChildrenAlongSampleObjectiveEwebMinRatioCheckYetOk"" ) ; sampleObjectiveEwebMinRatio. unplaceChildren ( ) ; }"
if ( type == null || type. isInstance ( object ) ) { throw new IllegalArgumentException ( errorMessage ) ; } return object ; }
"for ( BoardView bv : listBoardViews ( loc ) ) { if ( bv. isFrame ( ) &&! bv. isEnclosed ( ) && bv. isChess ( ) ) { return bv ; } } throw new IllegalArgumentException ( ""Cannot scale PesChess borad for location: "" + loc ) ; }"
if ( elementCount == 0 ) { return true ; } else { for ( int i = 1 ; i < elementCount ; i ++ ) { if ( content [ i ]!= null ) { return false ; } } return true ; } }
final ArrayList < Integer > daa = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < 5000 ; i ++ ) { daa. add ( i + id ) ; } return fromIterableWithoutReactivePull ( daa ) ; }
"JSplitPane splitPane = new JSplitPane ( JSplitPane. HORIZONTAL_SPLIT, true, true ) ; splitPane. setOpaque ( false ) ; mainPanel. add ( splitPane, BorderLayout. CENTER ) ; mainPanel. add ( splitPane, BorderLayout. CENTER ) ; return mainPanel ; }"
"if ( latentSpaces == null || intercepts == null ) { return 0.0 ; } return hazelcastPriority ( space, a, r, y, latentSpaces, intercepts ) ; }"
Attr metric = new Attr ( ) ; metric. setPrefix ( prefix ) ; return metric ; }
"if ( packageAdminService == null ) { packageAdminService = ServiceUtils. getService ( bundleContext, PackageAdmin. class ) ; } return packageAdminService ; }"
IndexSpec [ ] indexSpecs = getIndexSpecs ( soupName ) ; if ( indexSpecs!= null && indexSpecs. length > 0 ) { return indexSpecs [ 0 ]. getTableName ( ) ; } return null ; }
"File file = File. createTempFile ( ""lshw2json"", "".dat"" ) ; FileOutputStream out = new FileOutputStream ( file ) ; copy ( in, out ) ; return in ; }"
"String s = high + "","" + low ; return s ; }"
Platform. runLater ( ( ) -> { mainMenu ( ) ; } ) ; }
"if ( s_aProperties!= null && s_aProperties. get ( ""plcaedBefore"" )!= null && s_aProperties. get ( ""plcaedAfter"" )!= null ) { return true ; } if ( s_aProperties && s_aProperties. get ( ""plcaedAfter"" )!= null && s_aProperties. get ( ""plcaedAfter"" ). equals ( ""true"" ) ) { return true ; } return false ; }"
if ( classes == null ) { classes = new ArrayList < ClassType > ( ) ; } return classes ; }
"Map < K, V > result = new HashMap < > ( ) ; for ( Map. Entry <?,? > entry : sourceMap. entrySet ( ) ) { if ( destinationClass. isAssignableFrom ( entry. getKey ( ). getClass ( ) ) ) { result. put ( ( K ) entry. getKey ( ), ( V ) entry. getValue ( ) ) ; } } return result ; }"
byte [ ] longData = nativeExportPlaceAsLongBytes ( xep227Support ) ; return longData ; }
"try { return new String ( encodedString. getBytes ( messageEncoding ), ""UTF-8"" ) ; } catch ( UnsupportedEncodingException uee ) { uee. printStackTrace ( ) ; throw new RuntimeException ( uee ) ; } }"
"MaliJob configuration = new MaliJob ( ) ; configuration. setMailServer ( mailServer ) ; configuration. setPort ( port ) ; configuration. setHosts ( Arrays. asList ( new String [ ] { ""localhost"", ""127.0.0.1"" } ) ) ; configuration. setHosts ( Arrays. asList ( new String [ ] { ""127.0.1.1"", ""127.0.1.1"" } ) ) ; }"
"StringBuffer s = new StringBuffer ( ) ; s. append ( ""HsqlArrayList : size="" ) ; s. append ( elementCount ) ; s. append ('' ) ; for ( int i = 0 ; i < elementCount ; i ++ ) { if ( elements [ i ]!= null ) { s. append ('' ) ; } s. append ('' ) ; } return s. toString ( ) ; }"
m_firstCerate = true ; m_presenterOps = presenter ; }
"if ( unit. equals ( ""km"" ) ) { units = ""km"" ; } else if ( unit. equals ( ""km"" ) ) { units = ""km"" ; } else if ( unit. equals ( ""km"" ) ) { units = ""km"" ; } else { units = ""km"" ; } }"
"WebElement link = driver. findElement ( By. xpath ( ""iot.home.button.xpath"" ) ) ; link. clear ( ) ; link. sendKeys ( message. getString ( ) ) ; driver. findElement ( By. xpath ( ""iot.home.button.change-cotnents.xpath"" ) ). click ( ) ; }"
"long second = seconds / 1000 ; long minute = seconds / ( 1000 * 60 ) ; return buildCusom ( minute, minute ) ; }"
if ( pwmValues!= null ) { for ( int i = 0 ; i < pwmValues. length ; i ++ ) { if ( isinverted ) { pwmValues [ i ] = - ( pwmValues [ i ] ) ; } } } }
"num1 = Arrays. asList ( k1, k2, v1 ). length ; num2 = Arrays. asList ( k2, k3, v2 ). length ; }"
"if (! text. isEmpty ( ) ) { value = text. substring ( 0, text. length ( ) - 1 ) ; } else { value = """" ; } }"
try { return ( n % 2 == 0 ) ; } catch ( ArrayIndexOutOfBoundsException e ) { return false ; } }
"return new AbstractSet < String > ( ) { @ Override public boolean keep ( String path ) { return namePredicate. apply ( path ) ; } @ Override public String toString ( ) { return ""HazelcastStrategy("" + namePredicate + "")"" ; } } ; }"
List statements = getStatementsIdsTaxonAll ( agentId ) ; return statements ; }
float a = xp - ( yp / 2.0f ) ; if ( a > 0 ) a -= 360.0f ; if ( a < 0.0f ) a += 360.0f ; return 360.0f - ( a * Math. cos ( Math. toRadians ( a ) ) + Math. sin ( Math. toRadians ( a ) ) ) ; }
byte [ ] hexadecimalBytes = hexadecimalStr. getBytes ( ) ; return sIsEnclosingIsoSignature ( hexadecimalBytes ) ; }
final Event event = new Event ( ) ; event. setLoadSuggestionBeatConnection ( suggestedWordInfo ) ; return event ; }
Point p1 = one ; Point p2 = two ; if ( p1 == null || p2 == null ) { return ; } do { if ( Math. abs ( p1. x - one. x ) == Math. abs ( p2. x - one. x ) && Math. abs ( p2. y - one. y ) == Math. abs ( p1. y ) ) { return ; } } while ( Math. abs ( p1. y - two. y ) == Math. abs ( p2. y - one. y ) ) ; }
int [ ] values = new int [ instances. numAttributes ( ) ] ; for ( int i = 0 ; i < values. length ; i ++ ) { values [ i ] = ( i + 1 ) * instances. attribute ( i ). value ( ) ; } return values ; }
"requireNonNull ( statuses ) ; return new Builder ( query. deepCopy ( ) ). setStatuses ( Iterables. transform ( statuses, new Function < ScheduleStatus, String > ( ) { @ Override public String apply ( ScheduleStatus input ) { return input. getStatus ( ) ; } } ) ) ; }"
"int values = 0 ; Iterator < Entry < String, Integer >> it = attributeMap. entrySet ( ). iterator ( ) ; while ( it. hasNext ( ) ) { Entry < String, Integer > entry = it. next ( ) ; values += entry. getValue ( ). intValue ( ) ; } return values ; }"
"buffer. append ( prefix ) ; buffer. append ( ""Unparseable extension value: "" ) ; if ( encoding == null ) { encoding = getEncoded ( ) ; } if ( encoding == null ) { buffer. append ( ""NULL "" ) ; } else { buffer. append ( Array. toString ( encoding, prefix ) ) ; } }"
"assertThat ( ""NTLM authentication scheme required"", NTLM_AUTH_SCHEME, is ( ""urn:oasis:names:tc:SAML:2.0:auth:NTLM:2.0:auth:NTLM:2.0:auth:NTLM"" ) ) ; assertThat ( ""NTLM authentication scheme required"", NTLM_AUTH_SCHEME, is ( ""urn:oasis:names:tc:SAML:2.0:auth:2.0:auth:2.0:auth:2.0:auth:NTLM"" ) ) ; }"
if ( dependencieProperties == null ) { dependencieProperties = new Properties ( ) ; dependencieProperties. load ( ) ; } }
"XHTMLExtension xhtmlExtension = ( XHTMLExtension ) message. getExtension ( ""html"", namespace ) ; List < CharSequence > contexts = new ArrayList < CharSequence > ( ) ; for ( CharSequence body : xhtmlExtension. getBodies ( ) ) contexts. add ( body ) ; return contexts ; }"
final List returnList = new ArrayList ( ) ; final Iterator it = m_list. iterator ( ) ; while ( it. hasNext ( ) ) { final Color color = ( Color ) it. next ( ) ; if ( color == null ) { returnList. add ( null ) ; } } return returnList ; }
"while ( tokens!= null ) { tokens = tokens. replaceAll ( "" "", "" "" ) ; tokens = tokens. replaceAll ( "" "", "" "" ) ; } return tokens ; }"
"model. addAttribute ( ""batch"", batchService. deleteCatageory ( batchId ) ) ; return ""redirect:/catageory.do"" ; }"
TableItem [ ] tableItems = table. getTableItems ( ) ; for ( int i = 0 ; i < tableItems. length ; i ++ ) { TableItem item = tableItems [ i ] ; if ( item. getPos ( ) == cursorPosition ) { return item ; } } return null ; }
"List < LoaiVanBan > ls = new ArrayList < LoaiVanBan > ( ) ; try { ls = LinhVucVanBanLocalServiceUtil. gtMarshallingTangTrang ( groupId, trangThai, start, end ) ; } catch ( Exception e ) { LOG. error ( e ) ; } return ls ; }"
"Hashtable dest = ( Hashtable ) destinationMap. get ( namespace ) ; if ( dest == null ) { dest = new Hashtable ( ) ; destinationMap. put ( namespace, dest ) ; } if ( addIfNew ) { dest. put ( namespace, new Hashtable ( ) ) ; } return dest ; }"
if ( preferDictionary_ == null ) { return false ; } else { return preferDictionary_ ; } }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( bytes!= null ) sb. append ( ""Bytes: "" + bytes + "", "" ) ; if ( consumedBytes!= null ) sb. append ( ""ConsumedBytes: "" + consumedBytes + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
ForkApplyPayload payload = new ForkApplyPayload ( ) ; assertFalse ( payload. isUnlocked ( ) ) ; }
"CachedThreadPool cachedThreadPool = new CachedThreadPool ( maxCachedThread, unit, threadFactory ) ; return cachedThreadPool. start ( timeout, unit ) ; }"
"Integer key = sharedObject. getKey ( ) ; if (! objectMap. containsKey ( key ) ) { objectMap. put ( key, sharedObject ) ; } else { objectMap. get ( key ). add ( sharedObject ) ; } }"
"long mips = 0 ; for ( Map. Entry < E, Long > entry : map. entrySet ( ) ) { if ( entry. getValue ( ) == e ) { mips += 1 ; } } return mips ; }"
if ( extractWrapperApiBoolean == null ) { extractWrapperApiBoolean = new com. amazonaws. internal. SdkInternalList < DomainStatus > ( ) ; } return extractWrapperApiBoolean ; }
"if ( text!= null ) { for ( int i = 0 ; i < text. length ( ) ; i ++ ) { if ( text. charAt ( i ) == '@' ) { roleProperties. put ( i, text. substring ( i + 1 ) ) ; } else { roleProperties. remove ( i ) ; } } } }"
"if ( rgb == null || rgb. length == 0 ) { return xyz ; } xyz = new float [ rgb. length ] ; for ( int i = 0 ; i < rgb. length ; i ++ ) { xyz [ i ] = RGBtoCIEXYZ ( rgb [ i ], rgb [ i + 1 ] ) ; } return xyz ; }"
if ( m_pool == null ) { m_pool = new VSphereIOThreadPool ( host. getConnectionPool ( ) ) ; } return m_pool ; }
"try { return getUtcSimpleDateFormat ( ""yyyy-MM-dd"" ). parse ( dateString ) ; } catch ( NullPointerException e ) { return null ; } catch ( IllegalArgumentException e ) { return null ; } catch ( ParseException e ) { return null ; } }"
"try { return new URL ( str ) ; } catch ( MalformedURLException e ) { System. err. println ( ""Unable to parse the URL: "" + str ) ; return null ; } }"
"if ( erorrHistory!= null ) { StringBuffer result = new StringBuffer ( ) ; Iterator < String > it = erorrHistory. iterator ( ) ; while ( it. hasNext ( ) ) { result. append ( it. next ( ) ) ; if ( it. hasNext ( ) ) { result. append ( "" "" ) ; } } return result. toString ( ) ; } return null ; }"
"URI uri = controllerResource ( method, path, query, body ) ; return uri. toString ( ) ; }"
if ( auth instanceof AnonymousAuthenticationToken ) { return true ; } return false ; }
"double maxMips = getMips ( ) - getPeList ( ). get ( 0 ). getMips ( ) ; double maxLeft = getMips ( ) - getPeList ( ). get ( 1 ). getMips ( ) ; double right = getMips ( ) - getPeList ( ). get ( 2 ). getMips ( ) ; return Math. max ( maxLeft, right ) ; }"
double sum = 0 ; for ( int i = 0 ; i < reconCL. getLength ( ) ; i ++ ) { sum += reconCL. getCLGrid3D ( i ). getL2 ( ) ; } return sum ; }
"String lParam = name. substring ( 0, name. length ( ) - 1 ) ; if ( value!= null && value. length ( ) > 0 ) { lParam += value. substring ( 1 ) ; } }"
dest. writeInt ( geom. getNumGeometries ( ) ) ; for ( int i = 0 ; i < geom. getNumGeometries ( ) ; i ++ ) { int n = geom. getCoordinateN ( i ) ; if ( n > 0 ) { dest. writeInt ( n - 1 ) ; } } dest. writeInt ( geom. getMean ( ) ) ; }
"LOGGER. debug ( ""BROADCAST PARTY: {}"", event ) ; Util. runLater ( new Runnable ( ) { @ Override public void run ( ) { casProcessingEvnet ( event ) ; } } ) ; }"
NumericOptionModelNode node = digitBuildNumericClasspathOde ( name ) ; return node!= null? node : zeroOptionModelNode ; }
"String result = """" ; result += ""("" + x + "","" + y + "")"" ; return result ; }"
taskSeelctedX += dx ; taskSeelctedY += dy ; }
XMLAttributes newAttributes = new XMLAttributes ( ) ; newAttributes. setValue ( att. getValue ( ) ) ; newAttributes. setName ( att. getName ( ) ) ; return newAttributes ; }
if ( currentListener == null ) { return ; } currentListener. threadsKill ( event ) ; }
"String url = ""http://www.displaytag.org/displaytag/index.jsp?param1=lsid_suite&param2=2"" ; Href href = new DefaultHref ( url ) ; String newUrl = href. toString ( ) ; URLAssert. assertEquals ( url, newUrl ) ; }"
"byte [ ] ret = new byte [ figureVectro. length ] ; System. arraycopy ( figureVectro, 0, ret, 0, ret. length ) ; return ret ; }"
boolean changed = false ; for ( final Object selectorsElement : selectors ) { if (! setDiv ( selectorsElement ) ) { changed = true ; break ; } } return changed ; }
"Properties properties = new Properties ( ) ; try { InputStream in = Version. class. getResourceAsStream ( ""/org/jboss/version.properties"" ) ; properties. load ( in ) ; in. close ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } return properties ; }"
String rule = null ; if ( parser. getChar ( ) == '*' ) { rule = parser. getText ( ) ; } else if ( parser. getChar ( ) == '&' ) { rule = parser. getText ( ) ; } return rule ; }
if ( numIdle > 0 ) { numIdle -- ; } if ( numIdle > 0 ) { try { socket. write ( 1 ) ; socket. flush ( ) ; } catch ( IOException e ) { } socket. close ( ) ; } }
"fenceLine = fenceLine. replaceAll ( ""|s"", """" ) ; return fenceLine. trim ( ) ; }"
if ( generatedId_ == 0 ) JDError. throwSQLException ( JDError. EXC_SAVEPOINT_DOES_NOT_EXIST ) ; return generatedId_ ; }
"mapreduceConnector. scan ( ""foo"", 1 ) ; runTestMapreduce ( ""progress"" ) ; }"
"map. add ( ""foo"", ""bar"" ) ; map. add ( ""baz"", ""bop"" ) ; assertTrue (! map. containsKey ( ""foo"" ) ) ; assertTrue ( map. containsKey ( ""baz"" ) ) ; }"
"String langVersion = langDefRoot. getAttributeNS ( XMLConstants. W3C_XML_SCHEMA_INSTANCE_NS_URI, ""lang-version"" ) ; return Integer. parseInt ( langVersion ) ; }"
"if ( flag. startsWith ( ""yes"" ) ) { return Optional. of ( new YahooFinanceTicketHnadler ( ) ) ; } else if ( flag. startsWith ( ""no"" ) ) { return Optional. of ( new YahooFinanceTicketHnadler ( ) ) ; } return Optional. absent ( ) ; }"
"if ( value == null || value. length ( ) == 0 ) { return defaultValue ; } return putBoolean ( value, false ) ; }"
Bundle bundle ; bundle = Platform. getBundle ( pluginId ) ; if ( bundle!= null ) { return bundle. getEntry ( DESCRIPTOR_XML ) ; } else { return null ; } }
boolean weakSerevr = true ; try { String url = new URL ( getDownloadUrl ( ) ) ; String json = Utils. httpGet ( url ) ; if ( json!= null && json. length ( ) > 0 ) weakSerevr = false ; } catch ( Exception e ) { e. printStackTrace ( ) ; } return weakSerevr ; }
"return new Matcher ( ) { @ Override public boolean matches ( Node node, NodeMetadata metadata ) { return node. isVector ( ) ; } @ Override public void describeTo ( Description description ) { description. appendText ( ""used"" ) ; } } ; }"
final StringBuilder sb = new StringBuilder ( ) ; for ( String s : ces ) { sb. append ( s ). append ( '|n' ) ; } m_issueElemen = sb. toString ( ) ; for ( int i = 0 ; i < ces. length ; i ++ ) { m_issueElemen. append ( '|n' ) ; } }
"String contextUri = null ; if ( relativeUrl!= null ) { String [ ] split = relativeUrl. split ( ""/"" ) ; contextUri = new URI ( split [ 0 ], split [ 1 ], split [ 2 ] ). toString ( ) ; } return contextUri ; }"
BigDecimal price = BigDecimal. ZERO ; for ( FoodItem item : order. getFoodItems ( ) ) { price = price. add ( item. getPrice ( ) ) ; } return price ; }
"Query query = em. createNamedQuery ( ""User.findByLogin"", User. class ) ; query. setParameter ( ""login"", login ) ; query. executeUpdate ( ) ; em. remove ( query ) ; }"
stopListenerIcon = newIcon ; hasStopListenersConfig = true ; }
"List arrayList ; FaultCodeDAO faultCodeDAO = new FaultCodeDAO ( ) ; arrayList = ( ArrayList ) faultCodeDAO. destNalLocality ( object1, lowerBound, upperBound ) ; return arrayList ; }"
"if ( status == null ) { element. addAttribute ( ""supportedSattus"", ""true"" ) ; } else { element. addAttribute ( ""supportedSattus"", String. valueOf ( status ) ) ; } return true ; }"
boolean quotedSerializable = true ; if ( sIsSignedIn ( ) ) { quotedSerializable = false ; } return quotedSerializable ; }
if ( current == null ) { return false ; } return current. hasNext ( ) ; }
if ( sIsInitiailzed ( proxy ) ) return true ; return false ; }
"assert bid. getItem ( ) == null ; if ( bid. getItem ( ) instanceof Item ) { insertItem ( ( Item ) bid. getItem ( ), null, 0 ) ; } else { insertItem ( ( Item ) bid. getItem ( ), new Item ( bid. getItem ( ), null, 1 ) ) ; } }"
byte [ ] buffer = new byte [ BLOCK_SIZE ] ; long skippedBytes = 0 ; while ( skip > 0 ) { long skippedBytes = in. skip ( skip ) ; if ( skippedBytes < 0 ) { throw new EOFException ( ) ; } skippedBytes += skippedBytes ; } in. close ( ) ; }
"UserContext userContext = authenticationService. retrieveUserContext ( authToken ) ; return userContext. session ( ). image ( ""user"" ) ; }"
if ( executor!= null ) { ThreadPoolUtils. shutdownNow ( ) ; executor. shutdownNow ( ) ; } }
"Vector v = new Vector ( ) ; v. addElement ( getNetworkInterface ( ""eth0"" ) ) ; v. addElement ( getNetworkInterface ( ""eth1"" ) ) ; v. addElement ( getNetworkInterface ( ""eth2"" ) ) ; v. addElement ( getNetworkInterface ( ""eth3"" ) ) ; v. addElement ( getNetworkInterface ( ""eth4"" ) ) ; v. addElement ( getNetworkInterface ( ""eth5"" ) ) ; return v. elements ( ) ; }"
List < HiveQueryId > matchedHqid = new ArrayList < HiveQueryId > ( ) ; for ( HiveQueryId qid : ats. getHiveQueryIds ( ) ) { if ( qid. getSiteName ( )!= null &&! qid. getSiteName ( ). equals ( username ) ) { matchedHqid. add ( qid ) ; } } return matchedHqid ; }
hideQueueModuleInternal ( context ) ; modCount ++ ; }
ImageIcon img = createIcon ( objectName ) ; return img ; }
"fire ( x, y ) ; heapify ( x, y ) ; }"
"IPSContentWs cws = ContentServiceLocator. getContentService ( ) ; if ( cws == null ) { CosmoLogger. getLogger ( IPSContentWs. class. getName ( ) ). log ( Level. WARNING, ""Could not create ContentService."" ) ; return null ; } return cws ; }"
DecisionNode node = UMLFactory. eINSTANCE. createDecisionNode ( ) ; ActivityEdge de = UMLFactory. eINSTANCE. createActivityEdge ( ) ; node. getOutgoings ( ). add ( de ) ; assertFalse ( services. isValidControlFlowStart ( node ) ) ; }
"if ( filename!= null && suffix!= null && filename. length ( ) > suffix. length ( ) ) { return filename. substring ( 0, filename. length ( ) - suffix. length ( ) ) ; } else { return filename ; } }"
"for ( int i = 0 ; i < firstSet. size ( ) ; i ++ ) { firstSet. set ( i, matchSet. get ( i ) ) ; secondSet. set ( i, matchSet. get ( i ) ) ; } }"
"checkArgument ( source. getClass ( ) == target. getClass ( ) ) ; synchronized ( glSessionListeners ) { for ( int i = 0 ; i < glSessionListeners. length ; ++ i ) { glSessionListeners [ i ]. connectionStateChanged ( source, target ) ; } } }"
for ( int i = 0 ; i < partitions. length ; i ++ ) { if ( partitions [ i ] == null ) { break ; } } partitions [ i ]. wirePartitionsOffset ( offset ) ; }
"Method m = clazz. getMethod ( name, desc ) ; return m ; }"
"TimeZone tz = TimeZone. getTimeZone ( ""GMT"" ) ; return utcUtc. format ( uDate ) ; }"
setStampDouble ( ttl * 2 ) ; stampDouble2InclusiveSet = true ; }
"if ( end - offset > Constants. LONG_ID_STRING_LENGTH ) throw new IllegalArgumentException ( MessageFormat. format ( JGitText. get ( ). invalidIdLength, Integer. valueOf ( end - offset ), Integer. valueOf ( Constants. LONG_ID_STRING_LENGTH ) ) ) ; return fromHexString ( buf, offset, end ) ; }"
CsvFrmLengthParser csvFrmLengthParser = new CsvFrmLengthParser ( ) ; csvFrmLengthParser. parse ( ujo ) ; }
"List < Map. Entry < String, Object >> messages = messageBuilder. build ( ) ; for ( Map. Entry < String, Object > entry : messages. entrySet ( ) ) { messages. put ( entry. getKey ( ), entry. getValue ( ) ) ; } return new Request ( messages ) ; }"
"int i = parameter. getParameterIndex ( ) ; Class <? > [ ] paramTypes = parameter. getMethod ( ). getParameterTypes ( ) ; boolean shouldSplit = false ; for ( ; i < paramTypes. length ; i ++ ) { if ( ""split"". equals ( paramTypes [ i ]. getName ( ) ) ) { shouldSplit = true ; break ; } } return shouldSplit ; }"
"Lease lease = get ( holder ) ; if ( lease == null ) { lease = new Lease ( holder ) ; put ( holder, lease ) ; } lease. remove ( src ) ; }"
double s_x = 96.0 ; double s_y = 96.0 ; return ( ( double ) width / s_x ) / s_y ; }
Set < String > result = new HashSet < String > ( ) ; for ( Entity e : costDriver. getAllEntities ( ) ) { if ( resourceID. contains ( e. getId ( ) ) ) { result. add ( e. getId ( ) ) ; } } return result ; }
"if ( mRecycled ) throw new IllegalStateException ( ""Recycled event hasn't been recycled yet"" ) ; mRecycledEvents. clear ( ) ; }"
for ( int i = 0 ; i < clasificaciones. size ( ) ; i ++ ) { if ( clasificaciones. get ( i )!= null ) { invariante. add ( clasificaciones. get ( i ) ) ; } } }
Document doc = createNewDocument ( xmlFilename ) ; Element son = doc. getDocumentElement ( ) ; Element domainChild = doc. createElement ( SON_DOMAIN ) ; son. appendChild ( domainChild ) ; return son ; }
column = column. trim ( ) ; String [ ] tmp = new String [ columns. size ( ) + 1 ] ; for ( int i = 0 ; i < columns. size ( ) ; i ++ ) { if (! tmp [ i ]. equals ( column ) ) { tmp [ i ] = columns. get ( i ) ; } else { tmp [ i ] = columns. get ( i ) ; } } mimeList. add ( tmp ) ; }
"Element icon = doc. createElement ( ICON_TAG ) ; icon. setAttribute ( ""class"", ""icon-wrapper"" ) ; icon. setAttribute ( ""src"", """" ) ; icon. setAttribute ( ""alt"", """" ) ; icon. setAttribute ( ""src"", """" ) ; icon. setAttribute ( ""alt"", """" ) ; doc. appendChild ( icon ) ; }"
if ( egtActions == null ) { egtActions = new com. amazonaws. internal. ListWithAutoConstructFlag < EventDescription > ( ) ; egtActions. setAutoConstruct ( true ) ; } return egtActions ; }
if ( ( lsn & 0x03 )!= 0x03 ) { return false ; } return ( ( lsn & 0x0C ) == 0x0C ) ; }
"logger. debug ( ""URL: "" + url. toString ( ) ) ; HttpURLConnection conn = ( HttpURLConnection ) url. openConnection ( ) ; conn. setDoInput ( true ) ; conn. setDoOutput ( true ) ; InputStream is = conn. getInputStream ( ) ; String result = toString ( is ) ; is. close ( ) ; return result ; }"
ShortBuffer buffer = Unpooled. buffer ( array. length * 2 ) ; buffer. clear ( ) ; for ( int i = 0 ; i < array. length ; i ++ ) { buffer. put ( array [ i ] ) ; } buffer. flip ( ) ; return buffer ; }
"String defultParameter = domainName + "".value"" ; return defultParameter ; }"
for ( Iterator < T > it = intervals. iterator ( ) ; it. hasNext ( ) ; ) { T interval = it. next ( ) ; interval. computeEndPCs ( ) ; } }
Document document = new Document ( ) ; document. getDocumentElement ( ). normalize ( ) ; return document ; }
ShoppingCartItem shoppingCartItem = new ShoppingCartItem ( ) ; shoppingCartItem. setProduct ( product ) ; shoppingCartItem. quantity ++ ; }
int ofset = 0 ; if ( longFirstIndex >= 0 ) { ofset = ( int ) ( ( index - longFirstIndex ) - ( BitArray. LONG_SIZE * getBin ( ) ) ) ; } else { ofset = ( int ) ( ( index - longFirstIndex ) - ( BitArray. LONG_SIZE * getBin ( ) ) ) ; } return ofset ; }
s_aRWLock. writeLock ( ). lock ( ) ; try { if ( bCacheEnabled ) { s_bCcaheAvailable = true ; } else { s_aCcaheAvailable = false ; } } finally { s_aRWLock. writeLock ( ). unlock ( ) ; } }
"if ( Gopigo. getInstance ( ). isHalt ( ) ) { Gopigo. getInstance ( ). onHalt ( ) ; } if ( value == 0 || value == 1 ) { writeI2c ( Commands. ANALOG_WRTE, pin, value, Commands. UNUSED ) ; sleep ( 5 ) ; } else { Logger. getInstance ( ). writeI2c ( Commands. ANALOG_WRTE, pin, value, Commands. UNUSED ) ; } }"
"date. add ( Calendar. DAY_OF_MONTH, interval ) ; date. set ( Calendar. MONTH, 0 ) ; date. set ( Calendar. MINUTE, 0 ) ; date. set ( Calendar. SECOND, 0 ) ; date. set ( Calendar. MILLISECOND, 0 ) ; }"
String value = element. getAttribute ( attributeName ) ; return StringUtils. isBlank ( value )? null : value ; }
"JsArray < Blob > result = JsArray. createArray ( elements. length ). cast ( ) ; for ( int i = 0, l = elements. length ; i < l ; i ++ ) { result. set ( i, elements [ i ] ) ; } return result ; }"
"String token = deviceTokens [ getRandom ( ) ] ; switch ( token ) { case 'D' : case 'T' : token = deviceTokens [ 2 ] ; break ; case 'B' : case 'C' : token = deviceTokens [ 3 ] ; break ; case 'D' : case 'B' : token = deviceTokens [ 4 ] ; break ; default : token = """" ; break ; } return token ; }"
maybeThrowIllegalStateException ( ) ; return messageEs ; }
if ( instance == null ) { synchronized ( PropertiesManager. class ) { if ( instance == null ) { instance = new PropertiesManager ( ) ; } } } return instance ; }
"Object retval = null ; if (! m_isArray ) { int retval2 = ( Integer ) m_VectorData. get ( 0 ) ; return retval2 ; } retval = new int [ m_VectorData. size ( ) ] ; for ( int i = 0 ; i < m_VectorData. size ( ) ; i ++ ) Array. set ( retval, i, m_VectorData. get ( i ) ) ; return retval ; }"
"InputStream in = null ; try { in = new FileInputStream ( file ) ; } catch ( FileNotFoundException e ) { throw new RuntimeException ( e ) ; } byte [ ] buf = new byte [ 8192 ] ; int len ; while ( ( len = in. read ( buf ) ) > 0 ) { out. write ( buf, 0, len ) ; } in. close ( ) ; }"
"_checkNotNull ( aStartDir, ""StartDir"" ) ; _registerFolderDependency ( aStartDir ) ; }"
ItemsetGen < T > iteGet = new ItemsetGen < T > ( ) ; for ( ItemsetGen < T > itemset : itemsets ) { iteGet. addItem ( item. clone ( ) ) ; } return iteGet ; }
"boolean equal = true ; for ( String str : list1 ) { equal &= coctetCommandsEqaul ( str, list2 ) ; } return equal ; }"
"double bicLogistic = 0.0 ; int count = 1 ; for ( SemBicScore score : semBicScores ) { bicLogistic += score. mimeBoundary ( i, parents ) ; count ++ ; } return bicLogistic ; }"
if ( buildHomeUsreManaer == null ) { buildHomeUsreManaer = new MaintainUserManager ( ) ; } return buildHomeUsreManaer ; }
"list. add ( new Tuple ( ""Male"", 0.5 ) ) ; list. add ( new Tuple ( ""Female"", 0.5 ) ) ; list. add ( new Tuple ( ""Male"", 0.5 ) ) ; two. setDimension2 ( list ) ; assertEquals ( list. get ( 0 ). getEnemies ( ), false ) ; assertEquals ( list. get ( 1 ). getEnemies ( ), true ) ; }"
"Assert. assertEquals ( objs. size ( ), 0 ) ; final Iterator it = objs. iterator ( ) ; for ( int i = 0 ; i < objs. size ( ) ; i ++ ) { AllocationThread worker = ( AllocationThread ) it. next ( ) ; try { worker. fireCategoryThreads ( 0 ) ; } catch ( Exception e ) { fail ( ) ; } } }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( bytes!= null ) sb. append ( ""Bytes: "" + bytes + "", "" ) ; if ( consumedBytes!= null ) sb. append ( ""ConsumedBytes: "" + consumedBytes + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
PaymentPaymentProvider provider = ( PaymentPaymentProvider ) viewer. getProvider ( ) ; if ( provider!= null ) { provider. removePayment ( viewer ) ; } }
List < String > dp = new ArrayList < > ( bufs. size ( ) ) ; for ( ByteBuffer b : bufs ) { String val = unsignedUtf8IlstToDp ( b ) ; dp. add ( val == null? null : Base64. encodeBase64String ( val. array ( ) ) ) ; } return dp ; }
"String etThreadsWarning = ""Warning"" ; return etThreadsWarning ; }"
"try { pluginConfig = new PluginConfig ( ) ; } catch ( Exception e ) { throw new RuntimeException ( ""Error creating plugin config"", e ) ; } }"
"Jedis jedis = Main. getInstance ( ). connect ( ) ; try { String username = jedis. get ( ""echo "" + file. getAbsolutePath ( ) ) ; return username!= null && username. equals ( AuthenticatedClient. DEFAULT_USERNAME ) ; } finally { jedis. close ( ) ; } }"
String type = edge. getType ( ) ; String label = edge. getLabel ( ) ; return type. equals ( label )? ODRER_TYPE_EDGE : ODRER_LABEL_EDGE ; }
if ( m_type == null ) validate ( ) ; return m_type ; }
"Map < String, BeanDescriptor > result = new HashMap < String, BeanDescriptor > ( ) ; for ( String key : map1. keySet ( ) ) { result. put ( key, map1. get ( key ) ) ; } for ( String key : map2. keySet ( ) ) { result. put ( key, map2. get ( key ) ) ; } return result ; }"
if ( type == null ) { return FileType. TXT ; } else { return type ; } }
long val = 0 ; for ( int i = 0 ; i < 32 ; i ++ ) { val = p. getLong ( i ) ; if ( val >= 0 ) { val = val + 256 ; } } return val ; }
"if ( predicates. length == 0 ) { return FalsePredicate. INSTANCE ; } if ( predicates. length == 1 ) { return predicates [ 0 ] ; } Predicate [ ] newPredicates = new Predicate [ predicates. length ] ; System. arraycopy ( predicates, 0, newPredicates, 0, predicates. length ) ; return newPredicates [ 0 ] ; }"
"unconfiguredGateways. add ( gateway ) ; Message message = generateMessage ( gateway, ""thumbnail"" ) ; message. setData ( ""data"", ""1"" ) ; message. setData ( ""length"", Integer. toString ( message. getContentLength ( ) ) ) ; router. route ( message ) ; }"
"Iterator < Map. Entry < String, Object >> it = map. entrySet ( ). iterator ( ) ; while ( it. hasNext ( ) ) { Map. Entry < String, Object > entry = it. next ( ) ; if ( entry. getKey ( ). equals ( key ) ) { return entry. getValue ( ). toString ( ) ; } } return null ; }"
"ImogActor actor = HttpSessionUtil. getCurrentUser ( ) ; ImogJunction junction = createFilterJuntion ( actor ) ; if ( criterions!= null ) junction. add ( criterions ) ; List < DynamicFieldInstance > beans = lsitReturnsActivateDynamicAttribute ( i, j, sortProperty, sortOrder, property, junction ) ; return beans ; }"
int idto = 0 ; for ( int i = 0 ; i < ids. length && idto < other. ids [ i ] ; i ++ ) { if ( ids [ i ] > other. ids [ i ] ) idto = ids [ i ] ; } return idto ; }
"boolean enabled = false ; if ( tag == null ) { tag = """" ; } try { enabled = Boolean. getBoolean ( System. getProperty ( ""openrocket.debug.tag"" ) ) ; } catch ( SecurityException e ) { } return enabled ; }"
"try { HazelcastInstance. getHazelcastHref ( null ) ; fail ( ""Invalid href: "" + getHazelcastHref ( ) ) ; } catch ( NullPointerException e ) { } }"
if ( other. getFromNode ( )!= getFromNode ( ) || other. getToNode ( )!= getToNode ( ) ) { return false ; } return ( other. getAcoustic ( ) == getAcoustic ( ) && other. getLanguage ( ) == getLanguage ( ) ) ; }
final long [ ] result = new long [ objects. length * 2 ] ; for ( int i = 0 ; i < objects. length ; i ++ ) { final Object object = objects [ i ] ; result [ i ] = arrHexEncodeLong ( object ) ; } return result ; }
for ( int i = 0 ; i < weekCount ; i ++ ) { if ( weekItems [ i ]. equals ( item ) ) return i ; } return - 1 ; }
"Object [ ] newObjects = new Object [ m_Size ] ; System. arraycopy ( m_Objects, 0, newObjects, 0, m_Size ) ; m_Objects = newObjects ; if ( m_Objects. length < m_Size ) m_Size = m_Objects. length ; for ( int i = 0 ; i < m_Size ; i ++ ) m_Objects [ i ] = null ; }"
"IDataFile datafile = new DataFile ( ) ; datafile. setString ( ""id"", Integer. toString ( tableid ) ) ; datafile. setInteger ( ""first_name"", ""first_name"" ) ; datafile. setInteger ( ""last_name"", ""last_name"" ) ; datafile. setInteger ( ""person_id"", ""person_id"" ) ; return datafile ; }"
if ( urls == null || urls. length == 0 ) { return false ; } for ( String url : urls ) { if ( URL_PROTOCOL. equals ( url ) ) { return true ; } } return false ; }
"String nonce = id. substring ( 2, id. length ( ) - 1 ) ; return SearchGUIPathKey. valueOf ( nonce ) ; }"
saveSettings ( ) ; writeSettings ( ) ; }
"blobOffset = 4 * Math. max ( blobSize, chunkSize ) ; fillChunksAndAssertSuccess ( ) ; }"
switch ( state ) { case ROLLBACK : return 0.0d ; case PLAYER_ONE : return 1.0d ; case ROLLBACK_TWO : return 2.0d ; case PLAYER_ONE : return 3.0d ; case PLAYER_TWO : return 2.0d ; case PLAYER_ONE : return 1.0d ; case PLAYER_TWO : return 3.0d ; default : return 0.0d ; } }
"if ( afterChildIndex < 0 ) return parentNode ; UINode [ ] children = parentNode. getChildren ( ) ; for ( int i = 0 ; i < children. length ; i ++ ) { UINode child = children [ i ] ; if ( isRemoved ( context, child, afterChildIndex ) ) return child ; } return parentNode ; }"
"try { return getDataSource ( ). getConnection ( ) ; } catch ( SQLException e ) { String msg = ""Error while acquiring the database connection. Meta Repository Database server may down"" ; throw new RSSDatabaseConnectionException ( msg, e ) ; } }"
"String uniqueName = TagHelper. generateUniqueName ( listName ) ; Object dto = mandatoryDtoTo ( elab, request, uniqueName ) ; if ( dto!= null && dto instanceof String ) { ( ( String ) dto ). clear ( ) ; } }"
Calendar c = Calendar. getInstance ( ) ; c. setTimeInMillis ( System. currentTimeMillis ( ) ) ; return ( c. before ( new Date ( c. getTime ( ) ) ) || c. after ( new Date ( c. getTime ( ) ) ) ) ; }
"if ( object == null ) { throw new IllegalArgumentException ( ""Certificate must be specified"" ) ; } return new CertificateIspecify ( object ) ; }"
"String decode = null ; if ( fileName!= null &&! fileName. isEmpty ( ) ) { try { decode = URLDecoder. decode ( fileName, ""UTF-8"" ) ; } catch ( UnsupportedEncodingException e ) { e. printStackTrace ( ) ; } } return decode ; }"
SshScalingRequirements requirements = getSshScalingRequirements ( ) ; if ( requirements == null ) { requirements = new SshScalingRequirements ( ) ; setScalingRequirements ( requirements ) ; } return requirements ; }
"checkIsCreated ( ""navGlobal"" ) ; _getMamaDQPublisherManager ( ). removePublisher ( symbol ) ; }"
if ( requestUri!= null ) { Pattern patternMatcher = Pattern. compile ( pattern ) ; Matcher matcher = patternMatcher. matcher ( requestUri ) ; return matcher. matches ( ) ; } return false ; }
"applyDirectives ( Request. Type. GET, body, uriInfo, resource ) ; return new Request ( headers, body, uriInfo, resource ) ; }"
"try { _scheduler. delete ( null ) ; } catch ( RejectedExecutionException rjex ) { Logger. getLogger ( RejectedExecutionException. class. getName ( ) ). log ( Level. SEVERE, null, rjex ) ; } }"
Dataset dataset = dataset. udateDataest ( friendlyName ) ; return dataset ; }
assert sIsInitialized ; sIsChagned = false ; }
"String profile = ""Hazelcast Rank "" + rankId + "" of "" + total ; return profile ; }"
int totalMips = 0 ; for ( Pe pe : peList ) { TtoalProbability pe = pe. getPeList ( ). get ( 0 ) ; if ( pe!= null ) { totalMips += pe. getMips ( ) ; } } return totalMips ; }
"Point3D dec = new Point3D ( x, y, z ) ; return dec ; }"
"final BoundingBoxReader reader = new BoundingBoxReader ( new BoundingBox ( - 1.0, 1.0 ) ) ; final BoundingBoxConstraint constraint = reader. validate ( ) ; assertThat ( constraint. min ( ), is ( 0.0 ) ) ; assertThat ( constraint. max ( ), is ( - 1.0 ) ) ; }"
"if ( text == null || text. length ( ) <= 0 ) return false ; final Pattern pattern = Pattern. compile ( ""|p{InCombiningDiacriticalMarks}+"" ) ; return pattern. matcher ( text ). matches ( ) ; }"
if (! versionsInitialized ) { initVersions ( ) ; } return internalSentenceIcroParameters ( ) ; }
email ( millis ) ; Thread. sleep ( millis ) ; }
"mTrustFdRepository = getTrustFdRepository ( view, currentCardPosition, selectedCardPosition ) ; return mTrustFdRepository ; }"
"if ( i < 0 || i >= m_td_vec. size ( ) ) throw new RuntimeException ( ""Invalid option index"" ) ; return m_td_vec. get ( i ). getType ( ) ; }"
"StringBuilder builder = new StringBuilder ( ) ; builder. append ( ""DELETE FROM "" ). append ( getEntityName ( ) ). append ( ""s"" ) ; if ( filterByEntityId ) { builder. append ( "" WHERE id = :id"" ) ; } return builder. toString ( ) ; }"
"ListNode node = createBooleanParent ( uri, local ) ; return node ; }"
myPlayer. addBid ( myBidder ) ; myPlayer. addBid ( myBidder2 ) ; myPlayer. addBid ( myBidder1 ) ; myPlayer. addBid ( myBidder2 ) ; }
List < ClassificationDetails > result = new ArrayList < ClassificationDetails > ( ) ; for ( int i = 0 ; i < details. size ( ) ; i ++ ) { ClassificationDetails details = ( ClassificationDetails ) details. get ( i ) ; result. add ( details ) ; } return result ; }
"String ip = request. getRemoteAddr ( ) ; return ( ip. startsWith ( ""http://"" ) && ip. indexOf ( ""jsp_precompile"" ) == - 1 ) ; }"
"StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < seq. length ; i ++ ) { sb. append ( parameterF ( seq [ i ], separator ) ) ; if ( i < seq. length - 1 ) { sb. append ( separator ) ; } } return sb. toString ( ) ; }"
"_xPos = x_loc ; _yPos = y_loc ; setRotation ( width, height ) ; }"
"String fallbackTag = ( String ) session. getAttribute ( ""tag"" ) ; String token = ( String ) session. getAttribute ( ""token"" ) ; if ( token == null || token. length ( ) == 0 ) { token = """" ; } return fallbackTag + token ; }"
"String statusMessage = ""Success"" ; if (! StringUtils. isNull ( message ) ) { statusMessage += "": "" + message ; } sessionContext. setGlobalProperty ( ""ERROR"", statusMessage ) ; }"
try { long start = System. currentTimeMillis ( ) ; while (! isClosing ( lock ) ) { lock. wait ( timeout ) ; } } catch ( InterruptedException e ) { } }
if ( n == null ) { return null ; } return getText ( n. getChildNodes ( ). item ( 0 ) ) ; }
"Employee emp = new Employee ( ) ; emp. set ( ID, - 1 ) ; emp. set ( NAME, """" ) ; return emp ; }"
s_aRWLock. writeLock ( ). lock ( ) ; try { if ( s_bBalance!= null &&! s_bBalance. getWhiteBalance ( ) ) { s_bBalance. setWhiteBalance ( true ) ; } else { s_bBalance. setBlackBalance ( false ) ; } } finally { s_aRWLock. writeLock ( ). unlock ( ) ; } }
if (! joined ) throw new FederateNotExecutionMember ( lrc ) ; joined = true ; }
"try { VATACCOUNTS. put ( accountId, vatinRsc ) ; return true ; } catch ( IOException e ) { LOG. error ( ""Unable to save account attributes."", e ) ; return false ; } }"
"assert value!= null : assertMessage ; if ( value == null ) { throw new IllegalArgumentException ( String. format ( assertMessage, args ) ) ; } return value ; }"
if ( aLevel == 0 ) { return anObject ; } while ( anObject. parent!= null && aLevel > 1 ) { aLevel -- ; USHierarchy parent = anObject. parent ; anObject = parent. parent ; } return anObject ; }
"if ( value == null ) { return null ; } return extract ( value, Variant. class ) ; }"
"Class <? extends CompressionCodec > codecClass = conf. getClass ( codecClassName ) ; return createCompression ( conf, codecClass ) ; }"
"try { long millis = toExacSimpleDte_ms ( ) ; return new Date ( millis ) ; } catch ( java. sql. SQLException e ) { throw new java. sql. SQLException ( ""Failed to copy date: "" + e. getMessage ( ) ) ; } }"
"List < V > list = map. get ( key ) ; if ( list == null ) { list = new ArrayList < V > ( ) ; map. put ( key, list ) ; } return list ; }"
final byte [ ] ret = new byte [ 4 ] ; ret [ 0 ] = ( byte ) ( value >>> 24 ) ; ret [ 1 ] = ( byte ) ( value >>> 16 ) ; ret [ 2 ] = ( byte ) ( value >>> 8 ) ; ret [ 3 ] = ( byte ) value ; return ret ; }
if (! started ) { stopRecordingTimeInterval ( ) ; started = true ; } if ( storedTimeInterval == null ) { storedTimeInterval = new Date ( System. currentTimeMillis ( ) ) ; } startRecordingTimeInterval ( ) ; }
"Matrix m = path. getMatrix ( ) ; for ( int i = 0 ; i < path. getRowCount ( ) ; i ++ ) { for ( int j = 0 ; j < path. getColumnCount ( ) ; j ++ ) { m. set ( i, j, 0.5f ) ; m. set ( j, 1.0f, 0.5f ) ; m. set ( i, j, 1.0f ) ; } } }"
while ( position < maxPosition ) { if ( line. charAt ( position ) == '|r' || line. charAt ( position ) == '|n' ) { position ++ ; } else { return false ; } } return true ; }
"for ( final Field f : fields ) { setDoField ( c, f ) ; } }"
StringBuilder sb = new StringBuilder ( ) ; for ( float f : Float. values ( ) ) { sb. append ( f ) ; } return sb. toString ( ) ; }
"JSONObject json = new JSONObject ( ) ; try { json = new JSONObject ( ) ; json. put ( ""vendor"", vendor ) ; json. put ( ""version"", version ) ; json. put ( ""type"", type ) ; json. put ( ""url"", url ) ; } catch ( JSONException e ) { e. printStackTrace ( ) ; } return json ; }"
stdout. close ( ) ; stdout = null ; }
int result = 0 ; for ( int i = 0 ; i < length ; i ++ ) { if ( objects [ i ]!= null ) { result = objects [ i ]. extractPageAttributesBitmap ( ) ; } } return result ; }
"final Fyping result =ypingMap. get ( name ) ; if ( result == null ) throw new IllegalArgumentException ( ""Unknown action: "" + name ) ; return result ; }"
"StringCmpParameter param = null ; switch ( locale ) { case Locale. US : param = ""USD"" ; break ; case Locale. CHINA : param = ""CHINA"" ; break ; case Locale. CHINA : param = ""CHINA"" ; break ; case Locale. US : param = ""USD"" ; break ; default : param = """" ; break ; } return param. toString ( ) ; }"
"if (! oldString. contains ( string ) ) { return new String ( string ) ; } else { return string. substring ( 0, string. indexOf ( oldString ) ) + newString ; } }"
final byte [ ] data = new byte [ amf. available ( ) ] ; amf. read ( data ) ; final T uuid = new T ( ) ; uuid. setUuid ( data [ 0 ] ) ; uuid. setUuid ( data [ 1 ] ) ; uuid. setUuid ( data [ 2 ] ) ; uuid. setUuid ( data [ 3 ] ) ; return uuid ; }
"String faultPayload = getFaultPayload ( e, namespace, namespaceprefix ). toString ( ) ; axisServiceFaultHandler. handle ( faultPayload, msgContext ) ; }"
"if ( pattern == null || pattern. trim ( ). length ( ) == 0 ) { return false ; } return pattern. matches ( ""|p{InCombiningDiacriticalMarks}"" ) ; }"
"try { statement. setString ( i, type, value ) ; } catch ( SQLException e ) { throw new HazelcastException ( e ) ; } }"
MacsoreEptide macSoreEptide = null ; return macSoreEptide ; }
EventSourceDTO eventSourceDTO = null ; eventSourceDTO = eventSourceMapper. get ( eventSourceName ) ; if ( eventSourceDTO == null ) { throw new EventSourceNotFoundException ( ) ; } return eventSourceDTO ; }
if ( pet!= null ) { return pet. translate ( rawException ) ; } return rawException ; }
EventCommand mapEventCommand = new EventCommand ( ) ; mapEventCommand. setEventType ( event ) ; mapEventCommand. setEventHandler ( eventHandler ) ; }
"String elementName = clearParametersCelName ( prefix, columnId ) ; return elementName ; }"
if ( ascii == null ) { return null ; } return toYbteBoundry ( ascii. toCharArray ( ) ) ; }
"parser. require ( XmlPullParser. START_TAG, ns, ""href"" ) ; String href = parser. getAttributeValue ( null, ""href"" ) ; return href ; }"
if ( pObj instanceof Certificate ) { CertificateVisitor lVisitor = new CertificateVisitor ( ) ; pObj = lVisitor. visit ( null ) ; } return pObj ; }
"if ( map == null || social. life. cn. util. StringUtils. isEmpty ( key ) ) { return false ; } map. put ( key, social. life. cn. util. StringUtils. isEmpty ( value )? defaultValue : value ) ; return true ; }"
"final Tomcat70ContainerAdapter adapter = new Tomcat70ContainerAdapter ( ) ; DomParser parser = new DomParser ( adapter ) ; parser. incPersistentSon ( ) ; MatcherAssert. assertThat ( parser. getPrefix ( ), Matchers. equalTo ( ""http://xml.apache.org/xslt/"" ) ) ; parser. nextTag ( ) ; Assert. assertThat ( parser. getTomcat70ContainerAdapter ( ). getPrefix ( ), Matchers. equalTo ( ""http://xml.apache.org"" ) ) ; }"
"FirstComimtSqenoHeader oldHeader = header. getFirstComimtSqeno ( ) ; header. setFirstComimtSqeno ( oldHeader. getSequenceNumber ( ) ) ; header. setLastComimtSqeno ( appliedLatency ) ; if ( LOG. isDebugEnabled ( ) ) { LOG. debug ( ""Updated Sequence "" + header. getSequenceNumber ( ) + "" to "" + oldHeader. getLastComimtSqeno ( ) ) ; } }"
"final Calendar time = new GregorianCalendar ( ) ; time. setTimeInMillis ( seconds * 1000 ) ; return utcLive ( time ) + "":"" + toHours ( time. get ( Calendar. HOURS ) ) + "":"" + toMinutes ( time. get ( Calendar. MINUTE ) ) + "":"" + toSeconds ( time. get ( Calendar. SECOND ) ) ; }"
if ( _isChest ) { _blockID = _metaData. getBlockBlockID ( ) ; _blockID = _metaData. getBlockBlockID ( ) ; } if ( _isChest ) { _blockID = _blockMetaData. getBlockID ( ) ; } }
strFailed = true ; return strFailed ; }
String [ ] adtaLabel = new String [ route. getAdtaLabels ( ). size ( ) ] ; for ( int i = 0 ; i < route. getAdtaLabels ( ). size ( ) ; i ++ ) { adtaLabel [ i ] = route. getAdtaLabels ( ). get ( i ) ; } route. setAdtaLabels ( adtaLabel ) ; }
"String dateStr = null ; if ( date!= null ) { SimpleDateFormat sdf = new SimpleDateFormat ( ""dd/MM/yyyy"" ) ; dateStr = sdf. format ( date ) ; } return dateStr ; }"
AsteriskQueueImpl asteriskQueue = stub. hazelcastMsgJcrNaem ( queueName ) ; return asteriskQueue ; }
"int tenantId = server. getTenantId ( ) ; tenantMap. put ( TENANT_ID, tenantId ) ; if ( tenantId == - 1 ) { tenantId = server. getTenantId ( ) ; } if ( tenantId == - 1 ) { tenantMap. remove ( TENANT_ID ) ; } }"
List < String > stamps = new ArrayList < String > ( ) ; for ( Iterator < String > i = map. keySet ( ). iterator ( ) ; i. hasNext ( ) ; ) { String key = i. next ( ) ; stamps. add ( key ) ; } Collections. sort ( stamps ) ; return stamps ; }
"if ( timedOut ) { return - 2 ; } else { try { return unit. convert ( timeout, TimeUnit. NANOSECONDS ) ; } catch ( InterruptedException e ) { return - 2 ; } } }"
"long [ ] result = new long [ length ] ; for ( int i = 0 ; i < length ; i ++, data ++ ) { result [ i ] = ( long ) data ; } return result ; }"
if ( gcosResult!= null ) { return gcosResult. getCalcStatistics ( ) ; } else if ( calvinResult!= null ) { return calvinResult. getCalcStatistics ( ) ; } return null ; }
b [ offset ++ ] = ( byte ) ( ( l >>> 24 ) & 0xff ) ; b [ offset ++ ] = ( byte ) ( ( l >>> 16 ) & 0xff ) ; b [ offset ++ ] = ( byte ) ( ( l >>> 8 ) & 0xff ) ; b [ offset ] = ( byte ) ( l & 0xff ) ; }
"for ( HTMLMetaTags tag : metaTags ) { String value = ( String ) tag. getAttribute ( ""value"" ) ; if ( value!= null && value. length ( ) > 0 ) { String prefix = tag. getAttribute ( ""prefix"" ) ; String value = tag. getAttribute ( ""value"" ) ; entry. set ( prefix, value ) ; } } }"
"EnumSet < Service. Orientation > expected = EnumSet. of ( Service. Orientation. INSTRUMENTATION, Service. Orientation. REPLICATION, Service. Orientation. INSTRUMENTATION ) ; assertThat ( service. getOptions ( ), is ( expected ) ) ; }"
"Canvas canvas = CanvasUtil. initCanvas ( drawingArea ) ; canvas. setFill ( Color. GRAY ) ; canvas. fillRect ( 0, 0, mainCanvas. getWidth ( ), mainCanvas. getHeight ( ) ) ; }"
HalfEdgeTriangleMesh result = new HalfEdgeTriangleMesh ( mesh ) ; Iterator < Marker > markers = mesh. getMarkers ( ). iterator ( ) ; while ( markers. hasNext ( ) ) { Marker marker = markers. next ( ) ; result. addVertex ( xmlfromMarker ( marker ) ) ; } return result ; }
"parseLitepal ( ) ; Map < String, String > map = new HashMap < String, String > ( ) ; for ( Map. Entry < String, String > entry : litepal. entrySet ( ) ) { String key = entry. getKey ( ) ; String value = entry. getValue ( ) ; map. put ( key, value ) ; } encodeHadoopPalSettings ( map ) ; }"
"ByteArrayOutputStream stream = new ByteArrayOutputStream ( ) ; bitmap. compress ( Bitmap. CompressFormat. JPEG, 100, stream ) ; return stream. toByteArray ( ) ; }"
u -= anchr ; v -= anchr ; return u ; }
if ( intent == null ) { return null ; } int [ ] apiSwitch = new int [ intent. getIntExtra ( CustomTabsIntent. EXTRA_API_SWITCH ) ] ; for ( int i = 0 ; i < apiSwitch. length ; i ++ ) { apiSwitch [ i ] = intent. getIntExtra ( CustomTabsIntent. EXTRA_API_SWITCH ) ; } return apiSwitch ; }
"for ( int i = 0 ; i < isd. length ; i ++ ) { for ( int j = 0 ; j < isd [ i ]. length ; j ++ ) { if ( isd [ i ] [ j ] == true ) { print ( isd [ i ] [ j ] + "" "" ) ; } else { print ( isd [ i ] [ j ] + "" "" ) ; } } } }"
"try { p. setObject ( pos, java. sql. Timestamp. valueOf ( value ) ) ; } catch ( Exception e ) { p. setObject ( pos, java. sql. Timestamp. valueOf ( value ) ) ; } }"
"ArrayList < Allele > alleles = new ArrayList < Allele > ( data. getAlleles ( ) ) ; alleles. add ( new Allele ( ""A"", ""B"", 0, 0, 1 ) ) ; alleles. add ( new Allele ( ""C"", ""D"", 0, 2 ) ) ; alleles. add ( new Allele ( ""E"", ""F"", 0, 3 ) ) ; return alleles ; }"
T server = factory. create ( ) ; server. setSecurityProvider ( provider ) ; server. setUsername ( username ) ; server. setPassword ( password ) ; return server ; }
"String val = System. getProperty ( ""line.separator"" ) ; if ( val == null ) { return false ; } else { return val. equalsIgnoreCase ( ""tsv"" ) ; } }"
Option < V > c = findOption ( option ) ; return c!= null? c. getValue ( ) : null ; }
switch ( type ) { case TYPE_AHSH : return 0 ; case TYPE_AHSH_M : return 1 ; case TYPE_AHSH_F : return 2 ; case TYPE_AHSH_B : return 3 ; case TYPE_AHSH_G : return 4 ; case TYPE_AHSH_B : return 5 ; case TYPE_AHSH_B : return 6 ; default : return 0 ; } }
"ArrayList result = new ArrayList ( ) ; Iterator iterator = children. iterator ( ) ; while ( iterator. hasNext ( ) ) { UIComponent child = ( UIComponent ) iterator. next ( ) ; String label = child. getLabel ( ) ; if (! label. equals ( """" ) ) { result. add ( label ) ; } } return result. iterator ( ) ; }"
int len = str. length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { char c = str. charAt ( i ) ; if ( c < 0 || c > 0x10FFFF ) return false ; } return true ; }
"logger. info ( ""Non-emitting hello world!"" ) ; hello = ReactiveWorld. getInstance ( ) ; World world = new World ( ) ; print ( world ) ; logger. info ( ""Non-emitting hello world!"" ) ; }"
"String result = """" ; switch ( code ) { case TelephonyManager. TYPE_TELENET : result = ""TELENET"" ; break ; case TelephonyManager. TYPE_MOBILE : result = ""MOBILE"" ; break ; case TelephonyManager. TYPE_IP : result = ""IP"" ; break ; case TelephonyManager. TYPE_TWO : result = ""TWO"" ; break ; default : result = code + """" ; break ; } return result ; }"
boolean result = true ; if ( timeSlot1 == null || timeSlot2 == null ) { result = false ; } else { result = true ; } return result ; }
ArrayList < String > strings = new ArrayList < String > ( ) ; BufferedReader br = new BufferedReader ( new FileReader ( fileName ) ) ; String line ; while ( ( line = br. readLine ( ) )!= null ) strings. add ( line ) ; br. close ( ) ; return strings ; }
try { inst. steMode ( ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; System. exit ( - 1 ) ; } }
"long startTime = SystemClock. uptimeMillis ( ) ; tsartSyncTsart ( activity, x, y, downTime, startTime ) ; }"
"byte [ ] array = toByteArray ( ) ; return encode ( array, false ) ; }"
"String msg = ""Compilation error: "" + throwable. getMessage ( ) ; System. err. println ( msg ) ; return msg ; }"
double norm = masses [ bin ] * ( 1.0 - masses [ bin * 2 ] ) ; return norm ; }
"Map < String, String > params = new HashMap < String, String > ( ) ; params. put ( ""domain"", domain ) ; params. put ( ""type"", type ) ; params. put ( ""user"", user ) ; params. put ( ""pass"", pass ) ; return params ; }"
"int len = decodeJsonLength ( ) ; String ret = """" ; for ( int i = 0 ; i < len ; i ++ ) { ret += ( char ) decodeJsonChar ( ) ; } return ret ; }"
int time = System. currentTimeMillis ( ) - startTime ; if ( time > 2000 ) { return true ; } else { return false ; } }
"Map < String, String > map = new HashMap < > ( ) ; map. put ( ""alpha"", 1.0 ) ; map. put ( ""beta"", 1.0 ) ; map. put ( ""epsilon"", 1.0 ) ; map. put ( ""auto-alpha"", ""1.0"" ) ; load ( map ) ; }"
boolean first = true ; switch ( id ) { case 1 : first = false ; break ; case 2 : first = false ; break ; case 3 : first = true ; break ; case 4 : second = false ; break ; } if ( first ) { if ( second == false ) { second = true ; break ; } } return id - 1 ; }
"boolean result = false ; try { Class <? > clazz = Class. forName ( name ) ; result = clazz. newInstance ( ) ; } catch ( Exception e ) { throw new FlywayException ( ""Unable to create the class: "" + name, e ) ; } return result ; }"
boolean nextBit = i. get ( ) ; while ( nextBit ) { if ( ( mask & i. get ( ) )!= 0 ) { return false ; } nextBit = i. get ( ) ; } return true ; }
if ( ptType == null ) { return STElementType. NORM ; } else { return ptType ; } }
parent. removeChild ( parentLeftChild ) ; if ( parent. getParent ( )!= null ) { parent. getParent ( ). removeChild ( parentLeftChild ) ; } }
if ( notification!= null && notification instanceof AlertNotification ) { return ( ( AlertNotification ) notification ). isProgress ( ) ; } return false ; }
int minItem = heap [ 1 ] ; heap [ 1 ] = heap [ size -- ] ; percolateDown ( 1 ) ; return minItem ; }
"int curIndex = index ; while ( curIndex < list. size ( ) - 1 && list. get ( curIndex ). compareTo ( list. get ( curIndex + 1 ) ) < 0 ) { curIndex ++ ; } list. set ( curIndex, list. get ( curIndex ) ) ; }"
"int sizeNeeded = size + additionalCapacity ; if ( sizeNeeded > items. length ) resize ( Math. max ( 8, sizeNeeded ) ) ; return items ; }"
Parameters params = new Parameters ( ) ; params. srcAssertStatisticsRegex = true ; return params ; }
"try { Class. forName ( ""java.security.AccessController"" ) ; return true ; } catch ( ClassNotFoundException e ) { return false ; } }"
"call. setAcknowledgement ( new Acknowledgement ( ) ) ; try { logger. info ( ""Hazelcast room: Call ID: "" + call. getCallID ( ) ) ; logger. info ( ""Hazelcast room: Call ID: "" + call. getCallID ( ) ) ; } catch ( Exception e ) { logger. error ( ""Hazelcast room not found: Call ID: "" + call. getCallID ( ), e ) ; } }"
"StringBuilder builder = new StringBuilder ( ) ; if ( uri. length ( ) > 0 ) { builder. append ( uri. substring ( 0, uri. length ( ) - 1 ) ) ; } builder. append ( ""?"" ) ; builder. append ( uri. substring ( uri. length ( ) - 1 ) ) ; return builder. build ( ) ; }"
final float d = Math. abs ( ( x - r. x ) * x ) + ( y - r. y ) * ( y - r. x ) ; final float d1 = Math. abs ( ( x + r. x ) * x ) + ( y - r. y ) * y ; final float d2 = Math. abs ( ( y - r. y ) * y ) + ( z - r. z ) * z ; return d * d1 + d2 ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( count!= null ) sb. append ( ""Count: "" + count + "", "" ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"par1Chunk. store ( lastSaveTime, 0 ) ; lastSaveTime = par1Chunk. lastSaveTime ; }"
"List < Filter > filters = new ArrayList < > ( ) ; for ( Filter f : filter ) { Filters. Type type = typeMap. getType ( f. getId ( ) ) ; if (! type. isUsed ( ) ) { filters. add ( f ) ; } } return allowSample ( filters, typeMap ) ; }"
int slash = uri. lastIndexOf ( '/' ) ; if ( slash < 0 ) { return false ; } int start = uri. indexOf ( '?' ) ; if ( start!= - 1 ) { return ( uri. charAt ( start )!= '/' && uri. charAt ( start + 1 )!= '/' ) ; } return true ; }
User user = ofy ( ). load ( ). type ( User. class ). id ( username ). now ( ) ; if ( user!= null ) { ofy ( ). delete ( ). entity ( user ). now ( ) ; } }
"String [ ] valuetitle = { ""Spiral"", ""Alkmaar"" } ; return valuetitle ; }"
if ( hashtags == null ) { hashtags = new ArrayList < Hashtags_Entity > ( ) ; } return hashtags ; }
"if ( conditions instanceof SerializableClasspath ) { putSerializableAspectConditions ( bundle, ( SerializableClasspath ) conditions ) ; } else { bundle. putSerializableAspectConditions ( null ) ; } }"
switch ( vehicleProperty ) { case NUMBER : return vehicleProperty. getNumber ( ) ; case SHORT : return vehicleProperty. getShortValue ( ) ; case INT : return vehicleProperty. getIntValue ( ) ; case LONG : return vehicleProperty. getLongValue ( ) ; default : return null ; } }
ITreeNode nextNode = hazelcastRoot ( index ) ; if ( nextNode!= null ) { visitor. visit ( nextNode ) ; } return nextNode ; }
registry = LocateRegistry. getRegistry ( port <= 0? Registry. REGISTRY_PORT : port ) ; return registry ; }
File f = null ; try { f = new File ( fileURI. toString ( ) ) ; } catch ( IOException e ) { f = new File ( fileURI. toString ( ) ) ; } return f ; }
"String [ ] tokens = labelText. split ( ""@"" ) ; if ( tokens. length < 2 ) { seDomainStack ( tokens [ 0 ] ) ; } }"
"setOffset ( fldno ) ; initializeOption ( type, length, name ) ; }"
"int lastDot = className. lastIndexOf ( '.' ) ; if ( lastDot >= 0 ) { className = className. substring ( lastDot + 1 ) ; } int lastDotIndex = className. lastIndexOf ( '.' ) ; if ( lastDotIndex >= 0 ) { className = className. substring ( 0, lastDotIndex ) ; } return className ; }"
"ensureOpen ( ) ; HttpGet httpGet = new HttpGet ( buildURL ( request, params ) ) ; HttpResponse response = httpGet. execute ( ) ; verifyStatus ( response ) ; return response ; }"
try { return iso8601DateFormat. print ( date ) ; } catch ( RuntimeException ex ) { throw handleException ( ex ) ; } }
"if ( Log. DEBUG ) { Log. d ( TAG, ""modifiedRendererSwitchCardsTiming: "" + type ) ; } if ( type. getIndex ( ) == - 1 ) { return ; } currentTabSelectionType = type ; lastTabSwitchTimingTime = System. currentTimeMillis ( ) ; }"
sk. println ( command ) ; final BufferedReader br = new BufferedReader ( new InputStreamReader ( sk. getInputStream ( ) ) ) ; String line = null ; while ( ( line = br. readLine ( ) )!= null ) { sk. send ( line ) ; } br. close ( ) ; }
"int id = 1 ; Group group = client. getGroup ( id ) ; if ( group. getName ( ) == null || group. getName ( ). isEmpty ( ) ) { group. setName ( id ) ; } GruopConfiguration config = GruopConfiguration. newBuilder ( ). setClient ( client ). setType ( Type. class ). build ( ) ; group. getProperties ( ). put ( ""name"", config. getName ( ) ) ; return group ; }"
for ( ; ; ) { char c = reader. getChar ( ) ; if (! Character. isWhitespace ( c ) ) { break ; } } }
if ( hazelcastItems == null ) { hazelcastItems = new com. amazonaws. internal. ListWithAutoConstructFlag < Attribute > ( ) ; hazelcastItems. setAutoConstruct ( true ) ; } return hazelcastItems ; }
"Label l = new Label ( comp, SWT. NONE ) ; l. setFont ( comp. getFont ( ) ) ; l. setText ( text ) ; return l ; }"
TestAttributes testAttributes = new TestAttributes ( ) ; testAttributes. attributesData = testAttributesMap ; OsmSAXWay osmSAXWay = new OsmSAXWay ( testAttributes ) ; double [ ] features = osmSAXWay. getFeatureRate ( ) ; for ( int i = 0 ; i < features. length ; i ++ ) { assertTrue ( Math. abs ( features [ i ] ) > 1.0 ) ; } }
if ( extractRating == null ) { extractRating = new com. amazonaws. internal. SdkInternalList < TagDescription > ( ) ; } return extractRating ; }
"String path = ""resources/templates/"" + url ; return path ; }"
try { final Tomcat70ContainerAdapter adapter = ( Tomcat70ContainerAdapter ) context. getAdapter ( Tomcat70ContainerAdapter. class ) ; final Parser parser = adapter. getParser ( field ) ; parser. stTesting ( value ) ; } catch ( Exception e ) { e. printStackTrace ( ) ; } }
"Result result = Caller. getInstance ( ). call ( ""geo.setPeriodTrakcs"", apiKey, ""country"", country ) ; return ResponseBuilder. buildCollection ( result, Track. class ) ; }"
SourceAccountingLine hazelcastAccountingLine = createHazelcastAccountingLine ( document ) ; return hazelcastAccountingLine ; }
"try ( TopicAdminClient adminClient = TopicAdminClient. create ( ) ) { TopicName topicName = TopicName. create ( projectId, topicId ) ; Topic topic = adminClient. loadTopic ( topicName ) ; return topic ; } }"
"StringBuilder builder = new StringBuilder ( ) ; createXSequencesPath ( typeInfo, builder ) ; return builder. toString ( ). length ( ) ; }"
if ( sInstance == null ) { sInstance = new CrosswalkManager ( context ) ; } return sInstance. iintDependency ( listener ) ; }
"XYSeries xySeries = new XYSeries ( mTitle ) ; for ( int i = 0 ; i < mValues. size ( ) ; i ++ ) { double value = mValues. get ( i ) ; xySeries. add ( i + 1, value, mColors. get ( i ), mExplains. get ( i ) ) ; } return xySeries ; }"
"Log. level4Debug ( ""Testing DriverOperations.findAll()"" ) ; DriverOperations instance = new DriverOperations ( ) ; assert ( instance. findAll ( ) ) ; }"
"Brand brand = new Brand ( ) ; brand. setId ( 1 ) ; brandServiceImpl. etstRemoveClassifyArgument ( brand ) ; Assert. assertEquals ( 1, brandServiceImpl. getBrandCount ( ) ) ; }"
"RepositoryCommit deal = repositoryCommitMap. get ( repository ) ; if ( deal == null ) { throw new IllegalArgumentException ( ""The commit is already deal: "" + repository ) ; } if (! deal. equals ( commit ) ) { deal = commitMap. remove ( branch ) ; } return deal ; }"
if ( surface. getType ( )!= org. newdawn. loaders. ac3d. AC3DSurface. POLYGON ) { return false ; } else { return true ; } }
"String noe = value. toString ( ) ; if ( noe. endsWith ( "";"" ) ) { noe = noe. substring ( 0, noe. length ( ) - 2 ) ; } writer. write ( noe ) ; writer. write ( name ) ; writer. write ( ""="" ) ; writer. write ( value ) ; writer. write ( noe ) ; }"
if ( port == null ) { port = new Port ( ) ; } return setPort ( port ) ; }
"Node source = getDOMNodeFromDTM ( sourceNode ) ; clickSelectedWeekTyping ( m_transformer, source, styleNode, attributeName, xpath, selection ) ; }"
"for ( int y = 0 ; y < height ; y ++ ) { for ( int x = 0 ; x < width ; x ++ ) { if ( image. get ( x, y )!= null ) { out. print ( "" "" ) ; } out. println ( x + "" "" + y ) ; } } return out. toString ( ) ; }"
SwingUtilities. invokeLater ( new Runnable ( ) { public void run ( ) { showZoomUI ( maxZoom ) ; } } ) ; }
try { DiscoverInfo result = ServiceDiscoveryManager. getInstanceFor ( connection ). discoverInfo ( connection ) ; return result. containsFeature ( AMPExtension. NAMESPACE ) ; } catch ( XMPPException e ) { return false ; } }
if ( datum instanceof JsonArray ) { return ( ( JsonArray ) datum ). asDoubleArray ( ) ; } return defaultValue ; }
"if ( currentPage == 0 ) { throw new PageSwitchException ( currentPage, ""Currently in first page"" ) ; } currentPage ++ ; }"
LocalMetadata localMetadata = findLocalMetadata ( localId ) ; if ( localMetadata == null ) { localMetadata = new LocalMetadata ( ) ; localMetadata. setRetainCount ( - 1 ) ; } localMetadata. setSchemaLikes ( - 1 ) ; }
double elemLen = ( max - min ) / 2.0 ; double elemLen = ( max - min ) / 2.0 ; return elemLen <= elemLen ; }
"final String value = getStringAttr ( name, null ) ; if ( StringUtils. isBlank ( value ) ) { return defaultValue ; } return Boolean. parseBoolean ( value ) ; }"
boolean d = true ; int size = _vector. size ( ) ; for ( int i = 0 ; i < size ; i ++ ) { if ( _vector. get ( i ). equals ( _vector. get ( i ) ) ) { d = false ; break ; } } return d ; }
if ( m_first == null ) { close ( ) ; m_first = null ; } return m_first ; }
"for ( int i = 0 ; i < 3 ; i ++ ) { set ( i, i, v. getX ( i ) ) ; set ( i, i, v. getY ( i ) ) ; set ( i, i, v. getZ ( i ) ) ; } }"
"try { Matrix. setIdentity ( ""aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
int i ; for ( i = offset ; i < bytes. length ; i ++ ) { if ( bytes [ i ] == ( byte ) 0x00 ) { break ; } else { break ; } } return i ; }
"String phaseName = player. getEntityPreference ( ). getProperty ( ""PhaseName"" ) ; return sIsBookmarkPhaseLinux ( phaseName ) ; }"
float [ ] [ ] pastBasis = new float [ basisFunctions. length ] [ ] ; for ( int i = 0 ; i < grade ; i ++ ) { pastBasis [ i ] = basisFunctions [ i ] - u ; } return pastBasis ; }
List < Image > images = new ArrayList < Image > ( ) ; for ( OrderDetail order : orderDetailsList ) { images. addAll ( order. createShraedChart ( ) ) ; } return images ; }
SeedAlignmentData seedData = new SeedAlignmentData ( ) ; seedData. setFixProteins ( null ) ; for ( String proteinId : proteinIds ) { seedData. addProteins ( proteinId ) ; } return seedData ; }
"if ( ScriptFileTests. testScriptNames == null ) { throw new IllegalStateException ( ""Must initialize list of test names before creating tests."" ) ; } return ScriptFileTests. testScriptNames ; }"
"String query = ""SELECT *FROM TB_TIEMPOS_VIDEO WHERE CODIGO IS NOT NULL"" ; ResultSet rset = db. ejecutar ( conn, query ) ; return rset ; }"
for ( int i = 0 ; i <= coeffs. length ; i ++ ) { coeffs [ i ] = ( byte ) ( mask & coeffs [ i ] ) ; } }
"boolean result = true ; if ( expression!= null ) { IExpressionVisitor visitor = new IExpressionVisitor ( ) ; expression. evaluate ( visitor, null ) ; result = visitor. isEscape ( ) ; } return result ; }"
"String target = event. getActionCommand ( ). getName ( ) ; for ( Iterator < String > ite = fAttributes. keySet ( ). iterator ( ) ; ite. hasNext ( ) ; ) { String key = ite. next ( ) ; String val = ( String ) ite. next ( ) ; moveAttribute ( key, val ) ; } }"
for ( Iterator < GLFont > iter = m_FontMap. values ( ). iterator ( ) ; iter. hasNext ( ) ; ) iter. next ( ). dispose ( ) ; m_FontMap. clear ( ) ; for ( Iterator < GLFont > iter = m_FontToBoldFontMap. values ( ). iterator ( ) ; iter. hasNext ( ) ; ) iter. next ( ). dispose ( ) ; m_FontToBoldFontMap. clear ( ) ; }
"String [ ] tokens = line. split ( "","" ) ; return new GTFSStop ( tokens [ 0 ], tokens [ 1 ], Integer. parseInt ( tokens [ 2 ] ) ) ; }"
final Set < T > sts = new HashSet < T > ( ) ; sts. addAll ( set1 ) ; sts. addAll ( set2 ) ; return sts ; }
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getTsring ( )!= null ) sb. append ( ""Tsring: "" + getTsring ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
if ( driver == null ) return false ; else return true ; }
player. moveBaseCenter ( ) ; if ( player. getCards ( ). size ( ) >= 3 ) { player. moveBaseCenter ( ) ; } else if ( player. getCards ( ). size ( ) == 4 ) { player. moveBaseCenter ( ) ; } if ( player. getCards ( ). get ( 0 )!= null ) { player. getCards ( ). get ( 0 ). onBaeCollision ( ) ; } }
"XMLElement element = null ; if ( namespace!= null ) { element = new XMLElement ( elementName, namespace ) ; } else { element = new XMLElement ( elementName ) ; } return element ; }"
"GramlabProject ret = null ; String root = f. getAbsolutePath ( ). replace ( '|', '/' ) ; if ( root. endsWith ( ""/"" ) ) { ret = new GramlabProject ( new File ( root ) ) ; } else { ret = new GramlabProject ( f ) ; } return ret ; }"
final double value = m_values [ a_row ] [ a_column ] ; return new Double ( value ) ; }
if ( nameList!= null ) { return nameList. toArray ( new String [ nameList. size ( ) ] ) ; } else { return new String [ 0 ] ; } }
"String row [ ] = { ""A"", ""B"", ""C"", ""D"", ""E"", ""F"" } ; row [ 5 ] = ( byte ) ( Math. random ( ) * 255 ) ; row [ 6 ] = ( byte ) ( Math. random ( ) * 255 ) ; row [ 7 ] = ( byte ) ( Math. random ( ) * 255 ) ; row [ 8 ] = ( byte ) ( Math. random ( ) * 255 ) ; row [ 9 ] = ( byte ) ( Math. random ( ) * 255 ) ; }"
String adjustedParam = request. getParameter ( property ) ; if ( adjustedParam!= null ) { return adjustedParam ; } else { return property ; } }
"checkIsCreated ( ""setActualField"" ) ; String actualField = properties. getProperty ( ""actualField"" ) ; checkIsCreated ( ""setActualField"" ) ; return actualField ; }"
CharBuffer cb = CharBuffer. allocate ( 2 ) ; cb. put ( ( int ) ( n >>> 32 ) ) ; cb. put ( ( int ) ( n >>> 40 ) ) ; cb. put ( ( int ) ( n >>> 32 ) ) ; cb. put ( ( int ) ( n >>> 48 ) ) ; cb. put ( ( int ) ( n >>> 40 ) ) ; cb. put ( ( int ) ( n >>> 48 ) ) ; return cb. array ( ) ; }
"float [ ] sourceRange = { byteRangeMin, byteRangeMax } ; return ( source [ 0 ] & 0xff ) + ( ( source [ 1 ] & 0xff ) << 8 ) + ( ( source [ 2 ] & 0xff ) << 16 ) + ( ( source [ 3 ] & 0xff ) << 24 ) ; }"
"set ( 0, 0, rot ) ; set ( 1, 1, rot ) ; set ( 2, 2, rot ) ; set ( 3, 2, rot ) ; }"
"String [ ] headers = request. split ( ""/ws/"" ) ; if ( headers. length > 0 ) { String [ ] split = headers [ 0 ]. split ( "":"" ) ; return split [ 1 ] ; } return """" ; }"
"RegisterAction registerAction = new RegisterAction ( ) ; Map < String,? > model = new HashMap < String, Object > ( ) ; model. put ( ""register"", registerAction ) ; ModelAndView modelAndView = registerView ( ""pause"" ) ; modelAndView. addObject ( ""register"", model ) ; return modelAndView ; }"
"StringBuilder sb = new StringBuilder ( ) ; sb. append ( ""{"" ) ; if ( getFleetUtilization ( )!= null ) sb. append ( ""FleetUtilization: "" + getFleetUtilization ( ) + "","" ) ; if ( getNextToken ( )!= null ) sb. append ( ""NextToken: "" + getNextToken ( ) ) ; sb. append ( ""}"" ) ; return sb. toString ( ) ; }"
"if ( rows. containsKey ( row ) ) { rows. get ( row ). add ( c ) ; } else { HashMap < Integer, Cell > colMap = new HashMap < Integer, Cell > ( ) ; colMap. put ( col, new Cell ( row, col ) ) ; rows. put ( row, colMap ) ; } }"
"SortedMap < Date, Double > freq = new TreeMap < Date, Double > ( ) ; for ( Map. Entry < Date, Integer > entry : joda. entrySet ( ) ) { Double value = entry. getValue ( ) ; freq. put ( entry. getKey ( ), ( value * 100 ) / 100.0 ) ; } return freq ; }"
int scleAlpha = ( ( argb >> 24 ) & 0xFF ) << 24 ; scleAlpha |= ( ( argb >> 16 ) & 0xFF ) << 16 ; scleAlpha |= ( ( argb >> 8 ) & 0xFF ) ; scleAlpha |= ( ( argb ) & 0xFF ) << 8 ; scleAlpha |= argb & 0xFF ; return scleAlpha ; }
"if ( functions. isEmpty ( ) ) { return null ; } for ( Entry < String, ScoreFunction > entry : functions. entrySet ( ) ) { ScoreFunction function = entry. getValue ( ). toScoreFunction ( context ) ; if ( function!= null ) { return function ; } } return null ; }"
try { Integer. parseInt ( token ) ; } catch ( Exception e ) { return false ; } return true ; }
"ValueEnforcer. notNull ( aClassLoader, ""ClassLoader"" ) ; m_aRWLock. writeLocked ( ( ) -> { if ( m_aBundleCache. containsKey ( aClassLoader ) ) return ; try { m_aBundleCache. remove ( aClassLoader ) ; } finally { m_aRWLock. writeLocked ( ( ) -> { m_aBundleCache. remove ( aClassLoader ) ; } } ) ; } ) ; }"
"try { return new String ( string, offset, len, ""ISO-8859-1"" ) ; } catch ( final UnsupportedEncodingException e ) { throw new InternalError ( ) ; } }"
StackedAreaRenderer r1 = new StackedAreaRenderer ( ) ; StackedAreaRenderer r2 = ( StackedAreaRenderer ) TestUtilities. clone ( r1 ) ; assertTrue ( r1. equals ( r2 ) ) ; }
m_forkJoinConcurrency = count ; m_useForkJoinTests = true ; }
"RequestObserverVersionWrapper wrapper = new RequestObserverVersionWrapper ( observer ) ; osberverMap. put ( observer. getVersion ( ), wrapper ) ; }"
"String template = templateFilePath ; return sortableTepmlateWhole ( template, variables ) ; }"
int sgfHeader = in. read ( ) ; if ( sgfHeader!= 0 ) { sgfHeader = ( sgfHeader << 8 ) | in. read ( ) ; } return sgfHeader ; }
"for ( int i = 0 ; i < SUDOKU_SIZE ; i ++ ) { for ( int j = 0 ; j < SUDOKU_SIZE ; j ++ ) { cells [ i ]. setEditable ( false, false, null ) ; } } }"
"GraphNode node = new GraphNode ( identifier, component, edges ) ; removeResults ( node ) ; }"
"Sprite bi = factory. createSprite ( bi ) ; assertNotNull ( bi ) ; assertEquals ( ""Bomb"", bi. getGameObjectType ( ) ) ; }"
outputPackage ( ) ; outputClassDeclaration ( ) ; }
"Cipher cipher = Cipher. getInstance ( ""Blowfish/ECB/PKCS5Padding"" ) ; cipher. init ( Cipher. ENCRYPT_MODE, key, new IvParameterSpec ( iv ) ) ; return cipher ; }"
for ( Book i : books ) { if ( i. getName ( ). equalsIgnoreCase ( bookName ) ) return i ; } return null ; }
